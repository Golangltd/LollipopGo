// Code generated by protoc-gen-go.
// source: google_libphonenumber/resources/phonenumber.proto
// DO NOT EDIT!

package libphonenumber

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The source from which the country_code is derived. This is not set in the general parsing method,
// but in the method that parses and keeps raw_input. New fields could be added upon request.
type PhoneNumber_CountryCodeSource int32

const (
	// The country_code is derived based on a phone number with a leading "+", e.g. the French
	// number "+33 1 42 68 53 00".
	PhoneNumber_FROM_NUMBER_WITH_PLUS_SIGN PhoneNumber_CountryCodeSource = 1
	// The country_code is derived based on a phone number with a leading IDD, e.g. the French
	// number "011 33 1 42 68 53 00", as it is dialled from US.
	PhoneNumber_FROM_NUMBER_WITH_IDD PhoneNumber_CountryCodeSource = 5
	// The country_code is derived based on a phone number without a leading "+", e.g. the French
	// number "33 1 42 68 53 00" when defaultCountry is supplied as France.
	PhoneNumber_FROM_NUMBER_WITHOUT_PLUS_SIGN PhoneNumber_CountryCodeSource = 10
	// The country_code is derived NOT based on the phone number itself, but from the defaultCountry
	// parameter provided in the parsing function by the clients. This happens mostly for numbers
	// written in the national format (without country code). For example, this would be set when
	// parsing the French number "01 42 68 53 00", when defaultCountry is supplied as France.
	PhoneNumber_FROM_DEFAULT_COUNTRY PhoneNumber_CountryCodeSource = 20
)

var PhoneNumber_CountryCodeSource_name = map[int32]string{
	1:  "FROM_NUMBER_WITH_PLUS_SIGN",
	5:  "FROM_NUMBER_WITH_IDD",
	10: "FROM_NUMBER_WITHOUT_PLUS_SIGN",
	20: "FROM_DEFAULT_COUNTRY",
}
var PhoneNumber_CountryCodeSource_value = map[string]int32{
	"FROM_NUMBER_WITH_PLUS_SIGN":    1,
	"FROM_NUMBER_WITH_IDD":          5,
	"FROM_NUMBER_WITHOUT_PLUS_SIGN": 10,
	"FROM_DEFAULT_COUNTRY":          20,
}

func (x PhoneNumber_CountryCodeSource) Enum() *PhoneNumber_CountryCodeSource {
	p := new(PhoneNumber_CountryCodeSource)
	*p = x
	return p
}
func (x PhoneNumber_CountryCodeSource) String() string {
	return proto.EnumName(PhoneNumber_CountryCodeSource_name, int32(x))
}
func (x *PhoneNumber_CountryCodeSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PhoneNumber_CountryCodeSource_value, data, "PhoneNumber_CountryCodeSource")
	if err != nil {
		return err
	}
	*x = PhoneNumber_CountryCodeSource(value)
	return nil
}
func (PhoneNumber_CountryCodeSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{0, 0}
}

type PhoneNumber struct {
	// The country calling code for this number, as defined by the International Telecommunication Union
	// (ITU). For example, this would be 1 for NANPA countries, and 33 for France.
	CountryCode *int32 `protobuf:"varint,1,req,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// National (significant) Number is defined in International Telecommunication Union (ITU)
	// Recommendation E.164. It is a language/country-neutral representation of a phone number at a
	// country level. For countries which have the concept of an "area code" or "national destination
	// code", this is included in the National (significant) Number. Although the ITU says the maximum
	// length should be 15, we have found longer numbers in some countries e.g. Germany.
	// Note that the National (significant) Number does not contain the National(trunk) prefix.
	// Obviously, as a uint64, it will never contain any formatting (hyphens, spaces, parentheses), nor
	// any alphanumeric spellings.
	NationalNumber *uint64 `protobuf:"varint,2,req,name=national_number,json=nationalNumber" json:"national_number,omitempty"`
	// Extension is not standardized in ITU recommendations, except for being defined as a series of
	// numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for the
	// possible use of a leading zero in the extension (organizations have complete freedom to do so,
	// as there is no standard defined). However, only ASCII digits should be stored here.
	Extension *string `protobuf:"bytes,3,opt,name=extension" json:"extension,omitempty"`
	// In some countries, the national (significant) number starts with one or more "0"s without this
	// being a national prefix or trunk code of some kind. For example, the leading zero in the national
	// (significant) number of an Italian phone number indicates the number is a fixed-line number.
	// There have been plans to migrate fixed-line numbers to start with the digit two since December
	// 2000, but it has not happened yet. See http://en.wikipedia.org/wiki/%2B39 for more details.
	//
	// These fields can be safely ignored (there is no need to set them) for most countries. Some
	// limited number of countries behave like Italy - for these cases, if the leading zero(s) of a
	// number would be retained even when dialling internationally, set this flag to true, and also
	// set the number of leading zeros.
	//
	// Clients who use the parsing functionality of the i18n phone number libraries
	// will have these fields set if necessary automatically.
	ItalianLeadingZero   *bool  `protobuf:"varint,4,opt,name=italian_leading_zero,json=italianLeadingZero" json:"italian_leading_zero,omitempty"`
	NumberOfLeadingZeros *int32 `protobuf:"varint,8,opt,name=number_of_leading_zeros,json=numberOfLeadingZeros,def=1" json:"number_of_leading_zeros,omitempty"`
	// This field is used to store the raw input string containing phone numbers before it was
	// canonicalized by the library. For example, it could be used to store alphanumerical numbers
	// such as "1-800-GOOG-411".
	RawInput *string `protobuf:"bytes,5,opt,name=raw_input,json=rawInput" json:"raw_input,omitempty"`
	// The source from which the country_code is derived.
	CountryCodeSource *PhoneNumber_CountryCodeSource `protobuf:"varint,6,opt,name=country_code_source,json=countryCodeSource,enum=i18n.phonenumbers.PhoneNumber_CountryCodeSource" json:"country_code_source,omitempty"`
	// The carrier selection code that is preferred when calling this phone number domestically. This
	// also includes codes that need to be dialed in some countries when calling from landlines to
	// mobiles or vice versa. For example, in Columbia, a "3" needs to be dialed before the phone number
	// itself when calling from a mobile phone to a domestic landline phone and vice versa.
	//
	// Note this is the "preferred" code, which means other codes may work as well.
	PreferredDomesticCarrierCode *string `protobuf:"bytes,7,opt,name=preferred_domestic_carrier_code,json=preferredDomesticCarrierCode" json:"preferred_domestic_carrier_code,omitempty"`
	XXX_unrecognized             []byte  `json:"-"`
}

func (m *PhoneNumber) Reset()                    { *m = PhoneNumber{} }
func (m *PhoneNumber) String() string            { return proto.CompactTextString(m) }
func (*PhoneNumber) ProtoMessage()               {}
func (*PhoneNumber) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

const Default_PhoneNumber_NumberOfLeadingZeros int32 = 1

func (m *PhoneNumber) GetCountryCode() int32 {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return 0
}

func (m *PhoneNumber) GetNationalNumber() uint64 {
	if m != nil && m.NationalNumber != nil {
		return *m.NationalNumber
	}
	return 0
}

func (m *PhoneNumber) GetExtension() string {
	if m != nil && m.Extension != nil {
		return *m.Extension
	}
	return ""
}

func (m *PhoneNumber) GetItalianLeadingZero() bool {
	if m != nil && m.ItalianLeadingZero != nil {
		return *m.ItalianLeadingZero
	}
	return false
}

func (m *PhoneNumber) GetNumberOfLeadingZeros() int32 {
	if m != nil && m.NumberOfLeadingZeros != nil {
		return *m.NumberOfLeadingZeros
	}
	return Default_PhoneNumber_NumberOfLeadingZeros
}

func (m *PhoneNumber) GetRawInput() string {
	if m != nil && m.RawInput != nil {
		return *m.RawInput
	}
	return ""
}

func (m *PhoneNumber) GetCountryCodeSource() PhoneNumber_CountryCodeSource {
	if m != nil && m.CountryCodeSource != nil {
		return *m.CountryCodeSource
	}
	return PhoneNumber_FROM_NUMBER_WITH_PLUS_SIGN
}

func (m *PhoneNumber) GetPreferredDomesticCarrierCode() string {
	if m != nil && m.PreferredDomesticCarrierCode != nil {
		return *m.PreferredDomesticCarrierCode
	}
	return ""
}

func init() {
	proto.RegisterType((*PhoneNumber)(nil), "i18n.phonenumbers.PhoneNumber")
	proto.RegisterEnum("i18n.phonenumbers.PhoneNumber_CountryCodeSource", PhoneNumber_CountryCodeSource_name, PhoneNumber_CountryCodeSource_value)
}

func init() { proto.RegisterFile("google_libphonenumber/resources/phonenumber.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x92, 0xdf, 0x8e, 0x93, 0x40,
	0x18, 0xc5, 0xc3, 0x6e, 0xd1, 0x76, 0xd6, 0xac, 0xed, 0x48, 0xe2, 0x44, 0xab, 0xd6, 0xbd, 0x71,
	0xaf, 0xd8, 0xad, 0x57, 0x1b, 0xef, 0x5c, 0x68, 0x2d, 0x49, 0x0b, 0xcd, 0x14, 0x62, 0xf4, 0x66,
	0xa4, 0x30, 0xad, 0x93, 0xd0, 0x19, 0x32, 0x40, 0xfc, 0xf3, 0x08, 0x3e, 0x90, 0xcf, 0xe7, 0x14,
	0xb0, 0x65, 0xcb, 0x25, 0xbf, 0x73, 0xce, 0x37, 0xf3, 0x1d, 0x06, 0x8c, 0xb7, 0x42, 0x6c, 0x13,
	0x4a, 0x12, 0xb6, 0x4e, 0xbf, 0x0b, 0x4e, 0x79, 0xb1, 0x5b, 0x53, 0x79, 0x23, 0x69, 0x26, 0x0a,
	0x19, 0xd1, 0xec, 0xa6, 0x41, 0xcd, 0x54, 0x8a, 0x5c, 0xc0, 0x01, 0x1b, 0xdf, 0x71, 0xb3, 0xc1,
	0xb3, 0xab, 0xbf, 0x1d, 0x70, 0xb1, 0xdc, 0x03, 0xb7, 0x04, 0xf0, 0x2d, 0x78, 0x12, 0x89, 0x82,
	0xe7, 0xf2, 0x17, 0x89, 0x44, 0x4c, 0x91, 0x36, 0x3a, 0xbb, 0xd6, 0xf1, 0x45, 0xcd, 0x2c, 0x85,
	0xe0, 0x3b, 0xf0, 0x94, 0x87, 0x39, 0x13, 0x3c, 0x4c, 0x48, 0x35, 0x06, 0x9d, 0x29, 0x57, 0x07,
	0x5f, 0xfe, 0xc7, 0xf5, 0xac, 0x21, 0xe8, 0xd1, 0x9f, 0x39, 0xe5, 0x99, 0x82, 0xe8, 0x7c, 0xa4,
	0x5d, 0xf7, 0xf0, 0x11, 0xc0, 0x5b, 0x60, 0xb0, 0x3c, 0x4c, 0x58, 0xc8, 0x49, 0x42, 0xc3, 0x98,
	0xf1, 0x2d, 0xf9, 0x4d, 0xa5, 0x40, 0x1d, 0x65, 0xec, 0x62, 0x58, 0x6b, 0xf3, 0x4a, 0xfa, 0xaa,
	0x14, 0x78, 0x07, 0x9e, 0x57, 0xe7, 0x11, 0xb1, 0x79, 0x90, 0xc9, 0x50, 0x57, 0x85, 0xf4, 0x0f,
	0xda, 0x18, 0x1b, 0x95, 0xc3, 0xdb, 0x34, 0x82, 0x19, 0x7c, 0x09, 0x7a, 0x32, 0xfc, 0x41, 0x18,
	0x4f, 0x8b, 0x1c, 0xe9, 0xe5, 0x4d, 0xba, 0x0a, 0x38, 0xfb, 0x6f, 0xf8, 0x0d, 0x3c, 0x6b, 0xae,
	0x4c, 0xaa, 0xfe, 0xd0, 0x23, 0x65, 0xbb, 0x7c, 0x7f, 0x6b, 0xb6, 0x3a, 0x33, 0x1b, 0x7d, 0x99,
	0xd6, 0xb1, 0x98, 0x55, 0x99, 0xc3, 0x83, 0xe8, 0x14, 0xc1, 0x09, 0x78, 0x93, 0x4a, 0xba, 0xa1,
	0x52, 0xd2, 0x98, 0xc4, 0x62, 0x47, 0xb3, 0x9c, 0x45, 0x24, 0x0a, 0xa5, 0x64, 0x6a, 0x99, 0xb2,
	0xe7, 0xc7, 0xe5, 0xa5, 0x86, 0x07, 0x9b, 0x5d, 0xbb, 0xac, 0xca, 0xb4, 0x1f, 0x76, 0xf5, 0x47,
	0x03, 0x83, 0xd6, 0x79, 0xf0, 0x35, 0x78, 0x31, 0xc5, 0xde, 0x82, 0xb8, 0xc1, 0xe2, 0x7e, 0x82,
	0xc9, 0x67, 0xc7, 0x9f, 0x91, 0xe5, 0x3c, 0x58, 0x91, 0x95, 0xf3, 0xc9, 0xed, 0x6b, 0x10, 0x01,
	0xa3, 0xa5, 0x3b, 0xb6, 0xdd, 0xd7, 0xd5, 0xbf, 0x7e, 0x75, 0xaa, 0x78, 0x81, 0xdf, 0x08, 0x83,
	0x43, 0xd8, 0x9e, 0x4c, 0x3f, 0x06, 0x73, 0x9f, 0x58, 0x5e, 0xe0, 0xfa, 0xf8, 0x4b, 0xdf, 0xb8,
	0x1f, 0x81, 0x61, 0x24, 0x76, 0x66, 0xf5, 0x08, 0xdb, 0x25, 0xcd, 0xce, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xe3, 0xd7, 0x3b, 0xb3, 0xa1, 0x02, 0x00, 0x00,
}
