// Code generated by protoc-gen-go. DO NOT EDIT.
// source: idgen.proto

/*
Package seqsvr is a generated protocol buffer package.

It is generated from these files:
	idgen.proto
	seqsvr.proto

It has these top-level messages:
	String
	Int32
	Int64
	Void
	IpPort
	Range
	AllocSvrEntry
	SetEntry
	Router
	UpdateRouteTableReq
	UpdateRouteTableRsp
	GetRouteTableReq
	GetRouteTableRsp
	FetchNextSequenceReq
	GetCurrentSequenceReq
	SequenceRsp
	FetchNextSequenceListReq
	GetCurrentSequenceListReq
	IdSeq
	SequenceListRsp
	LoadMaxSeqsDataReq
	LoadMaxSeqsDataRsp
	SaveMaxSeqReq
	SaveMaxSeqRsp
*/
package seqsvr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// //////////////////////////////////////////////////////////////////////////////////////
type String struct {
	V string `protobuf:"bytes,1,opt,name=v" json:"v,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *String) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

type Int32 struct {
	V int32 `protobuf:"varint,1,opt,name=v" json:"v,omitempty"`
}

func (m *Int32) Reset()                    { *m = Int32{} }
func (m *Int32) String() string            { return proto.CompactTextString(m) }
func (*Int32) ProtoMessage()               {}
func (*Int32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Int32) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

type Int64 struct {
	V int64 `protobuf:"varint,1,opt,name=v" json:"v,omitempty"`
}

func (m *Int64) Reset()                    { *m = Int64{} }
func (m *Int64) String() string            { return proto.CompactTextString(m) }
func (*Int64) ProtoMessage()               {}
func (*Int64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Int64) GetV() int64 {
	if m != nil {
		return m.V
	}
	return 0
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*String)(nil), "seqsvr.String")
	proto.RegisterType((*Int32)(nil), "seqsvr.Int32")
	proto.RegisterType((*Int64)(nil), "seqsvr.Int64")
	proto.RegisterType((*Void)(nil), "seqsvr.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCIDGen service

type RPCIDGenClient interface {
	GetUUID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Int64, error)
	GetCurrentSeqID(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	GetNextSeqID(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
}

type rPCIDGenClient struct {
	cc *grpc.ClientConn
}

func NewRPCIDGenClient(cc *grpc.ClientConn) RPCIDGenClient {
	return &rPCIDGenClient{cc}
}

func (c *rPCIDGenClient) GetUUID(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/seqsvr.RPCIDGen/GetUUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIDGenClient) GetCurrentSeqID(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/seqsvr.RPCIDGen/GetCurrentSeqID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCIDGenClient) GetNextSeqID(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/seqsvr.RPCIDGen/GetNextSeqID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCIDGen service

type RPCIDGenServer interface {
	GetUUID(context.Context, *Void) (*Int64, error)
	GetCurrentSeqID(context.Context, *String) (*Int64, error)
	GetNextSeqID(context.Context, *String) (*Int64, error)
}

func RegisterRPCIDGenServer(s *grpc.Server, srv RPCIDGenServer) {
	s.RegisterService(&_RPCIDGen_serviceDesc, srv)
}

func _RPCIDGen_GetUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIDGenServer).GetUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seqsvr.RPCIDGen/GetUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIDGenServer).GetUUID(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIDGen_GetCurrentSeqID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIDGenServer).GetCurrentSeqID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seqsvr.RPCIDGen/GetCurrentSeqID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIDGenServer).GetCurrentSeqID(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCIDGen_GetNextSeqID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCIDGenServer).GetNextSeqID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seqsvr.RPCIDGen/GetNextSeqID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCIDGenServer).GetNextSeqID(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCIDGen_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seqsvr.RPCIDGen",
	HandlerType: (*RPCIDGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUUID",
			Handler:    _RPCIDGen_GetUUID_Handler,
		},
		{
			MethodName: "GetCurrentSeqID",
			Handler:    _RPCIDGen_GetCurrentSeqID_Handler,
		},
		{
			MethodName: "GetNextSeqID",
			Handler:    _RPCIDGen_GetNextSeqID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idgen.proto",
}

func init() { proto.RegisterFile("idgen.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4c, 0x49, 0x4f,
	0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4e, 0x2d, 0x2c, 0x2e, 0x2b, 0x52,
	0x12, 0xe3, 0x62, 0x0b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x17, 0xe2, 0xe1, 0x62, 0x2c, 0x93, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x2c, 0x53, 0x12, 0xe5, 0x62, 0xf5, 0xcc, 0x2b, 0x31, 0x36,
	0x42, 0x08, 0xb3, 0x22, 0x84, 0xcd, 0x4c, 0x10, 0xc2, 0xcc, 0x20, 0x61, 0x36, 0x2e, 0x96, 0xb0,
	0xfc, 0xcc, 0x14, 0xa3, 0xc9, 0x8c, 0x5c, 0x1c, 0x41, 0x01, 0xce, 0x9e, 0x2e, 0xee, 0xa9, 0x79,
	0x42, 0x6a, 0x5c, 0xec, 0xee, 0xa9, 0x25, 0xa1, 0xa1, 0x9e, 0x2e, 0x42, 0x3c, 0x7a, 0x10, 0xeb,
	0xf4, 0x40, 0xaa, 0xa4, 0x78, 0x61, 0x3c, 0x88, 0x51, 0x06, 0x5c, 0xfc, 0xee, 0xa9, 0x25, 0xce,
	0xa5, 0x45, 0x45, 0xa9, 0x79, 0x25, 0xc1, 0xa9, 0x85, 0x9e, 0x2e, 0x42, 0x7c, 0x30, 0x15, 0x10,
	0xb7, 0xa1, 0xeb, 0xd0, 0xe5, 0xe2, 0x71, 0x4f, 0x2d, 0xf1, 0x4b, 0xad, 0x20, 0x4a, 0xb9, 0x93,
	0x36, 0x97, 0x44, 0x66, 0xae, 0x5e, 0x5e, 0x6a, 0x52, 0x69, 0x4e, 0xa2, 0x5e, 0x71, 0x6a, 0x51,
	0x59, 0x66, 0x72, 0xaa, 0x5e, 0x71, 0x49, 0x62, 0x49, 0x69, 0xb1, 0x13, 0x77, 0x30, 0x98, 0x0e,
	0x00, 0x05, 0x8a, 0x07, 0x53, 0x00, 0x63, 0x12, 0x1b, 0x38, 0x7c, 0x8c, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xed, 0x27, 0x8f, 0xc0, 0x2e, 0x01, 0x00, 0x00,
}
