// Code generated by protoc-gen-go. DO NOT EDIT.
// source: seqsvr.proto

package seqsvr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// //////////////////////////////////////////////////////////////////////////////////
// 路由表
type IpPort struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *IpPort) Reset()                    { *m = IpPort{} }
func (m *IpPort) String() string            { return proto.CompactTextString(m) }
func (*IpPort) ProtoMessage()               {}
func (*IpPort) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *IpPort) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *IpPort) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Range struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Range) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Range) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type AllocSvrEntry struct {
	AllocName string   `protobuf:"bytes,1,opt,name=alloc_name,json=allocName" json:"alloc_name,omitempty"`
	Addr      *IpPort  `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Ranges    []*Range `protobuf:"bytes,3,rep,name=ranges" json:"ranges,omitempty"`
}

func (m *AllocSvrEntry) Reset()                    { *m = AllocSvrEntry{} }
func (m *AllocSvrEntry) String() string            { return proto.CompactTextString(m) }
func (*AllocSvrEntry) ProtoMessage()               {}
func (*AllocSvrEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AllocSvrEntry) GetAllocName() string {
	if m != nil {
		return m.AllocName
	}
	return ""
}

func (m *AllocSvrEntry) GetAddr() *IpPort {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AllocSvrEntry) GetRanges() []*Range {
	if m != nil {
		return m.Ranges
	}
	return nil
}

type SetEntry struct {
	SetName string           `protobuf:"bytes,1,opt,name=set_name,json=setName" json:"set_name,omitempty"`
	Allocs  []*AllocSvrEntry `protobuf:"bytes,2,rep,name=allocs" json:"allocs,omitempty"`
	Range   *Range           `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
}

func (m *SetEntry) Reset()                    { *m = SetEntry{} }
func (m *SetEntry) String() string            { return proto.CompactTextString(m) }
func (*SetEntry) ProtoMessage()               {}
func (*SetEntry) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SetEntry) GetSetName() string {
	if m != nil {
		return m.SetName
	}
	return ""
}

func (m *SetEntry) GetAllocs() []*AllocSvrEntry {
	if m != nil {
		return m.Allocs
	}
	return nil
}

func (m *SetEntry) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type Router struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// string name = 2;        // 服务名，可能会有多个seqsvr提供服务，为统一管理，提供一个唯一名字
	Sets []*SetEntry `protobuf:"bytes,2,rep,name=sets" json:"sets,omitempty"`
}

func (m *Router) Reset()                    { *m = Router{} }
func (m *Router) String() string            { return proto.CompactTextString(m) }
func (*Router) ProtoMessage()               {}
func (*Router) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Router) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Router) GetSets() []*SetEntry {
	if m != nil {
		return m.Sets
	}
	return nil
}

// 更新路由表
// UpdateRouteTableReq -> UpdateRouteTableRsp
type UpdateRouteTableReq struct {
	Router *Router `protobuf:"bytes,1,opt,name=router" json:"router,omitempty"`
}

func (m *UpdateRouteTableReq) Reset()                    { *m = UpdateRouteTableReq{} }
func (m *UpdateRouteTableReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateRouteTableReq) ProtoMessage()               {}
func (*UpdateRouteTableReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *UpdateRouteTableReq) GetRouter() *Router {
	if m != nil {
		return m.Router
	}
	return nil
}

type UpdateRouteTableRsp struct {
}

func (m *UpdateRouteTableRsp) Reset()                    { *m = UpdateRouteTableRsp{} }
func (m *UpdateRouteTableRsp) String() string            { return proto.CompactTextString(m) }
func (*UpdateRouteTableRsp) ProtoMessage()               {}
func (*UpdateRouteTableRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// 拉取路由表
// GetRouteTableReq -> GetRouteTableRsp
type GetRouteTableReq struct {
}

func (m *GetRouteTableReq) Reset()                    { *m = GetRouteTableReq{} }
func (m *GetRouteTableReq) String() string            { return proto.CompactTextString(m) }
func (*GetRouteTableReq) ProtoMessage()               {}
func (*GetRouteTableReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type GetRouteTableRsp struct {
	Router *Router `protobuf:"bytes,1,opt,name=router" json:"router,omitempty"`
}

func (m *GetRouteTableRsp) Reset()                    { *m = GetRouteTableRsp{} }
func (m *GetRouteTableRsp) String() string            { return proto.CompactTextString(m) }
func (*GetRouteTableRsp) ProtoMessage()               {}
func (*GetRouteTableRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *GetRouteTableRsp) GetRouter() *Router {
	if m != nil {
		return m.Router
	}
	return nil
}

// //////////////////////////////////////////////////////////////////////////////////
// 获取下一个Seq
// GetNextSequenceReq -> SequenceRsp
type FetchNextSequenceReq struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *FetchNextSequenceReq) Reset()                    { *m = FetchNextSequenceReq{} }
func (m *FetchNextSequenceReq) String() string            { return proto.CompactTextString(m) }
func (*FetchNextSequenceReq) ProtoMessage()               {}
func (*FetchNextSequenceReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *FetchNextSequenceReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FetchNextSequenceReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// 查询当前Seq
// GetCurrentSequenceReq -> SequenceRsp
type GetCurrentSequenceReq struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetCurrentSequenceReq) Reset()                    { *m = GetCurrentSequenceReq{} }
func (m *GetCurrentSequenceReq) String() string            { return proto.CompactTextString(m) }
func (*GetCurrentSequenceReq) ProtoMessage()               {}
func (*GetCurrentSequenceReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *GetCurrentSequenceReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetCurrentSequenceReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// 返回
type SequenceRsp struct {
	// 1. 无法提供服务
	// 2. id不存在，仅返回路由表
	// 3. id存在，返回sequence，路由表未更新
	// 4. id存在，返回sequence，路由表需要更新
	// int32  result = 1;
	Sequence uint64  `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Router   *Router `protobuf:"bytes,3,opt,name=router" json:"router,omitempty"`
}

func (m *SequenceRsp) Reset()                    { *m = SequenceRsp{} }
func (m *SequenceRsp) String() string            { return proto.CompactTextString(m) }
func (*SequenceRsp) ProtoMessage()               {}
func (*SequenceRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SequenceRsp) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SequenceRsp) GetRouter() *Router {
	if m != nil {
		return m.Router
	}
	return nil
}

// FetchNextSequenceListReq -> SequenceListRsp
type FetchNextSequenceListReq struct {
	IdList []uint32 `protobuf:"varint,1,rep,packed,name=id_list,json=idList" json:"id_list,omitempty"`
}

func (m *FetchNextSequenceListReq) Reset()                    { *m = FetchNextSequenceListReq{} }
func (m *FetchNextSequenceListReq) String() string            { return proto.CompactTextString(m) }
func (*FetchNextSequenceListReq) ProtoMessage()               {}
func (*FetchNextSequenceListReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *FetchNextSequenceListReq) GetIdList() []uint32 {
	if m != nil {
		return m.IdList
	}
	return nil
}

// 查询当前Seq
// GetCurrentSequenceListReq -> SequenceListRsp
type GetCurrentSequenceListReq struct {
	IdList []uint32 `protobuf:"varint,1,rep,packed,name=id_list,json=idList" json:"id_list,omitempty"`
}

func (m *GetCurrentSequenceListReq) Reset()                    { *m = GetCurrentSequenceListReq{} }
func (m *GetCurrentSequenceListReq) String() string            { return proto.CompactTextString(m) }
func (*GetCurrentSequenceListReq) ProtoMessage()               {}
func (*GetCurrentSequenceListReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *GetCurrentSequenceListReq) GetIdList() []uint32 {
	if m != nil {
		return m.IdList
	}
	return nil
}

type IdSeq struct {
	Id       uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
}

func (m *IdSeq) Reset()                    { *m = IdSeq{} }
func (m *IdSeq) String() string            { return proto.CompactTextString(m) }
func (*IdSeq) ProtoMessage()               {}
func (*IdSeq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *IdSeq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdSeq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

// SequenceListRsp
type SequenceListRsp struct {
	SequenceList []*IdSeq `protobuf:"bytes,1,rep,name=sequence_list,json=sequenceList" json:"sequence_list,omitempty"`
}

func (m *SequenceListRsp) Reset()                    { *m = SequenceListRsp{} }
func (m *SequenceListRsp) String() string            { return proto.CompactTextString(m) }
func (*SequenceListRsp) ProtoMessage()               {}
func (*SequenceListRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *SequenceListRsp) GetSequenceList() []*IdSeq {
	if m != nil {
		return m.SequenceList
	}
	return nil
}

// 加载max_seqs数据
// LoadMaxSeqsDataReq -> LoadMaxSeqsDataRsp
type LoadMaxSeqsDataReq struct {
}

func (m *LoadMaxSeqsDataReq) Reset()                    { *m = LoadMaxSeqsDataReq{} }
func (m *LoadMaxSeqsDataReq) String() string            { return proto.CompactTextString(m) }
func (*LoadMaxSeqsDataReq) ProtoMessage()               {}
func (*LoadMaxSeqsDataReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

// LoadMaxSeqsDataRsp
type LoadMaxSeqsDataRsp struct {
	MaxSeqs []byte `protobuf:"bytes,1,opt,name=max_seqs,json=maxSeqs,proto3" json:"max_seqs,omitempty"`
}

func (m *LoadMaxSeqsDataRsp) Reset()                    { *m = LoadMaxSeqsDataRsp{} }
func (m *LoadMaxSeqsDataRsp) String() string            { return proto.CompactTextString(m) }
func (*LoadMaxSeqsDataRsp) ProtoMessage()               {}
func (*LoadMaxSeqsDataRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *LoadMaxSeqsDataRsp) GetMaxSeqs() []byte {
	if m != nil {
		return m.MaxSeqs
	}
	return nil
}

// 加载max_seqs数据
// SaveMaxSeqReq -> SaveMaxSeqRsp
type SaveMaxSeqReq struct {
	// uint32 set_id = 1;
	// uint32 alloc_id = 2;
	SectionId uint32 `protobuf:"varint,3,opt,name=section_id,json=sectionId" json:"section_id,omitempty"`
	MaxSeq    uint64 `protobuf:"varint,4,opt,name=max_seq,json=maxSeq" json:"max_seq,omitempty"`
}

func (m *SaveMaxSeqReq) Reset()                    { *m = SaveMaxSeqReq{} }
func (m *SaveMaxSeqReq) String() string            { return proto.CompactTextString(m) }
func (*SaveMaxSeqReq) ProtoMessage()               {}
func (*SaveMaxSeqReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *SaveMaxSeqReq) GetSectionId() uint32 {
	if m != nil {
		return m.SectionId
	}
	return 0
}

func (m *SaveMaxSeqReq) GetMaxSeq() uint64 {
	if m != nil {
		return m.MaxSeq
	}
	return 0
}

// SaveMaxSeqRsp
type SaveMaxSeqRsp struct {
	LastMaxSeq uint64 `protobuf:"varint,1,opt,name=last_max_seq,json=lastMaxSeq" json:"last_max_seq,omitempty"`
}

func (m *SaveMaxSeqRsp) Reset()                    { *m = SaveMaxSeqRsp{} }
func (m *SaveMaxSeqRsp) String() string            { return proto.CompactTextString(m) }
func (*SaveMaxSeqRsp) ProtoMessage()               {}
func (*SaveMaxSeqRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *SaveMaxSeqRsp) GetLastMaxSeq() uint64 {
	if m != nil {
		return m.LastMaxSeq
	}
	return 0
}

func init() {
	proto.RegisterType((*IpPort)(nil), "seqsvr.IpPort")
	proto.RegisterType((*Range)(nil), "seqsvr.Range")
	proto.RegisterType((*AllocSvrEntry)(nil), "seqsvr.AllocSvrEntry")
	proto.RegisterType((*SetEntry)(nil), "seqsvr.SetEntry")
	proto.RegisterType((*Router)(nil), "seqsvr.Router")
	proto.RegisterType((*UpdateRouteTableReq)(nil), "seqsvr.UpdateRouteTableReq")
	proto.RegisterType((*UpdateRouteTableRsp)(nil), "seqsvr.UpdateRouteTableRsp")
	proto.RegisterType((*GetRouteTableReq)(nil), "seqsvr.GetRouteTableReq")
	proto.RegisterType((*GetRouteTableRsp)(nil), "seqsvr.GetRouteTableRsp")
	proto.RegisterType((*FetchNextSequenceReq)(nil), "seqsvr.FetchNextSequenceReq")
	proto.RegisterType((*GetCurrentSequenceReq)(nil), "seqsvr.GetCurrentSequenceReq")
	proto.RegisterType((*SequenceRsp)(nil), "seqsvr.SequenceRsp")
	proto.RegisterType((*FetchNextSequenceListReq)(nil), "seqsvr.FetchNextSequenceListReq")
	proto.RegisterType((*GetCurrentSequenceListReq)(nil), "seqsvr.GetCurrentSequenceListReq")
	proto.RegisterType((*IdSeq)(nil), "seqsvr.IdSeq")
	proto.RegisterType((*SequenceListRsp)(nil), "seqsvr.SequenceListRsp")
	proto.RegisterType((*LoadMaxSeqsDataReq)(nil), "seqsvr.LoadMaxSeqsDataReq")
	proto.RegisterType((*LoadMaxSeqsDataRsp)(nil), "seqsvr.LoadMaxSeqsDataRsp")
	proto.RegisterType((*SaveMaxSeqReq)(nil), "seqsvr.SaveMaxSeqReq")
	proto.RegisterType((*SaveMaxSeqRsp)(nil), "seqsvr.SaveMaxSeqRsp")
}

func init() { proto.RegisterFile("seqsvr.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x4f, 0x13, 0x41,
	0x10, 0x4f, 0xaf, 0xe5, 0x0a, 0x43, 0x0f, 0xc9, 0x0a, 0xe1, 0x30, 0x21, 0x69, 0xd6, 0x8f, 0xd4,
	0x18, 0xab, 0x82, 0x4f, 0x26, 0x26, 0x82, 0x22, 0x90, 0x20, 0xc1, 0x3d, 0x7d, 0xf1, 0xa5, 0x59,
	0xee, 0x26, 0xf4, 0x92, 0xf6, 0xee, 0xba, 0xbb, 0x6d, 0xda, 0xfe, 0xf5, 0x66, 0xe7, 0xee, 0xf0,
	0xda, 0x12, 0x34, 0x3e, 0xb1, 0x3b, 0xf3, 0x9b, 0xdf, 0xc7, 0xb0, 0x57, 0x68, 0x69, 0x1c, 0xe9,
	0x89, 0xea, 0x66, 0x2a, 0x35, 0x29, 0x73, 0xf3, 0x1b, 0x7f, 0x0b, 0xee, 0x45, 0x76, 0x9d, 0x2a,
	0xc3, 0x18, 0x34, 0xfa, 0xa9, 0x36, 0x7e, 0xad, 0x5d, 0xeb, 0x6c, 0x08, 0x3a, 0xdb, 0x5a, 0x96,
	0x2a, 0xe3, 0x3b, 0xed, 0x5a, 0xc7, 0x13, 0x74, 0xe6, 0xaf, 0x60, 0x4d, 0xc8, 0xe4, 0x16, 0xd9,
	0x16, 0x38, 0x71, 0x44, 0x70, 0x4f, 0x38, 0x71, 0x64, 0xc1, 0x3a, 0x9e, 0x63, 0x09, 0xb6, 0x67,
	0x3e, 0x03, 0xef, 0x78, 0x30, 0x48, 0xc3, 0x60, 0xa2, 0x4e, 0x13, 0xa3, 0x66, 0xec, 0x00, 0x40,
	0xda, 0x42, 0x2f, 0x91, 0x43, 0x2c, 0xb4, 0x36, 0xa8, 0x72, 0x25, 0x87, 0xc8, 0x38, 0x34, 0x64,
	0x14, 0x29, 0xe2, 0xd8, 0x3c, 0xdc, 0xea, 0x16, 0x9e, 0x73, 0x8b, 0x82, 0x7a, 0xec, 0x39, 0xb8,
	0xca, 0x1a, 0xd0, 0x7e, 0xbd, 0x5d, 0xef, 0x6c, 0x1e, 0x7a, 0x25, 0x8a, 0x6c, 0x89, 0xa2, 0xc9,
	0x67, 0xb0, 0x1e, 0xa0, 0xc9, 0x55, 0xf7, 0x61, 0x5d, 0xa3, 0xa9, 0x6a, 0x36, 0x35, 0x1a, 0x52,
	0x7c, 0x0d, 0x2e, 0xc9, 0x6b, 0xdf, 0x21, 0xb6, 0xdd, 0x92, 0x6d, 0xc1, 0xb7, 0x28, 0x40, 0xec,
	0x29, 0xac, 0x11, 0xbf, 0x5f, 0x27, 0x87, 0x4b, 0xda, 0x79, 0x8f, 0x9f, 0x83, 0x2b, 0xd2, 0xb1,
	0x41, 0xc5, 0x7c, 0x68, 0x4e, 0x50, 0xe9, 0x38, 0x4d, 0x8a, 0x45, 0x95, 0x57, 0xf6, 0x0c, 0x1a,
	0x1a, 0x4d, 0xa9, 0xba, 0x5d, 0xf2, 0x94, 0x96, 0x05, 0x75, 0xf9, 0x47, 0x78, 0xfc, 0x33, 0x8b,
	0xa4, 0x41, 0xe2, 0xfb, 0x21, 0x6f, 0x06, 0x28, 0x70, 0xc4, 0x5e, 0x80, 0xab, 0x48, 0x80, 0x58,
	0x2b, 0x8b, 0xca, 0x65, 0x45, 0xd1, 0xe5, 0xbb, 0xf7, 0x8c, 0xeb, 0x8c, 0x33, 0xd8, 0x3e, 0x43,
	0xb3, 0x40, 0xc9, 0x3f, 0x2c, 0xd7, 0x74, 0xf6, 0xcf, 0x32, 0x9f, 0x60, 0xe7, 0x2b, 0x9a, 0xb0,
	0x7f, 0x85, 0x53, 0x13, 0xe0, 0x68, 0x8c, 0x49, 0x48, 0x36, 0x97, 0x5f, 0x48, 0x65, 0x1b, 0xce,
	0xc2, 0x36, 0xf8, 0x31, 0xec, 0x9e, 0xa1, 0xf9, 0x3c, 0x56, 0x0a, 0x93, 0xff, 0xa4, 0xf8, 0x0e,
	0x9b, 0x77, 0x83, 0x3a, 0x63, 0x4f, 0xec, 0xbf, 0x3c, 0xbf, 0x12, 0xb2, 0x21, 0xee, 0xee, 0x95,
	0x5c, 0xf5, 0x07, 0x73, 0x1d, 0x81, 0xbf, 0x92, 0xeb, 0x32, 0xd6, 0xc6, 0x1a, 0xdb, 0x83, 0x66,
	0x1c, 0xf5, 0x06, 0x31, 0x7d, 0x31, 0xf5, 0x8e, 0x27, 0xdc, 0x38, 0xb2, 0x3d, 0xfe, 0x1e, 0xf6,
	0x57, 0xa3, 0xfc, 0x75, 0xea, 0x08, 0xd6, 0x2e, 0xa2, 0xe0, 0x9e, 0xc0, 0x0f, 0xe4, 0xe0, 0xa7,
	0xf0, 0x68, 0x41, 0x40, 0x67, 0xec, 0x10, 0xbc, 0xb2, 0xfd, 0x47, 0xa6, 0xf2, 0x4e, 0x49, 0x44,
	0xb4, 0x74, 0x65, 0x8c, 0xef, 0x00, 0xbb, 0x4c, 0x65, 0xf4, 0x4d, 0x4e, 0x03, 0x1c, 0xe9, 0x2f,
	0xd2, 0x48, 0xfb, 0x20, 0xde, 0xac, 0x56, 0x75, 0x66, 0xbf, 0xa4, 0xa1, 0x9c, 0xf6, 0x2c, 0x1b,
	0x99, 0x6c, 0x89, 0xe6, 0x30, 0x47, 0xf0, 0x33, 0xf0, 0x02, 0x39, 0xc1, 0x7c, 0xc0, 0x86, 0x3d,
	0x00, 0xd0, 0x18, 0x9a, 0x38, 0x4d, 0x7a, 0x71, 0x44, 0xab, 0xf6, 0xc4, 0x46, 0x51, 0xb9, 0x88,
	0xec, 0x2e, 0x0a, 0x2a, 0xbf, 0x41, 0xc1, 0xdc, 0x9c, 0x89, 0xbf, 0x5b, 0x20, 0xd2, 0x19, 0x6b,
	0x43, 0x6b, 0x20, 0xb5, 0xe9, 0x95, 0xf0, 0x1a, 0xc1, 0xc1, 0xd6, 0x72, 0xd0, 0xc9, 0x4b, 0xd8,
	0x0b, 0xd3, 0x61, 0x77, 0x1e, 0xf6, 0xa5, 0xe9, 0x62, 0x72, 0x1b, 0x27, 0xd8, 0x9d, 0xd3, 0x2f,
	0xdd, 0x49, 0xeb, 0xd7, 0xb5, 0xfd, 0x1b, 0x50, 0xfe, 0x73, 0xe7, 0xc6, 0xa5, 0xf2, 0xd1, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x00, 0xb1, 0x89, 0x10, 0x05, 0x00, 0x00,
}
