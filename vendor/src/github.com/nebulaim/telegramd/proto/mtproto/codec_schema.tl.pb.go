/*
 * WARNING! All changes made in this file will be lost!
 * Created from 'scheme.tl' by 'mtprotoc'
 *
 *  Copyright (c) 2018, https://github.com/nebulaim
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// ConstructorList
// RequestList

package mtproto

import (
	"fmt"
	"github.com/golang/glog"
)

// type newTLObjectFunc func() TLObject

type TLObjectHelper struct {
	newTLObjectFunc func() TLObject
	layer           int
	classIdList     []int32
}

var registers2 = map[int32]TLObjectHelper{
	int32(TLConstructor_CRC32_message2):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return &TLMessage2{} }, layer: 0, classIdList: []int32{}},
	int32(TLConstructor_CRC32_msg_container):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return &TLMsgContainer{} }, layer: 0, classIdList: []int32{}},
	int32(TLConstructor_CRC32_msg_copy):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return &TLMsgCopy{} }, layer: 0, classIdList: []int32{}},
	int32(TLConstructor_CRC32_gzip_packed):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return &TLGzipPacked{} }, layer: 0, classIdList: []int32{}},
	int32(TLConstructor_CRC32_rpc_result):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return &TLRpcResult{} }, layer: 0, classIdList: []int32{}},
	int32(TLConstructor_CRC32_rsa_public_key):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRsaPublicKey() }, layer: 85, classIdList: []int32{2048510838}},
	int32(TLConstructor_CRC32_resPQ):                                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLResPQ() }, layer: 85, classIdList: []int32{85337187}},
	int32(TLConstructor_CRC32_p_q_inner_data):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPQInnerData() }, layer: 85, classIdList: []int32{-2083955988}},
	int32(TLConstructor_CRC32_p_q_inner_data_dc):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPQInnerDataDc() }, layer: 85, classIdList: []int32{-1443537003}},
	int32(TLConstructor_CRC32_p_q_inner_data_temp):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPQInnerDataTemp() }, layer: 85, classIdList: []int32{1013613780}},
	int32(TLConstructor_CRC32_p_q_inner_data_temp_dc):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPQInnerDataTempDc() }, layer: 85, classIdList: []int32{1459478408}},
	int32(TLConstructor_CRC32_server_DH_params_fail):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLServer_DHParamsFail() }, layer: 85, classIdList: []int32{2043348061}},
	int32(TLConstructor_CRC32_server_DH_params_ok):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLServer_DHParamsOk() }, layer: 85, classIdList: []int32{-790100132}},
	int32(TLConstructor_CRC32_server_DH_inner_data):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLServer_DHInnerData() }, layer: 85, classIdList: []int32{-1249309254}},
	int32(TLConstructor_CRC32_client_DH_inner_data):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLClient_DHInnerData() }, layer: 85, classIdList: []int32{1715713620}},
	int32(TLConstructor_CRC32_dh_gen_ok):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDhGenOk() }, layer: 85, classIdList: []int32{1003222836}},
	int32(TLConstructor_CRC32_dh_gen_retry):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDhGenRetry() }, layer: 85, classIdList: []int32{1188831161}},
	int32(TLConstructor_CRC32_dh_gen_fail):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDhGenFail() }, layer: 85, classIdList: []int32{-1499615742}},
	int32(TLConstructor_CRC32_destroy_auth_key_ok):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroyAuthKeyOk() }, layer: 85, classIdList: []int32{-161422892}},
	int32(TLConstructor_CRC32_destroy_auth_key_none):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroyAuthKeyNone() }, layer: 85, classIdList: []int32{178201177}},
	int32(TLConstructor_CRC32_destroy_auth_key_fail):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroyAuthKeyFail() }, layer: 85, classIdList: []int32{-368010477}},
	int32(TLConstructor_CRC32_req_pq):                                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReqPq() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_req_pq_multi):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReqPqMulti() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_req_DH_params):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReq_DHParams() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_set_client_DH_params):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSetClient_DHParams() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_destroy_auth_key):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroyAuthKey() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_msgs_ack):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgsAck() }, layer: 85, classIdList: []int32{1658238041}},
	int32(TLConstructor_CRC32_bad_msg_notification):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBadMsgNotification() }, layer: 85, classIdList: []int32{-1477445615}},
	int32(TLConstructor_CRC32_bad_server_salt):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBadServerSalt() }, layer: 85, classIdList: []int32{-307542917}},
	int32(TLConstructor_CRC32_msgs_state_req):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgsStateReq() }, layer: 85, classIdList: []int32{-630588590}},
	int32(TLConstructor_CRC32_msgs_state_info):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgsStateInfo() }, layer: 85, classIdList: []int32{81704317}},
	int32(TLConstructor_CRC32_msgs_all_info):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgsAllInfo() }, layer: 85, classIdList: []int32{-1933520591}},
	int32(TLConstructor_CRC32_msg_detailed_info):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgDetailedInfo() }, layer: 85, classIdList: []int32{661470918}},
	int32(TLConstructor_CRC32_msg_new_detailed_info):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgNewDetailedInfo() }, layer: 85, classIdList: []int32{-2137147681}},
	int32(TLConstructor_CRC32_msg_resend_req):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMsgResendReq() }, layer: 85, classIdList: []int32{2105940488}},
	int32(TLConstructor_CRC32_rpc_error):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRpcError() }, layer: 85, classIdList: []int32{558156313}},
	int32(TLConstructor_CRC32_rpc_answer_unknown):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRpcAnswerUnknown() }, layer: 85, classIdList: []int32{1579864942}},
	int32(TLConstructor_CRC32_rpc_answer_dropped_running):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRpcAnswerDroppedRunning() }, layer: 85, classIdList: []int32{-847714938}},
	int32(TLConstructor_CRC32_rpc_answer_dropped):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRpcAnswerDropped() }, layer: 85, classIdList: []int32{-1539647305}},
	int32(TLConstructor_CRC32_future_salt):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFutureSalt() }, layer: 85, classIdList: []int32{155834844}},
	int32(TLConstructor_CRC32_future_salts):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFutureSalts() }, layer: 85, classIdList: []int32{-1370486635}},
	int32(TLConstructor_CRC32_pong):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPong() }, layer: 85, classIdList: []int32{880243653}},
	int32(TLConstructor_CRC32_destroy_session_ok):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroySessionOk() }, layer: 85, classIdList: []int32{-501201412}},
	int32(TLConstructor_CRC32_destroy_session_none):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroySessionNone() }, layer: 85, classIdList: []int32{1658015945}},
	int32(TLConstructor_CRC32_new_session_created):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLNewSessionCreated() }, layer: 85, classIdList: []int32{-1631450872}},
	int32(TLConstructor_CRC32_http_wait):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHttpWait() }, layer: 85, classIdList: []int32{-1835453025}},
	int32(TLConstructor_CRC32_ipPort):                                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLIpPort() }, layer: 85, classIdList: []int32{-734810765}},
	int32(TLConstructor_CRC32_ipPortSecret):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLIpPortSecret() }, layer: 85, classIdList: []int32{932718150}},
	int32(TLConstructor_CRC32_accessPointRule):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccessPointRule() }, layer: 85, classIdList: []int32{1182381663}},
	int32(TLConstructor_CRC32_help_configSimple):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpConfigSimple() }, layer: 85, classIdList: []int32{1515793004}},
	int32(TLConstructor_CRC32_rpc_drop_answer):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRpcDropAnswer() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_get_future_salts):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLGetFutureSalts() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_ping):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPing() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_ping_delay_disconnect):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPingDelayDisconnect() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_destroy_session):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDestroySession() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contest_saveDeveloperInfo):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContestSaveDeveloperInfo() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_schemeNotModified):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSchemeNotModified() }, layer: 85, classIdList: []int32{641506392}},
	int32(TLConstructor_CRC32_scheme):                                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLScheme() }, layer: 85, classIdList: []int32{1315894878}},
	int32(TLConstructor_CRC32_schemeParam):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSchemeParam() }, layer: 85, classIdList: []int32{565550063}},
	int32(TLConstructor_CRC32_schemeMethod):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSchemeMethod() }, layer: 85, classIdList: []int32{1200838592}},
	int32(TLConstructor_CRC32_schemeType):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSchemeType() }, layer: 85, classIdList: []int32{-1461589623}},
	int32(TLConstructor_CRC32_inputDocumentFileLocationLayer11):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDocumentFileLocationLayer11() }, layer: 11, classIdList: []int32{1313188841, 1125058340, 426148825}},
	int32(TLConstructor_CRC32_inputMediaPhotoLayer46):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaPhotoLayer46() }, layer: 46, classIdList: []int32{-373312269, -1279654347}},
	int32(TLConstructor_CRC32_boolFalse):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBoolFalse() }, layer: 85, classIdList: []int32{-1132882121}},
	int32(TLConstructor_CRC32_boolTrue):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBoolTrue() }, layer: 85, classIdList: []int32{-1720552011}},
	int32(TLConstructor_CRC32_true):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTrue() }, layer: 85, classIdList: []int32{1072550713}},
	int32(TLConstructor_CRC32_error):                                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLError() }, layer: 85, classIdList: []int32{-994444869}},
	int32(TLConstructor_CRC32_null):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLNull() }, layer: 85, classIdList: []int32{1450380236}},
	int32(TLConstructor_CRC32_inputPeerEmpty):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPeerEmpty() }, layer: 85, classIdList: []int32{2134579434}},
	int32(TLConstructor_CRC32_inputPeerSelf):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPeerSelf() }, layer: 85, classIdList: []int32{2107670217}},
	int32(TLConstructor_CRC32_inputPeerChat):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPeerChat() }, layer: 85, classIdList: []int32{396093539}},
	int32(TLConstructor_CRC32_inputPeerUser):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPeerUser() }, layer: 85, classIdList: []int32{2072935910}},
	int32(TLConstructor_CRC32_inputPeerChannel):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPeerChannel() }, layer: 85, classIdList: []int32{548253432}},
	int32(TLConstructor_CRC32_inputUserEmpty):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputUserEmpty() }, layer: 85, classIdList: []int32{-1182234929}},
	int32(TLConstructor_CRC32_inputUserSelf):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputUserSelf() }, layer: 85, classIdList: []int32{-138301121}},
	int32(TLConstructor_CRC32_inputUser):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputUser() }, layer: 85, classIdList: []int32{-668391402}},
	int32(TLConstructor_CRC32_inputPhoneContact):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPhoneContact() }, layer: 85, classIdList: []int32{-208488460}},
	int32(TLConstructor_CRC32_inputFile):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputFile() }, layer: 85, classIdList: []int32{-181407105}},
	int32(TLConstructor_CRC32_inputFileBig):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputFileBig() }, layer: 85, classIdList: []int32{-95482955}},
	int32(TLConstructor_CRC32_inputMediaEmpty):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaEmpty() }, layer: 85, classIdList: []int32{-1771768449}},
	int32(TLConstructor_CRC32_inputMediaUploadedPhoto):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaUploadedPhoto() }, layer: 85, classIdList: []int32{505969924}},
	int32(TLConstructor_CRC32_inputMediaPhoto):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaPhoto() }, layer: 85, classIdList: []int32{-373312269, -1279654347}},
	int32(TLConstructor_CRC32_inputMediaGeoPoint):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaGeoPoint() }, layer: 85, classIdList: []int32{-104578748}},
	int32(TLConstructor_CRC32_inputMediaContact):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaContact() }, layer: 85, classIdList: []int32{-122978821}},
	int32(TLConstructor_CRC32_inputMediaUploadedDocument):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaUploadedDocument() }, layer: 85, classIdList: []int32{1530447553}},
	int32(TLConstructor_CRC32_inputMediaDocument):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaDocument() }, layer: 85, classIdList: []int32{598418386}},
	int32(TLConstructor_CRC32_inputMediaVenue):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaVenue() }, layer: 85, classIdList: []int32{-1052959727}},
	int32(TLConstructor_CRC32_inputMediaGifExternal):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaGifExternal() }, layer: 85, classIdList: []int32{1212395773}},
	int32(TLConstructor_CRC32_inputMediaPhotoExternal):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaPhotoExternal() }, layer: 85, classIdList: []int32{-440664550}},
	int32(TLConstructor_CRC32_inputMediaDocumentExternal):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaDocumentExternal() }, layer: 85, classIdList: []int32{-78455655}},
	int32(TLConstructor_CRC32_inputMediaGame):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaGame() }, layer: 85, classIdList: []int32{-750828557}},
	int32(TLConstructor_CRC32_inputMediaInvoice):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaInvoice() }, layer: 85, classIdList: []int32{-186607933}},
	int32(TLConstructor_CRC32_inputMediaGeoLive):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMediaGeoLive() }, layer: 85, classIdList: []int32{2065305999}},
	int32(TLConstructor_CRC32_inputChatPhotoEmpty):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputChatPhotoEmpty() }, layer: 85, classIdList: []int32{480546647}},
	int32(TLConstructor_CRC32_inputChatUploadedPhoto):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputChatUploadedPhoto() }, layer: 85, classIdList: []int32{-1837345356}},
	int32(TLConstructor_CRC32_inputChatPhoto):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputChatPhoto() }, layer: 85, classIdList: []int32{-1991004873}},
	int32(TLConstructor_CRC32_inputGeoPointEmpty):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputGeoPointEmpty() }, layer: 85, classIdList: []int32{-457104426}},
	int32(TLConstructor_CRC32_inputGeoPoint):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputGeoPoint() }, layer: 85, classIdList: []int32{-206066487}},
	int32(TLConstructor_CRC32_inputPhotoEmpty):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPhotoEmpty() }, layer: 85, classIdList: []int32{483901197}},
	int32(TLConstructor_CRC32_inputPhoto):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPhoto() }, layer: 85, classIdList: []int32{-74070332, 1001634122}},
	int32(TLConstructor_CRC32_inputFileLocation):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputFileLocation() }, layer: 85, classIdList: []int32{342061462, -539317279}},
	int32(TLConstructor_CRC32_inputEncryptedFileLocation):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputEncryptedFileLocation() }, layer: 85, classIdList: []int32{-182231723}},
	int32(TLConstructor_CRC32_inputDocumentFileLocation):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDocumentFileLocation() }, layer: 85, classIdList: []int32{1313188841, 1125058340, 426148825}},
	int32(TLConstructor_CRC32_inputSecureFileLocation):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputSecureFileLocation() }, layer: 85, classIdList: []int32{-876089816}},
	int32(TLConstructor_CRC32_inputTakeoutFileLocation):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputTakeoutFileLocation() }, layer: 85, classIdList: []int32{700340377}},
	int32(TLConstructor_CRC32_inputAppEvent):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputAppEvent() }, layer: 85, classIdList: []int32{1996904104}},
	int32(TLConstructor_CRC32_peerUser):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPeerUser() }, layer: 85, classIdList: []int32{-1649296275}},
	int32(TLConstructor_CRC32_peerChat):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPeerChat() }, layer: 85, classIdList: []int32{-1160714821}},
	int32(TLConstructor_CRC32_peerChannel):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPeerChannel() }, layer: 85, classIdList: []int32{-1109531342}},
	int32(TLConstructor_CRC32_storage_fileUnknown):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileUnknown() }, layer: 85, classIdList: []int32{-1432995067}},
	int32(TLConstructor_CRC32_storage_filePartial):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFilePartial() }, layer: 85, classIdList: []int32{1086091090}},
	int32(TLConstructor_CRC32_storage_fileJpeg):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileJpeg() }, layer: 85, classIdList: []int32{8322574}},
	int32(TLConstructor_CRC32_storage_fileGif):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileGif() }, layer: 85, classIdList: []int32{-891180321}},
	int32(TLConstructor_CRC32_storage_filePng):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFilePng() }, layer: 85, classIdList: []int32{172975040}},
	int32(TLConstructor_CRC32_storage_filePdf):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFilePdf() }, layer: 85, classIdList: []int32{-1373745011}},
	int32(TLConstructor_CRC32_storage_fileMp3):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileMp3() }, layer: 85, classIdList: []int32{1384777335}},
	int32(TLConstructor_CRC32_storage_fileMov):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileMov() }, layer: 85, classIdList: []int32{1258941372}},
	int32(TLConstructor_CRC32_storage_fileMp4):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileMp4() }, layer: 85, classIdList: []int32{-1278304028}},
	int32(TLConstructor_CRC32_storage_fileWebp):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStorageFileWebp() }, layer: 85, classIdList: []int32{276907596}},
	int32(TLConstructor_CRC32_fileLocationUnavailable):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFileLocationUnavailable() }, layer: 85, classIdList: []int32{2086234950}},
	int32(TLConstructor_CRC32_fileLocation):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFileLocation() }, layer: 85, classIdList: []int32{1406570614, 152900075}},
	int32(TLConstructor_CRC32_userEmpty):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserEmpty() }, layer: 85, classIdList: []int32{537022650}},
	int32(TLConstructor_CRC32_user):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUser() }, layer: 85, classIdList: []int32{773059779}},
	int32(TLConstructor_CRC32_userProfilePhotoEmpty):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserProfilePhotoEmpty() }, layer: 85, classIdList: []int32{1326562017}},
	int32(TLConstructor_CRC32_userProfilePhoto):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserProfilePhoto() }, layer: 85, classIdList: []int32{-715532088}},
	int32(TLConstructor_CRC32_userStatusEmpty):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserStatusEmpty() }, layer: 85, classIdList: []int32{164646985}},
	int32(TLConstructor_CRC32_userStatusOnline):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserStatusOnline() }, layer: 85, classIdList: []int32{-306628279}},
	int32(TLConstructor_CRC32_userStatusOffline):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserStatusOffline() }, layer: 85, classIdList: []int32{9203775}},
	int32(TLConstructor_CRC32_userStatusRecently):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserStatusRecently() }, layer: 85, classIdList: []int32{-496024847}},
	int32(TLConstructor_CRC32_userStatusLastWeek):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserStatusLastWeek() }, layer: 85, classIdList: []int32{129960444}},
	int32(TLConstructor_CRC32_userStatusLastMonth):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserStatusLastMonth() }, layer: 85, classIdList: []int32{2011940674}},
	int32(TLConstructor_CRC32_chatEmpty):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatEmpty() }, layer: 85, classIdList: []int32{-1683826688}},
	int32(TLConstructor_CRC32_chat):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChat() }, layer: 85, classIdList: []int32{-652419756}},
	int32(TLConstructor_CRC32_chatForbidden):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatForbidden() }, layer: 85, classIdList: []int32{120753115}},
	int32(TLConstructor_CRC32_channel):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannel() }, layer: 85, classIdList: []int32{-930515796}},
	int32(TLConstructor_CRC32_channelForbidden):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelForbidden() }, layer: 85, classIdList: []int32{681420594}},
	int32(TLConstructor_CRC32_chatFull):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatFull() }, layer: 85, classIdList: []int32{771925524}},
	int32(TLConstructor_CRC32_channelFull):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelFull() }, layer: 85, classIdList: []int32{1991201921}},
	int32(TLConstructor_CRC32_chatParticipant):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatParticipant() }, layer: 85, classIdList: []int32{-925415106}},
	int32(TLConstructor_CRC32_chatParticipantCreator):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatParticipantCreator() }, layer: 85, classIdList: []int32{-636267638}},
	int32(TLConstructor_CRC32_chatParticipantAdmin):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatParticipantAdmin() }, layer: 85, classIdList: []int32{-489233354}},
	int32(TLConstructor_CRC32_chatParticipantsForbidden):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatParticipantsForbidden() }, layer: 85, classIdList: []int32{-57668565}},
	int32(TLConstructor_CRC32_chatParticipants):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatParticipants() }, layer: 85, classIdList: []int32{1061556205}},
	int32(TLConstructor_CRC32_chatPhotoEmpty):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatPhotoEmpty() }, layer: 85, classIdList: []int32{935395612}},
	int32(TLConstructor_CRC32_chatPhoto):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatPhoto() }, layer: 85, classIdList: []int32{1632839530}},
	int32(TLConstructor_CRC32_messageEmpty):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEmpty() }, layer: 85, classIdList: []int32{-2082087340}},
	int32(TLConstructor_CRC32_message):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessage() }, layer: 85, classIdList: []int32{1157215293}},
	int32(TLConstructor_CRC32_messageService):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageService() }, layer: 85, classIdList: []int32{-1642487306}},
	int32(TLConstructor_CRC32_messageMediaEmpty):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaEmpty() }, layer: 85, classIdList: []int32{1038967584}},
	int32(TLConstructor_CRC32_messageMediaPhoto):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaPhoto() }, layer: 85, classIdList: []int32{1766936791}},
	int32(TLConstructor_CRC32_messageMediaGeo):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaGeo() }, layer: 85, classIdList: []int32{1457575028}},
	int32(TLConstructor_CRC32_messageMediaContact):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaContact() }, layer: 85, classIdList: []int32{-873313984}},
	int32(TLConstructor_CRC32_messageMediaUnsupported):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaUnsupported() }, layer: 85, classIdList: []int32{-1618676578}},
	int32(TLConstructor_CRC32_messageMediaDocument):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaDocument() }, layer: 85, classIdList: []int32{-1666158377}},
	int32(TLConstructor_CRC32_messageMediaWebPage):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaWebPage() }, layer: 85, classIdList: []int32{-1557277184}},
	int32(TLConstructor_CRC32_messageMediaVenue):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaVenue() }, layer: 85, classIdList: []int32{784356159}},
	int32(TLConstructor_CRC32_messageMediaGame):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaGame() }, layer: 85, classIdList: []int32{-38694904}},
	int32(TLConstructor_CRC32_messageMediaInvoice):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaInvoice() }, layer: 85, classIdList: []int32{-2074799289}},
	int32(TLConstructor_CRC32_messageMediaGeoLive):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageMediaGeoLive() }, layer: 85, classIdList: []int32{2084316681}},
	int32(TLConstructor_CRC32_messageActionEmpty):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionEmpty() }, layer: 85, classIdList: []int32{-1230047312}},
	int32(TLConstructor_CRC32_messageActionChatCreate):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatCreate() }, layer: 85, classIdList: []int32{-1503425638}},
	int32(TLConstructor_CRC32_messageActionChatEditTitle):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatEditTitle() }, layer: 85, classIdList: []int32{-1247687078}},
	int32(TLConstructor_CRC32_messageActionChatEditPhoto):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatEditPhoto() }, layer: 85, classIdList: []int32{2144015272}},
	int32(TLConstructor_CRC32_messageActionChatDeletePhoto):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatDeletePhoto() }, layer: 85, classIdList: []int32{-1780220945}},
	int32(TLConstructor_CRC32_messageActionChatAddUser):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatAddUser() }, layer: 85, classIdList: []int32{1217033015}},
	int32(TLConstructor_CRC32_messageActionChatDeleteUser):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatDeleteUser() }, layer: 85, classIdList: []int32{-1297179892}},
	int32(TLConstructor_CRC32_messageActionChatJoinedByLink):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatJoinedByLink() }, layer: 85, classIdList: []int32{-123931160}},
	int32(TLConstructor_CRC32_messageActionChannelCreate):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChannelCreate() }, layer: 85, classIdList: []int32{-1781355374}},
	int32(TLConstructor_CRC32_messageActionChatMigrateTo):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChatMigrateTo() }, layer: 85, classIdList: []int32{1371385889}},
	int32(TLConstructor_CRC32_messageActionChannelMigrateFrom):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionChannelMigrateFrom() }, layer: 85, classIdList: []int32{-1336546578}},
	int32(TLConstructor_CRC32_messageActionPinMessage):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionPinMessage() }, layer: 85, classIdList: []int32{-1799538451}},
	int32(TLConstructor_CRC32_messageActionHistoryClear):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionHistoryClear() }, layer: 85, classIdList: []int32{-1615153660}},
	int32(TLConstructor_CRC32_messageActionGameScore):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionGameScore() }, layer: 85, classIdList: []int32{-1834538890}},
	int32(TLConstructor_CRC32_messageActionPaymentSentMe):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionPaymentSentMe() }, layer: 85, classIdList: []int32{-1892568281}},
	int32(TLConstructor_CRC32_messageActionPaymentSent):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionPaymentSent() }, layer: 85, classIdList: []int32{1080663248}},
	int32(TLConstructor_CRC32_messageActionPhoneCall):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionPhoneCall() }, layer: 85, classIdList: []int32{-2132731265}},
	int32(TLConstructor_CRC32_messageActionScreenshotTaken):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionScreenshotTaken() }, layer: 85, classIdList: []int32{1200788123}},
	int32(TLConstructor_CRC32_messageActionCustomAction):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionCustomAction() }, layer: 85, classIdList: []int32{-85549226}},
	int32(TLConstructor_CRC32_messageActionBotAllowed):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionBotAllowed() }, layer: 85, classIdList: []int32{-1410748418}},
	int32(TLConstructor_CRC32_messageActionSecureValuesSentMe):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionSecureValuesSentMe() }, layer: 85, classIdList: []int32{455635795}},
	int32(TLConstructor_CRC32_messageActionSecureValuesSent):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageActionSecureValuesSent() }, layer: 85, classIdList: []int32{-648257196}},
	int32(TLConstructor_CRC32_dialog):                                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDialog() }, layer: 85, classIdList: []int32{-455150117}},
	int32(TLConstructor_CRC32_photoEmpty):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotoEmpty() }, layer: 85, classIdList: []int32{590459437}},
	int32(TLConstructor_CRC32_photo):                                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoto() }, layer: 85, classIdList: []int32{-1836524247, -1673036328}},
	int32(TLConstructor_CRC32_photoSizeEmpty):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotoSizeEmpty() }, layer: 85, classIdList: []int32{236446268}},
	int32(TLConstructor_CRC32_photoSize):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotoSize() }, layer: 85, classIdList: []int32{2009052699}},
	int32(TLConstructor_CRC32_photoCachedSize):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotoCachedSize() }, layer: 85, classIdList: []int32{-374917894}},
	int32(TLConstructor_CRC32_geoPointEmpty):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLGeoPointEmpty() }, layer: 85, classIdList: []int32{286776671}},
	int32(TLConstructor_CRC32_geoPoint):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLGeoPoint() }, layer: 85, classIdList: []int32{43446532}},
	int32(TLConstructor_CRC32_auth_checkedPhone):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthCheckedPhone() }, layer: 85, classIdList: []int32{-2128698738}},
	int32(TLConstructor_CRC32_auth_sentCode):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSentCode() }, layer: 85, classIdList: []int32{955951967}},
	int32(TLConstructor_CRC32_auth_authorization):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthAuthorization() }, layer: 85, classIdList: []int32{-855308010}},
	int32(TLConstructor_CRC32_auth_exportedAuthorization):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthExportedAuthorization() }, layer: 85, classIdList: []int32{-543777747}},
	int32(TLConstructor_CRC32_inputNotifyPeer):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputNotifyPeer() }, layer: 85, classIdList: []int32{-1195615476}},
	int32(TLConstructor_CRC32_inputNotifyUsers):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputNotifyUsers() }, layer: 85, classIdList: []int32{423314455}},
	int32(TLConstructor_CRC32_inputNotifyChats):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputNotifyChats() }, layer: 85, classIdList: []int32{1251338318}},
	int32(TLConstructor_CRC32_inputPeerNotifySettings):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPeerNotifySettings() }, layer: 85, classIdList: []int32{-1673717362}},
	int32(TLConstructor_CRC32_peerNotifySettings):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPeerNotifySettings() }, layer: 85, classIdList: []int32{-1353671392}},
	int32(TLConstructor_CRC32_peerSettings):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPeerSettings() }, layer: 85, classIdList: []int32{-2122045747}},
	int32(TLConstructor_CRC32_wallPaper):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWallPaper() }, layer: 85, classIdList: []int32{-860866985}},
	int32(TLConstructor_CRC32_wallPaperSolid):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWallPaperSolid() }, layer: 85, classIdList: []int32{1662091044}},
	int32(TLConstructor_CRC32_inputReportReasonSpam):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputReportReasonSpam() }, layer: 85, classIdList: []int32{1490799288}},
	int32(TLConstructor_CRC32_inputReportReasonViolence):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputReportReasonViolence() }, layer: 85, classIdList: []int32{505595789}},
	int32(TLConstructor_CRC32_inputReportReasonPornography):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputReportReasonPornography() }, layer: 85, classIdList: []int32{777640226}},
	int32(TLConstructor_CRC32_inputReportReasonOther):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputReportReasonOther() }, layer: 85, classIdList: []int32{-512463606}},
	int32(TLConstructor_CRC32_inputReportReasonCopyright):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputReportReasonCopyright() }, layer: 85, classIdList: []int32{-1685456582}},
	int32(TLConstructor_CRC32_userFull):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUserFull() }, layer: 85, classIdList: []int32{253890367}},
	int32(TLConstructor_CRC32_contact):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContact() }, layer: 85, classIdList: []int32{-116274796}},
	int32(TLConstructor_CRC32_importedContact):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLImportedContact() }, layer: 85, classIdList: []int32{-805141448}},
	int32(TLConstructor_CRC32_contactBlocked):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactBlocked() }, layer: 85, classIdList: []int32{1444661369}},
	int32(TLConstructor_CRC32_contactStatus):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactStatus() }, layer: 85, classIdList: []int32{-748155807}},
	int32(TLConstructor_CRC32_contacts_link):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsLink() }, layer: 85, classIdList: []int32{986597452}},
	int32(TLConstructor_CRC32_contacts_contactsNotModified):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsContactsNotModified() }, layer: 85, classIdList: []int32{-1219778094}},
	int32(TLConstructor_CRC32_contacts_contacts):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsContacts() }, layer: 85, classIdList: []int32{-353862078}},
	int32(TLConstructor_CRC32_contacts_importedContacts):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsImportedContacts() }, layer: 85, classIdList: []int32{2010127419}},
	int32(TLConstructor_CRC32_contacts_blocked):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsBlocked() }, layer: 85, classIdList: []int32{471043349}},
	int32(TLConstructor_CRC32_contacts_blockedSlice):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsBlockedSlice() }, layer: 85, classIdList: []int32{-1878523231}},
	int32(TLConstructor_CRC32_messages_dialogs):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDialogs() }, layer: 85, classIdList: []int32{364538944}},
	int32(TLConstructor_CRC32_messages_dialogsSlice):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDialogsSlice() }, layer: 85, classIdList: []int32{1910543603}},
	int32(TLConstructor_CRC32_messages_dialogsNotModified):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDialogsNotModified() }, layer: 85, classIdList: []int32{-253500010}},
	int32(TLConstructor_CRC32_messages_messages):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesMessages() }, layer: 85, classIdList: []int32{-1938715001}},
	int32(TLConstructor_CRC32_messages_messagesSlice):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesMessagesSlice() }, layer: 85, classIdList: []int32{189033187}},
	int32(TLConstructor_CRC32_messages_channelMessages):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesChannelMessages() }, layer: 85, classIdList: []int32{-1725551049}},
	int32(TLConstructor_CRC32_messages_messagesNotModified):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesMessagesNotModified() }, layer: 85, classIdList: []int32{1951620897}},
	int32(TLConstructor_CRC32_messages_chats):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesChats() }, layer: 85, classIdList: []int32{1694474197}},
	int32(TLConstructor_CRC32_messages_chatsSlice):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesChatsSlice() }, layer: 85, classIdList: []int32{-1663561404}},
	int32(TLConstructor_CRC32_messages_chatFull):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesChatFull() }, layer: 85, classIdList: []int32{-438840932}},
	int32(TLConstructor_CRC32_messages_affectedHistory):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesAffectedHistory() }, layer: 85, classIdList: []int32{-1269012015}},
	int32(TLConstructor_CRC32_inputMessagesFilterEmpty):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterEmpty() }, layer: 85, classIdList: []int32{1474492012}},
	int32(TLConstructor_CRC32_inputMessagesFilterPhotos):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterPhotos() }, layer: 85, classIdList: []int32{-1777752804}},
	int32(TLConstructor_CRC32_inputMessagesFilterVideo):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterVideo() }, layer: 85, classIdList: []int32{-1614803355}},
	int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideo):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterPhotoVideo() }, layer: 85, classIdList: []int32{1458172132}},
	int32(TLConstructor_CRC32_inputMessagesFilterDocument):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterDocument() }, layer: 85, classIdList: []int32{-1629621880}},
	int32(TLConstructor_CRC32_inputMessagesFilterUrl):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterUrl() }, layer: 85, classIdList: []int32{2129714567}},
	int32(TLConstructor_CRC32_inputMessagesFilterGif):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterGif() }, layer: 85, classIdList: []int32{-3644025}},
	int32(TLConstructor_CRC32_inputMessagesFilterVoice):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterVoice() }, layer: 85, classIdList: []int32{1358283666}},
	int32(TLConstructor_CRC32_inputMessagesFilterMusic):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterMusic() }, layer: 85, classIdList: []int32{928101534}},
	int32(TLConstructor_CRC32_inputMessagesFilterChatPhotos):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterChatPhotos() }, layer: 85, classIdList: []int32{975236280}},
	int32(TLConstructor_CRC32_inputMessagesFilterPhoneCalls):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterPhoneCalls() }, layer: 85, classIdList: []int32{-2134272152}},
	int32(TLConstructor_CRC32_inputMessagesFilterRoundVoice):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterRoundVoice() }, layer: 85, classIdList: []int32{2054952868}},
	int32(TLConstructor_CRC32_inputMessagesFilterRoundVideo):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterRoundVideo() }, layer: 85, classIdList: []int32{-1253451181}},
	int32(TLConstructor_CRC32_inputMessagesFilterMyMentions):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterMyMentions() }, layer: 85, classIdList: []int32{-1040652646}},
	int32(TLConstructor_CRC32_inputMessagesFilterGeo):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterGeo() }, layer: 85, classIdList: []int32{-419271411}},
	int32(TLConstructor_CRC32_inputMessagesFilterContacts):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagesFilterContacts() }, layer: 85, classIdList: []int32{-530392189}},
	int32(TLConstructor_CRC32_updateNewMessage):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateNewMessage() }, layer: 85, classIdList: []int32{522914557}},
	int32(TLConstructor_CRC32_updateMessageID):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateMessageID() }, layer: 85, classIdList: []int32{1318109142}},
	int32(TLConstructor_CRC32_updateDeleteMessages):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateDeleteMessages() }, layer: 85, classIdList: []int32{-1576161051}},
	int32(TLConstructor_CRC32_updateUserTyping):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateUserTyping() }, layer: 85, classIdList: []int32{1548249383}},
	int32(TLConstructor_CRC32_updateChatUserTyping):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChatUserTyping() }, layer: 85, classIdList: []int32{-1704596961}},
	int32(TLConstructor_CRC32_updateChatParticipants):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChatParticipants() }, layer: 85, classIdList: []int32{125178264}},
	int32(TLConstructor_CRC32_updateUserStatus):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateUserStatus() }, layer: 85, classIdList: []int32{469489699}},
	int32(TLConstructor_CRC32_updateUserName):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateUserName() }, layer: 85, classIdList: []int32{-1489818765}},
	int32(TLConstructor_CRC32_updateUserPhoto):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateUserPhoto() }, layer: 85, classIdList: []int32{-1791935732}},
	int32(TLConstructor_CRC32_updateContactRegistered):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateContactRegistered() }, layer: 85, classIdList: []int32{628472761}},
	int32(TLConstructor_CRC32_updateContactLink):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateContactLink() }, layer: 85, classIdList: []int32{-1657903163}},
	int32(TLConstructor_CRC32_updateNewEncryptedMessage):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateNewEncryptedMessage() }, layer: 85, classIdList: []int32{314359194}},
	int32(TLConstructor_CRC32_updateEncryptedChatTyping):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateEncryptedChatTyping() }, layer: 85, classIdList: []int32{386986326}},
	int32(TLConstructor_CRC32_updateEncryption):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateEncryption() }, layer: 85, classIdList: []int32{-1264392051}},
	int32(TLConstructor_CRC32_updateEncryptedMessagesRead):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateEncryptedMessagesRead() }, layer: 85, classIdList: []int32{956179895}},
	int32(TLConstructor_CRC32_updateChatParticipantAdd):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChatParticipantAdd() }, layer: 85, classIdList: []int32{-364179876}},
	int32(TLConstructor_CRC32_updateChatParticipantDelete):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChatParticipantDelete() }, layer: 85, classIdList: []int32{1851755554}},
	int32(TLConstructor_CRC32_updateDcOptions):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateDcOptions() }, layer: 85, classIdList: []int32{-1906403213}},
	int32(TLConstructor_CRC32_updateUserBlocked):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateUserBlocked() }, layer: 85, classIdList: []int32{-2131957734}},
	int32(TLConstructor_CRC32_updateNotifySettings):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateNotifySettings() }, layer: 85, classIdList: []int32{-1094555409}},
	int32(TLConstructor_CRC32_updateServiceNotification):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateServiceNotification() }, layer: 85, classIdList: []int32{-337352679}},
	int32(TLConstructor_CRC32_updatePrivacy):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatePrivacy() }, layer: 85, classIdList: []int32{-298113238}},
	int32(TLConstructor_CRC32_updateUserPhone):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateUserPhone() }, layer: 85, classIdList: []int32{314130811}},
	int32(TLConstructor_CRC32_updateReadHistoryInbox):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateReadHistoryInbox() }, layer: 85, classIdList: []int32{-1721631396}},
	int32(TLConstructor_CRC32_updateReadHistoryOutbox):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateReadHistoryOutbox() }, layer: 85, classIdList: []int32{791617983}},
	int32(TLConstructor_CRC32_updateWebPage):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateWebPage() }, layer: 85, classIdList: []int32{2139689491}},
	int32(TLConstructor_CRC32_updateReadMessagesContents):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateReadMessagesContents() }, layer: 85, classIdList: []int32{1757493555}},
	int32(TLConstructor_CRC32_updateChannelTooLong):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannelTooLong() }, layer: 85, classIdList: []int32{-352032773}},
	int32(TLConstructor_CRC32_updateChannel):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannel() }, layer: 85, classIdList: []int32{-1227598250}},
	int32(TLConstructor_CRC32_updateNewChannelMessage):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateNewChannelMessage() }, layer: 85, classIdList: []int32{1656358105}},
	int32(TLConstructor_CRC32_updateReadChannelInbox):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateReadChannelInbox() }, layer: 85, classIdList: []int32{1108669311}},
	int32(TLConstructor_CRC32_updateDeleteChannelMessages):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateDeleteChannelMessages() }, layer: 85, classIdList: []int32{-1015733815}},
	int32(TLConstructor_CRC32_updateChannelMessageViews):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannelMessageViews() }, layer: 85, classIdList: []int32{-1734268085}},
	int32(TLConstructor_CRC32_updateChatAdmins):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChatAdmins() }, layer: 85, classIdList: []int32{1855224129}},
	int32(TLConstructor_CRC32_updateChatParticipantAdmin):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChatParticipantAdmin() }, layer: 85, classIdList: []int32{-1232070311}},
	int32(TLConstructor_CRC32_updateNewStickerSet):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateNewStickerSet() }, layer: 85, classIdList: []int32{1753886890}},
	int32(TLConstructor_CRC32_updateStickerSetsOrder):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateStickerSetsOrder() }, layer: 85, classIdList: []int32{196268545}},
	int32(TLConstructor_CRC32_updateStickerSets):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateStickerSets() }, layer: 85, classIdList: []int32{1135492588}},
	int32(TLConstructor_CRC32_updateSavedGifs):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateSavedGifs() }, layer: 85, classIdList: []int32{-1821035490}},
	int32(TLConstructor_CRC32_updateBotInlineQuery):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotInlineQuery() }, layer: 85, classIdList: []int32{1417832080}},
	int32(TLConstructor_CRC32_updateBotInlineSend):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotInlineSend() }, layer: 85, classIdList: []int32{239663460}},
	int32(TLConstructor_CRC32_updateEditChannelMessage):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateEditChannelMessage() }, layer: 85, classIdList: []int32{457133559}},
	int32(TLConstructor_CRC32_updateChannelPinnedMessage):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannelPinnedMessage() }, layer: 85, classIdList: []int32{-1738988427}},
	int32(TLConstructor_CRC32_updateBotCallbackQuery):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotCallbackQuery() }, layer: 85, classIdList: []int32{-415938591}},
	int32(TLConstructor_CRC32_updateEditMessage):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateEditMessage() }, layer: 85, classIdList: []int32{-469536605}},
	int32(TLConstructor_CRC32_updateInlineBotCallbackQuery):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateInlineBotCallbackQuery() }, layer: 85, classIdList: []int32{-103646630}},
	int32(TLConstructor_CRC32_updateReadChannelOutbox):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateReadChannelOutbox() }, layer: 85, classIdList: []int32{634833351}},
	int32(TLConstructor_CRC32_updateDraftMessage):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateDraftMessage() }, layer: 85, classIdList: []int32{-299124375}},
	int32(TLConstructor_CRC32_updateReadFeaturedStickers):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateReadFeaturedStickers() }, layer: 85, classIdList: []int32{1461528386}},
	int32(TLConstructor_CRC32_updateRecentStickers):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateRecentStickers() }, layer: 85, classIdList: []int32{-1706939360}},
	int32(TLConstructor_CRC32_updateConfig):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateConfig() }, layer: 85, classIdList: []int32{-1574314746}},
	int32(TLConstructor_CRC32_updatePtsChanged):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatePtsChanged() }, layer: 85, classIdList: []int32{861169551}},
	int32(TLConstructor_CRC32_updateChannelWebPage):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannelWebPage() }, layer: 85, classIdList: []int32{1081547008}},
	int32(TLConstructor_CRC32_updateDialogPinned):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateDialogPinned() }, layer: 85, classIdList: []int32{433225532}},
	int32(TLConstructor_CRC32_updatePinnedDialogs):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatePinnedDialogs() }, layer: 85, classIdList: []int32{-364071333}},
	int32(TLConstructor_CRC32_updateBotWebhookJSON):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotWebhookJSON() }, layer: 85, classIdList: []int32{-2095595325}},
	int32(TLConstructor_CRC32_updateBotWebhookJSONQuery):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotWebhookJSONQuery() }, layer: 85, classIdList: []int32{-1684914010}},
	int32(TLConstructor_CRC32_updateBotShippingQuery):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotShippingQuery() }, layer: 85, classIdList: []int32{-523384512}},
	int32(TLConstructor_CRC32_updateBotPrecheckoutQuery):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateBotPrecheckoutQuery() }, layer: 85, classIdList: []int32{1563376297}},
	int32(TLConstructor_CRC32_updatePhoneCall):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatePhoneCall() }, layer: 85, classIdList: []int32{-1425052898}},
	int32(TLConstructor_CRC32_updateLangPackTooLong):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateLangPackTooLong() }, layer: 85, classIdList: []int32{281165899}},
	int32(TLConstructor_CRC32_updateLangPack):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateLangPack() }, layer: 85, classIdList: []int32{1442983757}},
	int32(TLConstructor_CRC32_updateFavedStickers):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateFavedStickers() }, layer: 85, classIdList: []int32{-451831443}},
	int32(TLConstructor_CRC32_updateChannelReadMessagesContents):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannelReadMessagesContents() }, layer: 85, classIdList: []int32{-1987495099}},
	int32(TLConstructor_CRC32_updateContactsReset):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateContactsReset() }, layer: 85, classIdList: []int32{1887741886}},
	int32(TLConstructor_CRC32_updateChannelAvailableMessages):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateChannelAvailableMessages() }, layer: 85, classIdList: []int32{1893427255}},
	int32(TLConstructor_CRC32_updateDialogUnreadMark):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateDialogUnreadMark() }, layer: 85, classIdList: []int32{-513517117}},
	int32(TLConstructor_CRC32_updates_state):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesState() }, layer: 85, classIdList: []int32{-1519637954}},
	int32(TLConstructor_CRC32_updates_differenceEmpty):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesDifferenceEmpty() }, layer: 85, classIdList: []int32{1567990072}},
	int32(TLConstructor_CRC32_updates_difference):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesDifference() }, layer: 85, classIdList: []int32{16030880}},
	int32(TLConstructor_CRC32_updates_differenceSlice):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesDifferenceSlice() }, layer: 85, classIdList: []int32{-1459938943}},
	int32(TLConstructor_CRC32_updates_differenceTooLong):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesDifferenceTooLong() }, layer: 85, classIdList: []int32{1258196845}},
	int32(TLConstructor_CRC32_updatesTooLong):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesTooLong() }, layer: 85, classIdList: []int32{-484987010}},
	int32(TLConstructor_CRC32_updateShortMessage):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateShortMessage() }, layer: 85, classIdList: []int32{-1857044719}},
	int32(TLConstructor_CRC32_updateShortChatMessage):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateShortChatMessage() }, layer: 85, classIdList: []int32{377562760}},
	int32(TLConstructor_CRC32_updateShort):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateShort() }, layer: 85, classIdList: []int32{2027216577}},
	int32(TLConstructor_CRC32_updatesCombined):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesCombined() }, layer: 85, classIdList: []int32{1918567619}},
	int32(TLConstructor_CRC32_updates):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdates() }, layer: 85, classIdList: []int32{1957577280}},
	int32(TLConstructor_CRC32_updateShortSentMessage):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdateShortSentMessage() }, layer: 85, classIdList: []int32{301019932}},
	int32(TLConstructor_CRC32_photos_photos):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosPhotos() }, layer: 85, classIdList: []int32{-1916114267}},
	int32(TLConstructor_CRC32_photos_photosSlice):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosPhotosSlice() }, layer: 85, classIdList: []int32{352657236}},
	int32(TLConstructor_CRC32_photos_photo):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosPhoto() }, layer: 85, classIdList: []int32{539045032}},
	int32(TLConstructor_CRC32_upload_file):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadFile() }, layer: 85, classIdList: []int32{157948117}},
	int32(TLConstructor_CRC32_upload_fileCdnRedirect):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadFileCdnRedirect() }, layer: 85, classIdList: []int32{-242427324}},
	int32(TLConstructor_CRC32_dcOption):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDcOption() }, layer: 85, classIdList: []int32{414687501}},
	int32(TLConstructor_CRC32_config):                                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLConfig() }, layer: 85, classIdList: []int32{840162234}},
	int32(TLConstructor_CRC32_nearestDc):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLNearestDc() }, layer: 85, classIdList: []int32{-1910892683}},
	int32(TLConstructor_CRC32_help_appUpdate):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpAppUpdate() }, layer: 85, classIdList: []int32{497489295}},
	int32(TLConstructor_CRC32_help_noAppUpdate):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpNoAppUpdate() }, layer: 85, classIdList: []int32{-1000708810}},
	int32(TLConstructor_CRC32_help_inviteText):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpInviteText() }, layer: 85, classIdList: []int32{415997816}},
	int32(TLConstructor_CRC32_encryptedChatEmpty):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedChatEmpty() }, layer: 85, classIdList: []int32{-1417756512}},
	int32(TLConstructor_CRC32_encryptedChatWaiting):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedChatWaiting() }, layer: 85, classIdList: []int32{1006044124}},
	int32(TLConstructor_CRC32_encryptedChatRequested):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedChatRequested() }, layer: 85, classIdList: []int32{-931638658}},
	int32(TLConstructor_CRC32_encryptedChat):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedChat() }, layer: 85, classIdList: []int32{-94974410}},
	int32(TLConstructor_CRC32_encryptedChatDiscarded):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedChatDiscarded() }, layer: 85, classIdList: []int32{332848423}},
	int32(TLConstructor_CRC32_inputEncryptedChat):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputEncryptedChat() }, layer: 85, classIdList: []int32{-247351839}},
	int32(TLConstructor_CRC32_encryptedFileEmpty):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedFileEmpty() }, layer: 85, classIdList: []int32{-1038136962}},
	int32(TLConstructor_CRC32_encryptedFile):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedFile() }, layer: 85, classIdList: []int32{1248893260}},
	int32(TLConstructor_CRC32_inputEncryptedFileEmpty):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputEncryptedFileEmpty() }, layer: 85, classIdList: []int32{406307684}},
	int32(TLConstructor_CRC32_inputEncryptedFileUploaded):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputEncryptedFileUploaded() }, layer: 85, classIdList: []int32{1690108678}},
	int32(TLConstructor_CRC32_inputEncryptedFile):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputEncryptedFile() }, layer: 85, classIdList: []int32{1511503333}},
	int32(TLConstructor_CRC32_inputEncryptedFileBigUploaded):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputEncryptedFileBigUploaded() }, layer: 85, classIdList: []int32{767652808}},
	int32(TLConstructor_CRC32_encryptedMessage):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedMessage() }, layer: 85, classIdList: []int32{-317144808}},
	int32(TLConstructor_CRC32_encryptedMessageService):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLEncryptedMessageService() }, layer: 85, classIdList: []int32{594758406}},
	int32(TLConstructor_CRC32_messages_dhConfigNotModified):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDhConfigNotModified() }, layer: 85, classIdList: []int32{-1058912715}},
	int32(TLConstructor_CRC32_messages_dhConfig):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDhConfig() }, layer: 85, classIdList: []int32{740433629}},
	int32(TLConstructor_CRC32_messages_sentEncryptedMessage):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSentEncryptedMessage() }, layer: 85, classIdList: []int32{1443858741}},
	int32(TLConstructor_CRC32_messages_sentEncryptedFile):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSentEncryptedFile() }, layer: 85, classIdList: []int32{-1802240206}},
	int32(TLConstructor_CRC32_inputDocumentEmpty):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDocumentEmpty() }, layer: 85, classIdList: []int32{1928391342}},
	int32(TLConstructor_CRC32_inputDocument):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDocument() }, layer: 85, classIdList: []int32{410618194, 448771445}},
	int32(TLConstructor_CRC32_documentEmpty):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentEmpty() }, layer: 85, classIdList: []int32{922273905}},
	int32(TLConstructor_CRC32_document):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocument() }, layer: 85, classIdList: []int32{-2027738169, 1498631756}},
	int32(TLConstructor_CRC32_help_support):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpSupport() }, layer: 85, classIdList: []int32{398898678}},
	int32(TLConstructor_CRC32_notifyPeer):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLNotifyPeer() }, layer: 85, classIdList: []int32{-1613493288}},
	int32(TLConstructor_CRC32_notifyUsers):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLNotifyUsers() }, layer: 85, classIdList: []int32{-1261946036}},
	int32(TLConstructor_CRC32_notifyChats):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLNotifyChats() }, layer: 85, classIdList: []int32{-1073230141}},
	int32(TLConstructor_CRC32_sendMessageTypingAction):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageTypingAction() }, layer: 85, classIdList: []int32{381645902}},
	int32(TLConstructor_CRC32_sendMessageCancelAction):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageCancelAction() }, layer: 85, classIdList: []int32{-44119819}},
	int32(TLConstructor_CRC32_sendMessageRecordVideoAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageRecordVideoAction() }, layer: 85, classIdList: []int32{-1584933265}},
	int32(TLConstructor_CRC32_sendMessageUploadVideoAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageUploadVideoAction() }, layer: 85, classIdList: []int32{-378127636}},
	int32(TLConstructor_CRC32_sendMessageRecordAudioAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageRecordAudioAction() }, layer: 85, classIdList: []int32{-718310409}},
	int32(TLConstructor_CRC32_sendMessageUploadAudioAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageUploadAudioAction() }, layer: 85, classIdList: []int32{-212740181}},
	int32(TLConstructor_CRC32_sendMessageUploadPhotoAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageUploadPhotoAction() }, layer: 85, classIdList: []int32{-774682074}},
	int32(TLConstructor_CRC32_sendMessageUploadDocumentAction):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageUploadDocumentAction() }, layer: 85, classIdList: []int32{-1441998364}},
	int32(TLConstructor_CRC32_sendMessageGeoLocationAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageGeoLocationAction() }, layer: 85, classIdList: []int32{393186209}},
	int32(TLConstructor_CRC32_sendMessageChooseContactAction):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageChooseContactAction() }, layer: 85, classIdList: []int32{1653390447}},
	int32(TLConstructor_CRC32_sendMessageGamePlayAction):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageGamePlayAction() }, layer: 85, classIdList: []int32{-580219064}},
	int32(TLConstructor_CRC32_sendMessageRecordRoundAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageRecordRoundAction() }, layer: 85, classIdList: []int32{-1997373508}},
	int32(TLConstructor_CRC32_sendMessageUploadRoundAction):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSendMessageUploadRoundAction() }, layer: 85, classIdList: []int32{608050278}},
	int32(TLConstructor_CRC32_contacts_found):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsFound() }, layer: 85, classIdList: []int32{-1290580579}},
	int32(TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyKeyStatusTimestamp() }, layer: 85, classIdList: []int32{1335282456}},
	int32(TLConstructor_CRC32_inputPrivacyKeyChatInvite):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyKeyChatInvite() }, layer: 85, classIdList: []int32{-1107622874}},
	int32(TLConstructor_CRC32_inputPrivacyKeyPhoneCall):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyKeyPhoneCall() }, layer: 85, classIdList: []int32{-88417185}},
	int32(TLConstructor_CRC32_privacyKeyStatusTimestamp):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyKeyStatusTimestamp() }, layer: 85, classIdList: []int32{-1137792208}},
	int32(TLConstructor_CRC32_privacyKeyChatInvite):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyKeyChatInvite() }, layer: 85, classIdList: []int32{1343122938}},
	int32(TLConstructor_CRC32_privacyKeyPhoneCall):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyKeyPhoneCall() }, layer: 85, classIdList: []int32{1030105979}},
	int32(TLConstructor_CRC32_inputPrivacyValueAllowContacts):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyValueAllowContacts() }, layer: 85, classIdList: []int32{218751099}},
	int32(TLConstructor_CRC32_inputPrivacyValueAllowAll):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyValueAllowAll() }, layer: 85, classIdList: []int32{407582158}},
	int32(TLConstructor_CRC32_inputPrivacyValueAllowUsers):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyValueAllowUsers() }, layer: 85, classIdList: []int32{320652927}},
	int32(TLConstructor_CRC32_inputPrivacyValueDisallowContacts):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyValueDisallowContacts() }, layer: 85, classIdList: []int32{195371015}},
	int32(TLConstructor_CRC32_inputPrivacyValueDisallowAll):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyValueDisallowAll() }, layer: 85, classIdList: []int32{-697604407}},
	int32(TLConstructor_CRC32_inputPrivacyValueDisallowUsers):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPrivacyValueDisallowUsers() }, layer: 85, classIdList: []int32{-1877932953}},
	int32(TLConstructor_CRC32_privacyValueAllowContacts):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyValueAllowContacts() }, layer: 85, classIdList: []int32{-123988}},
	int32(TLConstructor_CRC32_privacyValueAllowAll):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyValueAllowAll() }, layer: 85, classIdList: []int32{1698855810}},
	int32(TLConstructor_CRC32_privacyValueAllowUsers):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyValueAllowUsers() }, layer: 85, classIdList: []int32{1297858060}},
	int32(TLConstructor_CRC32_privacyValueDisallowContacts):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyValueDisallowContacts() }, layer: 85, classIdList: []int32{-125240806}},
	int32(TLConstructor_CRC32_privacyValueDisallowAll):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyValueDisallowAll() }, layer: 85, classIdList: []int32{-1955338397}},
	int32(TLConstructor_CRC32_privacyValueDisallowUsers):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPrivacyValueDisallowUsers() }, layer: 85, classIdList: []int32{209668535}},
	int32(TLConstructor_CRC32_account_privacyRules):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountPrivacyRules() }, layer: 85, classIdList: []int32{1430961007}},
	int32(TLConstructor_CRC32_accountDaysTTL):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountDaysTTL() }, layer: 85, classIdList: []int32{-1194283041}},
	int32(TLConstructor_CRC32_documentAttributeImageSize):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeImageSize() }, layer: 85, classIdList: []int32{1815593308}},
	int32(TLConstructor_CRC32_documentAttributeAnimated):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeAnimated() }, layer: 85, classIdList: []int32{297109817}},
	int32(TLConstructor_CRC32_documentAttributeSticker):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeSticker() }, layer: 85, classIdList: []int32{1662637586}},
	int32(TLConstructor_CRC32_documentAttributeVideo):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeVideo() }, layer: 85, classIdList: []int32{250621158}},
	int32(TLConstructor_CRC32_documentAttributeAudio):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeAudio() }, layer: 85, classIdList: []int32{-1739392570}},
	int32(TLConstructor_CRC32_documentAttributeFilename):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeFilename() }, layer: 85, classIdList: []int32{358154344}},
	int32(TLConstructor_CRC32_documentAttributeHasStickers):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentAttributeHasStickers() }, layer: 85, classIdList: []int32{-1744710921}},
	int32(TLConstructor_CRC32_messages_stickersNotModified):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesStickersNotModified() }, layer: 85, classIdList: []int32{-244016606}},
	int32(TLConstructor_CRC32_messages_stickers):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesStickers() }, layer: 85, classIdList: []int32{-463889475}},
	int32(TLConstructor_CRC32_stickerPack):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickerPack() }, layer: 85, classIdList: []int32{313694676}},
	int32(TLConstructor_CRC32_messages_allStickersNotModified):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesAllStickersNotModified() }, layer: 85, classIdList: []int32{-395967805}},
	int32(TLConstructor_CRC32_messages_allStickers):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesAllStickers() }, layer: 85, classIdList: []int32{-302170017}},
	int32(TLConstructor_CRC32_messages_affectedMessages):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesAffectedMessages() }, layer: 85, classIdList: []int32{-2066640507}},
	int32(TLConstructor_CRC32_contactLinkUnknown):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactLinkUnknown() }, layer: 85, classIdList: []int32{1599050311}},
	int32(TLConstructor_CRC32_contactLinkNone):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactLinkNone() }, layer: 85, classIdList: []int32{-17968211}},
	int32(TLConstructor_CRC32_contactLinkHasPhone):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactLinkHasPhone() }, layer: 85, classIdList: []int32{646922073}},
	int32(TLConstructor_CRC32_contactLinkContact):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactLinkContact() }, layer: 85, classIdList: []int32{-721239344}},
	int32(TLConstructor_CRC32_webPageEmpty):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebPageEmpty() }, layer: 85, classIdList: []int32{-350980120}},
	int32(TLConstructor_CRC32_webPagePending):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebPagePending() }, layer: 85, classIdList: []int32{-981018084}},
	int32(TLConstructor_CRC32_webPage):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebPage() }, layer: 85, classIdList: []int32{1594340540}},
	int32(TLConstructor_CRC32_webPageNotModified):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebPageNotModified() }, layer: 85, classIdList: []int32{-2054908813}},
	int32(TLConstructor_CRC32_authorization):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthorization() }, layer: 85, classIdList: []int32{2079516406}},
	int32(TLConstructor_CRC32_account_authorizations):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountAuthorizations() }, layer: 85, classIdList: []int32{307276766}},
	int32(TLConstructor_CRC32_account_password):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountPassword() }, layer: 85, classIdList: []int32{-1390001672}},
	int32(TLConstructor_CRC32_account_passwordSettings):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountPasswordSettings() }, layer: 85, classIdList: []int32{-1705233435}},
	int32(TLConstructor_CRC32_account_passwordInputSettings):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountPasswordInputSettings() }, layer: 85, classIdList: []int32{-1036572727}},
	int32(TLConstructor_CRC32_auth_passwordRecovery):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthPasswordRecovery() }, layer: 85, classIdList: []int32{326715557}},
	int32(TLConstructor_CRC32_receivedNotifyMessage):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReceivedNotifyMessage() }, layer: 85, classIdList: []int32{-1551583367}},
	int32(TLConstructor_CRC32_chatInviteEmpty):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatInviteEmpty() }, layer: 85, classIdList: []int32{1776236393}},
	int32(TLConstructor_CRC32_chatInviteExported):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatInviteExported() }, layer: 85, classIdList: []int32{-64092740}},
	int32(TLConstructor_CRC32_chatInviteAlready):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatInviteAlready() }, layer: 85, classIdList: []int32{1516793212}},
	int32(TLConstructor_CRC32_chatInvite):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChatInvite() }, layer: 85, classIdList: []int32{-613092008}},
	int32(TLConstructor_CRC32_inputStickerSetEmpty):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputStickerSetEmpty() }, layer: 85, classIdList: []int32{-4838507}},
	int32(TLConstructor_CRC32_inputStickerSetID):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputStickerSetID() }, layer: 85, classIdList: []int32{-1645763991}},
	int32(TLConstructor_CRC32_inputStickerSetShortName):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputStickerSetShortName() }, layer: 85, classIdList: []int32{-2044933984}},
	int32(TLConstructor_CRC32_stickerSet):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickerSet() }, layer: 85, classIdList: []int32{1434820921}},
	int32(TLConstructor_CRC32_messages_stickerSet):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesStickerSet() }, layer: 85, classIdList: []int32{-1240849242}},
	int32(TLConstructor_CRC32_botCommand):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotCommand() }, layer: 85, classIdList: []int32{-1032140601}},
	int32(TLConstructor_CRC32_botInfo):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInfo() }, layer: 85, classIdList: []int32{-1729618630}},
	int32(TLConstructor_CRC32_keyboardButton):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButton() }, layer: 85, classIdList: []int32{-1560655744}},
	int32(TLConstructor_CRC32_keyboardButtonUrl):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonUrl() }, layer: 85, classIdList: []int32{629866245}},
	int32(TLConstructor_CRC32_keyboardButtonCallback):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonCallback() }, layer: 85, classIdList: []int32{1748655686}},
	int32(TLConstructor_CRC32_keyboardButtonRequestPhone):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonRequestPhone() }, layer: 85, classIdList: []int32{-1318425559}},
	int32(TLConstructor_CRC32_keyboardButtonRequestGeoLocation):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonRequestGeoLocation() }, layer: 85, classIdList: []int32{-59151553}},
	int32(TLConstructor_CRC32_keyboardButtonSwitchInline):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonSwitchInline() }, layer: 85, classIdList: []int32{90744648}},
	int32(TLConstructor_CRC32_keyboardButtonGame):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonGame() }, layer: 85, classIdList: []int32{1358175439}},
	int32(TLConstructor_CRC32_keyboardButtonBuy):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonBuy() }, layer: 85, classIdList: []int32{-1344716869}},
	int32(TLConstructor_CRC32_keyboardButtonRow):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLKeyboardButtonRow() }, layer: 85, classIdList: []int32{2002815875}},
	int32(TLConstructor_CRC32_replyKeyboardHide):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReplyKeyboardHide() }, layer: 85, classIdList: []int32{-1606526075}},
	int32(TLConstructor_CRC32_replyKeyboardForceReply):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReplyKeyboardForceReply() }, layer: 85, classIdList: []int32{-200242528}},
	int32(TLConstructor_CRC32_replyKeyboardMarkup):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReplyKeyboardMarkup() }, layer: 85, classIdList: []int32{889353612}},
	int32(TLConstructor_CRC32_replyInlineMarkup):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLReplyInlineMarkup() }, layer: 85, classIdList: []int32{1218642516}},
	int32(TLConstructor_CRC32_messageEntityUnknown):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityUnknown() }, layer: 85, classIdList: []int32{-1148011883}},
	int32(TLConstructor_CRC32_messageEntityMention):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityMention() }, layer: 85, classIdList: []int32{-100378723}},
	int32(TLConstructor_CRC32_messageEntityHashtag):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityHashtag() }, layer: 85, classIdList: []int32{1868782349}},
	int32(TLConstructor_CRC32_messageEntityBotCommand):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityBotCommand() }, layer: 85, classIdList: []int32{1827637959}},
	int32(TLConstructor_CRC32_messageEntityUrl):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityUrl() }, layer: 85, classIdList: []int32{1859134776}},
	int32(TLConstructor_CRC32_messageEntityEmail):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityEmail() }, layer: 85, classIdList: []int32{1692693954}},
	int32(TLConstructor_CRC32_messageEntityBold):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityBold() }, layer: 85, classIdList: []int32{-1117713463}},
	int32(TLConstructor_CRC32_messageEntityItalic):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityItalic() }, layer: 85, classIdList: []int32{-2106619040}},
	int32(TLConstructor_CRC32_messageEntityCode):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityCode() }, layer: 85, classIdList: []int32{681706865}},
	int32(TLConstructor_CRC32_messageEntityPre):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityPre() }, layer: 85, classIdList: []int32{1938967520}},
	int32(TLConstructor_CRC32_messageEntityTextUrl):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityTextUrl() }, layer: 85, classIdList: []int32{1990644519}},
	int32(TLConstructor_CRC32_messageEntityMentionName):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityMentionName() }, layer: 85, classIdList: []int32{892193368}},
	int32(TLConstructor_CRC32_inputMessageEntityMentionName):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessageEntityMentionName() }, layer: 85, classIdList: []int32{546203849}},
	int32(TLConstructor_CRC32_messageEntityPhone):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityPhone() }, layer: 85, classIdList: []int32{-1687559349}},
	int32(TLConstructor_CRC32_messageEntityCashtag):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageEntityCashtag() }, layer: 85, classIdList: []int32{1280209983}},
	int32(TLConstructor_CRC32_inputChannelEmpty):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputChannelEmpty() }, layer: 85, classIdList: []int32{-292807034}},
	int32(TLConstructor_CRC32_inputChannel):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputChannel() }, layer: 85, classIdList: []int32{-1343524562}},
	int32(TLConstructor_CRC32_contacts_resolvedPeer):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsResolvedPeer() }, layer: 85, classIdList: []int32{2131196633}},
	int32(TLConstructor_CRC32_messageRange):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageRange() }, layer: 85, classIdList: []int32{182649427}},
	int32(TLConstructor_CRC32_updates_channelDifferenceEmpty):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesChannelDifferenceEmpty() }, layer: 85, classIdList: []int32{1041346555}},
	int32(TLConstructor_CRC32_updates_channelDifferenceTooLong):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesChannelDifferenceTooLong() }, layer: 85, classIdList: []int32{1788705589}},
	int32(TLConstructor_CRC32_updates_channelDifference):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesChannelDifference() }, layer: 85, classIdList: []int32{543450958}},
	int32(TLConstructor_CRC32_channelMessagesFilterEmpty):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelMessagesFilterEmpty() }, layer: 85, classIdList: []int32{-1798033689}},
	int32(TLConstructor_CRC32_channelMessagesFilter):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelMessagesFilter() }, layer: 85, classIdList: []int32{-847783593}},
	int32(TLConstructor_CRC32_channelParticipant):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipant() }, layer: 85, classIdList: []int32{367766557}},
	int32(TLConstructor_CRC32_channelParticipantSelf):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantSelf() }, layer: 85, classIdList: []int32{-1557620115}},
	int32(TLConstructor_CRC32_channelParticipantCreator):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantCreator() }, layer: 85, classIdList: []int32{-471670279}},
	int32(TLConstructor_CRC32_channelParticipantAdmin):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantAdmin() }, layer: 85, classIdList: []int32{-1473271656}},
	int32(TLConstructor_CRC32_channelParticipantBanned):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantBanned() }, layer: 85, classIdList: []int32{573315206}},
	int32(TLConstructor_CRC32_channelParticipantsRecent):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantsRecent() }, layer: 85, classIdList: []int32{-566281095}},
	int32(TLConstructor_CRC32_channelParticipantsAdmins):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantsAdmins() }, layer: 85, classIdList: []int32{-1268741783}},
	int32(TLConstructor_CRC32_channelParticipantsKicked):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantsKicked() }, layer: 85, classIdList: []int32{-1548400251}},
	int32(TLConstructor_CRC32_channelParticipantsBots):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantsBots() }, layer: 85, classIdList: []int32{-1328445861}},
	int32(TLConstructor_CRC32_channelParticipantsBanned):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantsBanned() }, layer: 85, classIdList: []int32{338142689}},
	int32(TLConstructor_CRC32_channelParticipantsSearch):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelParticipantsSearch() }, layer: 85, classIdList: []int32{106343499}},
	int32(TLConstructor_CRC32_channels_channelParticipants):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsChannelParticipants() }, layer: 85, classIdList: []int32{-177282392}},
	int32(TLConstructor_CRC32_channels_channelParticipantsNotModified):          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsChannelParticipantsNotModified() }, layer: 85, classIdList: []int32{-266911767}},
	int32(TLConstructor_CRC32_channels_channelParticipant):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsChannelParticipant() }, layer: 85, classIdList: []int32{-791039645}},
	int32(TLConstructor_CRC32_help_termsOfService):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpTermsOfService() }, layer: 85, classIdList: []int32{2013922064}},
	int32(TLConstructor_CRC32_foundGif):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFoundGif() }, layer: 85, classIdList: []int32{372165663}},
	int32(TLConstructor_CRC32_foundGifCached):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFoundGifCached() }, layer: 85, classIdList: []int32{-1670052855}},
	int32(TLConstructor_CRC32_messages_foundGifs):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFoundGifs() }, layer: 85, classIdList: []int32{1158290442}},
	int32(TLConstructor_CRC32_messages_savedGifsNotModified):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSavedGifsNotModified() }, layer: 85, classIdList: []int32{-402498398}},
	int32(TLConstructor_CRC32_messages_savedGifs):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSavedGifs() }, layer: 85, classIdList: []int32{772213157}},
	int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageMediaAuto() }, layer: 85, classIdList: []int32{864077702}},
	int32(TLConstructor_CRC32_inputBotInlineMessageText):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageText() }, layer: 85, classIdList: []int32{1036876423}},
	int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageMediaGeo() }, layer: 85, classIdList: []int32{-1045340827}},
	int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageMediaVenue() }, layer: 85, classIdList: []int32{1098628881}},
	int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageMediaContact() }, layer: 85, classIdList: []int32{-1494368259}},
	int32(TLConstructor_CRC32_inputBotInlineMessageGame):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageGame() }, layer: 85, classIdList: []int32{1262639204}},
	int32(TLConstructor_CRC32_inputBotInlineResult):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineResult() }, layer: 85, classIdList: []int32{-2000710887}},
	int32(TLConstructor_CRC32_inputBotInlineResultPhoto):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineResultPhoto() }, layer: 85, classIdList: []int32{-1462213465}},
	int32(TLConstructor_CRC32_inputBotInlineResultDocument):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineResultDocument() }, layer: 85, classIdList: []int32{-459324}},
	int32(TLConstructor_CRC32_inputBotInlineResultGame):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineResultGame() }, layer: 85, classIdList: []int32{1336154098}},
	int32(TLConstructor_CRC32_botInlineMessageMediaAuto):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineMessageMediaAuto() }, layer: 85, classIdList: []int32{1984755728}},
	int32(TLConstructor_CRC32_botInlineMessageText):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineMessageText() }, layer: 85, classIdList: []int32{-1937807902}},
	int32(TLConstructor_CRC32_botInlineMessageMediaGeo):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineMessageMediaGeo() }, layer: 85, classIdList: []int32{-1222451611}},
	int32(TLConstructor_CRC32_botInlineMessageMediaVenue):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineMessageMediaVenue() }, layer: 85, classIdList: []int32{-1970903652}},
	int32(TLConstructor_CRC32_botInlineMessageMediaContact):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineMessageMediaContact() }, layer: 85, classIdList: []int32{416402882}},
	int32(TLConstructor_CRC32_botInlineResult):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineResult() }, layer: 85, classIdList: []int32{295067450}},
	int32(TLConstructor_CRC32_botInlineMediaResult):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotInlineMediaResult() }, layer: 85, classIdList: []int32{400266251}},
	int32(TLConstructor_CRC32_messages_botResults):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesBotResults() }, layer: 85, classIdList: []int32{-1803769784}},
	int32(TLConstructor_CRC32_exportedMessageLink):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLExportedMessageLink() }, layer: 85, classIdList: []int32{1571494644}},
	int32(TLConstructor_CRC32_messageFwdHeader):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessageFwdHeader() }, layer: 85, classIdList: []int32{1436466797}},
	int32(TLConstructor_CRC32_auth_codeTypeSms):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthCodeTypeSms() }, layer: 85, classIdList: []int32{1923290508}},
	int32(TLConstructor_CRC32_auth_codeTypeCall):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthCodeTypeCall() }, layer: 85, classIdList: []int32{1948046307}},
	int32(TLConstructor_CRC32_auth_codeTypeFlashCall):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthCodeTypeFlashCall() }, layer: 85, classIdList: []int32{577556219}},
	int32(TLConstructor_CRC32_auth_sentCodeTypeApp):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSentCodeTypeApp() }, layer: 85, classIdList: []int32{1035688326}},
	int32(TLConstructor_CRC32_auth_sentCodeTypeSms):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSentCodeTypeSms() }, layer: 85, classIdList: []int32{-1073693790}},
	int32(TLConstructor_CRC32_auth_sentCodeTypeCall):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSentCodeTypeCall() }, layer: 85, classIdList: []int32{1398007207}},
	int32(TLConstructor_CRC32_auth_sentCodeTypeFlashCall):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSentCodeTypeFlashCall() }, layer: 85, classIdList: []int32{-1425815847}},
	int32(TLConstructor_CRC32_messages_botCallbackAnswer):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesBotCallbackAnswer() }, layer: 85, classIdList: []int32{911761060}},
	int32(TLConstructor_CRC32_messages_messageEditData):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesMessageEditData() }, layer: 85, classIdList: []int32{649453030}},
	int32(TLConstructor_CRC32_inputBotInlineMessageID):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputBotInlineMessageID() }, layer: 85, classIdList: []int32{-1995686519}},
	int32(TLConstructor_CRC32_inlineBotSwitchPM):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInlineBotSwitchPM() }, layer: 85, classIdList: []int32{1008755359}},
	int32(TLConstructor_CRC32_messages_peerDialogs):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesPeerDialogs() }, layer: 85, classIdList: []int32{863093588}},
	int32(TLConstructor_CRC32_topPeer):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeer() }, layer: 85, classIdList: []int32{-305282981}},
	int32(TLConstructor_CRC32_topPeerCategoryBotsPM):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryBotsPM() }, layer: 85, classIdList: []int32{-1419371685}},
	int32(TLConstructor_CRC32_topPeerCategoryBotsInline):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryBotsInline() }, layer: 85, classIdList: []int32{344356834}},
	int32(TLConstructor_CRC32_topPeerCategoryCorrespondents):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryCorrespondents() }, layer: 85, classIdList: []int32{104314861}},
	int32(TLConstructor_CRC32_topPeerCategoryGroups):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryGroups() }, layer: 85, classIdList: []int32{-1122524854}},
	int32(TLConstructor_CRC32_topPeerCategoryChannels):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryChannels() }, layer: 85, classIdList: []int32{371037736}},
	int32(TLConstructor_CRC32_topPeerCategoryPhoneCalls):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryPhoneCalls() }, layer: 85, classIdList: []int32{511092620}},
	int32(TLConstructor_CRC32_topPeerCategoryPeers):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTopPeerCategoryPeers() }, layer: 85, classIdList: []int32{-75283823}},
	int32(TLConstructor_CRC32_contacts_topPeersNotModified):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsTopPeersNotModified() }, layer: 85, classIdList: []int32{-567906571}},
	int32(TLConstructor_CRC32_contacts_topPeers):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsTopPeers() }, layer: 85, classIdList: []int32{1891070632}},
	int32(TLConstructor_CRC32_contacts_topPeersDisabled):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsTopPeersDisabled() }, layer: 85, classIdList: []int32{-1255369827}},
	int32(TLConstructor_CRC32_draftMessageEmpty):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDraftMessageEmpty() }, layer: 85, classIdList: []int32{453805082}},
	int32(TLConstructor_CRC32_draftMessage):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDraftMessage() }, layer: 85, classIdList: []int32{-40996577}},
	int32(TLConstructor_CRC32_messages_featuredStickersNotModified):             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFeaturedStickersNotModified() }, layer: 85, classIdList: []int32{82699215}},
	int32(TLConstructor_CRC32_messages_featuredStickers):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFeaturedStickers() }, layer: 85, classIdList: []int32{-123893531}},
	int32(TLConstructor_CRC32_messages_recentStickersNotModified):               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesRecentStickersNotModified() }, layer: 85, classIdList: []int32{186120336}},
	int32(TLConstructor_CRC32_messages_recentStickers):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesRecentStickers() }, layer: 85, classIdList: []int32{586395571}},
	int32(TLConstructor_CRC32_messages_archivedStickers):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesArchivedStickers() }, layer: 85, classIdList: []int32{1338747336}},
	int32(TLConstructor_CRC32_messages_stickerSetInstallResultSuccess):          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesStickerSetInstallResultSuccess() }, layer: 85, classIdList: []int32{946083368}},
	int32(TLConstructor_CRC32_messages_stickerSetInstallResultArchive):          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesStickerSetInstallResultArchive() }, layer: 85, classIdList: []int32{904138920}},
	int32(TLConstructor_CRC32_stickerSetCovered):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickerSetCovered() }, layer: 85, classIdList: []int32{1678812626}},
	int32(TLConstructor_CRC32_stickerSetMultiCovered):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickerSetMultiCovered() }, layer: 85, classIdList: []int32{872932635}},
	int32(TLConstructor_CRC32_maskCoords):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMaskCoords() }, layer: 85, classIdList: []int32{-1361650766}},
	int32(TLConstructor_CRC32_inputStickeredMediaPhoto):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputStickeredMediaPhoto() }, layer: 85, classIdList: []int32{1251549527}},
	int32(TLConstructor_CRC32_inputStickeredMediaDocument):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputStickeredMediaDocument() }, layer: 85, classIdList: []int32{70813275}},
	int32(TLConstructor_CRC32_game):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLGame() }, layer: 85, classIdList: []int32{-1107729093}},
	int32(TLConstructor_CRC32_inputGameID):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputGameID() }, layer: 85, classIdList: []int32{53231223}},
	int32(TLConstructor_CRC32_inputGameShortName):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputGameShortName() }, layer: 85, classIdList: []int32{-1020139510}},
	int32(TLConstructor_CRC32_highScore):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHighScore() }, layer: 85, classIdList: []int32{1493171408}},
	int32(TLConstructor_CRC32_messages_highScores):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesHighScores() }, layer: 85, classIdList: []int32{-1707344487}},
	int32(TLConstructor_CRC32_textEmpty):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextEmpty() }, layer: 85, classIdList: []int32{-599948721}},
	int32(TLConstructor_CRC32_textPlain):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextPlain() }, layer: 85, classIdList: []int32{1950782688}},
	int32(TLConstructor_CRC32_textBold):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextBold() }, layer: 85, classIdList: []int32{1730456516}},
	int32(TLConstructor_CRC32_textItalic):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextItalic() }, layer: 85, classIdList: []int32{-653089380}},
	int32(TLConstructor_CRC32_textUnderline):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextUnderline() }, layer: 85, classIdList: []int32{-1054465340}},
	int32(TLConstructor_CRC32_textStrike):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextStrike() }, layer: 85, classIdList: []int32{-1678197867}},
	int32(TLConstructor_CRC32_textFixed):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextFixed() }, layer: 85, classIdList: []int32{1816074681}},
	int32(TLConstructor_CRC32_textUrl):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextUrl() }, layer: 85, classIdList: []int32{1009288385}},
	int32(TLConstructor_CRC32_textEmail):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextEmail() }, layer: 85, classIdList: []int32{-564523562}},
	int32(TLConstructor_CRC32_textConcat):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLTextConcat() }, layer: 85, classIdList: []int32{2120376535}},
	int32(TLConstructor_CRC32_pageBlockUnsupported):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockUnsupported() }, layer: 85, classIdList: []int32{324435594}},
	int32(TLConstructor_CRC32_pageBlockTitle):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockTitle() }, layer: 85, classIdList: []int32{1890305021}},
	int32(TLConstructor_CRC32_pageBlockSubtitle):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockSubtitle() }, layer: 85, classIdList: []int32{-1879401953}},
	int32(TLConstructor_CRC32_pageBlockAuthorDate):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockAuthorDate() }, layer: 85, classIdList: []int32{-1162877472}},
	int32(TLConstructor_CRC32_pageBlockHeader):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockHeader() }, layer: 85, classIdList: []int32{-1076861716}},
	int32(TLConstructor_CRC32_pageBlockSubheader):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockSubheader() }, layer: 85, classIdList: []int32{-248793375}},
	int32(TLConstructor_CRC32_pageBlockParagraph):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockParagraph() }, layer: 85, classIdList: []int32{1182402406}},
	int32(TLConstructor_CRC32_pageBlockPreformatted):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockPreformatted() }, layer: 85, classIdList: []int32{-1066346178}},
	int32(TLConstructor_CRC32_pageBlockFooter):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockFooter() }, layer: 85, classIdList: []int32{1216809369}},
	int32(TLConstructor_CRC32_pageBlockDivider):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockDivider() }, layer: 85, classIdList: []int32{-618614392}},
	int32(TLConstructor_CRC32_pageBlockAnchor):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockAnchor() }, layer: 85, classIdList: []int32{-837994576}},
	int32(TLConstructor_CRC32_pageBlockList):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockList() }, layer: 85, classIdList: []int32{978896884}},
	int32(TLConstructor_CRC32_pageBlockBlockquote):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockBlockquote() }, layer: 85, classIdList: []int32{641563686}},
	int32(TLConstructor_CRC32_pageBlockPullquote):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockPullquote() }, layer: 85, classIdList: []int32{1329878739}},
	int32(TLConstructor_CRC32_pageBlockPhoto):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockPhoto() }, layer: 85, classIdList: []int32{-372860542}},
	int32(TLConstructor_CRC32_pageBlockVideo):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockVideo() }, layer: 85, classIdList: []int32{-640214938}},
	int32(TLConstructor_CRC32_pageBlockCover):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockCover() }, layer: 85, classIdList: []int32{972174080}},
	int32(TLConstructor_CRC32_pageBlockEmbed):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockEmbed() }, layer: 85, classIdList: []int32{-840826671}},
	int32(TLConstructor_CRC32_pageBlockEmbedPost):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockEmbedPost() }, layer: 85, classIdList: []int32{690781161}},
	int32(TLConstructor_CRC32_pageBlockCollage):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockCollage() }, layer: 85, classIdList: []int32{145955919}},
	int32(TLConstructor_CRC32_pageBlockSlideshow):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockSlideshow() }, layer: 85, classIdList: []int32{319588707}},
	int32(TLConstructor_CRC32_pageBlockChannel):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockChannel() }, layer: 85, classIdList: []int32{-283684427}},
	int32(TLConstructor_CRC32_pageBlockAudio):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageBlockAudio() }, layer: 85, classIdList: []int32{834148991}},
	int32(TLConstructor_CRC32_pagePart):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPagePart() }, layer: 85, classIdList: []int32{-1908433218}},
	int32(TLConstructor_CRC32_pageFull):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPageFull() }, layer: 85, classIdList: []int32{1433323434}},
	int32(TLConstructor_CRC32_phoneCallDiscardReasonMissed):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallDiscardReasonMissed() }, layer: 85, classIdList: []int32{-2048646399}},
	int32(TLConstructor_CRC32_phoneCallDiscardReasonDisconnect):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallDiscardReasonDisconnect() }, layer: 85, classIdList: []int32{-527056480}},
	int32(TLConstructor_CRC32_phoneCallDiscardReasonHangup):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallDiscardReasonHangup() }, layer: 85, classIdList: []int32{1471006352}},
	int32(TLConstructor_CRC32_phoneCallDiscardReasonBusy):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallDiscardReasonBusy() }, layer: 85, classIdList: []int32{-84416311}},
	int32(TLConstructor_CRC32_dataJSON):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDataJSON() }, layer: 85, classIdList: []int32{2104790276}},
	int32(TLConstructor_CRC32_labeledPrice):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLabeledPrice() }, layer: 85, classIdList: []int32{-886477832}},
	int32(TLConstructor_CRC32_invoice):                                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvoice() }, layer: 85, classIdList: []int32{-1022713000}},
	int32(TLConstructor_CRC32_paymentCharge):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentCharge() }, layer: 85, classIdList: []int32{-368917890}},
	int32(TLConstructor_CRC32_postAddress):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPostAddress() }, layer: 85, classIdList: []int32{512535275}},
	int32(TLConstructor_CRC32_paymentRequestedInfo):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentRequestedInfo() }, layer: 85, classIdList: []int32{-1868808300}},
	int32(TLConstructor_CRC32_paymentSavedCredentialsCard):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentSavedCredentialsCard() }, layer: 85, classIdList: []int32{-842892769}},
	int32(TLConstructor_CRC32_webDocument):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebDocument() }, layer: 85, classIdList: []int32{475467473}},
	int32(TLConstructor_CRC32_webDocumentNoProxy):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebDocumentNoProxy() }, layer: 85, classIdList: []int32{-104284986}},
	int32(TLConstructor_CRC32_inputWebDocument):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputWebDocument() }, layer: 85, classIdList: []int32{-1678949555}},
	int32(TLConstructor_CRC32_inputWebFileLocation):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputWebFileLocation() }, layer: 85, classIdList: []int32{-1036396922}},
	int32(TLConstructor_CRC32_inputWebFileGeoPointLocation):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputWebFileGeoPointLocation() }, layer: 85, classIdList: []int32{-1625153079}},
	int32(TLConstructor_CRC32_upload_webFile):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadWebFile() }, layer: 85, classIdList: []int32{568808380}},
	int32(TLConstructor_CRC32_payments_paymentForm):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsPaymentForm() }, layer: 85, classIdList: []int32{1062645411}},
	int32(TLConstructor_CRC32_payments_validatedRequestedInfo):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsValidatedRequestedInfo() }, layer: 85, classIdList: []int32{-784000893}},
	int32(TLConstructor_CRC32_payments_paymentResult):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsPaymentResult() }, layer: 85, classIdList: []int32{1314881805}},
	int32(TLConstructor_CRC32_payments_paymentVerficationNeeded):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsPaymentVerficationNeeded() }, layer: 85, classIdList: []int32{1800845601}},
	int32(TLConstructor_CRC32_payments_paymentReceipt):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsPaymentReceipt() }, layer: 85, classIdList: []int32{1342771681}},
	int32(TLConstructor_CRC32_payments_savedInfo):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsSavedInfo() }, layer: 85, classIdList: []int32{-74456004}},
	int32(TLConstructor_CRC32_inputPaymentCredentialsSaved):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPaymentCredentialsSaved() }, layer: 85, classIdList: []int32{-1056001329}},
	int32(TLConstructor_CRC32_inputPaymentCredentials):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPaymentCredentials() }, layer: 85, classIdList: []int32{873977640}},
	int32(TLConstructor_CRC32_inputPaymentCredentialsApplePay):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPaymentCredentialsApplePay() }, layer: 85, classIdList: []int32{178373535}},
	int32(TLConstructor_CRC32_inputPaymentCredentialsAndroidPay):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPaymentCredentialsAndroidPay() }, layer: 85, classIdList: []int32{-905587442}},
	int32(TLConstructor_CRC32_account_tmpPassword):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountTmpPassword() }, layer: 85, classIdList: []int32{-614138572}},
	int32(TLConstructor_CRC32_shippingOption):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLShippingOption() }, layer: 85, classIdList: []int32{-1239335713}},
	int32(TLConstructor_CRC32_inputStickerSetItem):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputStickerSetItem() }, layer: 85, classIdList: []int32{-6249322}},
	int32(TLConstructor_CRC32_inputPhoneCall):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPhoneCall() }, layer: 85, classIdList: []int32{506920429}},
	int32(TLConstructor_CRC32_phoneCallEmpty):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallEmpty() }, layer: 85, classIdList: []int32{1399245077}},
	int32(TLConstructor_CRC32_phoneCallWaiting):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallWaiting() }, layer: 85, classIdList: []int32{462375633}},
	int32(TLConstructor_CRC32_phoneCallRequested):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallRequested() }, layer: 85, classIdList: []int32{-2089411356}},
	int32(TLConstructor_CRC32_phoneCallAccepted):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallAccepted() }, layer: 85, classIdList: []int32{1828732223}},
	int32(TLConstructor_CRC32_phoneCall):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCall() }, layer: 85, classIdList: []int32{-1660057}},
	int32(TLConstructor_CRC32_phoneCallDiscarded):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallDiscarded() }, layer: 85, classIdList: []int32{1355435489}},
	int32(TLConstructor_CRC32_phoneConnection):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneConnection() }, layer: 85, classIdList: []int32{-1655957568}},
	int32(TLConstructor_CRC32_phoneCallProtocol):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneCallProtocol() }, layer: 85, classIdList: []int32{-1564789301}},
	int32(TLConstructor_CRC32_phone_phoneCall):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhonePhoneCall() }, layer: 85, classIdList: []int32{-326966976}},
	int32(TLConstructor_CRC32_upload_cdnFileReuploadNeeded):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadCdnFileReuploadNeeded() }, layer: 85, classIdList: []int32{-290921362}},
	int32(TLConstructor_CRC32_upload_cdnFile):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadCdnFile() }, layer: 85, classIdList: []int32{-1449145777}},
	int32(TLConstructor_CRC32_cdnPublicKey):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLCdnPublicKey() }, layer: 85, classIdList: []int32{-914167110}},
	int32(TLConstructor_CRC32_cdnConfig):                                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLCdnConfig() }, layer: 85, classIdList: []int32{1462101002}},
	int32(TLConstructor_CRC32_langPackString):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangPackString() }, layer: 85, classIdList: []int32{-892239370}},
	int32(TLConstructor_CRC32_langPackStringPluralized):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangPackStringPluralized() }, layer: 85, classIdList: []int32{1816636575}},
	int32(TLConstructor_CRC32_langPackStringDeleted):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangPackStringDeleted() }, layer: 85, classIdList: []int32{695856818}},
	int32(TLConstructor_CRC32_langPackDifference):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangPackDifference() }, layer: 85, classIdList: []int32{-209337866}},
	int32(TLConstructor_CRC32_langPackLanguage):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangPackLanguage() }, layer: 85, classIdList: []int32{292985073}},
	int32(TLConstructor_CRC32_channelAdminRights):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminRights() }, layer: 85, classIdList: []int32{1568467877}},
	int32(TLConstructor_CRC32_channelBannedRights):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelBannedRights() }, layer: 85, classIdList: []int32{1489977929}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionChangeTitle):            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionChangeTitle() }, layer: 85, classIdList: []int32{-421545947}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionChangeAbout):            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionChangeAbout() }, layer: 85, classIdList: []int32{1427671598}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionChangeUsername):         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionChangeUsername() }, layer: 85, classIdList: []int32{1783299128}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto):            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionChangePhoto() }, layer: 85, classIdList: []int32{-1204857405}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionToggleInvites):          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionToggleInvites() }, layer: 85, classIdList: []int32{460916654}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures):       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionToggleSignatures() }, layer: 85, classIdList: []int32{648939889}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned):           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionUpdatePinned() }, layer: 85, classIdList: []int32{-370660328}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionEditMessage):            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionEditMessage() }, layer: 85, classIdList: []int32{1889215493}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage):          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionDeleteMessage() }, layer: 85, classIdList: []int32{1121994683}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin):        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionParticipantJoin() }, layer: 85, classIdList: []int32{405815507}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave):       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionParticipantLeave() }, layer: 85, classIdList: []int32{-124291086}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite):      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionParticipantInvite() }, layer: 85, classIdList: []int32{-484690728}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan):   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionParticipantToggleBan() }, layer: 85, classIdList: []int32{-422036098}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin): TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionParticipantToggleAdmin() }, layer: 85, classIdList: []int32{-714643696}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet):       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionChangeStickerSet() }, layer: 85, classIdList: []int32{-1312568665}},
	int32(TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden): TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventActionTogglePreHistoryHidden() }, layer: 85, classIdList: []int32{1599903217}},
	int32(TLConstructor_CRC32_channelAdminLogEvent):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEvent() }, layer: 85, classIdList: []int32{995769920}},
	int32(TLConstructor_CRC32_channels_adminLogResults):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsAdminLogResults() }, layer: 85, classIdList: []int32{-309659827}},
	int32(TLConstructor_CRC32_channelAdminLogEventsFilter):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelAdminLogEventsFilter() }, layer: 85, classIdList: []int32{-368018716}},
	int32(TLConstructor_CRC32_popularContact):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPopularContact() }, layer: 85, classIdList: []int32{1558266229}},
	int32(TLConstructor_CRC32_messages_favedStickersNotModified):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFavedStickersNotModified() }, layer: 85, classIdList: []int32{-1634752813}},
	int32(TLConstructor_CRC32_messages_favedStickers):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFavedStickers() }, layer: 85, classIdList: []int32{-209768682}},
	int32(TLConstructor_CRC32_recentMeUrlUnknown):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRecentMeUrlUnknown() }, layer: 85, classIdList: []int32{1189204285}},
	int32(TLConstructor_CRC32_recentMeUrlUser):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRecentMeUrlUser() }, layer: 85, classIdList: []int32{-1917045962}},
	int32(TLConstructor_CRC32_recentMeUrlChat):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRecentMeUrlChat() }, layer: 85, classIdList: []int32{-1608834311}},
	int32(TLConstructor_CRC32_recentMeUrlChatInvite):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRecentMeUrlChatInvite() }, layer: 85, classIdList: []int32{-347535331}},
	int32(TLConstructor_CRC32_recentMeUrlStickerSet):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLRecentMeUrlStickerSet() }, layer: 85, classIdList: []int32{-1140172836}},
	int32(TLConstructor_CRC32_help_recentMeUrls):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpRecentMeUrls() }, layer: 85, classIdList: []int32{235081943}},
	int32(TLConstructor_CRC32_inputSingleMedia):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputSingleMedia() }, layer: 85, classIdList: []int32{482797855}},
	int32(TLConstructor_CRC32_webAuthorization):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLWebAuthorization() }, layer: 85, classIdList: []int32{-892779534}},
	int32(TLConstructor_CRC32_account_webAuthorizations):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountWebAuthorizations() }, layer: 85, classIdList: []int32{-313079300}},
	int32(TLConstructor_CRC32_inputMessageID):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessageID() }, layer: 85, classIdList: []int32{-1502174430}},
	int32(TLConstructor_CRC32_inputMessageReplyTo):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessageReplyTo() }, layer: 85, classIdList: []int32{-1160215659}},
	int32(TLConstructor_CRC32_inputMessagePinned):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputMessagePinned() }, layer: 85, classIdList: []int32{-2037963464}},
	int32(TLConstructor_CRC32_inputDialogPeer):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDialogPeer() }, layer: 85, classIdList: []int32{-55902537}},
	int32(TLConstructor_CRC32_dialogPeer):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDialogPeer() }, layer: 85, classIdList: []int32{-445792507}},
	int32(TLConstructor_CRC32_messages_foundStickerSetsNotModified):             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFoundStickerSetsNotModified() }, layer: 85, classIdList: []int32{223655517}},
	int32(TLConstructor_CRC32_messages_foundStickerSets):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFoundStickerSets() }, layer: 85, classIdList: []int32{1359533640}},
	int32(TLConstructor_CRC32_fileHash):                                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFileHash() }, layer: 85, classIdList: []int32{1648543603}},
	int32(TLConstructor_CRC32_inputClientProxy):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputClientProxy() }, layer: 85, classIdList: []int32{1968737087}},
	int32(TLConstructor_CRC32_help_proxyDataEmpty):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpProxyDataEmpty() }, layer: 85, classIdList: []int32{-526508104}},
	int32(TLConstructor_CRC32_help_proxyDataPromo):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpProxyDataPromo() }, layer: 85, classIdList: []int32{737668643}},
	int32(TLConstructor_CRC32_help_termsOfServiceUpdateEmpty):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpTermsOfServiceUpdateEmpty() }, layer: 85, classIdList: []int32{-483352705}},
	int32(TLConstructor_CRC32_help_termsOfServiceUpdate):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpTermsOfServiceUpdate() }, layer: 85, classIdList: []int32{686618977}},
	int32(TLConstructor_CRC32_inputSecureFileUploaded):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputSecureFileUploaded() }, layer: 85, classIdList: []int32{859091184}},
	int32(TLConstructor_CRC32_inputSecureFile):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputSecureFile() }, layer: 85, classIdList: []int32{1399317950}},
	int32(TLConstructor_CRC32_secureFileEmpty):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureFileEmpty() }, layer: 85, classIdList: []int32{1679398724}},
	int32(TLConstructor_CRC32_secureFile):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureFile() }, layer: 85, classIdList: []int32{-534283678}},
	int32(TLConstructor_CRC32_secureData):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureData() }, layer: 85, classIdList: []int32{-1964327229}},
	int32(TLConstructor_CRC32_securePlainPhone):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecurePlainPhone() }, layer: 85, classIdList: []int32{2103482845}},
	int32(TLConstructor_CRC32_securePlainEmail):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecurePlainEmail() }, layer: 85, classIdList: []int32{569137759}},
	int32(TLConstructor_CRC32_secureValueTypePersonalDetails):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypePersonalDetails() }, layer: 85, classIdList: []int32{-1658158621}},
	int32(TLConstructor_CRC32_secureValueTypePassport):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypePassport() }, layer: 85, classIdList: []int32{1034709504}},
	int32(TLConstructor_CRC32_secureValueTypeDriverLicense):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeDriverLicense() }, layer: 85, classIdList: []int32{115615172}},
	int32(TLConstructor_CRC32_secureValueTypeIdentityCard):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeIdentityCard() }, layer: 85, classIdList: []int32{-1596951477}},
	int32(TLConstructor_CRC32_secureValueTypeInternalPassport):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeInternalPassport() }, layer: 85, classIdList: []int32{-1717268701}},
	int32(TLConstructor_CRC32_secureValueTypeAddress):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeAddress() }, layer: 85, classIdList: []int32{-874308058}},
	int32(TLConstructor_CRC32_secureValueTypeUtilityBill):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeUtilityBill() }, layer: 85, classIdList: []int32{-63531698}},
	int32(TLConstructor_CRC32_secureValueTypeBankStatement):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeBankStatement() }, layer: 85, classIdList: []int32{-1995211763}},
	int32(TLConstructor_CRC32_secureValueTypeRentalAgreement):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeRentalAgreement() }, layer: 85, classIdList: []int32{-1954007928}},
	int32(TLConstructor_CRC32_secureValueTypePassportRegistration):              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypePassportRegistration() }, layer: 85, classIdList: []int32{-1713143702}},
	int32(TLConstructor_CRC32_secureValueTypeTemporaryRegistration):             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeTemporaryRegistration() }, layer: 85, classIdList: []int32{-368907213}},
	int32(TLConstructor_CRC32_secureValueTypePhone):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypePhone() }, layer: 85, classIdList: []int32{-1289704741}},
	int32(TLConstructor_CRC32_secureValueTypeEmail):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueTypeEmail() }, layer: 85, classIdList: []int32{-1908627474}},
	int32(TLConstructor_CRC32_secureValue):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValue() }, layer: 85, classIdList: []int32{411017418}},
	int32(TLConstructor_CRC32_inputSecureValue):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputSecureValue() }, layer: 85, classIdList: []int32{-618540889}},
	int32(TLConstructor_CRC32_secureValueHash):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueHash() }, layer: 85, classIdList: []int32{-316748368}},
	int32(TLConstructor_CRC32_secureValueErrorData):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorData() }, layer: 85, classIdList: []int32{-391902247}},
	int32(TLConstructor_CRC32_secureValueErrorFrontSide):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorFrontSide() }, layer: 85, classIdList: []int32{12467706}},
	int32(TLConstructor_CRC32_secureValueErrorReverseSide):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorReverseSide() }, layer: 85, classIdList: []int32{-2037765467}},
	int32(TLConstructor_CRC32_secureValueErrorSelfie):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorSelfie() }, layer: 85, classIdList: []int32{-449327402}},
	int32(TLConstructor_CRC32_secureValueErrorFile):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorFile() }, layer: 85, classIdList: []int32{2054162547}},
	int32(TLConstructor_CRC32_secureValueErrorFiles):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorFiles() }, layer: 85, classIdList: []int32{1717706985}},
	int32(TLConstructor_CRC32_secureValueError):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueError() }, layer: 85, classIdList: []int32{-2036501105}},
	int32(TLConstructor_CRC32_secureValueErrorTranslationFile):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorTranslationFile() }, layer: 85, classIdList: []int32{-1592506512}},
	int32(TLConstructor_CRC32_secureValueErrorTranslationFiles):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureValueErrorTranslationFiles() }, layer: 85, classIdList: []int32{878931416}},
	int32(TLConstructor_CRC32_secureCredentialsEncrypted):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureCredentialsEncrypted() }, layer: 85, classIdList: []int32{871426631}},
	int32(TLConstructor_CRC32_account_authorizationForm):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountAuthorizationForm() }, layer: 85, classIdList: []int32{-1389486888}},
	int32(TLConstructor_CRC32_account_sentEmailCode):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSentEmailCode() }, layer: 85, classIdList: []int32{-2128640689}},
	int32(TLConstructor_CRC32_help_deepLinkInfoEmpty):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpDeepLinkInfoEmpty() }, layer: 85, classIdList: []int32{1722786150}},
	int32(TLConstructor_CRC32_help_deepLinkInfo):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpDeepLinkInfo() }, layer: 85, classIdList: []int32{1783556146}},
	int32(TLConstructor_CRC32_savedPhoneContact):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSavedPhoneContact() }, layer: 85, classIdList: []int32{289586518}},
	int32(TLConstructor_CRC32_account_takeout):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountTakeout() }, layer: 85, classIdList: []int32{1304052993}},
	int32(TLConstructor_CRC32_passwordKdfAlgoUnknown):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPasswordKdfAlgoUnknown() }, layer: 85, classIdList: []int32{-732254058}},
	int32(TLConstructor_CRC32_passwordKdfAlgoModPow):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPasswordKdfAlgoModPow() }, layer: 85, classIdList: []int32{982592842}},
	int32(TLConstructor_CRC32_securePasswordKdfAlgoUnknown):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecurePasswordKdfAlgoUnknown() }, layer: 85, classIdList: []int32{4883767}},
	int32(TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecurePasswordKdfAlgoPBKDF2() }, layer: 85, classIdList: []int32{-1141711456}},
	int32(TLConstructor_CRC32_securePasswordKdfAlgoSHA512):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecurePasswordKdfAlgoSHA512() }, layer: 85, classIdList: []int32{-2042159726}},
	int32(TLConstructor_CRC32_secureSecretSettings):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureSecretSettings() }, layer: 85, classIdList: []int32{354925740}},
	int32(TLConstructor_CRC32_inputCheckPasswordEmpty):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputCheckPasswordEmpty() }, layer: 85, classIdList: []int32{-1736378792}},
	int32(TLConstructor_CRC32_inputCheckPasswordSRP):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputCheckPasswordSRP() }, layer: 85, classIdList: []int32{-763367294}},
	int32(TLConstructor_CRC32_secureRequiredType):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureRequiredType() }, layer: 85, classIdList: []int32{-2103600678}},
	int32(TLConstructor_CRC32_secureRequiredTypeOneOf):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSecureRequiredTypeOneOf() }, layer: 85, classIdList: []int32{41187252}},
	int32(TLConstructor_CRC32_help_passportConfigNotModified):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpPassportConfigNotModified() }, layer: 85, classIdList: []int32{-1078332329}},
	int32(TLConstructor_CRC32_help_passportConfig):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpPassportConfig() }, layer: 85, classIdList: []int32{-1600596305}},
	int32(TLConstructor_CRC32_inputPhotoLayer86):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputPhotoLayer86() }, layer: 86, classIdList: []int32{-74070332, 1001634122}},
	int32(TLConstructor_CRC32_inputFileLocationLayer86):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputFileLocationLayer86() }, layer: 86, classIdList: []int32{342061462, -539317279}},
	int32(TLConstructor_CRC32_inputDocumentFileLocationLayer86):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDocumentFileLocationLayer86() }, layer: 86, classIdList: []int32{1313188841, 1125058340, 426148825}},
	int32(TLConstructor_CRC32_fileLocationLayer86):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLFileLocationLayer86() }, layer: 86, classIdList: []int32{1406570614, 152900075}},
	int32(TLConstructor_CRC32_photoLayer86):                                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotoLayer86() }, layer: 86, classIdList: []int32{-1836524247, -1673036328}},
	int32(TLConstructor_CRC32_inputDocumentLayer86):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInputDocumentLayer86() }, layer: 86, classIdList: []int32{410618194, 448771445}},
	int32(TLConstructor_CRC32_documentLayer86):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLDocumentLayer86() }, layer: 86, classIdList: []int32{-2027738169, 1498631756}},
	int32(TLConstructor_CRC32_langpack_getLanguagesLayer70):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangpackGetLanguagesLayer70() }, layer: 70, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getScheme):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetScheme() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_readHistoryLayer2):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReadHistoryLayer2() }, layer: 2, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getInviteTextLayer46):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetInviteTextLayer46() }, layer: 46, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getAppUpdateLayer46):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetAppUpdateLayer46() }, layer: 46, classIdList: []int32{}},
	int32(TLConstructor_CRC32_updates_getChannelDifferenceLayer46):              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesGetChannelDifferenceLayer46() }, layer: 46, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_sendCodeLayer51):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSendCodeLayer51() }, layer: 51, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getHistoryLayer51):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetHistoryLayer51() }, layer: 51, classIdList: []int32{}},
	int32(TLConstructor_CRC32_initConnectionLayer68):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInitConnectionLayer68() }, layer: 68, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_searchLayer68):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSearchLayer68() }, layer: 68, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_registerDeviceLayer71):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountRegisterDeviceLayer71() }, layer: 71, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_unregisterDeviceLayer71):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUnregisterDeviceLayer71() }, layer: 71, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getMessagesLayer71):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetMessagesLayer71() }, layer: 71, classIdList: []int32{}},
	int32(TLConstructor_CRC32_langpack_getLangPackLayer71):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangpackGetLangPackLayer71() }, layer: 71, classIdList: []int32{}},
	int32(TLConstructor_CRC32_invokeAfterMsg):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvokeAfterMsg() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_invokeAfterMsgs):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvokeAfterMsgs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_initConnection):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInitConnection() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_invokeWithLayer):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvokeWithLayer() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_invokeWithoutUpdates):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvokeWithoutUpdates() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_invokeWithMessagesRange):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvokeWithMessagesRange() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_invokeWithTakeout):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInvokeWithTakeout() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_sendCode):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSendCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_signUp):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSignUp() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_signIn):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthSignIn() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_logOut):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthLogOut() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_resetAuthorizations):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthResetAuthorizations() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_exportAuthorization):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthExportAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_importAuthorization):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthImportAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_bindTempAuthKey):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthBindTempAuthKey() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_importBotAuthorization):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthImportBotAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_checkPassword):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthCheckPassword() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_requestPasswordRecovery):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthRequestPasswordRecovery() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_recoverPassword):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthRecoverPassword() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_resendCode):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthResendCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_cancelCode):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthCancelCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_auth_dropTempAuthKeys):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthDropTempAuthKeys() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_registerDevice):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountRegisterDevice() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_unregisterDevice):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUnregisterDevice() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_updateNotifySettings):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUpdateNotifySettings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getNotifySettings):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetNotifySettings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_resetNotifySettings):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountResetNotifySettings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_updateProfile):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUpdateProfile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_updateStatus):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUpdateStatus() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getWallPapers):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetWallPapers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_reportPeer):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountReportPeer() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_checkUsername):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountCheckUsername() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_updateUsername):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUpdateUsername() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getPrivacy):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetPrivacy() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_setPrivacy):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSetPrivacy() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_deleteAccount):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountDeleteAccount() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getAccountTTL):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetAccountTTL() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_setAccountTTL):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSetAccountTTL() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_sendChangePhoneCode):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSendChangePhoneCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_changePhone):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountChangePhone() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_updateDeviceLocked):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUpdateDeviceLocked() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getAuthorizations):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetAuthorizations() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_resetAuthorization):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountResetAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getPassword):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetPassword() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getPasswordSettings):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetPasswordSettings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_updatePasswordSettings):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountUpdatePasswordSettings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_sendConfirmPhoneCode):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSendConfirmPhoneCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_confirmPhone):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountConfirmPhone() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getTmpPassword):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetTmpPassword() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getWebAuthorizations):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetWebAuthorizations() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_resetWebAuthorization):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountResetWebAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_resetWebAuthorizations):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountResetWebAuthorizations() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getAllSecureValues):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetAllSecureValues() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getSecureValue):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetSecureValue() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_saveSecureValue):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSaveSecureValue() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_deleteSecureValue):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountDeleteSecureValue() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_getAuthorizationForm):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountGetAuthorizationForm() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_acceptAuthorization):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountAcceptAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_sendVerifyPhoneCode):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSendVerifyPhoneCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_verifyPhone):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountVerifyPhone() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_sendVerifyEmailCode):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountSendVerifyEmailCode() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_verifyEmail):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountVerifyEmail() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_initTakeoutSession):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountInitTakeoutSession() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_account_finishTakeoutSession):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAccountFinishTakeoutSession() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_users_getUsers):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUsersGetUsers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_users_getFullUser):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUsersGetFullUser() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_users_setSecureValueErrors):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUsersSetSecureValueErrors() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_getStatuses):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsGetStatuses() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_getContacts):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsGetContacts() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_importContacts):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsImportContacts() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_deleteContact):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsDeleteContact() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_deleteContacts):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsDeleteContacts() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_block):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsBlock() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_unblock):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsUnblock() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_getBlocked):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsGetBlocked() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_exportCard):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsExportCard() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_importCard):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsImportCard() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_search):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsSearch() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_resolveUsername):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsResolveUsername() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_getTopPeers):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsGetTopPeers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_resetTopPeerRating):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsResetTopPeerRating() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_resetSaved):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsResetSaved() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_getSaved):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsGetSaved() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_contacts_toggleTopPeers):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLContactsToggleTopPeers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getMessages):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetMessages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getDialogs):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetDialogs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getHistory):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_search):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSearch() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_readHistory):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReadHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_deleteHistory):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDeleteHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_deleteMessages):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDeleteMessages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_receivedMessages):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReceivedMessages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setTyping):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetTyping() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendMessage):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendMessage() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendMedia):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendMedia() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_forwardMessages):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesForwardMessages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_reportSpam):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReportSpam() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_hideReportSpam):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesHideReportSpam() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getPeerSettings):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetPeerSettings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_report):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReport() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getChats):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetChats() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getFullChat):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetFullChat() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_editChatTitle):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesEditChatTitle() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_editChatPhoto):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesEditChatPhoto() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_addChatUser):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesAddChatUser() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_deleteChatUser):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDeleteChatUser() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_createChat):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesCreateChat() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getDhConfig):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetDhConfig() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_requestEncryption):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesRequestEncryption() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_acceptEncryption):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesAcceptEncryption() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_discardEncryption):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesDiscardEncryption() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setEncryptedTyping):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetEncryptedTyping() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_readEncryptedHistory):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReadEncryptedHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendEncrypted):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendEncrypted() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendEncryptedFile):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendEncryptedFile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendEncryptedService):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendEncryptedService() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_receivedQueue):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReceivedQueue() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_reportEncryptedSpam):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReportEncryptedSpam() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_readMessageContents):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReadMessageContents() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getStickers):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getAllStickers):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetAllStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getWebPagePreview):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetWebPagePreview() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_exportChatInvite):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesExportChatInvite() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_checkChatInvite):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesCheckChatInvite() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_importChatInvite):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesImportChatInvite() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getStickerSet):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetStickerSet() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_installStickerSet):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesInstallStickerSet() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_uninstallStickerSet):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesUninstallStickerSet() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_startBot):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesStartBot() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getMessagesViews):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetMessagesViews() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_toggleChatAdmins):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesToggleChatAdmins() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_editChatAdmin):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesEditChatAdmin() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_migrateChat):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesMigrateChat() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_searchGlobal):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSearchGlobal() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_reorderStickerSets):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReorderStickerSets() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getDocumentByHash):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetDocumentByHash() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_searchGifs):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSearchGifs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getSavedGifs):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetSavedGifs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_saveGif):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSaveGif() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getInlineBotResults):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetInlineBotResults() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setInlineBotResults):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetInlineBotResults() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendInlineBotResult):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendInlineBotResult() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getMessageEditData):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetMessageEditData() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_editMessage):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesEditMessage() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_editInlineBotMessage):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesEditInlineBotMessage() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getBotCallbackAnswer):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetBotCallbackAnswer() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setBotCallbackAnswer):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetBotCallbackAnswer() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getPeerDialogs):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetPeerDialogs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_saveDraft):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSaveDraft() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getAllDrafts):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetAllDrafts() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getFeaturedStickers):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetFeaturedStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_readFeaturedStickers):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReadFeaturedStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getRecentStickers):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetRecentStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_saveRecentSticker):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSaveRecentSticker() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_clearRecentStickers):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesClearRecentStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getArchivedStickers):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetArchivedStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getMaskStickers):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetMaskStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getAttachedStickers):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetAttachedStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setGameScore):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetGameScore() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setInlineGameScore):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetInlineGameScore() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getGameHighScores):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetGameHighScores() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getInlineGameHighScores):                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetInlineGameHighScores() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getCommonChats):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetCommonChats() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getAllChats):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetAllChats() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getWebPage):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetWebPage() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_toggleDialogPin):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesToggleDialogPin() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_reorderPinnedDialogs):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReorderPinnedDialogs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getPinnedDialogs):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetPinnedDialogs() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setBotShippingResults):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetBotShippingResults() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_setBotPrecheckoutResults):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSetBotPrecheckoutResults() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_uploadMedia):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesUploadMedia() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendScreenshotNotification):              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendScreenshotNotification() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getFavedStickers):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetFavedStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_faveSticker):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesFaveSticker() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getUnreadMentions):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetUnreadMentions() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_readMentions):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesReadMentions() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getRecentLocations):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetRecentLocations() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_sendMultiMedia):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSendMultiMedia() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_uploadEncryptedFile):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesUploadEncryptedFile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_searchStickerSets):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesSearchStickerSets() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getSplitRanges):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetSplitRanges() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_markDialogUnread):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesMarkDialogUnread() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_getDialogUnreadMarks):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesGetDialogUnreadMarks() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_messages_clearAllDrafts):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLMessagesClearAllDrafts() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_updates_getState):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesGetState() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_updates_getDifference):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesGetDifference() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_updates_getChannelDifference):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUpdatesGetChannelDifference() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_photos_updateProfilePhoto):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosUpdateProfilePhoto() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_photos_uploadProfilePhoto):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosUploadProfilePhoto() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_photos_deletePhotos):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosDeletePhotos() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_photos_getUserPhotos):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhotosGetUserPhotos() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_saveFilePart):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadSaveFilePart() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_getFile):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadGetFile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_saveBigFilePart):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadSaveBigFilePart() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_getWebFile):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadGetWebFile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_getCdnFile):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadGetCdnFile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_reuploadCdnFile):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadReuploadCdnFile() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_getCdnFileHashes):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadGetCdnFileHashes() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_upload_getFileHashes):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLUploadGetFileHashes() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getConfig):                                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetConfig() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getNearestDc):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetNearestDc() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getAppUpdate):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetAppUpdate() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_saveAppLog):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpSaveAppLog() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getInviteText):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetInviteText() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getSupport):                                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetSupport() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getAppChangelog):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetAppChangelog() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_setBotUpdatesStatus):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpSetBotUpdatesStatus() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getCdnConfig):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetCdnConfig() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getRecentMeUrls):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetRecentMeUrls() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getProxyData):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetProxyData() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getTermsOfServiceUpdate):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetTermsOfServiceUpdate() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_acceptTermsOfService):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpAcceptTermsOfService() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getDeepLinkInfo):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetDeepLinkInfo() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_help_getPassportConfig):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLHelpGetPassportConfig() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_readHistory):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsReadHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_deleteMessages):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsDeleteMessages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_deleteUserHistory):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsDeleteUserHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_reportSpam):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsReportSpam() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getMessages):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetMessages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getParticipants):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetParticipants() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getParticipant):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetParticipant() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getChannels):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetChannels() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getFullChannel):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetFullChannel() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_createChannel):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsCreateChannel() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_editAbout):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsEditAbout() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_editAdmin):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsEditAdmin() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_editTitle):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsEditTitle() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_editPhoto):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsEditPhoto() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_checkUsername):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsCheckUsername() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_updateUsername):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsUpdateUsername() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_joinChannel):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsJoinChannel() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_leaveChannel):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsLeaveChannel() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_inviteToChannel):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsInviteToChannel() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_exportInvite):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsExportInvite() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_deleteChannel):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsDeleteChannel() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_toggleInvites):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsToggleInvites() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_exportMessageLink):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsExportMessageLink() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_toggleSignatures):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsToggleSignatures() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_updatePinnedMessage):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsUpdatePinnedMessage() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getAdminedPublicChannels):                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetAdminedPublicChannels() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_editBanned):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsEditBanned() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getAdminLog):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetAdminLog() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_setStickers):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsSetStickers() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_readMessageContents):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsReadMessageContents() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_deleteHistory):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsDeleteHistory() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_togglePreHistoryHidden):                  TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsTogglePreHistoryHidden() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_channels_getLeftChannels):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLChannelsGetLeftChannels() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_bots_sendCustomRequest):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotsSendCustomRequest() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_bots_answerWebhookJSONQuery):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLBotsAnswerWebhookJSONQuery() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_payments_getPaymentForm):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsGetPaymentForm() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_payments_getPaymentReceipt):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsGetPaymentReceipt() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_payments_validateRequestedInfo):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsValidateRequestedInfo() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_payments_sendPaymentForm):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsSendPaymentForm() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_payments_getSavedInfo):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsGetSavedInfo() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_payments_clearSavedInfo):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPaymentsClearSavedInfo() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_stickers_createStickerSet):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickersCreateStickerSet() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_stickers_removeStickerFromSet):                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickersRemoveStickerFromSet() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_stickers_changeStickerPosition):                   TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickersChangeStickerPosition() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_stickers_addStickerToSet):                         TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLStickersAddStickerToSet() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_getCallConfig):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneGetCallConfig() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_requestCall):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneRequestCall() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_acceptCall):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneAcceptCall() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_confirmCall):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneConfirmCall() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_receivedCall):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneReceivedCall() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_discardCall):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneDiscardCall() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_setCallRating):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneSetCallRating() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_phone_saveCallDebug):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLPhoneSaveCallDebug() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_langpack_getLangPack):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangpackGetLangPack() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_langpack_getStrings):                              TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangpackGetStrings() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_langpack_getDifference):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangpackGetDifference() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_langpack_getLanguages):                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLangpackGetLanguages() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_int32):                                            TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLInt32() }, layer: 85, classIdList: []int32{-1932527041}},
	int32(TLConstructor_CRC32_long):                                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLLong() }, layer: 85, classIdList: []int32{1253220205}},
	int32(TLConstructor_CRC32_authKeyInfo):                                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAuthKeyInfo() }, layer: 85, classIdList: []int32{-793297679}},
	int32(TLConstructor_CRC32_clientSessionInfo):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLClientSessionInfo() }, layer: 85, classIdList: []int32{167005722}},
	int32(TLConstructor_CRC32_attachData):                                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLAttachData() }, layer: 85, classIdList: []int32{-989020720}},
	int32(TLConstructor_CRC32_sync_connectToSessionServer):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncConnectToSessionServer() }, layer: 85, classIdList: []int32{-830423433}},
	int32(TLConstructor_CRC32_sync_sessionServerConnected):                      TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncSessionServerConnected() }, layer: 85, classIdList: []int32{-385206154}},
	int32(TLConstructor_CRC32_sync_pushUpdatesData):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncPushUpdatesData() }, layer: 85, classIdList: []int32{2074796531}},
	int32(TLConstructor_CRC32_sync_pushRpcResultData):                           TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncPushRpcResultData() }, layer: 85, classIdList: []int32{-45767191}},
	int32(TLConstructor_CRC32_session_setClientSessionInfo):                     TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionSetClientSessionInfo() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_getAuthorizations):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionGetAuthorizations() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_resetAuthorization):                       TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionResetAuthorization() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_getLayer):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionGetLayer() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_getUserId):                                TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionGetUserId() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_queryAuthKey):                             TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionQueryAuthKey() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_setAuthKey):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionSetAuthKey() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_bindAuthKeyUser):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionBindAuthKeyUser() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_session_unbindAuthKeyUser):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSessionUnbindAuthKeyUser() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_syncUpdates):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncSyncUpdates() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_pushUpdates):                                 TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncPushUpdates() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_syncChannelUpdates):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncSyncChannelUpdates() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_pushChannelUpdates):                          TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncPushChannelUpdates() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_pushRpcResult):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncPushRpcResult() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_getState):                                    TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncGetState() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_getDifference):                               TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncGetDifference() }, layer: 85, classIdList: []int32{}},
	int32(TLConstructor_CRC32_sync_getChannelDifference):                        TLObjectHelper{newTLObjectFunc: func() TLObject { return NewTLSyncGetChannelDifference() }, layer: 85, classIdList: []int32{}},
}

func NewTLObjectByClassID(classId int32) TLObject {
	m, ok := registers2[classId]
	if !ok {
		return nil
	}
	return m.newTLObjectFunc()
}

func getConstructorByLayer(classId TLConstructor, layer int) TLConstructor {
	if m, ok := registers2[int32(classId)]; ok {
		classIdList := m.classIdList
		for _, c := range classIdList {
			if m, ok := registers2[int32(c)]; ok {
				if m.layer == layer {
					return TLConstructor(c)
				}
			}
		}
	}
	return classId
}

//////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Client_DH_Inner_Data <--
//  + TL_Client_DHInnerData
//

func (m *Client_DH_Inner_Data) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_client_DH_inner_data:
		t := m.To_Client_DHInnerData()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Client_DH_Inner_Data) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_client_DH_inner_data:
		t := m.To_Client_DHInnerData()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Client_DH_Inner_Data) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_client_DH_inner_data:
		m2 := &TLClient_DHInnerData{Data2: &Client_DH_Inner_Data_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data;
func (m *Client_DH_Inner_Data) To_Client_DHInnerData() *TLClient_DHInnerData {
	return &TLClient_DHInnerData{
		Data2: m.Data2,
	}
}

// client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data;
func (m *TLClient_DHInnerData) To_Client_DH_Inner_Data() *Client_DH_Inner_Data {
	return &Client_DH_Inner_Data{
		Constructor: TLConstructor_CRC32_client_DH_inner_data,
		Data2:       m.Data2,
	}
}

func (m *TLClient_DHInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLClient_DHInnerData) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLClient_DHInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLClient_DHInnerData) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLClient_DHInnerData) SetRetryId(v int64) { m.Data2.RetryId = v }
func (m *TLClient_DHInnerData) GetRetryId() int64  { return m.Data2.RetryId }

func (m *TLClient_DHInnerData) SetGB(v string) { m.Data2.GB = v }
func (m *TLClient_DHInnerData) GetGB() string  { return m.Data2.GB }

func NewTLClient_DHInnerData() *TLClient_DHInnerData {
	return &TLClient_DHInnerData{Data2: &Client_DH_Inner_Data_Data{}}
}

func (m *TLClient_DHInnerData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_client_DH_inner_data))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Long(m.GetRetryId())
	x.String(m.GetGB())

	return x.buf
}

func (m *TLClient_DHInnerData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_client_DH_inner_data))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Long(m.GetRetryId())
	x.String(m.GetGB())

	return x.buf
}

func (m *TLClient_DHInnerData) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetRetryId(dbuf.Long())
	m.SetGB(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SetClient_DHParamsAnswer <--
//  + TL_DhGenOk
//  + TL_DhGenRetry
//  + TL_DhGenFail
//

func (m *SetClient_DHParamsAnswer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_dh_gen_ok:
		t := m.To_DhGenOk()
		return t.Encode()
	case TLConstructor_CRC32_dh_gen_retry:
		t := m.To_DhGenRetry()
		return t.Encode()
	case TLConstructor_CRC32_dh_gen_fail:
		t := m.To_DhGenFail()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SetClient_DHParamsAnswer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_dh_gen_ok:
		t := m.To_DhGenOk()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_dh_gen_retry:
		t := m.To_DhGenRetry()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_dh_gen_fail:
		t := m.To_DhGenFail()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SetClient_DHParamsAnswer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_dh_gen_ok:
		m2 := &TLDhGenOk{Data2: &SetClient_DHParamsAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_dh_gen_retry:
		m2 := &TLDhGenRetry{Data2: &SetClient_DHParamsAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_dh_gen_fail:
		m2 := &TLDhGenFail{Data2: &SetClient_DHParamsAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;
func (m *SetClient_DHParamsAnswer) To_DhGenOk() *TLDhGenOk {
	return &TLDhGenOk{
		Data2: m.Data2,
	}
}

// dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;
func (m *SetClient_DHParamsAnswer) To_DhGenRetry() *TLDhGenRetry {
	return &TLDhGenRetry{
		Data2: m.Data2,
	}
}

// dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;
func (m *SetClient_DHParamsAnswer) To_DhGenFail() *TLDhGenFail {
	return &TLDhGenFail{
		Data2: m.Data2,
	}
}

// dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;
func (m *TLDhGenOk) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
	return &SetClient_DHParamsAnswer{
		Constructor: TLConstructor_CRC32_dh_gen_ok,
		Data2:       m.Data2,
	}
}

func (m *TLDhGenOk) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenOk) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLDhGenOk) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenOk) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLDhGenOk) SetNewNonceHash1(v []byte) { m.Data2.NewNonceHash1 = v }
func (m *TLDhGenOk) GetNewNonceHash1() []byte  { return m.Data2.NewNonceHash1 }

func NewTLDhGenOk() *TLDhGenOk {
	return &TLDhGenOk{Data2: &SetClient_DHParamsAnswer_Data{}}
}

func (m *TLDhGenOk) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dh_gen_ok))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash1())

	return x.buf
}

func (m *TLDhGenOk) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dh_gen_ok))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash1())

	return x.buf
}

func (m *TLDhGenOk) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonceHash1(dbuf.Bytes(16))

	return dbuf.err
}

// dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;
func (m *TLDhGenRetry) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
	return &SetClient_DHParamsAnswer{
		Constructor: TLConstructor_CRC32_dh_gen_retry,
		Data2:       m.Data2,
	}
}

func (m *TLDhGenRetry) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenRetry) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLDhGenRetry) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenRetry) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLDhGenRetry) SetNewNonceHash2(v []byte) { m.Data2.NewNonceHash2 = v }
func (m *TLDhGenRetry) GetNewNonceHash2() []byte  { return m.Data2.NewNonceHash2 }

func NewTLDhGenRetry() *TLDhGenRetry {
	return &TLDhGenRetry{Data2: &SetClient_DHParamsAnswer_Data{}}
}

func (m *TLDhGenRetry) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dh_gen_retry))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash2())

	return x.buf
}

func (m *TLDhGenRetry) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dh_gen_retry))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash2())

	return x.buf
}

func (m *TLDhGenRetry) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonceHash2(dbuf.Bytes(16))

	return dbuf.err
}

// dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;
func (m *TLDhGenFail) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
	return &SetClient_DHParamsAnswer{
		Constructor: TLConstructor_CRC32_dh_gen_fail,
		Data2:       m.Data2,
	}
}

func (m *TLDhGenFail) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenFail) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLDhGenFail) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenFail) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLDhGenFail) SetNewNonceHash3(v []byte) { m.Data2.NewNonceHash3 = v }
func (m *TLDhGenFail) GetNewNonceHash3() []byte  { return m.Data2.NewNonceHash3 }

func NewTLDhGenFail() *TLDhGenFail {
	return &TLDhGenFail{Data2: &SetClient_DHParamsAnswer_Data{}}
}

func (m *TLDhGenFail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dh_gen_fail))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash3())

	return x.buf
}

func (m *TLDhGenFail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dh_gen_fail))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash3())

	return x.buf
}

func (m *TLDhGenFail) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonceHash3(dbuf.Bytes(16))

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DestroyAuthKeyRes <--
//  + TL_DestroyAuthKeyOk
//  + TL_DestroyAuthKeyNone
//  + TL_DestroyAuthKeyFail
//

func (m *DestroyAuthKeyRes) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_destroy_auth_key_ok:
		t := m.To_DestroyAuthKeyOk()
		return t.Encode()
	case TLConstructor_CRC32_destroy_auth_key_none:
		t := m.To_DestroyAuthKeyNone()
		return t.Encode()
	case TLConstructor_CRC32_destroy_auth_key_fail:
		t := m.To_DestroyAuthKeyFail()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DestroyAuthKeyRes) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_destroy_auth_key_ok:
		t := m.To_DestroyAuthKeyOk()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_destroy_auth_key_none:
		t := m.To_DestroyAuthKeyNone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_destroy_auth_key_fail:
		t := m.To_DestroyAuthKeyFail()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DestroyAuthKeyRes) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_destroy_auth_key_ok:
		m2 := &TLDestroyAuthKeyOk{Data2: &DestroyAuthKeyRes_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_destroy_auth_key_none:
		m2 := &TLDestroyAuthKeyNone{Data2: &DestroyAuthKeyRes_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_destroy_auth_key_fail:
		m2 := &TLDestroyAuthKeyFail{Data2: &DestroyAuthKeyRes_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// destroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyOk() *TLDestroyAuthKeyOk {
	return &TLDestroyAuthKeyOk{
		Data2: m.Data2,
	}
}

// destroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyNone() *TLDestroyAuthKeyNone {
	return &TLDestroyAuthKeyNone{
		Data2: m.Data2,
	}
}

// destroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyFail() *TLDestroyAuthKeyFail {
	return &TLDestroyAuthKeyFail{
		Data2: m.Data2,
	}
}

// destroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;
func (m *TLDestroyAuthKeyOk) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
	return &DestroyAuthKeyRes{
		Constructor: TLConstructor_CRC32_destroy_auth_key_ok,
		Data2:       m.Data2,
	}
}

func NewTLDestroyAuthKeyOk() *TLDestroyAuthKeyOk {
	return &TLDestroyAuthKeyOk{Data2: &DestroyAuthKeyRes_Data{}}
}

func (m *TLDestroyAuthKeyOk) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key_ok))

	return x.buf
}

func (m *TLDestroyAuthKeyOk) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key_ok))

	return x.buf
}

func (m *TLDestroyAuthKeyOk) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// destroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;
func (m *TLDestroyAuthKeyNone) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
	return &DestroyAuthKeyRes{
		Constructor: TLConstructor_CRC32_destroy_auth_key_none,
		Data2:       m.Data2,
	}
}

func NewTLDestroyAuthKeyNone() *TLDestroyAuthKeyNone {
	return &TLDestroyAuthKeyNone{Data2: &DestroyAuthKeyRes_Data{}}
}

func (m *TLDestroyAuthKeyNone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key_none))

	return x.buf
}

func (m *TLDestroyAuthKeyNone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key_none))

	return x.buf
}

func (m *TLDestroyAuthKeyNone) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// destroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;
func (m *TLDestroyAuthKeyFail) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
	return &DestroyAuthKeyRes{
		Constructor: TLConstructor_CRC32_destroy_auth_key_fail,
		Data2:       m.Data2,
	}
}

func NewTLDestroyAuthKeyFail() *TLDestroyAuthKeyFail {
	return &TLDestroyAuthKeyFail{Data2: &DestroyAuthKeyRes_Data{}}
}

func (m *TLDestroyAuthKeyFail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key_fail))

	return x.buf
}

func (m *TLDestroyAuthKeyFail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key_fail))

	return x.buf
}

func (m *TLDestroyAuthKeyFail) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// RSAPublicKey <--
//  + TL_RsaPublicKey
//

func (m *RSAPublicKey) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_rsa_public_key:
		t := m.To_RsaPublicKey()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RSAPublicKey) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_rsa_public_key:
		t := m.To_RsaPublicKey()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RSAPublicKey) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_rsa_public_key:
		m2 := &TLRsaPublicKey{Data2: &RSAPublicKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// rsa_public_key n:string e:string = RSAPublicKey;
func (m *RSAPublicKey) To_RsaPublicKey() *TLRsaPublicKey {
	return &TLRsaPublicKey{
		Data2: m.Data2,
	}
}

// rsa_public_key n:string e:string = RSAPublicKey;
func (m *TLRsaPublicKey) To_RSAPublicKey() *RSAPublicKey {
	return &RSAPublicKey{
		Constructor: TLConstructor_CRC32_rsa_public_key,
		Data2:       m.Data2,
	}
}

func (m *TLRsaPublicKey) SetN(v string) { m.Data2.N = v }
func (m *TLRsaPublicKey) GetN() string  { return m.Data2.N }

func (m *TLRsaPublicKey) SetE(v string) { m.Data2.E = v }
func (m *TLRsaPublicKey) GetE() string  { return m.Data2.E }

func NewTLRsaPublicKey() *TLRsaPublicKey {
	return &TLRsaPublicKey{Data2: &RSAPublicKey_Data{}}
}

func (m *TLRsaPublicKey) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rsa_public_key))

	x.String(m.GetN())
	x.String(m.GetE())

	return x.buf
}

func (m *TLRsaPublicKey) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rsa_public_key))

	x.String(m.GetN())
	x.String(m.GetE())

	return x.buf
}

func (m *TLRsaPublicKey) Decode(dbuf *DecodeBuf) error {
	m.SetN(dbuf.String())
	m.SetE(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ResPQ <--
//  + TL_ResPQ
//

func (m *ResPQ) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_resPQ:
		t := m.To_ResPQ()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ResPQ) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_resPQ:
		t := m.To_ResPQ()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ResPQ) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_resPQ:
		m2 := &TLResPQ{Data2: &ResPQ_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// resPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector<long> = ResPQ;
func (m *ResPQ) To_ResPQ() *TLResPQ {
	return &TLResPQ{
		Data2: m.Data2,
	}
}

// resPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector<long> = ResPQ;
func (m *TLResPQ) To_ResPQ() *ResPQ {
	return &ResPQ{
		Constructor: TLConstructor_CRC32_resPQ,
		Data2:       m.Data2,
	}
}

func (m *TLResPQ) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLResPQ) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLResPQ) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLResPQ) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLResPQ) SetPq(v string) { m.Data2.Pq = v }
func (m *TLResPQ) GetPq() string  { return m.Data2.Pq }

func (m *TLResPQ) SetServerPublicKeyFingerprints(v []int64) { m.Data2.ServerPublicKeyFingerprints = v }
func (m *TLResPQ) GetServerPublicKeyFingerprints() []int64  { return m.Data2.ServerPublicKeyFingerprints }

func NewTLResPQ() *TLResPQ {
	return &TLResPQ{Data2: &ResPQ_Data{}}
}

func (m *TLResPQ) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_resPQ))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.String(m.GetPq())
	x.VectorLong(m.GetServerPublicKeyFingerprints())

	return x.buf
}

func (m *TLResPQ) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_resPQ))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.String(m.GetPq())
	x.VectorLong(m.GetServerPublicKeyFingerprints())

	return x.buf
}

func (m *TLResPQ) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetPq(dbuf.String())
	m.SetServerPublicKeyFingerprints(dbuf.VectorLong())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// P_QInnerData <--
//  + TL_PQInnerData
//  + TL_PQInnerDataDc
//  + TL_PQInnerDataTemp
//  + TL_PQInnerDataTempDc
//

func (m *P_QInnerData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_p_q_inner_data:
		t := m.To_PQInnerData()
		return t.Encode()
	case TLConstructor_CRC32_p_q_inner_data_dc:
		t := m.To_PQInnerDataDc()
		return t.Encode()
	case TLConstructor_CRC32_p_q_inner_data_temp:
		t := m.To_PQInnerDataTemp()
		return t.Encode()
	case TLConstructor_CRC32_p_q_inner_data_temp_dc:
		t := m.To_PQInnerDataTempDc()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *P_QInnerData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_p_q_inner_data:
		t := m.To_PQInnerData()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_p_q_inner_data_dc:
		t := m.To_PQInnerDataDc()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_p_q_inner_data_temp:
		t := m.To_PQInnerDataTemp()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_p_q_inner_data_temp_dc:
		t := m.To_PQInnerDataTempDc()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *P_QInnerData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_p_q_inner_data:
		m2 := &TLPQInnerData{Data2: &P_QInnerData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_p_q_inner_data_dc:
		m2 := &TLPQInnerDataDc{Data2: &P_QInnerData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_p_q_inner_data_temp:
		m2 := &TLPQInnerDataTemp{Data2: &P_QInnerData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_p_q_inner_data_temp_dc:
		m2 := &TLPQInnerDataTempDc{Data2: &P_QInnerData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// p_q_inner_data#83c95aec pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerData() *TLPQInnerData {
	return &TLPQInnerData{
		Data2: m.Data2,
	}
}

// p_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerDataDc() *TLPQInnerDataDc {
	return &TLPQInnerDataDc{
		Data2: m.Data2,
	}
}

// p_q_inner_data_temp#3c6a84d4 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 expires_in:int = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerDataTemp() *TLPQInnerDataTemp {
	return &TLPQInnerDataTemp{
		Data2: m.Data2,
	}
}

// p_q_inner_data_temp_dc#56fddf88 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerDataTempDc() *TLPQInnerDataTempDc {
	return &TLPQInnerDataTempDc{
		Data2: m.Data2,
	}
}

// p_q_inner_data#83c95aec pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data;
func (m *TLPQInnerData) To_P_QInnerData() *P_QInnerData {
	return &P_QInnerData{
		Constructor: TLConstructor_CRC32_p_q_inner_data,
		Data2:       m.Data2,
	}
}

func (m *TLPQInnerData) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerData) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerData) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerData) GetP() string  { return m.Data2.P }

func (m *TLPQInnerData) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerData) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerData) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerData) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerData) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerData) GetNewNonce() []byte  { return m.Data2.NewNonce }

func NewTLPQInnerData() *TLPQInnerData {
	return &TLPQInnerData{Data2: &P_QInnerData_Data{}}
}

func (m *TLPQInnerData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())

	return x.buf
}

func (m *TLPQInnerData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())

	return x.buf
}

func (m *TLPQInnerData) Decode(dbuf *DecodeBuf) error {
	m.SetPq(dbuf.String())
	m.SetP(dbuf.String())
	m.SetQ(dbuf.String())
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonce(dbuf.Bytes(32))

	return dbuf.err
}

// p_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;
func (m *TLPQInnerDataDc) To_P_QInnerData() *P_QInnerData {
	return &P_QInnerData{
		Constructor: TLConstructor_CRC32_p_q_inner_data_dc,
		Data2:       m.Data2,
	}
}

func (m *TLPQInnerDataDc) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataDc) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerDataDc) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataDc) GetP() string  { return m.Data2.P }

func (m *TLPQInnerDataDc) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataDc) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerDataDc) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataDc) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerDataDc) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataDc) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerDataDc) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataDc) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerDataDc) SetDc(v int32) { m.Data2.Dc = v }
func (m *TLPQInnerDataDc) GetDc() int32  { return m.Data2.Dc }

func NewTLPQInnerDataDc() *TLPQInnerDataDc {
	return &TLPQInnerDataDc{Data2: &P_QInnerData_Data{}}
}

func (m *TLPQInnerDataDc) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data_dc))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())
	x.Int(m.GetDc())

	return x.buf
}

func (m *TLPQInnerDataDc) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data_dc))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())
	x.Int(m.GetDc())

	return x.buf
}

func (m *TLPQInnerDataDc) Decode(dbuf *DecodeBuf) error {
	m.SetPq(dbuf.String())
	m.SetP(dbuf.String())
	m.SetQ(dbuf.String())
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonce(dbuf.Bytes(32))
	m.SetDc(dbuf.Int())

	return dbuf.err
}

// p_q_inner_data_temp#3c6a84d4 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 expires_in:int = P_Q_inner_data;
func (m *TLPQInnerDataTemp) To_P_QInnerData() *P_QInnerData {
	return &P_QInnerData{
		Constructor: TLConstructor_CRC32_p_q_inner_data_temp,
		Data2:       m.Data2,
	}
}

func (m *TLPQInnerDataTemp) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataTemp) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerDataTemp) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataTemp) GetP() string  { return m.Data2.P }

func (m *TLPQInnerDataTemp) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataTemp) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerDataTemp) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataTemp) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerDataTemp) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataTemp) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerDataTemp) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataTemp) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerDataTemp) SetExpiresIn(v int32) { m.Data2.ExpiresIn = v }
func (m *TLPQInnerDataTemp) GetExpiresIn() int32  { return m.Data2.ExpiresIn }

func NewTLPQInnerDataTemp() *TLPQInnerDataTemp {
	return &TLPQInnerDataTemp{Data2: &P_QInnerData_Data{}}
}

func (m *TLPQInnerDataTemp) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data_temp))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())
	x.Int(m.GetExpiresIn())

	return x.buf
}

func (m *TLPQInnerDataTemp) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data_temp))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())
	x.Int(m.GetExpiresIn())

	return x.buf
}

func (m *TLPQInnerDataTemp) Decode(dbuf *DecodeBuf) error {
	m.SetPq(dbuf.String())
	m.SetP(dbuf.String())
	m.SetQ(dbuf.String())
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonce(dbuf.Bytes(32))
	m.SetExpiresIn(dbuf.Int())

	return dbuf.err
}

// p_q_inner_data_temp_dc#56fddf88 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;
func (m *TLPQInnerDataTempDc) To_P_QInnerData() *P_QInnerData {
	return &P_QInnerData{
		Constructor: TLConstructor_CRC32_p_q_inner_data_temp_dc,
		Data2:       m.Data2,
	}
}

func (m *TLPQInnerDataTempDc) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataTempDc) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerDataTempDc) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataTempDc) GetP() string  { return m.Data2.P }

func (m *TLPQInnerDataTempDc) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataTempDc) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerDataTempDc) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataTempDc) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerDataTempDc) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataTempDc) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerDataTempDc) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataTempDc) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerDataTempDc) SetDc(v int32) { m.Data2.Dc = v }
func (m *TLPQInnerDataTempDc) GetDc() int32  { return m.Data2.Dc }

func (m *TLPQInnerDataTempDc) SetExpiresIn(v int32) { m.Data2.ExpiresIn = v }
func (m *TLPQInnerDataTempDc) GetExpiresIn() int32  { return m.Data2.ExpiresIn }

func NewTLPQInnerDataTempDc() *TLPQInnerDataTempDc {
	return &TLPQInnerDataTempDc{Data2: &P_QInnerData_Data{}}
}

func (m *TLPQInnerDataTempDc) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data_temp_dc))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())
	x.Int(m.GetDc())
	x.Int(m.GetExpiresIn())

	return x.buf
}

func (m *TLPQInnerDataTempDc) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_p_q_inner_data_temp_dc))

	x.String(m.GetPq())
	x.String(m.GetP())
	x.String(m.GetQ())
	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonce())
	x.Int(m.GetDc())
	x.Int(m.GetExpiresIn())

	return x.buf
}

func (m *TLPQInnerDataTempDc) Decode(dbuf *DecodeBuf) error {
	m.SetPq(dbuf.String())
	m.SetP(dbuf.String())
	m.SetQ(dbuf.String())
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonce(dbuf.Bytes(32))
	m.SetDc(dbuf.Int())
	m.SetExpiresIn(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Server_DH_Params <--
//  + TL_Server_DHParamsFail
//  + TL_Server_DHParamsOk
//

func (m *Server_DH_Params) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_server_DH_params_fail:
		t := m.To_Server_DHParamsFail()
		return t.Encode()
	case TLConstructor_CRC32_server_DH_params_ok:
		t := m.To_Server_DHParamsOk()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Server_DH_Params) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_server_DH_params_fail:
		t := m.To_Server_DHParamsFail()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_server_DH_params_ok:
		t := m.To_Server_DHParamsOk()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Server_DH_Params) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_server_DH_params_fail:
		m2 := &TLServer_DHParamsFail{Data2: &Server_DH_Params_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_server_DH_params_ok:
		m2 := &TLServer_DHParamsOk{Data2: &Server_DH_Params_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params;
func (m *Server_DH_Params) To_Server_DHParamsFail() *TLServer_DHParamsFail {
	return &TLServer_DHParamsFail{
		Data2: m.Data2,
	}
}

// server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;
func (m *Server_DH_Params) To_Server_DHParamsOk() *TLServer_DHParamsOk {
	return &TLServer_DHParamsOk{
		Data2: m.Data2,
	}
}

// server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params;
func (m *TLServer_DHParamsFail) To_Server_DH_Params() *Server_DH_Params {
	return &Server_DH_Params{
		Constructor: TLConstructor_CRC32_server_DH_params_fail,
		Data2:       m.Data2,
	}
}

func (m *TLServer_DHParamsFail) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHParamsFail) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLServer_DHParamsFail) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHParamsFail) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLServer_DHParamsFail) SetNewNonceHash(v []byte) { m.Data2.NewNonceHash = v }
func (m *TLServer_DHParamsFail) GetNewNonceHash() []byte  { return m.Data2.NewNonceHash }

func NewTLServer_DHParamsFail() *TLServer_DHParamsFail {
	return &TLServer_DHParamsFail{Data2: &Server_DH_Params_Data{}}
}

func (m *TLServer_DHParamsFail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_server_DH_params_fail))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash())

	return x.buf
}

func (m *TLServer_DHParamsFail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_server_DH_params_fail))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Bytes(m.GetNewNonceHash())

	return x.buf
}

func (m *TLServer_DHParamsFail) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetNewNonceHash(dbuf.Bytes(16))

	return dbuf.err
}

// server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;
func (m *TLServer_DHParamsOk) To_Server_DH_Params() *Server_DH_Params {
	return &Server_DH_Params{
		Constructor: TLConstructor_CRC32_server_DH_params_ok,
		Data2:       m.Data2,
	}
}

func (m *TLServer_DHParamsOk) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHParamsOk) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLServer_DHParamsOk) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHParamsOk) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLServer_DHParamsOk) SetEncryptedAnswer(v string) { m.Data2.EncryptedAnswer = v }
func (m *TLServer_DHParamsOk) GetEncryptedAnswer() string  { return m.Data2.EncryptedAnswer }

func NewTLServer_DHParamsOk() *TLServer_DHParamsOk {
	return &TLServer_DHParamsOk{Data2: &Server_DH_Params_Data{}}
}

func (m *TLServer_DHParamsOk) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_server_DH_params_ok))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.String(m.GetEncryptedAnswer())

	return x.buf
}

func (m *TLServer_DHParamsOk) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_server_DH_params_ok))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.String(m.GetEncryptedAnswer())

	return x.buf
}

func (m *TLServer_DHParamsOk) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetEncryptedAnswer(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Server_DHInnerData <--
//  + TL_Server_DHInnerData
//

func (m *Server_DHInnerData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_server_DH_inner_data:
		t := m.To_Server_DHInnerData()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Server_DHInnerData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_server_DH_inner_data:
		t := m.To_Server_DHInnerData()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Server_DHInnerData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_server_DH_inner_data:
		m2 := &TLServer_DHInnerData{Data2: &Server_DHInnerData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;
func (m *Server_DHInnerData) To_Server_DHInnerData() *TLServer_DHInnerData {
	return &TLServer_DHInnerData{
		Data2: m.Data2,
	}
}

// server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;
func (m *TLServer_DHInnerData) To_Server_DHInnerData() *Server_DHInnerData {
	return &Server_DHInnerData{
		Constructor: TLConstructor_CRC32_server_DH_inner_data,
		Data2:       m.Data2,
	}
}

func (m *TLServer_DHInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHInnerData) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLServer_DHInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHInnerData) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLServer_DHInnerData) SetG(v int32) { m.Data2.G = v }
func (m *TLServer_DHInnerData) GetG() int32  { return m.Data2.G }

func (m *TLServer_DHInnerData) SetDhPrime(v string) { m.Data2.DhPrime = v }
func (m *TLServer_DHInnerData) GetDhPrime() string  { return m.Data2.DhPrime }

func (m *TLServer_DHInnerData) SetGA(v string) { m.Data2.GA = v }
func (m *TLServer_DHInnerData) GetGA() string  { return m.Data2.GA }

func (m *TLServer_DHInnerData) SetServerTime(v int32) { m.Data2.ServerTime = v }
func (m *TLServer_DHInnerData) GetServerTime() int32  { return m.Data2.ServerTime }

func NewTLServer_DHInnerData() *TLServer_DHInnerData {
	return &TLServer_DHInnerData{Data2: &Server_DHInnerData_Data{}}
}

func (m *TLServer_DHInnerData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_server_DH_inner_data))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Int(m.GetG())
	x.String(m.GetDhPrime())
	x.String(m.GetGA())
	x.Int(m.GetServerTime())

	return x.buf
}

func (m *TLServer_DHInnerData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_server_DH_inner_data))

	x.Bytes(m.GetNonce())
	x.Bytes(m.GetServerNonce())
	x.Int(m.GetG())
	x.String(m.GetDhPrime())
	x.String(m.GetGA())
	x.Int(m.GetServerTime())

	return x.buf
}

func (m *TLServer_DHInnerData) Decode(dbuf *DecodeBuf) error {
	m.SetNonce(dbuf.Bytes(16))
	m.SetServerNonce(dbuf.Bytes(16))
	m.SetG(dbuf.Int())
	m.SetDhPrime(dbuf.String())
	m.SetGA(dbuf.String())
	m.SetServerTime(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MsgsAllInfo <--
//  + TL_MsgsAllInfo
//

func (m *MsgsAllInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_msgs_all_info:
		t := m.To_MsgsAllInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsAllInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_msgs_all_info:
		t := m.To_MsgsAllInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsAllInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_msgs_all_info:
		m2 := &TLMsgsAllInfo{Data2: &MsgsAllInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// msgs_all_info#8cc0d131 msg_ids:Vector<long> info:string = MsgsAllInfo;
func (m *MsgsAllInfo) To_MsgsAllInfo() *TLMsgsAllInfo {
	return &TLMsgsAllInfo{
		Data2: m.Data2,
	}
}

// msgs_all_info#8cc0d131 msg_ids:Vector<long> info:string = MsgsAllInfo;
func (m *TLMsgsAllInfo) To_MsgsAllInfo() *MsgsAllInfo {
	return &MsgsAllInfo{
		Constructor: TLConstructor_CRC32_msgs_all_info,
		Data2:       m.Data2,
	}
}

func (m *TLMsgsAllInfo) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsAllInfo) GetMsgIds() []int64  { return m.Data2.MsgIds }

func (m *TLMsgsAllInfo) SetInfo(v string) { m.Data2.Info = v }
func (m *TLMsgsAllInfo) GetInfo() string  { return m.Data2.Info }

func NewTLMsgsAllInfo() *TLMsgsAllInfo {
	return &TLMsgsAllInfo{Data2: &MsgsAllInfo_Data{}}
}

func (m *TLMsgsAllInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_all_info))

	x.VectorLong(m.GetMsgIds())

	x.String(m.GetInfo())

	return x.buf
}

func (m *TLMsgsAllInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_all_info))

	x.VectorLong(m.GetMsgIds())

	x.String(m.GetInfo())

	return x.buf
}

func (m *TLMsgsAllInfo) Decode(dbuf *DecodeBuf) error {
	m.SetMsgIds(dbuf.VectorLong())
	m.SetInfo(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// FutureSalt <--
//  + TL_FutureSalt
//

func (m *FutureSalt) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_future_salt:
		t := m.To_FutureSalt()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FutureSalt) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_future_salt:
		t := m.To_FutureSalt()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FutureSalt) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_future_salt:
		m2 := &TLFutureSalt{Data2: &FutureSalt_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
func (m *FutureSalt) To_FutureSalt() *TLFutureSalt {
	return &TLFutureSalt{
		Data2: m.Data2,
	}
}

// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
func (m *TLFutureSalt) To_FutureSalt() *FutureSalt {
	return &FutureSalt{
		Constructor: TLConstructor_CRC32_future_salt,
		Data2:       m.Data2,
	}
}

func (m *TLFutureSalt) SetValidSince(v int32) { m.Data2.ValidSince = v }
func (m *TLFutureSalt) GetValidSince() int32  { return m.Data2.ValidSince }

func (m *TLFutureSalt) SetValidUntil(v int32) { m.Data2.ValidUntil = v }
func (m *TLFutureSalt) GetValidUntil() int32  { return m.Data2.ValidUntil }

func (m *TLFutureSalt) SetSalt(v int64) { m.Data2.Salt = v }
func (m *TLFutureSalt) GetSalt() int64  { return m.Data2.Salt }

func NewTLFutureSalt() *TLFutureSalt {
	return &TLFutureSalt{Data2: &FutureSalt_Data{}}
}

func (m *TLFutureSalt) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_future_salt))

	x.Int(m.GetValidSince())
	x.Int(m.GetValidUntil())
	x.Long(m.GetSalt())

	return x.buf
}

func (m *TLFutureSalt) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_future_salt))

	x.Int(m.GetValidSince())
	x.Int(m.GetValidUntil())
	x.Long(m.GetSalt())

	return x.buf
}

func (m *TLFutureSalt) Decode(dbuf *DecodeBuf) error {
	m.SetValidSince(dbuf.Int())
	m.SetValidUntil(dbuf.Int())
	m.SetSalt(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Pong <--
//  + TL_Pong
//

func (m *Pong) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_pong:
		t := m.To_Pong()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Pong) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_pong:
		t := m.To_Pong()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Pong) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_pong:
		m2 := &TLPong{Data2: &Pong_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// pong#347773c5 msg_id:long ping_id:long = Pong;
func (m *Pong) To_Pong() *TLPong {
	return &TLPong{
		Data2: m.Data2,
	}
}

// pong#347773c5 msg_id:long ping_id:long = Pong;
func (m *TLPong) To_Pong() *Pong {
	return &Pong{
		Constructor: TLConstructor_CRC32_pong,
		Data2:       m.Data2,
	}
}

func (m *TLPong) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLPong) GetMsgId() int64  { return m.Data2.MsgId }

func (m *TLPong) SetPingId(v int64) { m.Data2.PingId = v }
func (m *TLPong) GetPingId() int64  { return m.Data2.PingId }

func NewTLPong() *TLPong {
	return &TLPong{Data2: &Pong_Data{}}
}

func (m *TLPong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pong))

	x.Long(m.GetMsgId())
	x.Long(m.GetPingId())

	return x.buf
}

func (m *TLPong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pong))

	x.Long(m.GetMsgId())
	x.Long(m.GetPingId())

	return x.buf
}

func (m *TLPong) Decode(dbuf *DecodeBuf) error {
	m.SetMsgId(dbuf.Long())
	m.SetPingId(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// NewSession <--
//  + TL_NewSessionCreated
//

func (m *NewSession) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_new_session_created:
		t := m.To_NewSessionCreated()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *NewSession) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_new_session_created:
		t := m.To_NewSessionCreated()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *NewSession) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_new_session_created:
		m2 := &TLNewSessionCreated{Data2: &NewSession_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// new_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession;
func (m *NewSession) To_NewSessionCreated() *TLNewSessionCreated {
	return &TLNewSessionCreated{
		Data2: m.Data2,
	}
}

// new_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession;
func (m *TLNewSessionCreated) To_NewSession() *NewSession {
	return &NewSession{
		Constructor: TLConstructor_CRC32_new_session_created,
		Data2:       m.Data2,
	}
}

func (m *TLNewSessionCreated) SetFirstMsgId(v int64) { m.Data2.FirstMsgId = v }
func (m *TLNewSessionCreated) GetFirstMsgId() int64  { return m.Data2.FirstMsgId }

func (m *TLNewSessionCreated) SetUniqueId(v int64) { m.Data2.UniqueId = v }
func (m *TLNewSessionCreated) GetUniqueId() int64  { return m.Data2.UniqueId }

func (m *TLNewSessionCreated) SetServerSalt(v int64) { m.Data2.ServerSalt = v }
func (m *TLNewSessionCreated) GetServerSalt() int64  { return m.Data2.ServerSalt }

func NewTLNewSessionCreated() *TLNewSessionCreated {
	return &TLNewSessionCreated{Data2: &NewSession_Data{}}
}

func (m *TLNewSessionCreated) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_new_session_created))

	x.Long(m.GetFirstMsgId())
	x.Long(m.GetUniqueId())
	x.Long(m.GetServerSalt())

	return x.buf
}

func (m *TLNewSessionCreated) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_new_session_created))

	x.Long(m.GetFirstMsgId())
	x.Long(m.GetUniqueId())
	x.Long(m.GetServerSalt())

	return x.buf
}

func (m *TLNewSessionCreated) Decode(dbuf *DecodeBuf) error {
	m.SetFirstMsgId(dbuf.Long())
	m.SetUniqueId(dbuf.Long())
	m.SetServerSalt(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// HttpWait <--
//  + TL_HttpWait
//

func (m *HttpWait) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_http_wait:
		t := m.To_HttpWait()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *HttpWait) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_http_wait:
		t := m.To_HttpWait()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *HttpWait) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_http_wait:
		m2 := &TLHttpWait{Data2: &HttpWait_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;
func (m *HttpWait) To_HttpWait() *TLHttpWait {
	return &TLHttpWait{
		Data2: m.Data2,
	}
}

// http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;
func (m *TLHttpWait) To_HttpWait() *HttpWait {
	return &HttpWait{
		Constructor: TLConstructor_CRC32_http_wait,
		Data2:       m.Data2,
	}
}

func (m *TLHttpWait) SetMaxDelay(v int32) { m.Data2.MaxDelay = v }
func (m *TLHttpWait) GetMaxDelay() int32  { return m.Data2.MaxDelay }

func (m *TLHttpWait) SetWaitAfter(v int32) { m.Data2.WaitAfter = v }
func (m *TLHttpWait) GetWaitAfter() int32  { return m.Data2.WaitAfter }

func (m *TLHttpWait) SetMaxWait(v int32) { m.Data2.MaxWait = v }
func (m *TLHttpWait) GetMaxWait() int32  { return m.Data2.MaxWait }

func NewTLHttpWait() *TLHttpWait {
	return &TLHttpWait{Data2: &HttpWait_Data{}}
}

func (m *TLHttpWait) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_http_wait))

	x.Int(m.GetMaxDelay())
	x.Int(m.GetWaitAfter())
	x.Int(m.GetMaxWait())

	return x.buf
}

func (m *TLHttpWait) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_http_wait))

	x.Int(m.GetMaxDelay())
	x.Int(m.GetWaitAfter())
	x.Int(m.GetMaxWait())

	return x.buf
}

func (m *TLHttpWait) Decode(dbuf *DecodeBuf) error {
	m.SetMaxDelay(dbuf.Int())
	m.SetWaitAfter(dbuf.Int())
	m.SetMaxWait(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MsgsStateReq <--
//  + TL_MsgsStateReq
//

func (m *MsgsStateReq) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_msgs_state_req:
		t := m.To_MsgsStateReq()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsStateReq) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_msgs_state_req:
		t := m.To_MsgsStateReq()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsStateReq) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_msgs_state_req:
		m2 := &TLMsgsStateReq{Data2: &MsgsStateReq_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// msgs_state_req#da69fb52 msg_ids:Vector<long> = MsgsStateReq;
func (m *MsgsStateReq) To_MsgsStateReq() *TLMsgsStateReq {
	return &TLMsgsStateReq{
		Data2: m.Data2,
	}
}

// msgs_state_req#da69fb52 msg_ids:Vector<long> = MsgsStateReq;
func (m *TLMsgsStateReq) To_MsgsStateReq() *MsgsStateReq {
	return &MsgsStateReq{
		Constructor: TLConstructor_CRC32_msgs_state_req,
		Data2:       m.Data2,
	}
}

func (m *TLMsgsStateReq) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsStateReq) GetMsgIds() []int64  { return m.Data2.MsgIds }

func NewTLMsgsStateReq() *TLMsgsStateReq {
	return &TLMsgsStateReq{Data2: &MsgsStateReq_Data{}}
}

func (m *TLMsgsStateReq) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_state_req))

	x.VectorLong(m.GetMsgIds())

	return x.buf
}

func (m *TLMsgsStateReq) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_state_req))

	x.VectorLong(m.GetMsgIds())

	return x.buf
}

func (m *TLMsgsStateReq) Decode(dbuf *DecodeBuf) error {
	m.SetMsgIds(dbuf.VectorLong())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MsgResendReq <--
//  + TL_MsgResendReq
//

func (m *MsgResendReq) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_msg_resend_req:
		t := m.To_MsgResendReq()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgResendReq) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_msg_resend_req:
		t := m.To_MsgResendReq()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgResendReq) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_msg_resend_req:
		m2 := &TLMsgResendReq{Data2: &MsgResendReq_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// msg_resend_req#7d861a08 msg_ids:Vector<long> = MsgResendReq;
func (m *MsgResendReq) To_MsgResendReq() *TLMsgResendReq {
	return &TLMsgResendReq{
		Data2: m.Data2,
	}
}

// msg_resend_req#7d861a08 msg_ids:Vector<long> = MsgResendReq;
func (m *TLMsgResendReq) To_MsgResendReq() *MsgResendReq {
	return &MsgResendReq{
		Constructor: TLConstructor_CRC32_msg_resend_req,
		Data2:       m.Data2,
	}
}

func (m *TLMsgResendReq) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgResendReq) GetMsgIds() []int64  { return m.Data2.MsgIds }

func NewTLMsgResendReq() *TLMsgResendReq {
	return &TLMsgResendReq{Data2: &MsgResendReq_Data{}}
}

func (m *TLMsgResendReq) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msg_resend_req))

	x.VectorLong(m.GetMsgIds())

	return x.buf
}

func (m *TLMsgResendReq) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msg_resend_req))

	x.VectorLong(m.GetMsgIds())

	return x.buf
}

func (m *TLMsgResendReq) Decode(dbuf *DecodeBuf) error {
	m.SetMsgIds(dbuf.VectorLong())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// RpcError <--
//  + TL_RpcError
//

func (m *RpcError) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_rpc_error:
		t := m.To_RpcError()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RpcError) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_rpc_error:
		t := m.To_RpcError()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RpcError) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_rpc_error:
		m2 := &TLRpcError{Data2: &RpcError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// rpc_error#2144ca19 error_code:int error_message:string = RpcError;
func (m *RpcError) To_RpcError() *TLRpcError {
	return &TLRpcError{
		Data2: m.Data2,
	}
}

// rpc_error#2144ca19 error_code:int error_message:string = RpcError;
func (m *TLRpcError) To_RpcError() *RpcError {
	return &RpcError{
		Constructor: TLConstructor_CRC32_rpc_error,
		Data2:       m.Data2,
	}
}

func (m *TLRpcError) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLRpcError) GetErrorCode() int32  { return m.Data2.ErrorCode }

func (m *TLRpcError) SetErrorMessage(v string) { m.Data2.ErrorMessage = v }
func (m *TLRpcError) GetErrorMessage() string  { return m.Data2.ErrorMessage }

func NewTLRpcError() *TLRpcError {
	return &TLRpcError{Data2: &RpcError_Data{}}
}

func (m *TLRpcError) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_error))

	x.Int(m.GetErrorCode())
	x.String(m.GetErrorMessage())

	return x.buf
}

func (m *TLRpcError) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_error))

	x.Int(m.GetErrorCode())
	x.String(m.GetErrorMessage())

	return x.buf
}

func (m *TLRpcError) Decode(dbuf *DecodeBuf) error {
	m.SetErrorCode(dbuf.Int())
	m.SetErrorMessage(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DestroySessionRes <--
//  + TL_DestroySessionOk
//  + TL_DestroySessionNone
//

func (m *DestroySessionRes) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_destroy_session_ok:
		t := m.To_DestroySessionOk()
		return t.Encode()
	case TLConstructor_CRC32_destroy_session_none:
		t := m.To_DestroySessionNone()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DestroySessionRes) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_destroy_session_ok:
		t := m.To_DestroySessionOk()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_destroy_session_none:
		t := m.To_DestroySessionNone()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DestroySessionRes) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_destroy_session_ok:
		m2 := &TLDestroySessionOk{Data2: &DestroySessionRes_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_destroy_session_none:
		m2 := &TLDestroySessionNone{Data2: &DestroySessionRes_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// destroy_session_ok#e22045fc session_id:long = DestroySessionRes;
func (m *DestroySessionRes) To_DestroySessionOk() *TLDestroySessionOk {
	return &TLDestroySessionOk{
		Data2: m.Data2,
	}
}

// destroy_session_none#62d350c9 session_id:long = DestroySessionRes;
func (m *DestroySessionRes) To_DestroySessionNone() *TLDestroySessionNone {
	return &TLDestroySessionNone{
		Data2: m.Data2,
	}
}

// destroy_session_ok#e22045fc session_id:long = DestroySessionRes;
func (m *TLDestroySessionOk) To_DestroySessionRes() *DestroySessionRes {
	return &DestroySessionRes{
		Constructor: TLConstructor_CRC32_destroy_session_ok,
		Data2:       m.Data2,
	}
}

func (m *TLDestroySessionOk) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLDestroySessionOk) GetSessionId() int64  { return m.Data2.SessionId }

func NewTLDestroySessionOk() *TLDestroySessionOk {
	return &TLDestroySessionOk{Data2: &DestroySessionRes_Data{}}
}

func (m *TLDestroySessionOk) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_session_ok))

	x.Long(m.GetSessionId())

	return x.buf
}

func (m *TLDestroySessionOk) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_session_ok))

	x.Long(m.GetSessionId())

	return x.buf
}

func (m *TLDestroySessionOk) Decode(dbuf *DecodeBuf) error {
	m.SetSessionId(dbuf.Long())

	return dbuf.err
}

// destroy_session_none#62d350c9 session_id:long = DestroySessionRes;
func (m *TLDestroySessionNone) To_DestroySessionRes() *DestroySessionRes {
	return &DestroySessionRes{
		Constructor: TLConstructor_CRC32_destroy_session_none,
		Data2:       m.Data2,
	}
}

func (m *TLDestroySessionNone) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLDestroySessionNone) GetSessionId() int64  { return m.Data2.SessionId }

func NewTLDestroySessionNone() *TLDestroySessionNone {
	return &TLDestroySessionNone{Data2: &DestroySessionRes_Data{}}
}

func (m *TLDestroySessionNone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_session_none))

	x.Long(m.GetSessionId())

	return x.buf
}

func (m *TLDestroySessionNone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_session_none))

	x.Long(m.GetSessionId())

	return x.buf
}

func (m *TLDestroySessionNone) Decode(dbuf *DecodeBuf) error {
	m.SetSessionId(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// AccessPointRule <--
//  + TL_AccessPointRule
//

func (m *AccessPointRule) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_accessPointRule:
		t := m.To_AccessPointRule()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AccessPointRule) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_accessPointRule:
		t := m.To_AccessPointRule()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AccessPointRule) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_accessPointRule:
		m2 := &TLAccessPointRule{Data2: &AccessPointRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// accessPointRule#4679b65f phone_prefix_rules:string dc_id:int ips:vector<IpPort> = AccessPointRule;
func (m *AccessPointRule) To_AccessPointRule() *TLAccessPointRule {
	return &TLAccessPointRule{
		Data2: m.Data2,
	}
}

// accessPointRule#4679b65f phone_prefix_rules:string dc_id:int ips:vector<IpPort> = AccessPointRule;
func (m *TLAccessPointRule) To_AccessPointRule() *AccessPointRule {
	return &AccessPointRule{
		Constructor: TLConstructor_CRC32_accessPointRule,
		Data2:       m.Data2,
	}
}

func (m *TLAccessPointRule) SetPhonePrefixRules(v string) { m.Data2.PhonePrefixRules = v }
func (m *TLAccessPointRule) GetPhonePrefixRules() string  { return m.Data2.PhonePrefixRules }

func (m *TLAccessPointRule) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLAccessPointRule) GetDcId() int32  { return m.Data2.DcId }

func (m *TLAccessPointRule) SetIps(v []*IpPort) { m.Data2.Ips = v }
func (m *TLAccessPointRule) GetIps() []*IpPort  { return m.Data2.Ips }

func NewTLAccessPointRule() *TLAccessPointRule {
	return &TLAccessPointRule{Data2: &AccessPointRule_Data{}}
}

func (m *TLAccessPointRule) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_accessPointRule))

	x.String(m.GetPhonePrefixRules())
	x.Int(m.GetDcId())
	x.Int(int32(len(m.GetIps())))
	for _, v := range m.GetIps() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccessPointRule) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_accessPointRule))

	x.String(m.GetPhonePrefixRules())
	x.Int(m.GetDcId())
	x.Int(int32(len(m.GetIps())))
	for _, v := range m.GetIps() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccessPointRule) Decode(dbuf *DecodeBuf) error {
	m.SetPhonePrefixRules(dbuf.String())
	m.SetDcId(dbuf.Int())
	l3 := dbuf.Int()
	v3 := make([]*IpPort, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &IpPort{}
		v3[i].Decode(dbuf)
	}
	m.SetIps(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MsgsStateInfo <--
//  + TL_MsgsStateInfo
//

func (m *MsgsStateInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_msgs_state_info:
		t := m.To_MsgsStateInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsStateInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_msgs_state_info:
		t := m.To_MsgsStateInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsStateInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_msgs_state_info:
		m2 := &TLMsgsStateInfo{Data2: &MsgsStateInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// msgs_state_info#04deb57d req_msg_id:long info:string = MsgsStateInfo;
func (m *MsgsStateInfo) To_MsgsStateInfo() *TLMsgsStateInfo {
	return &TLMsgsStateInfo{
		Data2: m.Data2,
	}
}

// msgs_state_info#04deb57d req_msg_id:long info:string = MsgsStateInfo;
func (m *TLMsgsStateInfo) To_MsgsStateInfo() *MsgsStateInfo {
	return &MsgsStateInfo{
		Constructor: TLConstructor_CRC32_msgs_state_info,
		Data2:       m.Data2,
	}
}

func (m *TLMsgsStateInfo) SetReqMsgId(v int64) { m.Data2.ReqMsgId = v }
func (m *TLMsgsStateInfo) GetReqMsgId() int64  { return m.Data2.ReqMsgId }

func (m *TLMsgsStateInfo) SetInfo(v string) { m.Data2.Info = v }
func (m *TLMsgsStateInfo) GetInfo() string  { return m.Data2.Info }

func NewTLMsgsStateInfo() *TLMsgsStateInfo {
	return &TLMsgsStateInfo{Data2: &MsgsStateInfo_Data{}}
}

func (m *TLMsgsStateInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_state_info))

	x.Long(m.GetReqMsgId())
	x.String(m.GetInfo())

	return x.buf
}

func (m *TLMsgsStateInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_state_info))

	x.Long(m.GetReqMsgId())
	x.String(m.GetInfo())

	return x.buf
}

func (m *TLMsgsStateInfo) Decode(dbuf *DecodeBuf) error {
	m.SetReqMsgId(dbuf.Long())
	m.SetInfo(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// RpcDropAnswer <--
//  + TL_RpcAnswerUnknown
//  + TL_RpcAnswerDroppedRunning
//  + TL_RpcAnswerDropped
//

func (m *RpcDropAnswer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_rpc_answer_unknown:
		t := m.To_RpcAnswerUnknown()
		return t.Encode()
	case TLConstructor_CRC32_rpc_answer_dropped_running:
		t := m.To_RpcAnswerDroppedRunning()
		return t.Encode()
	case TLConstructor_CRC32_rpc_answer_dropped:
		t := m.To_RpcAnswerDropped()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RpcDropAnswer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_rpc_answer_unknown:
		t := m.To_RpcAnswerUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_rpc_answer_dropped_running:
		t := m.To_RpcAnswerDroppedRunning()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_rpc_answer_dropped:
		t := m.To_RpcAnswerDropped()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RpcDropAnswer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_rpc_answer_unknown:
		m2 := &TLRpcAnswerUnknown{Data2: &RpcDropAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_rpc_answer_dropped_running:
		m2 := &TLRpcAnswerDroppedRunning{Data2: &RpcDropAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_rpc_answer_dropped:
		m2 := &TLRpcAnswerDropped{Data2: &RpcDropAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// rpc_answer_unknown#5e2ad36e = RpcDropAnswer;
func (m *RpcDropAnswer) To_RpcAnswerUnknown() *TLRpcAnswerUnknown {
	return &TLRpcAnswerUnknown{
		Data2: m.Data2,
	}
}

// rpc_answer_dropped_running#cd78e586 = RpcDropAnswer;
func (m *RpcDropAnswer) To_RpcAnswerDroppedRunning() *TLRpcAnswerDroppedRunning {
	return &TLRpcAnswerDroppedRunning{
		Data2: m.Data2,
	}
}

// rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;
func (m *RpcDropAnswer) To_RpcAnswerDropped() *TLRpcAnswerDropped {
	return &TLRpcAnswerDropped{
		Data2: m.Data2,
	}
}

// rpc_answer_unknown#5e2ad36e = RpcDropAnswer;
func (m *TLRpcAnswerUnknown) To_RpcDropAnswer() *RpcDropAnswer {
	return &RpcDropAnswer{
		Constructor: TLConstructor_CRC32_rpc_answer_unknown,
		Data2:       m.Data2,
	}
}

func NewTLRpcAnswerUnknown() *TLRpcAnswerUnknown {
	return &TLRpcAnswerUnknown{Data2: &RpcDropAnswer_Data{}}
}

func (m *TLRpcAnswerUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_answer_unknown))

	return x.buf
}

func (m *TLRpcAnswerUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_answer_unknown))

	return x.buf
}

func (m *TLRpcAnswerUnknown) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// rpc_answer_dropped_running#cd78e586 = RpcDropAnswer;
func (m *TLRpcAnswerDroppedRunning) To_RpcDropAnswer() *RpcDropAnswer {
	return &RpcDropAnswer{
		Constructor: TLConstructor_CRC32_rpc_answer_dropped_running,
		Data2:       m.Data2,
	}
}

func NewTLRpcAnswerDroppedRunning() *TLRpcAnswerDroppedRunning {
	return &TLRpcAnswerDroppedRunning{Data2: &RpcDropAnswer_Data{}}
}

func (m *TLRpcAnswerDroppedRunning) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_answer_dropped_running))

	return x.buf
}

func (m *TLRpcAnswerDroppedRunning) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_answer_dropped_running))

	return x.buf
}

func (m *TLRpcAnswerDroppedRunning) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;
func (m *TLRpcAnswerDropped) To_RpcDropAnswer() *RpcDropAnswer {
	return &RpcDropAnswer{
		Constructor: TLConstructor_CRC32_rpc_answer_dropped,
		Data2:       m.Data2,
	}
}

func (m *TLRpcAnswerDropped) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLRpcAnswerDropped) GetMsgId() int64  { return m.Data2.MsgId }

func (m *TLRpcAnswerDropped) SetSeqNo(v int32) { m.Data2.SeqNo = v }
func (m *TLRpcAnswerDropped) GetSeqNo() int32  { return m.Data2.SeqNo }

func (m *TLRpcAnswerDropped) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLRpcAnswerDropped) GetBytes() int32  { return m.Data2.Bytes }

func NewTLRpcAnswerDropped() *TLRpcAnswerDropped {
	return &TLRpcAnswerDropped{Data2: &RpcDropAnswer_Data{}}
}

func (m *TLRpcAnswerDropped) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_answer_dropped))

	x.Long(m.GetMsgId())
	x.Int(m.GetSeqNo())
	x.Int(m.GetBytes())

	return x.buf
}

func (m *TLRpcAnswerDropped) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_answer_dropped))

	x.Long(m.GetMsgId())
	x.Int(m.GetSeqNo())
	x.Int(m.GetBytes())

	return x.buf
}

func (m *TLRpcAnswerDropped) Decode(dbuf *DecodeBuf) error {
	m.SetMsgId(dbuf.Long())
	m.SetSeqNo(dbuf.Int())
	m.SetBytes(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// IpPort <--
//  + TL_IpPort
//  + TL_IpPortSecret
//

func (m *IpPort) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_ipPort:
		t := m.To_IpPort()
		return t.Encode()
	case TLConstructor_CRC32_ipPortSecret:
		t := m.To_IpPortSecret()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *IpPort) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_ipPort:
		t := m.To_IpPort()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_ipPortSecret:
		t := m.To_IpPortSecret()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *IpPort) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_ipPort:
		m2 := &TLIpPort{Data2: &IpPort_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_ipPortSecret:
		m2 := &TLIpPortSecret{Data2: &IpPort_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// ipPort#d433ad73 ipv4:int port:int = IpPort;
func (m *IpPort) To_IpPort() *TLIpPort {
	return &TLIpPort{
		Data2: m.Data2,
	}
}

// ipPortSecret#37982646 ipv4:int port:int secret:bytes = IpPort;
func (m *IpPort) To_IpPortSecret() *TLIpPortSecret {
	return &TLIpPortSecret{
		Data2: m.Data2,
	}
}

// ipPort#d433ad73 ipv4:int port:int = IpPort;
func (m *TLIpPort) To_IpPort() *IpPort {
	return &IpPort{
		Constructor: TLConstructor_CRC32_ipPort,
		Data2:       m.Data2,
	}
}

func (m *TLIpPort) SetIpv4(v int32) { m.Data2.Ipv4 = v }
func (m *TLIpPort) GetIpv4() int32  { return m.Data2.Ipv4 }

func (m *TLIpPort) SetPort(v int32) { m.Data2.Port = v }
func (m *TLIpPort) GetPort() int32  { return m.Data2.Port }

func NewTLIpPort() *TLIpPort {
	return &TLIpPort{Data2: &IpPort_Data{}}
}

func (m *TLIpPort) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ipPort))

	x.Int(m.GetIpv4())
	x.Int(m.GetPort())

	return x.buf
}

func (m *TLIpPort) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ipPort))

	x.Int(m.GetIpv4())
	x.Int(m.GetPort())

	return x.buf
}

func (m *TLIpPort) Decode(dbuf *DecodeBuf) error {
	m.SetIpv4(dbuf.Int())
	m.SetPort(dbuf.Int())

	return dbuf.err
}

// ipPortSecret#37982646 ipv4:int port:int secret:bytes = IpPort;
func (m *TLIpPortSecret) To_IpPort() *IpPort {
	return &IpPort{
		Constructor: TLConstructor_CRC32_ipPortSecret,
		Data2:       m.Data2,
	}
}

func (m *TLIpPortSecret) SetIpv4(v int32) { m.Data2.Ipv4 = v }
func (m *TLIpPortSecret) GetIpv4() int32  { return m.Data2.Ipv4 }

func (m *TLIpPortSecret) SetPort(v int32) { m.Data2.Port = v }
func (m *TLIpPortSecret) GetPort() int32  { return m.Data2.Port }

func (m *TLIpPortSecret) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLIpPortSecret) GetSecret() []byte  { return m.Data2.Secret }

func NewTLIpPortSecret() *TLIpPortSecret {
	return &TLIpPortSecret{Data2: &IpPort_Data{}}
}

func (m *TLIpPortSecret) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ipPortSecret))

	x.Int(m.GetIpv4())
	x.Int(m.GetPort())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLIpPortSecret) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ipPortSecret))

	x.Int(m.GetIpv4())
	x.Int(m.GetPort())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLIpPortSecret) Decode(dbuf *DecodeBuf) error {
	m.SetIpv4(dbuf.Int())
	m.SetPort(dbuf.Int())
	m.SetSecret(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// BadMsgNotification <--
//  + TL_BadMsgNotification
//  + TL_BadServerSalt
//

func (m *BadMsgNotification) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_bad_msg_notification:
		t := m.To_BadMsgNotification()
		return t.Encode()
	case TLConstructor_CRC32_bad_server_salt:
		t := m.To_BadServerSalt()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BadMsgNotification) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_bad_msg_notification:
		t := m.To_BadMsgNotification()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_bad_server_salt:
		t := m.To_BadServerSalt()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BadMsgNotification) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_bad_msg_notification:
		m2 := &TLBadMsgNotification{Data2: &BadMsgNotification_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_bad_server_salt:
		m2 := &TLBadServerSalt{Data2: &BadMsgNotification_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;
func (m *BadMsgNotification) To_BadMsgNotification() *TLBadMsgNotification {
	return &TLBadMsgNotification{
		Data2: m.Data2,
	}
}

// bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;
func (m *BadMsgNotification) To_BadServerSalt() *TLBadServerSalt {
	return &TLBadServerSalt{
		Data2: m.Data2,
	}
}

// bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;
func (m *TLBadMsgNotification) To_BadMsgNotification() *BadMsgNotification {
	return &BadMsgNotification{
		Constructor: TLConstructor_CRC32_bad_msg_notification,
		Data2:       m.Data2,
	}
}

func (m *TLBadMsgNotification) SetBadMsgId(v int64) { m.Data2.BadMsgId = v }
func (m *TLBadMsgNotification) GetBadMsgId() int64  { return m.Data2.BadMsgId }

func (m *TLBadMsgNotification) SetBadMsgSeqno(v int32) { m.Data2.BadMsgSeqno = v }
func (m *TLBadMsgNotification) GetBadMsgSeqno() int32  { return m.Data2.BadMsgSeqno }

func (m *TLBadMsgNotification) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLBadMsgNotification) GetErrorCode() int32  { return m.Data2.ErrorCode }

func NewTLBadMsgNotification() *TLBadMsgNotification {
	return &TLBadMsgNotification{Data2: &BadMsgNotification_Data{}}
}

func (m *TLBadMsgNotification) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bad_msg_notification))

	x.Long(m.GetBadMsgId())
	x.Int(m.GetBadMsgSeqno())
	x.Int(m.GetErrorCode())

	return x.buf
}

func (m *TLBadMsgNotification) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bad_msg_notification))

	x.Long(m.GetBadMsgId())
	x.Int(m.GetBadMsgSeqno())
	x.Int(m.GetErrorCode())

	return x.buf
}

func (m *TLBadMsgNotification) Decode(dbuf *DecodeBuf) error {
	m.SetBadMsgId(dbuf.Long())
	m.SetBadMsgSeqno(dbuf.Int())
	m.SetErrorCode(dbuf.Int())

	return dbuf.err
}

// bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;
func (m *TLBadServerSalt) To_BadMsgNotification() *BadMsgNotification {
	return &BadMsgNotification{
		Constructor: TLConstructor_CRC32_bad_server_salt,
		Data2:       m.Data2,
	}
}

func (m *TLBadServerSalt) SetBadMsgId(v int64) { m.Data2.BadMsgId = v }
func (m *TLBadServerSalt) GetBadMsgId() int64  { return m.Data2.BadMsgId }

func (m *TLBadServerSalt) SetBadMsgSeqno(v int32) { m.Data2.BadMsgSeqno = v }
func (m *TLBadServerSalt) GetBadMsgSeqno() int32  { return m.Data2.BadMsgSeqno }

func (m *TLBadServerSalt) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLBadServerSalt) GetErrorCode() int32  { return m.Data2.ErrorCode }

func (m *TLBadServerSalt) SetNewServerSalt(v int64) { m.Data2.NewServerSalt = v }
func (m *TLBadServerSalt) GetNewServerSalt() int64  { return m.Data2.NewServerSalt }

func NewTLBadServerSalt() *TLBadServerSalt {
	return &TLBadServerSalt{Data2: &BadMsgNotification_Data{}}
}

func (m *TLBadServerSalt) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bad_server_salt))

	x.Long(m.GetBadMsgId())
	x.Int(m.GetBadMsgSeqno())
	x.Int(m.GetErrorCode())
	x.Long(m.GetNewServerSalt())

	return x.buf
}

func (m *TLBadServerSalt) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bad_server_salt))

	x.Long(m.GetBadMsgId())
	x.Int(m.GetBadMsgSeqno())
	x.Int(m.GetErrorCode())
	x.Long(m.GetNewServerSalt())

	return x.buf
}

func (m *TLBadServerSalt) Decode(dbuf *DecodeBuf) error {
	m.SetBadMsgId(dbuf.Long())
	m.SetBadMsgSeqno(dbuf.Int())
	m.SetErrorCode(dbuf.Int())
	m.SetNewServerSalt(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MsgDetailedInfo <--
//  + TL_MsgDetailedInfo
//  + TL_MsgNewDetailedInfo
//

func (m *MsgDetailedInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_msg_detailed_info:
		t := m.To_MsgDetailedInfo()
		return t.Encode()
	case TLConstructor_CRC32_msg_new_detailed_info:
		t := m.To_MsgNewDetailedInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgDetailedInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_msg_detailed_info:
		t := m.To_MsgDetailedInfo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_msg_new_detailed_info:
		t := m.To_MsgNewDetailedInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgDetailedInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_msg_detailed_info:
		m2 := &TLMsgDetailedInfo{Data2: &MsgDetailedInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_msg_new_detailed_info:
		m2 := &TLMsgNewDetailedInfo{Data2: &MsgDetailedInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *MsgDetailedInfo) To_MsgDetailedInfo() *TLMsgDetailedInfo {
	return &TLMsgDetailedInfo{
		Data2: m.Data2,
	}
}

// msg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *MsgDetailedInfo) To_MsgNewDetailedInfo() *TLMsgNewDetailedInfo {
	return &TLMsgNewDetailedInfo{
		Data2: m.Data2,
	}
}

// msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *TLMsgDetailedInfo) To_MsgDetailedInfo() *MsgDetailedInfo {
	return &MsgDetailedInfo{
		Constructor: TLConstructor_CRC32_msg_detailed_info,
		Data2:       m.Data2,
	}
}

func (m *TLMsgDetailedInfo) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLMsgDetailedInfo) GetMsgId() int64  { return m.Data2.MsgId }

func (m *TLMsgDetailedInfo) SetAnswerMsgId(v int64) { m.Data2.AnswerMsgId = v }
func (m *TLMsgDetailedInfo) GetAnswerMsgId() int64  { return m.Data2.AnswerMsgId }

func (m *TLMsgDetailedInfo) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLMsgDetailedInfo) GetBytes() int32  { return m.Data2.Bytes }

func (m *TLMsgDetailedInfo) SetStatus(v int32) { m.Data2.Status = v }
func (m *TLMsgDetailedInfo) GetStatus() int32  { return m.Data2.Status }

func NewTLMsgDetailedInfo() *TLMsgDetailedInfo {
	return &TLMsgDetailedInfo{Data2: &MsgDetailedInfo_Data{}}
}

func (m *TLMsgDetailedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msg_detailed_info))

	x.Long(m.GetMsgId())
	x.Long(m.GetAnswerMsgId())
	x.Int(m.GetBytes())
	x.Int(m.GetStatus())

	return x.buf
}

func (m *TLMsgDetailedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msg_detailed_info))

	x.Long(m.GetMsgId())
	x.Long(m.GetAnswerMsgId())
	x.Int(m.GetBytes())
	x.Int(m.GetStatus())

	return x.buf
}

func (m *TLMsgDetailedInfo) Decode(dbuf *DecodeBuf) error {
	m.SetMsgId(dbuf.Long())
	m.SetAnswerMsgId(dbuf.Long())
	m.SetBytes(dbuf.Int())
	m.SetStatus(dbuf.Int())

	return dbuf.err
}

// msg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *TLMsgNewDetailedInfo) To_MsgDetailedInfo() *MsgDetailedInfo {
	return &MsgDetailedInfo{
		Constructor: TLConstructor_CRC32_msg_new_detailed_info,
		Data2:       m.Data2,
	}
}

func (m *TLMsgNewDetailedInfo) SetAnswerMsgId(v int64) { m.Data2.AnswerMsgId = v }
func (m *TLMsgNewDetailedInfo) GetAnswerMsgId() int64  { return m.Data2.AnswerMsgId }

func (m *TLMsgNewDetailedInfo) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLMsgNewDetailedInfo) GetBytes() int32  { return m.Data2.Bytes }

func (m *TLMsgNewDetailedInfo) SetStatus(v int32) { m.Data2.Status = v }
func (m *TLMsgNewDetailedInfo) GetStatus() int32  { return m.Data2.Status }

func NewTLMsgNewDetailedInfo() *TLMsgNewDetailedInfo {
	return &TLMsgNewDetailedInfo{Data2: &MsgDetailedInfo_Data{}}
}

func (m *TLMsgNewDetailedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msg_new_detailed_info))

	x.Long(m.GetAnswerMsgId())
	x.Int(m.GetBytes())
	x.Int(m.GetStatus())

	return x.buf
}

func (m *TLMsgNewDetailedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msg_new_detailed_info))

	x.Long(m.GetAnswerMsgId())
	x.Int(m.GetBytes())
	x.Int(m.GetStatus())

	return x.buf
}

func (m *TLMsgNewDetailedInfo) Decode(dbuf *DecodeBuf) error {
	m.SetAnswerMsgId(dbuf.Long())
	m.SetBytes(dbuf.Int())
	m.SetStatus(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// FutureSalts <--
//  + TL_FutureSalts
//

func (m *FutureSalts) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_future_salts:
		t := m.To_FutureSalts()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FutureSalts) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_future_salts:
		t := m.To_FutureSalts()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FutureSalts) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_future_salts:
		m2 := &TLFutureSalts{Data2: &FutureSalts_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
func (m *FutureSalts) To_FutureSalts() *TLFutureSalts {
	return &TLFutureSalts{
		Data2: m.Data2,
	}
}

// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
func (m *TLFutureSalts) To_FutureSalts() *FutureSalts {
	return &FutureSalts{
		Constructor: TLConstructor_CRC32_future_salts,
		Data2:       m.Data2,
	}
}

func (m *TLFutureSalts) SetReqMsgId(v int64) { m.Data2.ReqMsgId = v }
func (m *TLFutureSalts) GetReqMsgId() int64  { return m.Data2.ReqMsgId }

func (m *TLFutureSalts) SetNow(v int32) { m.Data2.Now = v }
func (m *TLFutureSalts) GetNow() int32  { return m.Data2.Now }

func (m *TLFutureSalts) SetSalts(v []*TLFutureSalt) { m.Data2.Salts = v }
func (m *TLFutureSalts) GetSalts() []*TLFutureSalt  { return m.Data2.Salts }

func NewTLFutureSalts() *TLFutureSalts {
	return &TLFutureSalts{Data2: &FutureSalts_Data{}}
}

func (m *TLFutureSalts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_future_salts))

	x.Long(m.GetReqMsgId())
	x.Int(m.GetNow())
	x.Int(int32(len(m.GetSalts())))
	for _, v := range m.GetSalts() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLFutureSalts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_future_salts))

	x.Long(m.GetReqMsgId())
	x.Int(m.GetNow())
	x.Int(int32(len(m.GetSalts())))
	for _, v := range m.GetSalts() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLFutureSalts) Decode(dbuf *DecodeBuf) error {
	m.SetReqMsgId(dbuf.Long())
	m.SetNow(dbuf.Int())
	l3 := dbuf.Int()
	v3 := make([]*TLFutureSalt, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &TLFutureSalt{}
		v3[i].Decode(dbuf)
	}
	m.SetSalts(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_ConfigSimple <--
//  + TL_HelpConfigSimple
//

func (m *Help_ConfigSimple) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_configSimple:
		t := m.To_HelpConfigSimple()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_ConfigSimple) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_configSimple:
		t := m.To_HelpConfigSimple()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_ConfigSimple) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_configSimple:
		m2 := &TLHelpConfigSimple{Data2: &Help_ConfigSimple_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.configSimple#5a592a6c date:int expires:int rules:vector<AccessPointRule> = help.ConfigSimple;
func (m *Help_ConfigSimple) To_HelpConfigSimple() *TLHelpConfigSimple {
	return &TLHelpConfigSimple{
		Data2: m.Data2,
	}
}

// help.configSimple#5a592a6c date:int expires:int rules:vector<AccessPointRule> = help.ConfigSimple;
func (m *TLHelpConfigSimple) To_Help_ConfigSimple() *Help_ConfigSimple {
	return &Help_ConfigSimple{
		Constructor: TLConstructor_CRC32_help_configSimple,
		Data2:       m.Data2,
	}
}

func (m *TLHelpConfigSimple) SetDate(v int32) { m.Data2.Date = v }
func (m *TLHelpConfigSimple) GetDate() int32  { return m.Data2.Date }

func (m *TLHelpConfigSimple) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpConfigSimple) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpConfigSimple) SetRules(v []*AccessPointRule) { m.Data2.Rules = v }
func (m *TLHelpConfigSimple) GetRules() []*AccessPointRule  { return m.Data2.Rules }

func NewTLHelpConfigSimple() *TLHelpConfigSimple {
	return &TLHelpConfigSimple{Data2: &Help_ConfigSimple_Data{}}
}

func (m *TLHelpConfigSimple) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_configSimple))

	x.Int(m.GetDate())
	x.Int(m.GetExpires())
	x.Int(int32(len(m.GetRules())))
	for _, v := range m.GetRules() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLHelpConfigSimple) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_configSimple))

	x.Int(m.GetDate())
	x.Int(m.GetExpires())
	x.Int(int32(len(m.GetRules())))
	for _, v := range m.GetRules() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLHelpConfigSimple) Decode(dbuf *DecodeBuf) error {
	m.SetDate(dbuf.Int())
	m.SetExpires(dbuf.Int())
	l3 := dbuf.Int()
	v3 := make([]*AccessPointRule, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &AccessPointRule{}
		v3[i].Decode(dbuf)
	}
	m.SetRules(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MsgsAck <--
//  + TL_MsgsAck
//

func (m *MsgsAck) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_msgs_ack:
		t := m.To_MsgsAck()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsAck) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_msgs_ack:
		t := m.To_MsgsAck()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MsgsAck) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_msgs_ack:
		m2 := &TLMsgsAck{Data2: &MsgsAck_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// msgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck;
func (m *MsgsAck) To_MsgsAck() *TLMsgsAck {
	return &TLMsgsAck{
		Data2: m.Data2,
	}
}

// msgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck;
func (m *TLMsgsAck) To_MsgsAck() *MsgsAck {
	return &MsgsAck{
		Constructor: TLConstructor_CRC32_msgs_ack,
		Data2:       m.Data2,
	}
}

func (m *TLMsgsAck) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsAck) GetMsgIds() []int64  { return m.Data2.MsgIds }

func NewTLMsgsAck() *TLMsgsAck {
	return &TLMsgsAck{Data2: &MsgsAck_Data{}}
}

func (m *TLMsgsAck) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_ack))

	x.VectorLong(m.GetMsgIds())

	return x.buf
}

func (m *TLMsgsAck) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_msgs_ack))

	x.VectorLong(m.GetMsgIds())

	return x.buf
}

func (m *TLMsgsAck) Decode(dbuf *DecodeBuf) error {
	m.SetMsgIds(dbuf.VectorLong())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_PeerDialogs <--
//  + TL_MessagesPeerDialogs
//

func (m *Messages_PeerDialogs) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_peerDialogs:
		t := m.To_MessagesPeerDialogs()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_PeerDialogs) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_peerDialogs:
		t := m.To_MessagesPeerDialogs()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_PeerDialogs) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_peerDialogs:
		m2 := &TLMessagesPeerDialogs{Data2: &Messages_PeerDialogs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.peerDialogs#3371c354 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> state:updates.State = messages.PeerDialogs;
func (m *Messages_PeerDialogs) To_MessagesPeerDialogs() *TLMessagesPeerDialogs {
	return &TLMessagesPeerDialogs{
		Data2: m.Data2,
	}
}

// messages.peerDialogs#3371c354 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> state:updates.State = messages.PeerDialogs;
func (m *TLMessagesPeerDialogs) To_Messages_PeerDialogs() *Messages_PeerDialogs {
	return &Messages_PeerDialogs{
		Constructor: TLConstructor_CRC32_messages_peerDialogs,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesPeerDialogs) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesPeerDialogs) GetDialogs() []*Dialog  { return m.Data2.Dialogs }

func (m *TLMessagesPeerDialogs) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesPeerDialogs) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesPeerDialogs) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesPeerDialogs) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesPeerDialogs) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesPeerDialogs) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesPeerDialogs) SetState(v *Updates_State) { m.Data2.State = v }
func (m *TLMessagesPeerDialogs) GetState() *Updates_State  { return m.Data2.State }

func NewTLMessagesPeerDialogs() *TLMessagesPeerDialogs {
	return &TLMessagesPeerDialogs{Data2: &Messages_PeerDialogs_Data{}}
}

func (m *TLMessagesPeerDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_peerDialogs))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDialogs())))
	for _, v := range m.GetDialogs() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetState().Encode())

	return x.buf
}

func (m *TLMessagesPeerDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_peerDialogs))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDialogs())))
	for _, v := range m.GetDialogs() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetState().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesPeerDialogs) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Dialog, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Dialog{}
		v1[i].Decode(dbuf)
	}
	m.SetDialogs(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Message, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Message{}
		v2[i].Decode(dbuf)
	}
	m.SetMessages(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*User, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &User{}
		v4[i].Decode(dbuf)
	}
	m.SetUsers(v4)

	m5 := &Updates_State{}
	m5.Decode(dbuf)
	m.SetState(m5)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Phone_PhoneCall <--
//  + TL_PhonePhoneCall
//

func (m *Phone_PhoneCall) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_phone_phoneCall:
		t := m.To_PhonePhoneCall()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Phone_PhoneCall) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_phone_phoneCall:
		t := m.To_PhonePhoneCall()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Phone_PhoneCall) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_phone_phoneCall:
		m2 := &TLPhonePhoneCall{Data2: &Phone_PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// phone.phoneCall#ec82e140 phone_call:PhoneCall users:Vector<User> = phone.PhoneCall;
func (m *Phone_PhoneCall) To_PhonePhoneCall() *TLPhonePhoneCall {
	return &TLPhonePhoneCall{
		Data2: m.Data2,
	}
}

// phone.phoneCall#ec82e140 phone_call:PhoneCall users:Vector<User> = phone.PhoneCall;
func (m *TLPhonePhoneCall) To_Phone_PhoneCall() *Phone_PhoneCall {
	return &Phone_PhoneCall{
		Constructor: TLConstructor_CRC32_phone_phoneCall,
		Data2:       m.Data2,
	}
}

func (m *TLPhonePhoneCall) SetPhoneCall(v *PhoneCall) { m.Data2.PhoneCall = v }
func (m *TLPhonePhoneCall) GetPhoneCall() *PhoneCall  { return m.Data2.PhoneCall }

func (m *TLPhonePhoneCall) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhonePhoneCall) GetUsers() []*User  { return m.Data2.Users }

func NewTLPhonePhoneCall() *TLPhonePhoneCall {
	return &TLPhonePhoneCall{Data2: &Phone_PhoneCall_Data{}}
}

func (m *TLPhonePhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_phoneCall))

	x.Bytes(m.GetPhoneCall().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhonePhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_phoneCall))

	x.Bytes(m.GetPhoneCall().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhonePhoneCall) Decode(dbuf *DecodeBuf) error {
	m1 := &PhoneCall{}
	m1.Decode(dbuf)
	m.SetPhoneCall(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ContactStatus <--
//  + TL_ContactStatus
//

func (m *ContactStatus) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contactStatus:
		t := m.To_ContactStatus()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ContactStatus) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contactStatus:
		t := m.To_ContactStatus()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ContactStatus) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contactStatus:
		m2 := &TLContactStatus{Data2: &ContactStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus;
func (m *ContactStatus) To_ContactStatus() *TLContactStatus {
	return &TLContactStatus{
		Data2: m.Data2,
	}
}

// contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus;
func (m *TLContactStatus) To_ContactStatus() *ContactStatus {
	return &ContactStatus{
		Constructor: TLConstructor_CRC32_contactStatus,
		Data2:       m.Data2,
	}
}

func (m *TLContactStatus) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLContactStatus) GetUserId() int32  { return m.Data2.UserId }

func (m *TLContactStatus) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLContactStatus) GetStatus() *UserStatus  { return m.Data2.Status }

func NewTLContactStatus() *TLContactStatus {
	return &TLContactStatus{Data2: &ContactStatus_Data{}}
}

func (m *TLContactStatus) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactStatus))

	x.Int(m.GetUserId())
	x.Bytes(m.GetStatus().Encode())

	return x.buf
}

func (m *TLContactStatus) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactStatus))

	x.Int(m.GetUserId())
	x.Bytes(m.GetStatus().EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactStatus) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m2 := &UserStatus{}
	m2.Decode(dbuf)
	m.SetStatus(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_AppUpdate <--
//  + TL_HelpAppUpdate
//  + TL_HelpNoAppUpdate
//

func (m *Help_AppUpdate) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_appUpdate:
		t := m.To_HelpAppUpdate()
		return t.Encode()
	case TLConstructor_CRC32_help_noAppUpdate:
		t := m.To_HelpNoAppUpdate()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_AppUpdate) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_appUpdate:
		t := m.To_HelpAppUpdate()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_help_noAppUpdate:
		t := m.To_HelpNoAppUpdate()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_AppUpdate) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_appUpdate:
		m2 := &TLHelpAppUpdate{Data2: &Help_AppUpdate_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_help_noAppUpdate:
		m2 := &TLHelpNoAppUpdate{Data2: &Help_AppUpdate_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.appUpdate#1da7158f flags:# popup:flags.0?true id:int version:string text:string entities:Vector<MessageEntity> document:flags.1?Document url:flags.2?string = help.AppUpdate;
func (m *Help_AppUpdate) To_HelpAppUpdate() *TLHelpAppUpdate {
	return &TLHelpAppUpdate{
		Data2: m.Data2,
	}
}

// help.noAppUpdate#c45a6536 = help.AppUpdate;
func (m *Help_AppUpdate) To_HelpNoAppUpdate() *TLHelpNoAppUpdate {
	return &TLHelpNoAppUpdate{
		Data2: m.Data2,
	}
}

// help.appUpdate#1da7158f flags:# popup:flags.0?true id:int version:string text:string entities:Vector<MessageEntity> document:flags.1?Document url:flags.2?string = help.AppUpdate;
func (m *TLHelpAppUpdate) To_Help_AppUpdate() *Help_AppUpdate {
	return &Help_AppUpdate{
		Constructor: TLConstructor_CRC32_help_appUpdate,
		Data2:       m.Data2,
	}
}

func (m *TLHelpAppUpdate) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLHelpAppUpdate) GetPopup() bool  { return m.Data2.Popup }

func (m *TLHelpAppUpdate) SetId(v int32) { m.Data2.Id = v }
func (m *TLHelpAppUpdate) GetId() int32  { return m.Data2.Id }

func (m *TLHelpAppUpdate) SetVersion(v string) { m.Data2.Version = v }
func (m *TLHelpAppUpdate) GetVersion() string  { return m.Data2.Version }

func (m *TLHelpAppUpdate) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpAppUpdate) GetText() string  { return m.Data2.Text }

func (m *TLHelpAppUpdate) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpAppUpdate) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLHelpAppUpdate) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLHelpAppUpdate) GetDocument() *Document  { return m.Data2.Document }

func (m *TLHelpAppUpdate) SetUrl(v string) { m.Data2.Url = v }
func (m *TLHelpAppUpdate) GetUrl() string  { return m.Data2.Url }

func NewTLHelpAppUpdate() *TLHelpAppUpdate {
	return &TLHelpAppUpdate{Data2: &Help_AppUpdate_Data{}}
}

func (m *TLHelpAppUpdate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_appUpdate))

	// flags
	var flags uint32 = 0
	if m.GetPopup() == true {
		flags |= 1 << 0
	}
	if m.GetDocument() != nil {
		flags |= 1 << 1
	}
	if m.GetUrl() != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetVersion())
	x.String(m.GetText())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEntities())))
	for _, v := range m.GetEntities() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().Encode())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}

	return x.buf
}

func (m *TLHelpAppUpdate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_appUpdate))

	// flags
	var flags uint32 = 0
	if m.GetPopup() == true {
		flags |= 1 << 0
	}
	if m.GetDocument() != nil {
		flags |= 1 << 1
	}
	if m.GetUrl() != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetVersion())
	x.String(m.GetText())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEntities())))
	for _, v := range m.GetEntities() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().EncodeToLayer(layer))
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}

	return x.buf
}

func (m *TLHelpAppUpdate) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetPopup(true)
	}
	m.SetId(dbuf.Int())
	m.SetVersion(dbuf.String())
	m.SetText(dbuf.String())
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*MessageEntity, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &MessageEntity{}
		v6[i].Decode(dbuf)
	}
	m.SetEntities(v6)

	if (flags & (1 << 1)) != 0 {
		m7 := &Document{}
		m7.Decode(dbuf)
		m.SetDocument(m7)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetUrl(dbuf.String())
	}

	return dbuf.err
}

// help.noAppUpdate#c45a6536 = help.AppUpdate;
func (m *TLHelpNoAppUpdate) To_Help_AppUpdate() *Help_AppUpdate {
	return &Help_AppUpdate{
		Constructor: TLConstructor_CRC32_help_noAppUpdate,
		Data2:       m.Data2,
	}
}

func NewTLHelpNoAppUpdate() *TLHelpNoAppUpdate {
	return &TLHelpNoAppUpdate{Data2: &Help_AppUpdate_Data{}}
}

func (m *TLHelpNoAppUpdate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_noAppUpdate))

	return x.buf
}

func (m *TLHelpNoAppUpdate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_noAppUpdate))

	return x.buf
}

func (m *TLHelpNoAppUpdate) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SendMessageAction <--
//  + TL_SendMessageTypingAction
//  + TL_SendMessageCancelAction
//  + TL_SendMessageRecordVideoAction
//  + TL_SendMessageUploadVideoAction
//  + TL_SendMessageRecordAudioAction
//  + TL_SendMessageUploadAudioAction
//  + TL_SendMessageUploadPhotoAction
//  + TL_SendMessageUploadDocumentAction
//  + TL_SendMessageGeoLocationAction
//  + TL_SendMessageChooseContactAction
//  + TL_SendMessageGamePlayAction
//  + TL_SendMessageRecordRoundAction
//  + TL_SendMessageUploadRoundAction
//

func (m *SendMessageAction) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_sendMessageTypingAction:
		t := m.To_SendMessageTypingAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageCancelAction:
		t := m.To_SendMessageCancelAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageRecordVideoAction:
		t := m.To_SendMessageRecordVideoAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageUploadVideoAction:
		t := m.To_SendMessageUploadVideoAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageRecordAudioAction:
		t := m.To_SendMessageRecordAudioAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageUploadAudioAction:
		t := m.To_SendMessageUploadAudioAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageUploadPhotoAction:
		t := m.To_SendMessageUploadPhotoAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageUploadDocumentAction:
		t := m.To_SendMessageUploadDocumentAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageGeoLocationAction:
		t := m.To_SendMessageGeoLocationAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageChooseContactAction:
		t := m.To_SendMessageChooseContactAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageGamePlayAction:
		t := m.To_SendMessageGamePlayAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageRecordRoundAction:
		t := m.To_SendMessageRecordRoundAction()
		return t.Encode()
	case TLConstructor_CRC32_sendMessageUploadRoundAction:
		t := m.To_SendMessageUploadRoundAction()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SendMessageAction) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_sendMessageTypingAction:
		t := m.To_SendMessageTypingAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageCancelAction:
		t := m.To_SendMessageCancelAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageRecordVideoAction:
		t := m.To_SendMessageRecordVideoAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageUploadVideoAction:
		t := m.To_SendMessageUploadVideoAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageRecordAudioAction:
		t := m.To_SendMessageRecordAudioAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageUploadAudioAction:
		t := m.To_SendMessageUploadAudioAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageUploadPhotoAction:
		t := m.To_SendMessageUploadPhotoAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageUploadDocumentAction:
		t := m.To_SendMessageUploadDocumentAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageGeoLocationAction:
		t := m.To_SendMessageGeoLocationAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageChooseContactAction:
		t := m.To_SendMessageChooseContactAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageGamePlayAction:
		t := m.To_SendMessageGamePlayAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageRecordRoundAction:
		t := m.To_SendMessageRecordRoundAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sendMessageUploadRoundAction:
		t := m.To_SendMessageUploadRoundAction()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SendMessageAction) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_sendMessageTypingAction:
		m2 := &TLSendMessageTypingAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageCancelAction:
		m2 := &TLSendMessageCancelAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageRecordVideoAction:
		m2 := &TLSendMessageRecordVideoAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageUploadVideoAction:
		m2 := &TLSendMessageUploadVideoAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageRecordAudioAction:
		m2 := &TLSendMessageRecordAudioAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageUploadAudioAction:
		m2 := &TLSendMessageUploadAudioAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageUploadPhotoAction:
		m2 := &TLSendMessageUploadPhotoAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageUploadDocumentAction:
		m2 := &TLSendMessageUploadDocumentAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageGeoLocationAction:
		m2 := &TLSendMessageGeoLocationAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageChooseContactAction:
		m2 := &TLSendMessageChooseContactAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageGamePlayAction:
		m2 := &TLSendMessageGamePlayAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageRecordRoundAction:
		m2 := &TLSendMessageRecordRoundAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sendMessageUploadRoundAction:
		m2 := &TLSendMessageUploadRoundAction{Data2: &SendMessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// sendMessageTypingAction#16bf744e = SendMessageAction;
func (m *SendMessageAction) To_SendMessageTypingAction() *TLSendMessageTypingAction {
	return &TLSendMessageTypingAction{
		Data2: m.Data2,
	}
}

// sendMessageCancelAction#fd5ec8f5 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageCancelAction() *TLSendMessageCancelAction {
	return &TLSendMessageCancelAction{
		Data2: m.Data2,
	}
}

// sendMessageRecordVideoAction#a187d66f = SendMessageAction;
func (m *SendMessageAction) To_SendMessageRecordVideoAction() *TLSendMessageRecordVideoAction {
	return &TLSendMessageRecordVideoAction{
		Data2: m.Data2,
	}
}

// sendMessageUploadVideoAction#e9763aec progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadVideoAction() *TLSendMessageUploadVideoAction {
	return &TLSendMessageUploadVideoAction{
		Data2: m.Data2,
	}
}

// sendMessageRecordAudioAction#d52f73f7 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageRecordAudioAction() *TLSendMessageRecordAudioAction {
	return &TLSendMessageRecordAudioAction{
		Data2: m.Data2,
	}
}

// sendMessageUploadAudioAction#f351d7ab progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadAudioAction() *TLSendMessageUploadAudioAction {
	return &TLSendMessageUploadAudioAction{
		Data2: m.Data2,
	}
}

// sendMessageUploadPhotoAction#d1d34a26 progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadPhotoAction() *TLSendMessageUploadPhotoAction {
	return &TLSendMessageUploadPhotoAction{
		Data2: m.Data2,
	}
}

// sendMessageUploadDocumentAction#aa0cd9e4 progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadDocumentAction() *TLSendMessageUploadDocumentAction {
	return &TLSendMessageUploadDocumentAction{
		Data2: m.Data2,
	}
}

// sendMessageGeoLocationAction#176f8ba1 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageGeoLocationAction() *TLSendMessageGeoLocationAction {
	return &TLSendMessageGeoLocationAction{
		Data2: m.Data2,
	}
}

// sendMessageChooseContactAction#628cbc6f = SendMessageAction;
func (m *SendMessageAction) To_SendMessageChooseContactAction() *TLSendMessageChooseContactAction {
	return &TLSendMessageChooseContactAction{
		Data2: m.Data2,
	}
}

// sendMessageGamePlayAction#dd6a8f48 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageGamePlayAction() *TLSendMessageGamePlayAction {
	return &TLSendMessageGamePlayAction{
		Data2: m.Data2,
	}
}

// sendMessageRecordRoundAction#88f27fbc = SendMessageAction;
func (m *SendMessageAction) To_SendMessageRecordRoundAction() *TLSendMessageRecordRoundAction {
	return &TLSendMessageRecordRoundAction{
		Data2: m.Data2,
	}
}

// sendMessageUploadRoundAction#243e1c66 progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadRoundAction() *TLSendMessageUploadRoundAction {
	return &TLSendMessageUploadRoundAction{
		Data2: m.Data2,
	}
}

// sendMessageTypingAction#16bf744e = SendMessageAction;
func (m *TLSendMessageTypingAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageTypingAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageTypingAction() *TLSendMessageTypingAction {
	return &TLSendMessageTypingAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageTypingAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageTypingAction))

	return x.buf
}

func (m *TLSendMessageTypingAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageTypingAction))

	return x.buf
}

func (m *TLSendMessageTypingAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageCancelAction#fd5ec8f5 = SendMessageAction;
func (m *TLSendMessageCancelAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageCancelAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageCancelAction() *TLSendMessageCancelAction {
	return &TLSendMessageCancelAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageCancelAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageCancelAction))

	return x.buf
}

func (m *TLSendMessageCancelAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageCancelAction))

	return x.buf
}

func (m *TLSendMessageCancelAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageRecordVideoAction#a187d66f = SendMessageAction;
func (m *TLSendMessageRecordVideoAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageRecordVideoAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageRecordVideoAction() *TLSendMessageRecordVideoAction {
	return &TLSendMessageRecordVideoAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageRecordVideoAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageRecordVideoAction))

	return x.buf
}

func (m *TLSendMessageRecordVideoAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageRecordVideoAction))

	return x.buf
}

func (m *TLSendMessageRecordVideoAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageUploadVideoAction#e9763aec progress:int = SendMessageAction;
func (m *TLSendMessageUploadVideoAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageUploadVideoAction,
		Data2:       m.Data2,
	}
}

func (m *TLSendMessageUploadVideoAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadVideoAction) GetProgress() int32  { return m.Data2.Progress }

func NewTLSendMessageUploadVideoAction() *TLSendMessageUploadVideoAction {
	return &TLSendMessageUploadVideoAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageUploadVideoAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadVideoAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadVideoAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadVideoAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadVideoAction) Decode(dbuf *DecodeBuf) error {
	m.SetProgress(dbuf.Int())

	return dbuf.err
}

// sendMessageRecordAudioAction#d52f73f7 = SendMessageAction;
func (m *TLSendMessageRecordAudioAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageRecordAudioAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageRecordAudioAction() *TLSendMessageRecordAudioAction {
	return &TLSendMessageRecordAudioAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageRecordAudioAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageRecordAudioAction))

	return x.buf
}

func (m *TLSendMessageRecordAudioAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageRecordAudioAction))

	return x.buf
}

func (m *TLSendMessageRecordAudioAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageUploadAudioAction#f351d7ab progress:int = SendMessageAction;
func (m *TLSendMessageUploadAudioAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageUploadAudioAction,
		Data2:       m.Data2,
	}
}

func (m *TLSendMessageUploadAudioAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadAudioAction) GetProgress() int32  { return m.Data2.Progress }

func NewTLSendMessageUploadAudioAction() *TLSendMessageUploadAudioAction {
	return &TLSendMessageUploadAudioAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageUploadAudioAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadAudioAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadAudioAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadAudioAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadAudioAction) Decode(dbuf *DecodeBuf) error {
	m.SetProgress(dbuf.Int())

	return dbuf.err
}

// sendMessageUploadPhotoAction#d1d34a26 progress:int = SendMessageAction;
func (m *TLSendMessageUploadPhotoAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageUploadPhotoAction,
		Data2:       m.Data2,
	}
}

func (m *TLSendMessageUploadPhotoAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadPhotoAction) GetProgress() int32  { return m.Data2.Progress }

func NewTLSendMessageUploadPhotoAction() *TLSendMessageUploadPhotoAction {
	return &TLSendMessageUploadPhotoAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageUploadPhotoAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadPhotoAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadPhotoAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadPhotoAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadPhotoAction) Decode(dbuf *DecodeBuf) error {
	m.SetProgress(dbuf.Int())

	return dbuf.err
}

// sendMessageUploadDocumentAction#aa0cd9e4 progress:int = SendMessageAction;
func (m *TLSendMessageUploadDocumentAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageUploadDocumentAction,
		Data2:       m.Data2,
	}
}

func (m *TLSendMessageUploadDocumentAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadDocumentAction) GetProgress() int32  { return m.Data2.Progress }

func NewTLSendMessageUploadDocumentAction() *TLSendMessageUploadDocumentAction {
	return &TLSendMessageUploadDocumentAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageUploadDocumentAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadDocumentAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadDocumentAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadDocumentAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadDocumentAction) Decode(dbuf *DecodeBuf) error {
	m.SetProgress(dbuf.Int())

	return dbuf.err
}

// sendMessageGeoLocationAction#176f8ba1 = SendMessageAction;
func (m *TLSendMessageGeoLocationAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageGeoLocationAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageGeoLocationAction() *TLSendMessageGeoLocationAction {
	return &TLSendMessageGeoLocationAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageGeoLocationAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageGeoLocationAction))

	return x.buf
}

func (m *TLSendMessageGeoLocationAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageGeoLocationAction))

	return x.buf
}

func (m *TLSendMessageGeoLocationAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageChooseContactAction#628cbc6f = SendMessageAction;
func (m *TLSendMessageChooseContactAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageChooseContactAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageChooseContactAction() *TLSendMessageChooseContactAction {
	return &TLSendMessageChooseContactAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageChooseContactAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageChooseContactAction))

	return x.buf
}

func (m *TLSendMessageChooseContactAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageChooseContactAction))

	return x.buf
}

func (m *TLSendMessageChooseContactAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageGamePlayAction#dd6a8f48 = SendMessageAction;
func (m *TLSendMessageGamePlayAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageGamePlayAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageGamePlayAction() *TLSendMessageGamePlayAction {
	return &TLSendMessageGamePlayAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageGamePlayAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageGamePlayAction))

	return x.buf
}

func (m *TLSendMessageGamePlayAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageGamePlayAction))

	return x.buf
}

func (m *TLSendMessageGamePlayAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageRecordRoundAction#88f27fbc = SendMessageAction;
func (m *TLSendMessageRecordRoundAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageRecordRoundAction,
		Data2:       m.Data2,
	}
}

func NewTLSendMessageRecordRoundAction() *TLSendMessageRecordRoundAction {
	return &TLSendMessageRecordRoundAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageRecordRoundAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageRecordRoundAction))

	return x.buf
}

func (m *TLSendMessageRecordRoundAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageRecordRoundAction))

	return x.buf
}

func (m *TLSendMessageRecordRoundAction) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// sendMessageUploadRoundAction#243e1c66 progress:int = SendMessageAction;
func (m *TLSendMessageUploadRoundAction) To_SendMessageAction() *SendMessageAction {
	return &SendMessageAction{
		Constructor: TLConstructor_CRC32_sendMessageUploadRoundAction,
		Data2:       m.Data2,
	}
}

func (m *TLSendMessageUploadRoundAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadRoundAction) GetProgress() int32  { return m.Data2.Progress }

func NewTLSendMessageUploadRoundAction() *TLSendMessageUploadRoundAction {
	return &TLSendMessageUploadRoundAction{Data2: &SendMessageAction_Data{}}
}

func (m *TLSendMessageUploadRoundAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadRoundAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadRoundAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sendMessageUploadRoundAction))

	x.Int(m.GetProgress())

	return x.buf
}

func (m *TLSendMessageUploadRoundAction) Decode(dbuf *DecodeBuf) error {
	m.SetProgress(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// StickerSet <--
//  + TL_StickerSet
//

func (m *StickerSet) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_stickerSet:
		t := m.To_StickerSet()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *StickerSet) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_stickerSet:
		t := m.To_StickerSet()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *StickerSet) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_stickerSet:
		m2 := &TLStickerSet{Data2: &StickerSet_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// stickerSet#5585a139 flags:# archived:flags.1?true official:flags.2?true masks:flags.3?true installed_date:flags.0?int id:long access_hash:long title:string short_name:string count:int hash:int = StickerSet;
func (m *StickerSet) To_StickerSet() *TLStickerSet {
	return &TLStickerSet{
		Data2: m.Data2,
	}
}

// stickerSet#5585a139 flags:# archived:flags.1?true official:flags.2?true masks:flags.3?true installed_date:flags.0?int id:long access_hash:long title:string short_name:string count:int hash:int = StickerSet;
func (m *TLStickerSet) To_StickerSet() *StickerSet {
	return &StickerSet{
		Constructor: TLConstructor_CRC32_stickerSet,
		Data2:       m.Data2,
	}
}

func (m *TLStickerSet) SetArchived(v bool) { m.Data2.Archived = v }
func (m *TLStickerSet) GetArchived() bool  { return m.Data2.Archived }

func (m *TLStickerSet) SetOfficial(v bool) { m.Data2.Official = v }
func (m *TLStickerSet) GetOfficial() bool  { return m.Data2.Official }

func (m *TLStickerSet) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLStickerSet) GetMasks() bool  { return m.Data2.Masks }

func (m *TLStickerSet) SetInstalledDate(v int32) { m.Data2.InstalledDate = v }
func (m *TLStickerSet) GetInstalledDate() int32  { return m.Data2.InstalledDate }

func (m *TLStickerSet) SetId(v int64) { m.Data2.Id = v }
func (m *TLStickerSet) GetId() int64  { return m.Data2.Id }

func (m *TLStickerSet) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLStickerSet) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLStickerSet) SetTitle(v string) { m.Data2.Title = v }
func (m *TLStickerSet) GetTitle() string  { return m.Data2.Title }

func (m *TLStickerSet) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLStickerSet) GetShortName() string  { return m.Data2.ShortName }

func (m *TLStickerSet) SetCount(v int32) { m.Data2.Count = v }
func (m *TLStickerSet) GetCount() int32  { return m.Data2.Count }

func (m *TLStickerSet) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLStickerSet) GetHash() int32  { return m.Data2.Hash }

func NewTLStickerSet() *TLStickerSet {
	return &TLStickerSet{Data2: &StickerSet_Data{}}
}

func (m *TLStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerSet))

	// flags
	var flags uint32 = 0
	if m.GetArchived() == true {
		flags |= 1 << 1
	}
	if m.GetOfficial() == true {
		flags |= 1 << 2
	}
	if m.GetMasks() == true {
		flags |= 1 << 3
	}
	if m.GetInstalledDate() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetInstalledDate() != 0 {
		x.Int(m.GetInstalledDate())
	}
	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.String(m.GetTitle())
	x.String(m.GetShortName())
	x.Int(m.GetCount())
	x.Int(m.GetHash())

	return x.buf
}

func (m *TLStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerSet))

	// flags
	var flags uint32 = 0
	if m.GetArchived() == true {
		flags |= 1 << 1
	}
	if m.GetOfficial() == true {
		flags |= 1 << 2
	}
	if m.GetMasks() == true {
		flags |= 1 << 3
	}
	if m.GetInstalledDate() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetInstalledDate() != 0 {
		x.Int(m.GetInstalledDate())
	}
	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.String(m.GetTitle())
	x.String(m.GetShortName())
	x.Int(m.GetCount())
	x.Int(m.GetHash())

	return x.buf
}

func (m *TLStickerSet) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetArchived(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetOfficial(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetMasks(true)
	}
	if (flags & (1 << 0)) != 0 {
		m.SetInstalledDate(dbuf.Int())
	}
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetTitle(dbuf.String())
	m.SetShortName(dbuf.String())
	m.SetCount(dbuf.Int())
	m.SetHash(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// FoundGif <--
//  + TL_FoundGif
//  + TL_FoundGifCached
//

func (m *FoundGif) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_foundGif:
		t := m.To_FoundGif()
		return t.Encode()
	case TLConstructor_CRC32_foundGifCached:
		t := m.To_FoundGifCached()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FoundGif) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_foundGif:
		t := m.To_FoundGif()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_foundGifCached:
		t := m.To_FoundGifCached()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FoundGif) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_foundGif:
		m2 := &TLFoundGif{Data2: &FoundGif_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_foundGifCached:
		m2 := &TLFoundGifCached{Data2: &FoundGif_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// foundGif#162ecc1f url:string thumb_url:string content_url:string content_type:string w:int h:int = FoundGif;
func (m *FoundGif) To_FoundGif() *TLFoundGif {
	return &TLFoundGif{
		Data2: m.Data2,
	}
}

// foundGifCached#9c750409 url:string photo:Photo document:Document = FoundGif;
func (m *FoundGif) To_FoundGifCached() *TLFoundGifCached {
	return &TLFoundGifCached{
		Data2: m.Data2,
	}
}

// foundGif#162ecc1f url:string thumb_url:string content_url:string content_type:string w:int h:int = FoundGif;
func (m *TLFoundGif) To_FoundGif() *FoundGif {
	return &FoundGif{
		Constructor: TLConstructor_CRC32_foundGif,
		Data2:       m.Data2,
	}
}

func (m *TLFoundGif) SetUrl(v string) { m.Data2.Url = v }
func (m *TLFoundGif) GetUrl() string  { return m.Data2.Url }

func (m *TLFoundGif) SetThumbUrl(v string) { m.Data2.ThumbUrl = v }
func (m *TLFoundGif) GetThumbUrl() string  { return m.Data2.ThumbUrl }

func (m *TLFoundGif) SetContentUrl(v string) { m.Data2.ContentUrl = v }
func (m *TLFoundGif) GetContentUrl() string  { return m.Data2.ContentUrl }

func (m *TLFoundGif) SetContentType(v string) { m.Data2.ContentType = v }
func (m *TLFoundGif) GetContentType() string  { return m.Data2.ContentType }

func (m *TLFoundGif) SetW(v int32) { m.Data2.W = v }
func (m *TLFoundGif) GetW() int32  { return m.Data2.W }

func (m *TLFoundGif) SetH(v int32) { m.Data2.H = v }
func (m *TLFoundGif) GetH() int32  { return m.Data2.H }

func NewTLFoundGif() *TLFoundGif {
	return &TLFoundGif{Data2: &FoundGif_Data{}}
}

func (m *TLFoundGif) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_foundGif))

	x.String(m.GetUrl())
	x.String(m.GetThumbUrl())
	x.String(m.GetContentUrl())
	x.String(m.GetContentType())
	x.Int(m.GetW())
	x.Int(m.GetH())

	return x.buf
}

func (m *TLFoundGif) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_foundGif))

	x.String(m.GetUrl())
	x.String(m.GetThumbUrl())
	x.String(m.GetContentUrl())
	x.String(m.GetContentType())
	x.Int(m.GetW())
	x.Int(m.GetH())

	return x.buf
}

func (m *TLFoundGif) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetThumbUrl(dbuf.String())
	m.SetContentUrl(dbuf.String())
	m.SetContentType(dbuf.String())
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())

	return dbuf.err
}

// foundGifCached#9c750409 url:string photo:Photo document:Document = FoundGif;
func (m *TLFoundGifCached) To_FoundGif() *FoundGif {
	return &FoundGif{
		Constructor: TLConstructor_CRC32_foundGifCached,
		Data2:       m.Data2,
	}
}

func (m *TLFoundGifCached) SetUrl(v string) { m.Data2.Url = v }
func (m *TLFoundGifCached) GetUrl() string  { return m.Data2.Url }

func (m *TLFoundGifCached) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLFoundGifCached) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLFoundGifCached) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLFoundGifCached) GetDocument() *Document  { return m.Data2.Document }

func NewTLFoundGifCached() *TLFoundGifCached {
	return &TLFoundGifCached{Data2: &FoundGif_Data{}}
}

func (m *TLFoundGifCached) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_foundGifCached))

	x.String(m.GetUrl())
	x.Bytes(m.GetPhoto().Encode())
	x.Bytes(m.GetDocument().Encode())

	return x.buf
}

func (m *TLFoundGifCached) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_foundGifCached))

	x.String(m.GetUrl())
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Bytes(m.GetDocument().EncodeToLayer(layer))

	return x.buf
}

func (m *TLFoundGifCached) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m2 := &Photo{}
	m2.Decode(dbuf)
	m.SetPhoto(m2)
	m3 := &Document{}
	m3.Decode(dbuf)
	m.SetDocument(m3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// WallPaper <--
//  + TL_WallPaper
//  + TL_WallPaperSolid
//

func (m *WallPaper) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_wallPaper:
		t := m.To_WallPaper()
		return t.Encode()
	case TLConstructor_CRC32_wallPaperSolid:
		t := m.To_WallPaperSolid()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WallPaper) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_wallPaper:
		t := m.To_WallPaper()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_wallPaperSolid:
		t := m.To_WallPaperSolid()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WallPaper) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_wallPaper:
		m2 := &TLWallPaper{Data2: &WallPaper_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_wallPaperSolid:
		m2 := &TLWallPaperSolid{Data2: &WallPaper_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// wallPaper#ccb03657 id:int title:string sizes:Vector<PhotoSize> color:int = WallPaper;
func (m *WallPaper) To_WallPaper() *TLWallPaper {
	return &TLWallPaper{
		Data2: m.Data2,
	}
}

// wallPaperSolid#63117f24 id:int title:string bg_color:int color:int = WallPaper;
func (m *WallPaper) To_WallPaperSolid() *TLWallPaperSolid {
	return &TLWallPaperSolid{
		Data2: m.Data2,
	}
}

// wallPaper#ccb03657 id:int title:string sizes:Vector<PhotoSize> color:int = WallPaper;
func (m *TLWallPaper) To_WallPaper() *WallPaper {
	return &WallPaper{
		Constructor: TLConstructor_CRC32_wallPaper,
		Data2:       m.Data2,
	}
}

func (m *TLWallPaper) SetId(v int32) { m.Data2.Id = v }
func (m *TLWallPaper) GetId() int32  { return m.Data2.Id }

func (m *TLWallPaper) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWallPaper) GetTitle() string  { return m.Data2.Title }

func (m *TLWallPaper) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLWallPaper) GetSizes() []*PhotoSize  { return m.Data2.Sizes }

func (m *TLWallPaper) SetColor(v int32) { m.Data2.Color = v }
func (m *TLWallPaper) GetColor() int32  { return m.Data2.Color }

func NewTLWallPaper() *TLWallPaper {
	return &TLWallPaper{Data2: &WallPaper_Data{}}
}

func (m *TLWallPaper) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_wallPaper))

	x.Int(m.GetId())
	x.String(m.GetTitle())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSizes())))
	for _, v := range m.GetSizes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetColor())

	return x.buf
}

func (m *TLWallPaper) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_wallPaper))

	x.Int(m.GetId())
	x.String(m.GetTitle())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSizes())))
	for _, v := range m.GetSizes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetColor())

	return x.buf
}

func (m *TLWallPaper) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetTitle(dbuf.String())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*PhotoSize, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &PhotoSize{}
		v3[i].Decode(dbuf)
	}
	m.SetSizes(v3)

	m.SetColor(dbuf.Int())

	return dbuf.err
}

// wallPaperSolid#63117f24 id:int title:string bg_color:int color:int = WallPaper;
func (m *TLWallPaperSolid) To_WallPaper() *WallPaper {
	return &WallPaper{
		Constructor: TLConstructor_CRC32_wallPaperSolid,
		Data2:       m.Data2,
	}
}

func (m *TLWallPaperSolid) SetId(v int32) { m.Data2.Id = v }
func (m *TLWallPaperSolid) GetId() int32  { return m.Data2.Id }

func (m *TLWallPaperSolid) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWallPaperSolid) GetTitle() string  { return m.Data2.Title }

func (m *TLWallPaperSolid) SetBgColor(v int32) { m.Data2.BgColor = v }
func (m *TLWallPaperSolid) GetBgColor() int32  { return m.Data2.BgColor }

func (m *TLWallPaperSolid) SetColor(v int32) { m.Data2.Color = v }
func (m *TLWallPaperSolid) GetColor() int32  { return m.Data2.Color }

func NewTLWallPaperSolid() *TLWallPaperSolid {
	return &TLWallPaperSolid{Data2: &WallPaper_Data{}}
}

func (m *TLWallPaperSolid) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_wallPaperSolid))

	x.Int(m.GetId())
	x.String(m.GetTitle())
	x.Int(m.GetBgColor())
	x.Int(m.GetColor())

	return x.buf
}

func (m *TLWallPaperSolid) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_wallPaperSolid))

	x.Int(m.GetId())
	x.String(m.GetTitle())
	x.Int(m.GetBgColor())
	x.Int(m.GetColor())

	return x.buf
}

func (m *TLWallPaperSolid) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetTitle(dbuf.String())
	m.SetBgColor(dbuf.Int())
	m.SetColor(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// UserFull <--
//  + TL_UserFull
//

func (m *UserFull) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_userFull:
		t := m.To_UserFull()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *UserFull) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_userFull:
		t := m.To_UserFull()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *UserFull) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_userFull:
		m2 := &TLUserFull{Data2: &UserFull_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// userFull#f220f3f flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true user:User about:flags.1?string link:contacts.Link profile_photo:flags.2?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo common_chats_count:int = UserFull;
func (m *UserFull) To_UserFull() *TLUserFull {
	return &TLUserFull{
		Data2: m.Data2,
	}
}

// userFull#f220f3f flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true user:User about:flags.1?string link:contacts.Link profile_photo:flags.2?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo common_chats_count:int = UserFull;
func (m *TLUserFull) To_UserFull() *UserFull {
	return &UserFull{
		Constructor: TLConstructor_CRC32_userFull,
		Data2:       m.Data2,
	}
}

func (m *TLUserFull) SetBlocked(v bool) { m.Data2.Blocked = v }
func (m *TLUserFull) GetBlocked() bool  { return m.Data2.Blocked }

func (m *TLUserFull) SetPhoneCallsAvailable(v bool) { m.Data2.PhoneCallsAvailable = v }
func (m *TLUserFull) GetPhoneCallsAvailable() bool  { return m.Data2.PhoneCallsAvailable }

func (m *TLUserFull) SetPhoneCallsPrivate(v bool) { m.Data2.PhoneCallsPrivate = v }
func (m *TLUserFull) GetPhoneCallsPrivate() bool  { return m.Data2.PhoneCallsPrivate }

func (m *TLUserFull) SetUser(v *User) { m.Data2.User = v }
func (m *TLUserFull) GetUser() *User  { return m.Data2.User }

func (m *TLUserFull) SetAbout(v string) { m.Data2.About = v }
func (m *TLUserFull) GetAbout() string  { return m.Data2.About }

func (m *TLUserFull) SetLink(v *Contacts_Link) { m.Data2.Link = v }
func (m *TLUserFull) GetLink() *Contacts_Link  { return m.Data2.Link }

func (m *TLUserFull) SetProfilePhoto(v *Photo) { m.Data2.ProfilePhoto = v }
func (m *TLUserFull) GetProfilePhoto() *Photo  { return m.Data2.ProfilePhoto }

func (m *TLUserFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUserFull) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLUserFull) SetBotInfo(v *BotInfo) { m.Data2.BotInfo = v }
func (m *TLUserFull) GetBotInfo() *BotInfo  { return m.Data2.BotInfo }

func (m *TLUserFull) SetCommonChatsCount(v int32) { m.Data2.CommonChatsCount = v }
func (m *TLUserFull) GetCommonChatsCount() int32  { return m.Data2.CommonChatsCount }

func NewTLUserFull() *TLUserFull {
	return &TLUserFull{Data2: &UserFull_Data{}}
}

func (m *TLUserFull) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userFull))

	// flags
	var flags uint32 = 0
	if m.GetBlocked() == true {
		flags |= 1 << 0
	}
	if m.GetPhoneCallsAvailable() == true {
		flags |= 1 << 4
	}
	if m.GetPhoneCallsPrivate() == true {
		flags |= 1 << 5
	}
	if m.GetAbout() != "" {
		flags |= 1 << 1
	}
	if m.GetProfilePhoto() != nil {
		flags |= 1 << 2
	}
	if m.GetBotInfo() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.GetUser().Encode())
	if m.GetAbout() != "" {
		x.String(m.GetAbout())
	}
	x.Bytes(m.GetLink().Encode())
	if m.GetProfilePhoto() != nil {
		x.Bytes(m.GetProfilePhoto().Encode())
	}
	x.Bytes(m.GetNotifySettings().Encode())
	if m.GetBotInfo() != nil {
		x.Bytes(m.GetBotInfo().Encode())
	}
	x.Int(m.GetCommonChatsCount())

	return x.buf
}

func (m *TLUserFull) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userFull))

	// flags
	var flags uint32 = 0
	if m.GetBlocked() == true {
		flags |= 1 << 0
	}
	if m.GetPhoneCallsAvailable() == true {
		flags |= 1 << 4
	}
	if m.GetPhoneCallsPrivate() == true {
		flags |= 1 << 5
	}
	if m.GetAbout() != "" {
		flags |= 1 << 1
	}
	if m.GetProfilePhoto() != nil {
		flags |= 1 << 2
	}
	if m.GetBotInfo() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.GetUser().EncodeToLayer(layer))
	if m.GetAbout() != "" {
		x.String(m.GetAbout())
	}
	x.Bytes(m.GetLink().EncodeToLayer(layer))
	if m.GetProfilePhoto() != nil {
		x.Bytes(m.GetProfilePhoto().EncodeToLayer(layer))
	}
	x.Bytes(m.GetNotifySettings().EncodeToLayer(layer))
	if m.GetBotInfo() != nil {
		x.Bytes(m.GetBotInfo().EncodeToLayer(layer))
	}
	x.Int(m.GetCommonChatsCount())

	return x.buf
}

func (m *TLUserFull) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetBlocked(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetPhoneCallsAvailable(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetPhoneCallsPrivate(true)
	}
	m5 := &User{}
	m5.Decode(dbuf)
	m.SetUser(m5)
	if (flags & (1 << 1)) != 0 {
		m.SetAbout(dbuf.String())
	}
	m7 := &Contacts_Link{}
	m7.Decode(dbuf)
	m.SetLink(m7)
	if (flags & (1 << 2)) != 0 {
		m8 := &Photo{}
		m8.Decode(dbuf)
		m.SetProfilePhoto(m8)
	}
	m9 := &PeerNotifySettings{}
	m9.Decode(dbuf)
	m.SetNotifySettings(m9)
	if (flags & (1 << 3)) != 0 {
		m10 := &BotInfo{}
		m10.Decode(dbuf)
		m.SetBotInfo(m10)
	}
	m.SetCommonChatsCount(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AllStickers <--
//  + TL_MessagesAllStickersNotModified
//  + TL_MessagesAllStickers
//

func (m *Messages_AllStickers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_allStickersNotModified:
		t := m.To_MessagesAllStickersNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_allStickers:
		t := m.To_MessagesAllStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_AllStickers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_allStickersNotModified:
		t := m.To_MessagesAllStickersNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_allStickers:
		t := m.To_MessagesAllStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_AllStickers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_allStickersNotModified:
		m2 := &TLMessagesAllStickersNotModified{Data2: &Messages_AllStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_allStickers:
		m2 := &TLMessagesAllStickers{Data2: &Messages_AllStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.allStickersNotModified#e86602c3 = messages.AllStickers;
func (m *Messages_AllStickers) To_MessagesAllStickersNotModified() *TLMessagesAllStickersNotModified {
	return &TLMessagesAllStickersNotModified{
		Data2: m.Data2,
	}
}

// messages.allStickers#edfd405f hash:int sets:Vector<StickerSet> = messages.AllStickers;
func (m *Messages_AllStickers) To_MessagesAllStickers() *TLMessagesAllStickers {
	return &TLMessagesAllStickers{
		Data2: m.Data2,
	}
}

// messages.allStickersNotModified#e86602c3 = messages.AllStickers;
func (m *TLMessagesAllStickersNotModified) To_Messages_AllStickers() *Messages_AllStickers {
	return &Messages_AllStickers{
		Constructor: TLConstructor_CRC32_messages_allStickersNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesAllStickersNotModified() *TLMessagesAllStickersNotModified {
	return &TLMessagesAllStickersNotModified{Data2: &Messages_AllStickers_Data{}}
}

func (m *TLMessagesAllStickersNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_allStickersNotModified))

	return x.buf
}

func (m *TLMessagesAllStickersNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_allStickersNotModified))

	return x.buf
}

func (m *TLMessagesAllStickersNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.allStickers#edfd405f hash:int sets:Vector<StickerSet> = messages.AllStickers;
func (m *TLMessagesAllStickers) To_Messages_AllStickers() *Messages_AllStickers {
	return &Messages_AllStickers{
		Constructor: TLConstructor_CRC32_messages_allStickers,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesAllStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesAllStickers) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesAllStickers) SetSets(v []*StickerSet) { m.Data2.Sets = v }
func (m *TLMessagesAllStickers) GetSets() []*StickerSet  { return m.Data2.Sets }

func NewTLMessagesAllStickers() *TLMessagesAllStickers {
	return &TLMessagesAllStickers{Data2: &Messages_AllStickers_Data{}}
}

func (m *TLMessagesAllStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_allStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesAllStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_allStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesAllStickers) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerSet, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerSet{}
		v2[i].Decode(dbuf)
	}
	m.SetSets(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentResult <--
//  + TL_PaymentsPaymentResult
//  + TL_PaymentsPaymentVerficationNeeded
//

func (m *Payments_PaymentResult) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_payments_paymentResult:
		t := m.To_PaymentsPaymentResult()
		return t.Encode()
	case TLConstructor_CRC32_payments_paymentVerficationNeeded:
		t := m.To_PaymentsPaymentVerficationNeeded()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_PaymentResult) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_payments_paymentResult:
		t := m.To_PaymentsPaymentResult()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_payments_paymentVerficationNeeded:
		t := m.To_PaymentsPaymentVerficationNeeded()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_PaymentResult) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_payments_paymentResult:
		m2 := &TLPaymentsPaymentResult{Data2: &Payments_PaymentResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_payments_paymentVerficationNeeded:
		m2 := &TLPaymentsPaymentVerficationNeeded{Data2: &Payments_PaymentResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// payments.paymentResult#4e5f810d updates:Updates = payments.PaymentResult;
func (m *Payments_PaymentResult) To_PaymentsPaymentResult() *TLPaymentsPaymentResult {
	return &TLPaymentsPaymentResult{
		Data2: m.Data2,
	}
}

// payments.paymentVerficationNeeded#6b56b921 url:string = payments.PaymentResult;
func (m *Payments_PaymentResult) To_PaymentsPaymentVerficationNeeded() *TLPaymentsPaymentVerficationNeeded {
	return &TLPaymentsPaymentVerficationNeeded{
		Data2: m.Data2,
	}
}

// payments.paymentResult#4e5f810d updates:Updates = payments.PaymentResult;
func (m *TLPaymentsPaymentResult) To_Payments_PaymentResult() *Payments_PaymentResult {
	return &Payments_PaymentResult{
		Constructor: TLConstructor_CRC32_payments_paymentResult,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentsPaymentResult) SetUpdates(v *Updates) { m.Data2.Updates = v }
func (m *TLPaymentsPaymentResult) GetUpdates() *Updates  { return m.Data2.Updates }

func NewTLPaymentsPaymentResult() *TLPaymentsPaymentResult {
	return &TLPaymentsPaymentResult{Data2: &Payments_PaymentResult_Data{}}
}

func (m *TLPaymentsPaymentResult) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentResult))

	x.Bytes(m.GetUpdates().Encode())

	return x.buf
}

func (m *TLPaymentsPaymentResult) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentResult))

	x.Bytes(m.GetUpdates().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPaymentsPaymentResult) Decode(dbuf *DecodeBuf) error {
	m1 := &Updates{}
	m1.Decode(dbuf)
	m.SetUpdates(m1)

	return dbuf.err
}

// payments.paymentVerficationNeeded#6b56b921 url:string = payments.PaymentResult;
func (m *TLPaymentsPaymentVerficationNeeded) To_Payments_PaymentResult() *Payments_PaymentResult {
	return &Payments_PaymentResult{
		Constructor: TLConstructor_CRC32_payments_paymentVerficationNeeded,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentsPaymentVerficationNeeded) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentVerficationNeeded) GetUrl() string  { return m.Data2.Url }

func NewTLPaymentsPaymentVerficationNeeded() *TLPaymentsPaymentVerficationNeeded {
	return &TLPaymentsPaymentVerficationNeeded{Data2: &Payments_PaymentResult_Data{}}
}

func (m *TLPaymentsPaymentVerficationNeeded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentVerficationNeeded))

	x.String(m.GetUrl())

	return x.buf
}

func (m *TLPaymentsPaymentVerficationNeeded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentVerficationNeeded))

	x.String(m.GetUrl())

	return x.buf
}

func (m *TLPaymentsPaymentVerficationNeeded) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Payments_SavedInfo <--
//  + TL_PaymentsSavedInfo
//

func (m *Payments_SavedInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_payments_savedInfo:
		t := m.To_PaymentsSavedInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_SavedInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_payments_savedInfo:
		t := m.To_PaymentsSavedInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_SavedInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_payments_savedInfo:
		m2 := &TLPaymentsSavedInfo{Data2: &Payments_SavedInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// payments.savedInfo#fb8fe43c flags:# has_saved_credentials:flags.1?true saved_info:flags.0?PaymentRequestedInfo = payments.SavedInfo;
func (m *Payments_SavedInfo) To_PaymentsSavedInfo() *TLPaymentsSavedInfo {
	return &TLPaymentsSavedInfo{
		Data2: m.Data2,
	}
}

// payments.savedInfo#fb8fe43c flags:# has_saved_credentials:flags.1?true saved_info:flags.0?PaymentRequestedInfo = payments.SavedInfo;
func (m *TLPaymentsSavedInfo) To_Payments_SavedInfo() *Payments_SavedInfo {
	return &Payments_SavedInfo{
		Constructor: TLConstructor_CRC32_payments_savedInfo,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentsSavedInfo) SetHasSavedCredentials(v bool) { m.Data2.HasSavedCredentials = v }
func (m *TLPaymentsSavedInfo) GetHasSavedCredentials() bool  { return m.Data2.HasSavedCredentials }

func (m *TLPaymentsSavedInfo) SetSavedInfo(v *PaymentRequestedInfo) { m.Data2.SavedInfo = v }
func (m *TLPaymentsSavedInfo) GetSavedInfo() *PaymentRequestedInfo  { return m.Data2.SavedInfo }

func NewTLPaymentsSavedInfo() *TLPaymentsSavedInfo {
	return &TLPaymentsSavedInfo{Data2: &Payments_SavedInfo_Data{}}
}

func (m *TLPaymentsSavedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_savedInfo))

	// flags
	var flags uint32 = 0
	if m.GetHasSavedCredentials() == true {
		flags |= 1 << 1
	}
	if m.GetSavedInfo() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetSavedInfo() != nil {
		x.Bytes(m.GetSavedInfo().Encode())
	}

	return x.buf
}

func (m *TLPaymentsSavedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_savedInfo))

	// flags
	var flags uint32 = 0
	if m.GetHasSavedCredentials() == true {
		flags |= 1 << 1
	}
	if m.GetSavedInfo() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetSavedInfo() != nil {
		x.Bytes(m.GetSavedInfo().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLPaymentsSavedInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetHasSavedCredentials(true)
	}
	if (flags & (1 << 0)) != 0 {
		m3 := &PaymentRequestedInfo{}
		m3.Decode(dbuf)
		m.SetSavedInfo(m3)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ShippingOption <--
//  + TL_ShippingOption
//

func (m *ShippingOption) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_shippingOption:
		t := m.To_ShippingOption()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ShippingOption) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_shippingOption:
		t := m.To_ShippingOption()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ShippingOption) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_shippingOption:
		m2 := &TLShippingOption{Data2: &ShippingOption_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// shippingOption#b6213cdf id:string title:string prices:Vector<LabeledPrice> = ShippingOption;
func (m *ShippingOption) To_ShippingOption() *TLShippingOption {
	return &TLShippingOption{
		Data2: m.Data2,
	}
}

// shippingOption#b6213cdf id:string title:string prices:Vector<LabeledPrice> = ShippingOption;
func (m *TLShippingOption) To_ShippingOption() *ShippingOption {
	return &ShippingOption{
		Constructor: TLConstructor_CRC32_shippingOption,
		Data2:       m.Data2,
	}
}

func (m *TLShippingOption) SetId(v string) { m.Data2.Id = v }
func (m *TLShippingOption) GetId() string  { return m.Data2.Id }

func (m *TLShippingOption) SetTitle(v string) { m.Data2.Title = v }
func (m *TLShippingOption) GetTitle() string  { return m.Data2.Title }

func (m *TLShippingOption) SetPrices(v []*LabeledPrice) { m.Data2.Prices = v }
func (m *TLShippingOption) GetPrices() []*LabeledPrice  { return m.Data2.Prices }

func NewTLShippingOption() *TLShippingOption {
	return &TLShippingOption{Data2: &ShippingOption_Data{}}
}

func (m *TLShippingOption) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_shippingOption))

	x.String(m.GetId())
	x.String(m.GetTitle())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPrices())))
	for _, v := range m.GetPrices() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLShippingOption) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_shippingOption))

	x.String(m.GetId())
	x.String(m.GetTitle())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPrices())))
	for _, v := range m.GetPrices() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLShippingOption) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.String())
	m.SetTitle(dbuf.String())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*LabeledPrice, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &LabeledPrice{}
		v3[i].Decode(dbuf)
	}
	m.SetPrices(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecurePasswordKdfAlgo <--
//  + TL_SecurePasswordKdfAlgoUnknown
//  + TL_SecurePasswordKdfAlgoPBKDF2
//  + TL_SecurePasswordKdfAlgoSHA512
//

func (m *SecurePasswordKdfAlgo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_securePasswordKdfAlgoUnknown:
		t := m.To_SecurePasswordKdfAlgoUnknown()
		return t.Encode()
	case TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2:
		t := m.To_SecurePasswordKdfAlgoPBKDF2()
		return t.Encode()
	case TLConstructor_CRC32_securePasswordKdfAlgoSHA512:
		t := m.To_SecurePasswordKdfAlgoSHA512()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecurePasswordKdfAlgo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_securePasswordKdfAlgoUnknown:
		t := m.To_SecurePasswordKdfAlgoUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2:
		t := m.To_SecurePasswordKdfAlgoPBKDF2()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_securePasswordKdfAlgoSHA512:
		t := m.To_SecurePasswordKdfAlgoSHA512()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecurePasswordKdfAlgo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_securePasswordKdfAlgoUnknown:
		m2 := &TLSecurePasswordKdfAlgoUnknown{Data2: &SecurePasswordKdfAlgo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2:
		m2 := &TLSecurePasswordKdfAlgoPBKDF2{Data2: &SecurePasswordKdfAlgo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_securePasswordKdfAlgoSHA512:
		m2 := &TLSecurePasswordKdfAlgoSHA512{Data2: &SecurePasswordKdfAlgo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// securePasswordKdfAlgoUnknown#4a8537 = SecurePasswordKdfAlgo;
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoUnknown() *TLSecurePasswordKdfAlgoUnknown {
	return &TLSecurePasswordKdfAlgoUnknown{
		Data2: m.Data2,
	}
}

// securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0 salt:bytes = SecurePasswordKdfAlgo;
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoPBKDF2() *TLSecurePasswordKdfAlgoPBKDF2 {
	return &TLSecurePasswordKdfAlgoPBKDF2{
		Data2: m.Data2,
	}
}

// securePasswordKdfAlgoSHA512#86471d92 salt:bytes = SecurePasswordKdfAlgo;
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoSHA512() *TLSecurePasswordKdfAlgoSHA512 {
	return &TLSecurePasswordKdfAlgoSHA512{
		Data2: m.Data2,
	}
}

// securePasswordKdfAlgoUnknown#4a8537 = SecurePasswordKdfAlgo;
func (m *TLSecurePasswordKdfAlgoUnknown) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
	return &SecurePasswordKdfAlgo{
		Constructor: TLConstructor_CRC32_securePasswordKdfAlgoUnknown,
		Data2:       m.Data2,
	}
}

func NewTLSecurePasswordKdfAlgoUnknown() *TLSecurePasswordKdfAlgoUnknown {
	return &TLSecurePasswordKdfAlgoUnknown{Data2: &SecurePasswordKdfAlgo_Data{}}
}

func (m *TLSecurePasswordKdfAlgoUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoUnknown))

	return x.buf
}

func (m *TLSecurePasswordKdfAlgoUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoUnknown))

	return x.buf
}

func (m *TLSecurePasswordKdfAlgoUnknown) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0 salt:bytes = SecurePasswordKdfAlgo;
func (m *TLSecurePasswordKdfAlgoPBKDF2) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
	return &SecurePasswordKdfAlgo{
		Constructor: TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2,
		Data2:       m.Data2,
	}
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) SetSalt(v []byte) { m.Data2.Salt = v }
func (m *TLSecurePasswordKdfAlgoPBKDF2) GetSalt() []byte  { return m.Data2.Salt }

func NewTLSecurePasswordKdfAlgoPBKDF2() *TLSecurePasswordKdfAlgoPBKDF2 {
	return &TLSecurePasswordKdfAlgoPBKDF2{Data2: &SecurePasswordKdfAlgo_Data{}}
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2))

	x.StringBytes(m.GetSalt())

	return x.buf
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2))

	x.StringBytes(m.GetSalt())

	return x.buf
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) Decode(dbuf *DecodeBuf) error {
	m.SetSalt(dbuf.StringBytes())

	return dbuf.err
}

// securePasswordKdfAlgoSHA512#86471d92 salt:bytes = SecurePasswordKdfAlgo;
func (m *TLSecurePasswordKdfAlgoSHA512) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
	return &SecurePasswordKdfAlgo{
		Constructor: TLConstructor_CRC32_securePasswordKdfAlgoSHA512,
		Data2:       m.Data2,
	}
}

func (m *TLSecurePasswordKdfAlgoSHA512) SetSalt(v []byte) { m.Data2.Salt = v }
func (m *TLSecurePasswordKdfAlgoSHA512) GetSalt() []byte  { return m.Data2.Salt }

func NewTLSecurePasswordKdfAlgoSHA512() *TLSecurePasswordKdfAlgoSHA512 {
	return &TLSecurePasswordKdfAlgoSHA512{Data2: &SecurePasswordKdfAlgo_Data{}}
}

func (m *TLSecurePasswordKdfAlgoSHA512) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoSHA512))

	x.StringBytes(m.GetSalt())

	return x.buf
}

func (m *TLSecurePasswordKdfAlgoSHA512) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoSHA512))

	x.StringBytes(m.GetSalt())

	return x.buf
}

func (m *TLSecurePasswordKdfAlgoSHA512) Decode(dbuf *DecodeBuf) error {
	m.SetSalt(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PostAddress <--
//  + TL_PostAddress
//

func (m *PostAddress) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_postAddress:
		t := m.To_PostAddress()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PostAddress) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_postAddress:
		t := m.To_PostAddress()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PostAddress) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_postAddress:
		m2 := &TLPostAddress{Data2: &PostAddress_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// postAddress#1e8caaeb street_line1:string street_line2:string city:string state:string country_iso2:string post_code:string = PostAddress;
func (m *PostAddress) To_PostAddress() *TLPostAddress {
	return &TLPostAddress{
		Data2: m.Data2,
	}
}

// postAddress#1e8caaeb street_line1:string street_line2:string city:string state:string country_iso2:string post_code:string = PostAddress;
func (m *TLPostAddress) To_PostAddress() *PostAddress {
	return &PostAddress{
		Constructor: TLConstructor_CRC32_postAddress,
		Data2:       m.Data2,
	}
}

func (m *TLPostAddress) SetStreetLine1(v string) { m.Data2.StreetLine1 = v }
func (m *TLPostAddress) GetStreetLine1() string  { return m.Data2.StreetLine1 }

func (m *TLPostAddress) SetStreetLine2(v string) { m.Data2.StreetLine2 = v }
func (m *TLPostAddress) GetStreetLine2() string  { return m.Data2.StreetLine2 }

func (m *TLPostAddress) SetCity(v string) { m.Data2.City = v }
func (m *TLPostAddress) GetCity() string  { return m.Data2.City }

func (m *TLPostAddress) SetState(v string) { m.Data2.State = v }
func (m *TLPostAddress) GetState() string  { return m.Data2.State }

func (m *TLPostAddress) SetCountryIso2(v string) { m.Data2.CountryIso2 = v }
func (m *TLPostAddress) GetCountryIso2() string  { return m.Data2.CountryIso2 }

func (m *TLPostAddress) SetPostCode(v string) { m.Data2.PostCode = v }
func (m *TLPostAddress) GetPostCode() string  { return m.Data2.PostCode }

func NewTLPostAddress() *TLPostAddress {
	return &TLPostAddress{Data2: &PostAddress_Data{}}
}

func (m *TLPostAddress) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_postAddress))

	x.String(m.GetStreetLine1())
	x.String(m.GetStreetLine2())
	x.String(m.GetCity())
	x.String(m.GetState())
	x.String(m.GetCountryIso2())
	x.String(m.GetPostCode())

	return x.buf
}

func (m *TLPostAddress) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_postAddress))

	x.String(m.GetStreetLine1())
	x.String(m.GetStreetLine2())
	x.String(m.GetCity())
	x.String(m.GetState())
	x.String(m.GetCountryIso2())
	x.String(m.GetPostCode())

	return x.buf
}

func (m *TLPostAddress) Decode(dbuf *DecodeBuf) error {
	m.SetStreetLine1(dbuf.String())
	m.SetStreetLine2(dbuf.String())
	m.SetCity(dbuf.String())
	m.SetState(dbuf.String())
	m.SetCountryIso2(dbuf.String())
	m.SetPostCode(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DialogPeer <--
//  + TL_DialogPeer
//

func (m *DialogPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_dialogPeer:
		t := m.To_DialogPeer()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DialogPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_dialogPeer:
		t := m.To_DialogPeer()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DialogPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_dialogPeer:
		m2 := &TLDialogPeer{Data2: &DialogPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// dialogPeer#e56dbf05 peer:Peer = DialogPeer;
func (m *DialogPeer) To_DialogPeer() *TLDialogPeer {
	return &TLDialogPeer{
		Data2: m.Data2,
	}
}

// dialogPeer#e56dbf05 peer:Peer = DialogPeer;
func (m *TLDialogPeer) To_DialogPeer() *DialogPeer {
	return &DialogPeer{
		Constructor: TLConstructor_CRC32_dialogPeer,
		Data2:       m.Data2,
	}
}

func (m *TLDialogPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialogPeer) GetPeer() *Peer  { return m.Data2.Peer }

func NewTLDialogPeer() *TLDialogPeer {
	return &TLDialogPeer{Data2: &DialogPeer_Data{}}
}

func (m *TLDialogPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dialogPeer))

	x.Bytes(m.GetPeer().Encode())

	return x.buf
}

func (m *TLDialogPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dialogPeer))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))

	return x.buf
}

func (m *TLDialogPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_PrivacyRules <--
//  + TL_AccountPrivacyRules
//

func (m *Account_PrivacyRules) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_privacyRules:
		t := m.To_AccountPrivacyRules()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_PrivacyRules) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_privacyRules:
		t := m.To_AccountPrivacyRules()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_PrivacyRules) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_privacyRules:
		m2 := &TLAccountPrivacyRules{Data2: &Account_PrivacyRules_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.privacyRules#554abb6f rules:Vector<PrivacyRule> users:Vector<User> = account.PrivacyRules;
func (m *Account_PrivacyRules) To_AccountPrivacyRules() *TLAccountPrivacyRules {
	return &TLAccountPrivacyRules{
		Data2: m.Data2,
	}
}

// account.privacyRules#554abb6f rules:Vector<PrivacyRule> users:Vector<User> = account.PrivacyRules;
func (m *TLAccountPrivacyRules) To_Account_PrivacyRules() *Account_PrivacyRules {
	return &Account_PrivacyRules{
		Constructor: TLConstructor_CRC32_account_privacyRules,
		Data2:       m.Data2,
	}
}

func (m *TLAccountPrivacyRules) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLAccountPrivacyRules) GetRules() []*PrivacyRule  { return m.Data2.Rules }

func (m *TLAccountPrivacyRules) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountPrivacyRules) GetUsers() []*User  { return m.Data2.Users }

func NewTLAccountPrivacyRules() *TLAccountPrivacyRules {
	return &TLAccountPrivacyRules{Data2: &Account_PrivacyRules_Data{}}
}

func (m *TLAccountPrivacyRules) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_privacyRules))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRules())))
	for _, v := range m.GetRules() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccountPrivacyRules) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_privacyRules))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRules())))
	for _, v := range m.GetRules() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccountPrivacyRules) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*PrivacyRule, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &PrivacyRule{}
		v1[i].Decode(dbuf)
	}
	m.SetRules(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SavedGifs <--
//  + TL_MessagesSavedGifsNotModified
//  + TL_MessagesSavedGifs
//

func (m *Messages_SavedGifs) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_savedGifsNotModified:
		t := m.To_MessagesSavedGifsNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_savedGifs:
		t := m.To_MessagesSavedGifs()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_SavedGifs) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_savedGifsNotModified:
		t := m.To_MessagesSavedGifsNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_savedGifs:
		t := m.To_MessagesSavedGifs()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_SavedGifs) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_savedGifsNotModified:
		m2 := &TLMessagesSavedGifsNotModified{Data2: &Messages_SavedGifs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_savedGifs:
		m2 := &TLMessagesSavedGifs{Data2: &Messages_SavedGifs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.savedGifsNotModified#e8025ca2 = messages.SavedGifs;
func (m *Messages_SavedGifs) To_MessagesSavedGifsNotModified() *TLMessagesSavedGifsNotModified {
	return &TLMessagesSavedGifsNotModified{
		Data2: m.Data2,
	}
}

// messages.savedGifs#2e0709a5 hash:int gifs:Vector<Document> = messages.SavedGifs;
func (m *Messages_SavedGifs) To_MessagesSavedGifs() *TLMessagesSavedGifs {
	return &TLMessagesSavedGifs{
		Data2: m.Data2,
	}
}

// messages.savedGifsNotModified#e8025ca2 = messages.SavedGifs;
func (m *TLMessagesSavedGifsNotModified) To_Messages_SavedGifs() *Messages_SavedGifs {
	return &Messages_SavedGifs{
		Constructor: TLConstructor_CRC32_messages_savedGifsNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesSavedGifsNotModified() *TLMessagesSavedGifsNotModified {
	return &TLMessagesSavedGifsNotModified{Data2: &Messages_SavedGifs_Data{}}
}

func (m *TLMessagesSavedGifsNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_savedGifsNotModified))

	return x.buf
}

func (m *TLMessagesSavedGifsNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_savedGifsNotModified))

	return x.buf
}

func (m *TLMessagesSavedGifsNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.savedGifs#2e0709a5 hash:int gifs:Vector<Document> = messages.SavedGifs;
func (m *TLMessagesSavedGifs) To_Messages_SavedGifs() *Messages_SavedGifs {
	return &Messages_SavedGifs{
		Constructor: TLConstructor_CRC32_messages_savedGifs,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesSavedGifs) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesSavedGifs) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesSavedGifs) SetGifs(v []*Document) { m.Data2.Gifs = v }
func (m *TLMessagesSavedGifs) GetGifs() []*Document  { return m.Data2.Gifs }

func NewTLMessagesSavedGifs() *TLMessagesSavedGifs {
	return &TLMessagesSavedGifs{Data2: &Messages_SavedGifs_Data{}}
}

func (m *TLMessagesSavedGifs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_savedGifs))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetGifs())))
	for _, v := range m.GetGifs() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesSavedGifs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_savedGifs))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetGifs())))
	for _, v := range m.GetGifs() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesSavedGifs) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Document, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Document{}
		v2[i].Decode(dbuf)
	}
	m.SetGifs(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputStickeredMedia <--
//  + TL_InputStickeredMediaPhoto
//  + TL_InputStickeredMediaDocument
//

func (m *InputStickeredMedia) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputStickeredMediaPhoto:
		t := m.To_InputStickeredMediaPhoto()
		return t.Encode()
	case TLConstructor_CRC32_inputStickeredMediaDocument:
		t := m.To_InputStickeredMediaDocument()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputStickeredMedia) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputStickeredMediaPhoto:
		t := m.To_InputStickeredMediaPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputStickeredMediaDocument:
		t := m.To_InputStickeredMediaDocument()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputStickeredMedia) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputStickeredMediaPhoto:
		m2 := &TLInputStickeredMediaPhoto{Data2: &InputStickeredMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputStickeredMediaDocument:
		m2 := &TLInputStickeredMediaDocument{Data2: &InputStickeredMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputStickeredMediaPhoto#4a992157 id:InputPhoto = InputStickeredMedia;
func (m *InputStickeredMedia) To_InputStickeredMediaPhoto() *TLInputStickeredMediaPhoto {
	return &TLInputStickeredMediaPhoto{
		Data2: m.Data2,
	}
}

// inputStickeredMediaDocument#438865b id:InputDocument = InputStickeredMedia;
func (m *InputStickeredMedia) To_InputStickeredMediaDocument() *TLInputStickeredMediaDocument {
	return &TLInputStickeredMediaDocument{
		Data2: m.Data2,
	}
}

// inputStickeredMediaPhoto#4a992157 id:InputPhoto = InputStickeredMedia;
func (m *TLInputStickeredMediaPhoto) To_InputStickeredMedia() *InputStickeredMedia {
	return &InputStickeredMedia{
		Constructor: TLConstructor_CRC32_inputStickeredMediaPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputStickeredMediaPhoto) SetId(v *InputPhoto) { m.Data2.Id_1 = v }
func (m *TLInputStickeredMediaPhoto) GetId() *InputPhoto  { return m.Data2.Id_1 }

func NewTLInputStickeredMediaPhoto() *TLInputStickeredMediaPhoto {
	return &TLInputStickeredMediaPhoto{Data2: &InputStickeredMedia_Data{}}
}

func (m *TLInputStickeredMediaPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickeredMediaPhoto))

	x.Bytes(m.GetId().Encode())

	return x.buf
}

func (m *TLInputStickeredMediaPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickeredMediaPhoto))

	x.Bytes(m.GetId().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputStickeredMediaPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoto{}
	m1.Decode(dbuf)
	m.SetId(m1)

	return dbuf.err
}

// inputStickeredMediaDocument#438865b id:InputDocument = InputStickeredMedia;
func (m *TLInputStickeredMediaDocument) To_InputStickeredMedia() *InputStickeredMedia {
	return &InputStickeredMedia{
		Constructor: TLConstructor_CRC32_inputStickeredMediaDocument,
		Data2:       m.Data2,
	}
}

func (m *TLInputStickeredMediaDocument) SetId(v *InputDocument) { m.Data2.Id_2 = v }
func (m *TLInputStickeredMediaDocument) GetId() *InputDocument  { return m.Data2.Id_2 }

func NewTLInputStickeredMediaDocument() *TLInputStickeredMediaDocument {
	return &TLInputStickeredMediaDocument{Data2: &InputStickeredMedia_Data{}}
}

func (m *TLInputStickeredMediaDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickeredMediaDocument))

	x.Bytes(m.GetId().Encode())

	return x.buf
}

func (m *TLInputStickeredMediaDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickeredMediaDocument))

	x.Bytes(m.GetId().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputStickeredMediaDocument) Decode(dbuf *DecodeBuf) error {
	m1 := &InputDocument{}
	m1.Decode(dbuf)
	m.SetId(m1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// CdnConfig <--
//  + TL_CdnConfig
//

func (m *CdnConfig) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_cdnConfig:
		t := m.To_CdnConfig()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *CdnConfig) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_cdnConfig:
		t := m.To_CdnConfig()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *CdnConfig) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_cdnConfig:
		m2 := &TLCdnConfig{Data2: &CdnConfig_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// cdnConfig#5725e40a public_keys:Vector<CdnPublicKey> = CdnConfig;
func (m *CdnConfig) To_CdnConfig() *TLCdnConfig {
	return &TLCdnConfig{
		Data2: m.Data2,
	}
}

// cdnConfig#5725e40a public_keys:Vector<CdnPublicKey> = CdnConfig;
func (m *TLCdnConfig) To_CdnConfig() *CdnConfig {
	return &CdnConfig{
		Constructor: TLConstructor_CRC32_cdnConfig,
		Data2:       m.Data2,
	}
}

func (m *TLCdnConfig) SetPublicKeys(v []*CdnPublicKey) { m.Data2.PublicKeys = v }
func (m *TLCdnConfig) GetPublicKeys() []*CdnPublicKey  { return m.Data2.PublicKeys }

func NewTLCdnConfig() *TLCdnConfig {
	return &TLCdnConfig{Data2: &CdnConfig_Data{}}
}

func (m *TLCdnConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_cdnConfig))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPublicKeys())))
	for _, v := range m.GetPublicKeys() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLCdnConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_cdnConfig))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPublicKeys())))
	for _, v := range m.GetPublicKeys() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLCdnConfig) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*CdnPublicKey, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &CdnPublicKey{}
		v1[i].Decode(dbuf)
	}
	m.SetPublicKeys(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Link <--
//  + TL_ContactsLink
//

func (m *Contacts_Link) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_link:
		t := m.To_ContactsLink()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Link) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_link:
		t := m.To_ContactsLink()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Link) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_link:
		m2 := &TLContactsLink{Data2: &Contacts_Link_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link;
func (m *Contacts_Link) To_ContactsLink() *TLContactsLink {
	return &TLContactsLink{
		Data2: m.Data2,
	}
}

// contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link;
func (m *TLContactsLink) To_Contacts_Link() *Contacts_Link {
	return &Contacts_Link{
		Constructor: TLConstructor_CRC32_contacts_link,
		Data2:       m.Data2,
	}
}

func (m *TLContactsLink) SetMyLink(v *ContactLink) { m.Data2.MyLink = v }
func (m *TLContactsLink) GetMyLink() *ContactLink  { return m.Data2.MyLink }

func (m *TLContactsLink) SetForeignLink(v *ContactLink) { m.Data2.ForeignLink = v }
func (m *TLContactsLink) GetForeignLink() *ContactLink  { return m.Data2.ForeignLink }

func (m *TLContactsLink) SetUser(v *User) { m.Data2.User = v }
func (m *TLContactsLink) GetUser() *User  { return m.Data2.User }

func NewTLContactsLink() *TLContactsLink {
	return &TLContactsLink{Data2: &Contacts_Link_Data{}}
}

func (m *TLContactsLink) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_link))

	x.Bytes(m.GetMyLink().Encode())
	x.Bytes(m.GetForeignLink().Encode())
	x.Bytes(m.GetUser().Encode())

	return x.buf
}

func (m *TLContactsLink) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_link))

	x.Bytes(m.GetMyLink().EncodeToLayer(layer))
	x.Bytes(m.GetForeignLink().EncodeToLayer(layer))
	x.Bytes(m.GetUser().EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactsLink) Decode(dbuf *DecodeBuf) error {
	m1 := &ContactLink{}
	m1.Decode(dbuf)
	m.SetMyLink(m1)
	m2 := &ContactLink{}
	m2.Decode(dbuf)
	m.SetForeignLink(m2)
	m3 := &User{}
	m3.Decode(dbuf)
	m.SetUser(m3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputUser <--
//  + TL_InputUserEmpty
//  + TL_InputUserSelf
//  + TL_InputUser
//

func (m *InputUser) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputUserEmpty:
		t := m.To_InputUserEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputUserSelf:
		t := m.To_InputUserSelf()
		return t.Encode()
	case TLConstructor_CRC32_inputUser:
		t := m.To_InputUser()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputUser) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputUserEmpty:
		t := m.To_InputUserEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputUserSelf:
		t := m.To_InputUserSelf()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputUser:
		t := m.To_InputUser()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputUser) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputUserEmpty:
		m2 := &TLInputUserEmpty{Data2: &InputUser_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputUserSelf:
		m2 := &TLInputUserSelf{Data2: &InputUser_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputUser:
		m2 := &TLInputUser{Data2: &InputUser_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputUserEmpty#b98886cf = InputUser;
func (m *InputUser) To_InputUserEmpty() *TLInputUserEmpty {
	return &TLInputUserEmpty{
		Data2: m.Data2,
	}
}

// inputUserSelf#f7c1b13f = InputUser;
func (m *InputUser) To_InputUserSelf() *TLInputUserSelf {
	return &TLInputUserSelf{
		Data2: m.Data2,
	}
}

// inputUser#d8292816 user_id:int access_hash:long = InputUser;
func (m *InputUser) To_InputUser() *TLInputUser {
	return &TLInputUser{
		Data2: m.Data2,
	}
}

// inputUserEmpty#b98886cf = InputUser;
func (m *TLInputUserEmpty) To_InputUser() *InputUser {
	return &InputUser{
		Constructor: TLConstructor_CRC32_inputUserEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputUserEmpty() *TLInputUserEmpty {
	return &TLInputUserEmpty{Data2: &InputUser_Data{}}
}

func (m *TLInputUserEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputUserEmpty))

	return x.buf
}

func (m *TLInputUserEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputUserEmpty))

	return x.buf
}

func (m *TLInputUserEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputUserSelf#f7c1b13f = InputUser;
func (m *TLInputUserSelf) To_InputUser() *InputUser {
	return &InputUser{
		Constructor: TLConstructor_CRC32_inputUserSelf,
		Data2:       m.Data2,
	}
}

func NewTLInputUserSelf() *TLInputUserSelf {
	return &TLInputUserSelf{Data2: &InputUser_Data{}}
}

func (m *TLInputUserSelf) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputUserSelf))

	return x.buf
}

func (m *TLInputUserSelf) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputUserSelf))

	return x.buf
}

func (m *TLInputUserSelf) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputUser#d8292816 user_id:int access_hash:long = InputUser;
func (m *TLInputUser) To_InputUser() *InputUser {
	return &InputUser{
		Constructor: TLConstructor_CRC32_inputUser,
		Data2:       m.Data2,
	}
}

func (m *TLInputUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLInputUser) GetUserId() int32  { return m.Data2.UserId }

func (m *TLInputUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputUser) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputUser() *TLInputUser {
	return &TLInputUser{Data2: &InputUser_Data{}}
}

func (m *TLInputUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputUser))

	x.Int(m.GetUserId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputUser))

	x.Int(m.GetUserId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputUser) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// WebDocument <--
//  + TL_WebDocument
//  + TL_WebDocumentNoProxy
//

func (m *WebDocument) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_webDocument:
		t := m.To_WebDocument()
		return t.Encode()
	case TLConstructor_CRC32_webDocumentNoProxy:
		t := m.To_WebDocumentNoProxy()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WebDocument) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_webDocument:
		t := m.To_WebDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_webDocumentNoProxy:
		t := m.To_WebDocumentNoProxy()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WebDocument) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_webDocument:
		m2 := &TLWebDocument{Data2: &WebDocument_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_webDocumentNoProxy:
		m2 := &TLWebDocumentNoProxy{Data2: &WebDocument_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// webDocument#1c570ed1 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *WebDocument) To_WebDocument() *TLWebDocument {
	return &TLWebDocument{
		Data2: m.Data2,
	}
}

// webDocumentNoProxy#f9c8bcc6 url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *WebDocument) To_WebDocumentNoProxy() *TLWebDocumentNoProxy {
	return &TLWebDocumentNoProxy{
		Data2: m.Data2,
	}
}

// webDocument#1c570ed1 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *TLWebDocument) To_WebDocument() *WebDocument {
	return &WebDocument{
		Constructor: TLConstructor_CRC32_webDocument,
		Data2:       m.Data2,
	}
}

func (m *TLWebDocument) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocument) GetUrl() string  { return m.Data2.Url }

func (m *TLWebDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLWebDocument) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLWebDocument) SetSize(v int32) { m.Data2.Size = v }
func (m *TLWebDocument) GetSize() int32  { return m.Data2.Size }

func (m *TLWebDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLWebDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func NewTLWebDocument() *TLWebDocument {
	return &TLWebDocument{Data2: &WebDocument_Data{}}
}

func (m *TLWebDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webDocument))

	x.String(m.GetUrl())
	x.Long(m.GetAccessHash())
	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLWebDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webDocument))

	x.String(m.GetUrl())
	x.Long(m.GetAccessHash())
	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLWebDocument) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetAccessHash(dbuf.Long())
	m.SetSize(dbuf.Int())
	m.SetMimeType(dbuf.String())
	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*DocumentAttribute, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &DocumentAttribute{}
		v5[i].Decode(dbuf)
	}
	m.SetAttributes(v5)

	return dbuf.err
}

// webDocumentNoProxy#f9c8bcc6 url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *TLWebDocumentNoProxy) To_WebDocument() *WebDocument {
	return &WebDocument{
		Constructor: TLConstructor_CRC32_webDocumentNoProxy,
		Data2:       m.Data2,
	}
}

func (m *TLWebDocumentNoProxy) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocumentNoProxy) GetUrl() string  { return m.Data2.Url }

func (m *TLWebDocumentNoProxy) SetSize(v int32) { m.Data2.Size = v }
func (m *TLWebDocumentNoProxy) GetSize() int32  { return m.Data2.Size }

func (m *TLWebDocumentNoProxy) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocumentNoProxy) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLWebDocumentNoProxy) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocumentNoProxy) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func NewTLWebDocumentNoProxy() *TLWebDocumentNoProxy {
	return &TLWebDocumentNoProxy{Data2: &WebDocument_Data{}}
}

func (m *TLWebDocumentNoProxy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webDocumentNoProxy))

	x.String(m.GetUrl())
	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLWebDocumentNoProxy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webDocumentNoProxy))

	x.String(m.GetUrl())
	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLWebDocumentNoProxy) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetSize(dbuf.Int())
	m.SetMimeType(dbuf.String())
	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*DocumentAttribute, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &DocumentAttribute{}
		v4[i].Decode(dbuf)
	}
	m.SetAttributes(v4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEventAction <--
//  + TL_ChannelAdminLogEventActionChangeTitle
//  + TL_ChannelAdminLogEventActionChangeAbout
//  + TL_ChannelAdminLogEventActionChangeUsername
//  + TL_ChannelAdminLogEventActionChangePhoto
//  + TL_ChannelAdminLogEventActionToggleInvites
//  + TL_ChannelAdminLogEventActionToggleSignatures
//  + TL_ChannelAdminLogEventActionUpdatePinned
//  + TL_ChannelAdminLogEventActionEditMessage
//  + TL_ChannelAdminLogEventActionDeleteMessage
//  + TL_ChannelAdminLogEventActionParticipantJoin
//  + TL_ChannelAdminLogEventActionParticipantLeave
//  + TL_ChannelAdminLogEventActionParticipantInvite
//  + TL_ChannelAdminLogEventActionParticipantToggleBan
//  + TL_ChannelAdminLogEventActionParticipantToggleAdmin
//  + TL_ChannelAdminLogEventActionChangeStickerSet
//  + TL_ChannelAdminLogEventActionTogglePreHistoryHidden
//

func (m *ChannelAdminLogEventAction) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelAdminLogEventActionChangeTitle:
		t := m.To_ChannelAdminLogEventActionChangeTitle()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionChangeAbout:
		t := m.To_ChannelAdminLogEventActionChangeAbout()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionChangeUsername:
		t := m.To_ChannelAdminLogEventActionChangeUsername()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto:
		t := m.To_ChannelAdminLogEventActionChangePhoto()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionToggleInvites:
		t := m.To_ChannelAdminLogEventActionToggleInvites()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures:
		t := m.To_ChannelAdminLogEventActionToggleSignatures()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned:
		t := m.To_ChannelAdminLogEventActionUpdatePinned()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionEditMessage:
		t := m.To_ChannelAdminLogEventActionEditMessage()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage:
		t := m.To_ChannelAdminLogEventActionDeleteMessage()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin:
		t := m.To_ChannelAdminLogEventActionParticipantJoin()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave:
		t := m.To_ChannelAdminLogEventActionParticipantLeave()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite:
		t := m.To_ChannelAdminLogEventActionParticipantInvite()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan:
		t := m.To_ChannelAdminLogEventActionParticipantToggleBan()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin:
		t := m.To_ChannelAdminLogEventActionParticipantToggleAdmin()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet:
		t := m.To_ChannelAdminLogEventActionChangeStickerSet()
		return t.Encode()
	case TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden:
		t := m.To_ChannelAdminLogEventActionTogglePreHistoryHidden()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminLogEventAction) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelAdminLogEventActionChangeTitle:
		t := m.To_ChannelAdminLogEventActionChangeTitle()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionChangeAbout:
		t := m.To_ChannelAdminLogEventActionChangeAbout()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionChangeUsername:
		t := m.To_ChannelAdminLogEventActionChangeUsername()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto:
		t := m.To_ChannelAdminLogEventActionChangePhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionToggleInvites:
		t := m.To_ChannelAdminLogEventActionToggleInvites()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures:
		t := m.To_ChannelAdminLogEventActionToggleSignatures()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned:
		t := m.To_ChannelAdminLogEventActionUpdatePinned()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionEditMessage:
		t := m.To_ChannelAdminLogEventActionEditMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage:
		t := m.To_ChannelAdminLogEventActionDeleteMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin:
		t := m.To_ChannelAdminLogEventActionParticipantJoin()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave:
		t := m.To_ChannelAdminLogEventActionParticipantLeave()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite:
		t := m.To_ChannelAdminLogEventActionParticipantInvite()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan:
		t := m.To_ChannelAdminLogEventActionParticipantToggleBan()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin:
		t := m.To_ChannelAdminLogEventActionParticipantToggleAdmin()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet:
		t := m.To_ChannelAdminLogEventActionChangeStickerSet()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden:
		t := m.To_ChannelAdminLogEventActionTogglePreHistoryHidden()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminLogEventAction) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelAdminLogEventActionChangeTitle:
		m2 := &TLChannelAdminLogEventActionChangeTitle{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionChangeAbout:
		m2 := &TLChannelAdminLogEventActionChangeAbout{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionChangeUsername:
		m2 := &TLChannelAdminLogEventActionChangeUsername{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto:
		m2 := &TLChannelAdminLogEventActionChangePhoto{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionToggleInvites:
		m2 := &TLChannelAdminLogEventActionToggleInvites{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures:
		m2 := &TLChannelAdminLogEventActionToggleSignatures{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned:
		m2 := &TLChannelAdminLogEventActionUpdatePinned{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionEditMessage:
		m2 := &TLChannelAdminLogEventActionEditMessage{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage:
		m2 := &TLChannelAdminLogEventActionDeleteMessage{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin:
		m2 := &TLChannelAdminLogEventActionParticipantJoin{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave:
		m2 := &TLChannelAdminLogEventActionParticipantLeave{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite:
		m2 := &TLChannelAdminLogEventActionParticipantInvite{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan:
		m2 := &TLChannelAdminLogEventActionParticipantToggleBan{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin:
		m2 := &TLChannelAdminLogEventActionParticipantToggleAdmin{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet:
		m2 := &TLChannelAdminLogEventActionChangeStickerSet{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden:
		m2 := &TLChannelAdminLogEventActionTogglePreHistoryHidden{Data2: &ChannelAdminLogEventAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelAdminLogEventActionChangeTitle#e6dfb825 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeTitle() *TLChannelAdminLogEventActionChangeTitle {
	return &TLChannelAdminLogEventActionChangeTitle{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionChangeAbout#55188a2e prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeAbout() *TLChannelAdminLogEventActionChangeAbout {
	return &TLChannelAdminLogEventActionChangeAbout{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionChangeUsername#6a4afc38 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeUsername() *TLChannelAdminLogEventActionChangeUsername {
	return &TLChannelAdminLogEventActionChangeUsername{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionChangePhoto#b82f55c3 prev_photo:ChatPhoto new_photo:ChatPhoto = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangePhoto() *TLChannelAdminLogEventActionChangePhoto {
	return &TLChannelAdminLogEventActionChangePhoto{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionToggleInvites#1b7907ae new_value:Bool = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleInvites() *TLChannelAdminLogEventActionToggleInvites {
	return &TLChannelAdminLogEventActionToggleInvites{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionToggleSignatures#26ae0971 new_value:Bool = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleSignatures() *TLChannelAdminLogEventActionToggleSignatures {
	return &TLChannelAdminLogEventActionToggleSignatures{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionUpdatePinned#e9e82c18 message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionUpdatePinned() *TLChannelAdminLogEventActionUpdatePinned {
	return &TLChannelAdminLogEventActionUpdatePinned{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionEditMessage#709b2405 prev_message:Message new_message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionEditMessage() *TLChannelAdminLogEventActionEditMessage {
	return &TLChannelAdminLogEventActionEditMessage{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionDeleteMessage#42e047bb message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionDeleteMessage() *TLChannelAdminLogEventActionDeleteMessage {
	return &TLChannelAdminLogEventActionDeleteMessage{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionParticipantJoin#183040d3 = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantJoin() *TLChannelAdminLogEventActionParticipantJoin {
	return &TLChannelAdminLogEventActionParticipantJoin{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionParticipantLeave#f89777f2 = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantLeave() *TLChannelAdminLogEventActionParticipantLeave {
	return &TLChannelAdminLogEventActionParticipantLeave{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionParticipantInvite#e31c34d8 participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantInvite() *TLChannelAdminLogEventActionParticipantInvite {
	return &TLChannelAdminLogEventActionParticipantInvite{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionParticipantToggleBan#e6d83d7e prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantToggleBan() *TLChannelAdminLogEventActionParticipantToggleBan {
	return &TLChannelAdminLogEventActionParticipantToggleBan{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionParticipantToggleAdmin#d5676710 prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantToggleAdmin() *TLChannelAdminLogEventActionParticipantToggleAdmin {
	return &TLChannelAdminLogEventActionParticipantToggleAdmin{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionChangeStickerSet#b1c3caa7 prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeStickerSet() *TLChannelAdminLogEventActionChangeStickerSet {
	return &TLChannelAdminLogEventActionChangeStickerSet{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 new_value:Bool = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionTogglePreHistoryHidden() *TLChannelAdminLogEventActionTogglePreHistoryHidden {
	return &TLChannelAdminLogEventActionTogglePreHistoryHidden{
		Data2: m.Data2,
	}
}

// channelAdminLogEventActionChangeTitle#e6dfb825 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeTitle) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeTitle,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionChangeTitle) SetPrevValue(v string) { m.Data2.PrevValue = v }
func (m *TLChannelAdminLogEventActionChangeTitle) GetPrevValue() string  { return m.Data2.PrevValue }

func (m *TLChannelAdminLogEventActionChangeTitle) SetNewValue(v string) { m.Data2.NewValue_2 = v }
func (m *TLChannelAdminLogEventActionChangeTitle) GetNewValue() string  { return m.Data2.NewValue_2 }

func NewTLChannelAdminLogEventActionChangeTitle() *TLChannelAdminLogEventActionChangeTitle {
	return &TLChannelAdminLogEventActionChangeTitle{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionChangeTitle) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeTitle))

	x.String(m.GetPrevValue())
	x.String(m.GetNewValue())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeTitle) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeTitle))

	x.String(m.GetPrevValue())
	x.String(m.GetNewValue())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeTitle) Decode(dbuf *DecodeBuf) error {
	m.SetPrevValue(dbuf.String())
	m.SetNewValue(dbuf.String())

	return dbuf.err
}

// channelAdminLogEventActionChangeAbout#55188a2e prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeAbout) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeAbout,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionChangeAbout) SetPrevValue(v string) { m.Data2.PrevValue = v }
func (m *TLChannelAdminLogEventActionChangeAbout) GetPrevValue() string  { return m.Data2.PrevValue }

func (m *TLChannelAdminLogEventActionChangeAbout) SetNewValue(v string) { m.Data2.NewValue_2 = v }
func (m *TLChannelAdminLogEventActionChangeAbout) GetNewValue() string  { return m.Data2.NewValue_2 }

func NewTLChannelAdminLogEventActionChangeAbout() *TLChannelAdminLogEventActionChangeAbout {
	return &TLChannelAdminLogEventActionChangeAbout{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionChangeAbout) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeAbout))

	x.String(m.GetPrevValue())
	x.String(m.GetNewValue())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeAbout) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeAbout))

	x.String(m.GetPrevValue())
	x.String(m.GetNewValue())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeAbout) Decode(dbuf *DecodeBuf) error {
	m.SetPrevValue(dbuf.String())
	m.SetNewValue(dbuf.String())

	return dbuf.err
}

// channelAdminLogEventActionChangeUsername#6a4afc38 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeUsername) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeUsername,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionChangeUsername) SetPrevValue(v string) { m.Data2.PrevValue = v }
func (m *TLChannelAdminLogEventActionChangeUsername) GetPrevValue() string  { return m.Data2.PrevValue }

func (m *TLChannelAdminLogEventActionChangeUsername) SetNewValue(v string) { m.Data2.NewValue_2 = v }
func (m *TLChannelAdminLogEventActionChangeUsername) GetNewValue() string  { return m.Data2.NewValue_2 }

func NewTLChannelAdminLogEventActionChangeUsername() *TLChannelAdminLogEventActionChangeUsername {
	return &TLChannelAdminLogEventActionChangeUsername{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionChangeUsername) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeUsername))

	x.String(m.GetPrevValue())
	x.String(m.GetNewValue())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeUsername) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeUsername))

	x.String(m.GetPrevValue())
	x.String(m.GetNewValue())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeUsername) Decode(dbuf *DecodeBuf) error {
	m.SetPrevValue(dbuf.String())
	m.SetNewValue(dbuf.String())

	return dbuf.err
}

// channelAdminLogEventActionChangePhoto#b82f55c3 prev_photo:ChatPhoto new_photo:ChatPhoto = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangePhoto) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangePhoto,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionChangePhoto) SetPrevPhoto(v *ChatPhoto) { m.Data2.PrevPhoto = v }
func (m *TLChannelAdminLogEventActionChangePhoto) GetPrevPhoto() *ChatPhoto  { return m.Data2.PrevPhoto }

func (m *TLChannelAdminLogEventActionChangePhoto) SetNewPhoto(v *ChatPhoto) { m.Data2.NewPhoto = v }
func (m *TLChannelAdminLogEventActionChangePhoto) GetNewPhoto() *ChatPhoto  { return m.Data2.NewPhoto }

func NewTLChannelAdminLogEventActionChangePhoto() *TLChannelAdminLogEventActionChangePhoto {
	return &TLChannelAdminLogEventActionChangePhoto{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionChangePhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto))

	x.Bytes(m.GetPrevPhoto().Encode())
	x.Bytes(m.GetNewPhoto().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangePhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto))

	x.Bytes(m.GetPrevPhoto().EncodeToLayer(layer))
	x.Bytes(m.GetNewPhoto().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangePhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &ChatPhoto{}
	m1.Decode(dbuf)
	m.SetPrevPhoto(m1)
	m2 := &ChatPhoto{}
	m2.Decode(dbuf)
	m.SetNewPhoto(m2)

	return dbuf.err
}

// channelAdminLogEventActionToggleInvites#1b7907ae new_value:Bool = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionToggleInvites) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionToggleInvites,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionToggleInvites) SetNewValue(v *Bool) { m.Data2.NewValue_5 = v }
func (m *TLChannelAdminLogEventActionToggleInvites) GetNewValue() *Bool  { return m.Data2.NewValue_5 }

func NewTLChannelAdminLogEventActionToggleInvites() *TLChannelAdminLogEventActionToggleInvites {
	return &TLChannelAdminLogEventActionToggleInvites{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionToggleInvites) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleInvites))

	x.Bytes(m.GetNewValue().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionToggleInvites) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleInvites))

	x.Bytes(m.GetNewValue().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionToggleInvites) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.SetNewValue(m1)

	return dbuf.err
}

// channelAdminLogEventActionToggleSignatures#26ae0971 new_value:Bool = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionToggleSignatures) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionToggleSignatures) SetNewValue(v *Bool) { m.Data2.NewValue_5 = v }
func (m *TLChannelAdminLogEventActionToggleSignatures) GetNewValue() *Bool  { return m.Data2.NewValue_5 }

func NewTLChannelAdminLogEventActionToggleSignatures() *TLChannelAdminLogEventActionToggleSignatures {
	return &TLChannelAdminLogEventActionToggleSignatures{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionToggleSignatures) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures))

	x.Bytes(m.GetNewValue().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionToggleSignatures) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures))

	x.Bytes(m.GetNewValue().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionToggleSignatures) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.SetNewValue(m1)

	return dbuf.err
}

// channelAdminLogEventActionUpdatePinned#e9e82c18 message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionUpdatePinned) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionUpdatePinned) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionUpdatePinned) GetMessage() *Message  { return m.Data2.Message }

func NewTLChannelAdminLogEventActionUpdatePinned() *TLChannelAdminLogEventActionUpdatePinned {
	return &TLChannelAdminLogEventActionUpdatePinned{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionUpdatePinned) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned))

	x.Bytes(m.GetMessage().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionUpdatePinned) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionUpdatePinned) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetMessage(m1)

	return dbuf.err
}

// channelAdminLogEventActionEditMessage#709b2405 prev_message:Message new_message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionEditMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionEditMessage,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionEditMessage) SetPrevMessage(v *Message) { m.Data2.PrevMessage = v }
func (m *TLChannelAdminLogEventActionEditMessage) GetPrevMessage() *Message {
	return m.Data2.PrevMessage
}

func (m *TLChannelAdminLogEventActionEditMessage) SetNewMessage(v *Message) { m.Data2.NewMessage = v }
func (m *TLChannelAdminLogEventActionEditMessage) GetNewMessage() *Message  { return m.Data2.NewMessage }

func NewTLChannelAdminLogEventActionEditMessage() *TLChannelAdminLogEventActionEditMessage {
	return &TLChannelAdminLogEventActionEditMessage{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionEditMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionEditMessage))

	x.Bytes(m.GetPrevMessage().Encode())
	x.Bytes(m.GetNewMessage().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionEditMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionEditMessage))

	x.Bytes(m.GetPrevMessage().EncodeToLayer(layer))
	x.Bytes(m.GetNewMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionEditMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetPrevMessage(m1)
	m2 := &Message{}
	m2.Decode(dbuf)
	m.SetNewMessage(m2)

	return dbuf.err
}

// channelAdminLogEventActionDeleteMessage#42e047bb message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionDeleteMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionDeleteMessage) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionDeleteMessage) GetMessage() *Message  { return m.Data2.Message }

func NewTLChannelAdminLogEventActionDeleteMessage() *TLChannelAdminLogEventActionDeleteMessage {
	return &TLChannelAdminLogEventActionDeleteMessage{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionDeleteMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage))

	x.Bytes(m.GetMessage().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionDeleteMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionDeleteMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetMessage(m1)

	return dbuf.err
}

// channelAdminLogEventActionParticipantJoin#183040d3 = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantJoin) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin,
		Data2:       m.Data2,
	}
}

func NewTLChannelAdminLogEventActionParticipantJoin() *TLChannelAdminLogEventActionParticipantJoin {
	return &TLChannelAdminLogEventActionParticipantJoin{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionParticipantJoin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantJoin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantJoin) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// channelAdminLogEventActionParticipantLeave#f89777f2 = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantLeave) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave,
		Data2:       m.Data2,
	}
}

func NewTLChannelAdminLogEventActionParticipantLeave() *TLChannelAdminLogEventActionParticipantLeave {
	return &TLChannelAdminLogEventActionParticipantLeave{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionParticipantLeave) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantLeave) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantLeave) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// channelAdminLogEventActionParticipantInvite#e31c34d8 participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantInvite) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionParticipantInvite) SetParticipant(v *ChannelParticipant) {
	m.Data2.Participant = v
}
func (m *TLChannelAdminLogEventActionParticipantInvite) GetParticipant() *ChannelParticipant {
	return m.Data2.Participant
}

func NewTLChannelAdminLogEventActionParticipantInvite() *TLChannelAdminLogEventActionParticipantInvite {
	return &TLChannelAdminLogEventActionParticipantInvite{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionParticipantInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite))

	x.Bytes(m.GetParticipant().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite))

	x.Bytes(m.GetParticipant().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantInvite) Decode(dbuf *DecodeBuf) error {
	m1 := &ChannelParticipant{}
	m1.Decode(dbuf)
	m.SetParticipant(m1)

	return dbuf.err
}

// channelAdminLogEventActionParticipantToggleBan#e6d83d7e prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantToggleBan) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) SetPrevParticipant(v *ChannelParticipant) {
	m.Data2.PrevParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetPrevParticipant() *ChannelParticipant {
	return m.Data2.PrevParticipant
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) SetNewParticipant(v *ChannelParticipant) {
	m.Data2.NewParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetNewParticipant() *ChannelParticipant {
	return m.Data2.NewParticipant
}

func NewTLChannelAdminLogEventActionParticipantToggleBan() *TLChannelAdminLogEventActionParticipantToggleBan {
	return &TLChannelAdminLogEventActionParticipantToggleBan{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan))

	x.Bytes(m.GetPrevParticipant().Encode())
	x.Bytes(m.GetNewParticipant().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan))

	x.Bytes(m.GetPrevParticipant().EncodeToLayer(layer))
	x.Bytes(m.GetNewParticipant().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) Decode(dbuf *DecodeBuf) error {
	m1 := &ChannelParticipant{}
	m1.Decode(dbuf)
	m.SetPrevParticipant(m1)
	m2 := &ChannelParticipant{}
	m2.Decode(dbuf)
	m.SetNewParticipant(m2)

	return dbuf.err
}

// channelAdminLogEventActionParticipantToggleAdmin#d5676710 prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) SetPrevParticipant(v *ChannelParticipant) {
	m.Data2.PrevParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetPrevParticipant() *ChannelParticipant {
	return m.Data2.PrevParticipant
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) SetNewParticipant(v *ChannelParticipant) {
	m.Data2.NewParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetNewParticipant() *ChannelParticipant {
	return m.Data2.NewParticipant
}

func NewTLChannelAdminLogEventActionParticipantToggleAdmin() *TLChannelAdminLogEventActionParticipantToggleAdmin {
	return &TLChannelAdminLogEventActionParticipantToggleAdmin{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin))

	x.Bytes(m.GetPrevParticipant().Encode())
	x.Bytes(m.GetNewParticipant().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin))

	x.Bytes(m.GetPrevParticipant().EncodeToLayer(layer))
	x.Bytes(m.GetNewParticipant().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) Decode(dbuf *DecodeBuf) error {
	m1 := &ChannelParticipant{}
	m1.Decode(dbuf)
	m.SetPrevParticipant(m1)
	m2 := &ChannelParticipant{}
	m2.Decode(dbuf)
	m.SetNewParticipant(m2)

	return dbuf.err
}

// channelAdminLogEventActionChangeStickerSet#b1c3caa7 prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeStickerSet) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) SetPrevStickerset(v *InputStickerSet) {
	m.Data2.PrevStickerset = v
}
func (m *TLChannelAdminLogEventActionChangeStickerSet) GetPrevStickerset() *InputStickerSet {
	return m.Data2.PrevStickerset
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) SetNewStickerset(v *InputStickerSet) {
	m.Data2.NewStickerset = v
}
func (m *TLChannelAdminLogEventActionChangeStickerSet) GetNewStickerset() *InputStickerSet {
	return m.Data2.NewStickerset
}

func NewTLChannelAdminLogEventActionChangeStickerSet() *TLChannelAdminLogEventActionChangeStickerSet {
	return &TLChannelAdminLogEventActionChangeStickerSet{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet))

	x.Bytes(m.GetPrevStickerset().Encode())
	x.Bytes(m.GetNewStickerset().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet))

	x.Bytes(m.GetPrevStickerset().EncodeToLayer(layer))
	x.Bytes(m.GetNewStickerset().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) Decode(dbuf *DecodeBuf) error {
	m1 := &InputStickerSet{}
	m1.Decode(dbuf)
	m.SetPrevStickerset(m1)
	m2 := &InputStickerSet{}
	m2.Decode(dbuf)
	m.SetNewStickerset(m2)

	return dbuf.err
}

// channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 new_value:Bool = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	return &ChannelAdminLogEventAction{
		Constructor: TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) SetNewValue(v *Bool) {
	m.Data2.NewValue_5 = v
}
func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) GetNewValue() *Bool {
	return m.Data2.NewValue_5
}

func NewTLChannelAdminLogEventActionTogglePreHistoryHidden() *TLChannelAdminLogEventActionTogglePreHistoryHidden {
	return &TLChannelAdminLogEventActionTogglePreHistoryHidden{Data2: &ChannelAdminLogEventAction_Data{}}
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden))

	x.Bytes(m.GetNewValue().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden))

	x.Bytes(m.GetNewValue().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.SetNewValue(m1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Message <--
//  + TL_MessageEmpty
//  + TL_Message
//  + TL_MessageService
//

func (m *Message) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messageEmpty:
		t := m.To_MessageEmpty()
		return t.Encode()
	case TLConstructor_CRC32_message:
		t := m.To_Message()
		return t.Encode()
	case TLConstructor_CRC32_messageService:
		t := m.To_MessageService()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Message) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messageEmpty:
		t := m.To_MessageEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_message:
		t := m.To_Message()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageService:
		t := m.To_MessageService()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Message) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messageEmpty:
		m2 := &TLMessageEmpty{Data2: &Message_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_message:
		m2 := &TLMessage{Data2: &Message_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageService:
		m2 := &TLMessageService{Data2: &Message_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messageEmpty#83e5de54 id:int = Message;
func (m *Message) To_MessageEmpty() *TLMessageEmpty {
	return &TLMessageEmpty{
		Data2: m.Data2,
	}
}

// message#44f9b43d flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long = Message;
func (m *Message) To_Message() *TLMessage {
	return &TLMessage{
		Data2: m.Data2,
	}
}

// messageService#9e19a1f6 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer reply_to_msg_id:flags.3?int date:int action:MessageAction = Message;
func (m *Message) To_MessageService() *TLMessageService {
	return &TLMessageService{
		Data2: m.Data2,
	}
}

// messageEmpty#83e5de54 id:int = Message;
func (m *TLMessageEmpty) To_Message() *Message {
	return &Message{
		Constructor: TLConstructor_CRC32_messageEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessageEmpty) GetId() int32  { return m.Data2.Id }

func NewTLMessageEmpty() *TLMessageEmpty {
	return &TLMessageEmpty{Data2: &Message_Data{}}
}

func (m *TLMessageEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLMessageEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLMessageEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

// message#44f9b43d flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long = Message;
func (m *TLMessage) To_Message() *Message {
	return &Message{
		Constructor: TLConstructor_CRC32_message,
		Data2:       m.Data2,
	}
}

func (m *TLMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessage) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessage) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessage) GetSilent() bool  { return m.Data2.Silent }

func (m *TLMessage) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessage) GetPost() bool  { return m.Data2.Post }

func (m *TLMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessage) GetId() int32  { return m.Data2.Id }

func (m *TLMessage) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessage) GetFromId() int32  { return m.Data2.FromId }

func (m *TLMessage) SetToId(v *Peer) { m.Data2.ToId = v }
func (m *TLMessage) GetToId() *Peer  { return m.Data2.ToId }

func (m *TLMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLMessage) GetFwdFrom() *MessageFwdHeader  { return m.Data2.FwdFrom }

func (m *TLMessage) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLMessage) GetViaBotId() int32  { return m.Data2.ViaBotId }

func (m *TLMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLMessage) GetReplyToMsgId() int32  { return m.Data2.ReplyToMsgId }

func (m *TLMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLMessage) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLMessage) GetMedia() *MessageMedia  { return m.Data2.Media }

func (m *TLMessage) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLMessage) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLMessage) SetViews(v int32) { m.Data2.Views = v }
func (m *TLMessage) GetViews() int32  { return m.Data2.Views }

func (m *TLMessage) SetEditDate(v int32) { m.Data2.EditDate = v }
func (m *TLMessage) GetEditDate() int32  { return m.Data2.EditDate }

func (m *TLMessage) SetPostAuthor(v string) { m.Data2.PostAuthor = v }
func (m *TLMessage) GetPostAuthor() string  { return m.Data2.PostAuthor }

func (m *TLMessage) SetGroupedId(v int64) { m.Data2.GroupedId = v }
func (m *TLMessage) GetGroupedId() int64  { return m.Data2.GroupedId }

func NewTLMessage() *TLMessage {
	return &TLMessage{Data2: &Message_Data{}}
}

func (m *TLMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_message))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetPost() == true {
		flags |= 1 << 14
	}
	if m.GetFromId() != 0 {
		flags |= 1 << 8
	}
	if m.GetFwdFrom() != nil {
		flags |= 1 << 2
	}
	if m.GetViaBotId() != 0 {
		flags |= 1 << 11
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	if m.GetMedia() != nil {
		flags |= 1 << 9
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 6
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	if m.GetViews() != 0 {
		flags |= 1 << 10
	}
	if m.GetEditDate() != 0 {
		flags |= 1 << 15
	}
	if m.GetPostAuthor() != "" {
		flags |= 1 << 16
	}
	if m.GetGroupedId() != 0 {
		flags |= 1 << 17
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetFromId() != 0 {
		x.Int(m.GetFromId())
	}
	x.Bytes(m.GetToId().Encode())
	if m.GetFwdFrom() != nil {
		x.Bytes(m.GetFwdFrom().Encode())
	}
	if m.GetViaBotId() != 0 {
		x.Int(m.GetViaBotId())
	}
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	x.Int(m.GetDate())
	x.String(m.GetMessage())
	if m.GetMedia() != nil {
		x.Bytes(m.GetMedia().Encode())
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetViews() != 0 {
		x.Int(m.GetViews())
	}
	if m.GetEditDate() != 0 {
		x.Int(m.GetEditDate())
	}
	if m.GetPostAuthor() != "" {
		x.String(m.GetPostAuthor())
	}
	if m.GetGroupedId() != 0 {
		x.Long(m.GetGroupedId())
	}

	return x.buf
}

func (m *TLMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_message))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetPost() == true {
		flags |= 1 << 14
	}
	if m.GetFromId() != 0 {
		flags |= 1 << 8
	}
	if m.GetFwdFrom() != nil {
		flags |= 1 << 2
	}
	if m.GetViaBotId() != 0 {
		flags |= 1 << 11
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	if m.GetMedia() != nil {
		flags |= 1 << 9
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 6
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	if m.GetViews() != 0 {
		flags |= 1 << 10
	}
	if m.GetEditDate() != 0 {
		flags |= 1 << 15
	}
	if m.GetPostAuthor() != "" {
		flags |= 1 << 16
	}
	if m.GetGroupedId() != 0 {
		flags |= 1 << 17
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetFromId() != 0 {
		x.Int(m.GetFromId())
	}
	x.Bytes(m.GetToId().EncodeToLayer(layer))
	if m.GetFwdFrom() != nil {
		x.Bytes(m.GetFwdFrom().EncodeToLayer(layer))
	}
	if m.GetViaBotId() != 0 {
		x.Int(m.GetViaBotId())
	}
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	x.Int(m.GetDate())
	x.String(m.GetMessage())
	if m.GetMedia() != nil {
		x.Bytes(m.GetMedia().EncodeToLayer(layer))
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetViews() != 0 {
		x.Int(m.GetViews())
	}
	if m.GetEditDate() != 0 {
		x.Int(m.GetEditDate())
	}
	if m.GetPostAuthor() != "" {
		x.String(m.GetPostAuthor())
	}
	if m.GetGroupedId() != 0 {
		x.Long(m.GetGroupedId())
	}

	return x.buf
}

func (m *TLMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetOut(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetMentioned(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetMediaUnread(true)
	}
	if (flags & (1 << 13)) != 0 {
		m.SetSilent(true)
	}
	if (flags & (1 << 14)) != 0 {
		m.SetPost(true)
	}
	m.SetId(dbuf.Int())
	if (flags & (1 << 8)) != 0 {
		m.SetFromId(dbuf.Int())
	}
	m9 := &Peer{}
	m9.Decode(dbuf)
	m.SetToId(m9)
	if (flags & (1 << 2)) != 0 {
		m10 := &MessageFwdHeader{}
		m10.Decode(dbuf)
		m.SetFwdFrom(m10)
	}
	if (flags & (1 << 11)) != 0 {
		m.SetViaBotId(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetReplyToMsgId(dbuf.Int())
	}
	m.SetDate(dbuf.Int())
	m.SetMessage(dbuf.String())
	if (flags & (1 << 9)) != 0 {
		m15 := &MessageMedia{}
		m15.Decode(dbuf)
		m.SetMedia(m15)
	}
	if (flags & (1 << 6)) != 0 {
		m16 := &ReplyMarkup{}
		m16.Decode(dbuf)
		m.SetReplyMarkup(m16)
	}
	if (flags & (1 << 7)) != 0 {
		c17 := dbuf.Int()
		if c17 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 17, c17)
			return dbuf.err
		}
		l17 := dbuf.Int()
		v17 := make([]*MessageEntity, l17)
		for i := int32(0); i < l17; i++ {
			v17[i] = &MessageEntity{}
			v17[i].Decode(dbuf)
		}
		m.SetEntities(v17)

	}
	if (flags & (1 << 10)) != 0 {
		m.SetViews(dbuf.Int())
	}
	if (flags & (1 << 15)) != 0 {
		m.SetEditDate(dbuf.Int())
	}
	if (flags & (1 << 16)) != 0 {
		m.SetPostAuthor(dbuf.String())
	}
	if (flags & (1 << 17)) != 0 {
		m.SetGroupedId(dbuf.Long())
	}

	return dbuf.err
}

// messageService#9e19a1f6 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer reply_to_msg_id:flags.3?int date:int action:MessageAction = Message;
func (m *TLMessageService) To_Message() *Message {
	return &Message{
		Constructor: TLConstructor_CRC32_messageService,
		Data2:       m.Data2,
	}
}

func (m *TLMessageService) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessageService) GetOut() bool  { return m.Data2.Out }

func (m *TLMessageService) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessageService) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLMessageService) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessageService) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLMessageService) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessageService) GetSilent() bool  { return m.Data2.Silent }

func (m *TLMessageService) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessageService) GetPost() bool  { return m.Data2.Post }

func (m *TLMessageService) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessageService) GetId() int32  { return m.Data2.Id }

func (m *TLMessageService) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessageService) GetFromId() int32  { return m.Data2.FromId }

func (m *TLMessageService) SetToId(v *Peer) { m.Data2.ToId = v }
func (m *TLMessageService) GetToId() *Peer  { return m.Data2.ToId }

func (m *TLMessageService) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLMessageService) GetReplyToMsgId() int32  { return m.Data2.ReplyToMsgId }

func (m *TLMessageService) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageService) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageService) SetAction(v *MessageAction) { m.Data2.Action = v }
func (m *TLMessageService) GetAction() *MessageAction  { return m.Data2.Action }

func NewTLMessageService() *TLMessageService {
	return &TLMessageService{Data2: &Message_Data{}}
}

func (m *TLMessageService) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageService))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetPost() == true {
		flags |= 1 << 14
	}
	if m.GetFromId() != 0 {
		flags |= 1 << 8
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetFromId() != 0 {
		x.Int(m.GetFromId())
	}
	x.Bytes(m.GetToId().Encode())
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	x.Int(m.GetDate())
	x.Bytes(m.GetAction().Encode())

	return x.buf
}

func (m *TLMessageService) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageService))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetPost() == true {
		flags |= 1 << 14
	}
	if m.GetFromId() != 0 {
		flags |= 1 << 8
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetFromId() != 0 {
		x.Int(m.GetFromId())
	}
	x.Bytes(m.GetToId().EncodeToLayer(layer))
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	x.Int(m.GetDate())
	x.Bytes(m.GetAction().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageService) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetOut(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetMentioned(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetMediaUnread(true)
	}
	if (flags & (1 << 13)) != 0 {
		m.SetSilent(true)
	}
	if (flags & (1 << 14)) != 0 {
		m.SetPost(true)
	}
	m.SetId(dbuf.Int())
	if (flags & (1 << 8)) != 0 {
		m.SetFromId(dbuf.Int())
	}
	m9 := &Peer{}
	m9.Decode(dbuf)
	m.SetToId(m9)
	if (flags & (1 << 3)) != 0 {
		m.SetReplyToMsgId(dbuf.Int())
	}
	m.SetDate(dbuf.Int())
	m12 := &MessageAction{}
	m12.Decode(dbuf)
	m.SetAction(m12)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Blocked <--
//  + TL_ContactsBlocked
//  + TL_ContactsBlockedSlice
//

func (m *Contacts_Blocked) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_blocked:
		t := m.To_ContactsBlocked()
		return t.Encode()
	case TLConstructor_CRC32_contacts_blockedSlice:
		t := m.To_ContactsBlockedSlice()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Blocked) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_blocked:
		t := m.To_ContactsBlocked()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contacts_blockedSlice:
		t := m.To_ContactsBlockedSlice()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Blocked) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_blocked:
		m2 := &TLContactsBlocked{Data2: &Contacts_Blocked_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contacts_blockedSlice:
		m2 := &TLContactsBlockedSlice{Data2: &Contacts_Blocked_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *Contacts_Blocked) To_ContactsBlocked() *TLContactsBlocked {
	return &TLContactsBlocked{
		Data2: m.Data2,
	}
}

// contacts.blockedSlice#900802a1 count:int blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *Contacts_Blocked) To_ContactsBlockedSlice() *TLContactsBlockedSlice {
	return &TLContactsBlockedSlice{
		Data2: m.Data2,
	}
}

// contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *TLContactsBlocked) To_Contacts_Blocked() *Contacts_Blocked {
	return &Contacts_Blocked{
		Constructor: TLConstructor_CRC32_contacts_blocked,
		Data2:       m.Data2,
	}
}

func (m *TLContactsBlocked) SetBlocked(v []*ContactBlocked) { m.Data2.Blocked = v }
func (m *TLContactsBlocked) GetBlocked() []*ContactBlocked  { return m.Data2.Blocked }

func (m *TLContactsBlocked) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsBlocked) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsBlocked() *TLContactsBlocked {
	return &TLContactsBlocked{Data2: &Contacts_Blocked_Data{}}
}

func (m *TLContactsBlocked) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_blocked))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocked())))
	for _, v := range m.GetBlocked() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsBlocked) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_blocked))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocked())))
	for _, v := range m.GetBlocked() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsBlocked) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*ContactBlocked, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &ContactBlocked{}
		v1[i].Decode(dbuf)
	}
	m.SetBlocked(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

// contacts.blockedSlice#900802a1 count:int blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *TLContactsBlockedSlice) To_Contacts_Blocked() *Contacts_Blocked {
	return &Contacts_Blocked{
		Constructor: TLConstructor_CRC32_contacts_blockedSlice,
		Data2:       m.Data2,
	}
}

func (m *TLContactsBlockedSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLContactsBlockedSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLContactsBlockedSlice) SetBlocked(v []*ContactBlocked) { m.Data2.Blocked = v }
func (m *TLContactsBlockedSlice) GetBlocked() []*ContactBlocked  { return m.Data2.Blocked }

func (m *TLContactsBlockedSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsBlockedSlice) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsBlockedSlice() *TLContactsBlockedSlice {
	return &TLContactsBlockedSlice{Data2: &Contacts_Blocked_Data{}}
}

func (m *TLContactsBlockedSlice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_blockedSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocked())))
	for _, v := range m.GetBlocked() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsBlockedSlice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_blockedSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocked())))
	for _, v := range m.GetBlocked() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsBlockedSlice) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*ContactBlocked, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &ContactBlocked{}
		v2[i].Decode(dbuf)
	}
	m.SetBlocked(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_PasswordSettings <--
//  + TL_AccountPasswordSettings
//

func (m *Account_PasswordSettings) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_passwordSettings:
		t := m.To_AccountPasswordSettings()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_PasswordSettings) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_passwordSettings:
		t := m.To_AccountPasswordSettings()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_PasswordSettings) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_passwordSettings:
		m2 := &TLAccountPasswordSettings{Data2: &Account_PasswordSettings_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.passwordSettings#9a5c33e5 flags:# email:flags.0?string secure_settings:flags.1?SecureSecretSettings = account.PasswordSettings;
func (m *Account_PasswordSettings) To_AccountPasswordSettings() *TLAccountPasswordSettings {
	return &TLAccountPasswordSettings{
		Data2: m.Data2,
	}
}

// account.passwordSettings#9a5c33e5 flags:# email:flags.0?string secure_settings:flags.1?SecureSecretSettings = account.PasswordSettings;
func (m *TLAccountPasswordSettings) To_Account_PasswordSettings() *Account_PasswordSettings {
	return &Account_PasswordSettings{
		Constructor: TLConstructor_CRC32_account_passwordSettings,
		Data2:       m.Data2,
	}
}

func (m *TLAccountPasswordSettings) SetEmail(v string) { m.Data2.Email = v }
func (m *TLAccountPasswordSettings) GetEmail() string  { return m.Data2.Email }

func (m *TLAccountPasswordSettings) SetSecureSettings(v *SecureSecretSettings) {
	m.Data2.SecureSettings = v
}
func (m *TLAccountPasswordSettings) GetSecureSettings() *SecureSecretSettings {
	return m.Data2.SecureSettings
}

func NewTLAccountPasswordSettings() *TLAccountPasswordSettings {
	return &TLAccountPasswordSettings{Data2: &Account_PasswordSettings_Data{}}
}

func (m *TLAccountPasswordSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_passwordSettings))

	// flags
	var flags uint32 = 0
	if m.GetEmail() != "" {
		flags |= 1 << 0
	}
	if m.GetSecureSettings() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	if m.GetEmail() != "" {
		x.String(m.GetEmail())
	}
	if m.GetSecureSettings() != nil {
		x.Bytes(m.GetSecureSettings().Encode())
	}

	return x.buf
}

func (m *TLAccountPasswordSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_passwordSettings))

	// flags
	var flags uint32 = 0
	if m.GetEmail() != "" {
		flags |= 1 << 0
	}
	if m.GetSecureSettings() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	if m.GetEmail() != "" {
		x.String(m.GetEmail())
	}
	if m.GetSecureSettings() != nil {
		x.Bytes(m.GetSecureSettings().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAccountPasswordSettings) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetEmail(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		m3 := &SecureSecretSettings{}
		m3.Decode(dbuf)
		m.SetSecureSettings(m3)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentReceipt <--
//  + TL_PaymentsPaymentReceipt
//

func (m *Payments_PaymentReceipt) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_payments_paymentReceipt:
		t := m.To_PaymentsPaymentReceipt()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_PaymentReceipt) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_payments_paymentReceipt:
		t := m.To_PaymentsPaymentReceipt()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_PaymentReceipt) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_payments_paymentReceipt:
		m2 := &TLPaymentsPaymentReceipt{Data2: &Payments_PaymentReceipt_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt;
func (m *Payments_PaymentReceipt) To_PaymentsPaymentReceipt() *TLPaymentsPaymentReceipt {
	return &TLPaymentsPaymentReceipt{
		Data2: m.Data2,
	}
}

// payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt;
func (m *TLPaymentsPaymentReceipt) To_Payments_PaymentReceipt() *Payments_PaymentReceipt {
	return &Payments_PaymentReceipt{
		Constructor: TLConstructor_CRC32_payments_paymentReceipt,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentsPaymentReceipt) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPaymentsPaymentReceipt) GetDate() int32  { return m.Data2.Date }

func (m *TLPaymentsPaymentReceipt) SetBotId(v int32) { m.Data2.BotId = v }
func (m *TLPaymentsPaymentReceipt) GetBotId() int32  { return m.Data2.BotId }

func (m *TLPaymentsPaymentReceipt) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLPaymentsPaymentReceipt) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLPaymentsPaymentReceipt) SetProviderId(v int32) { m.Data2.ProviderId = v }
func (m *TLPaymentsPaymentReceipt) GetProviderId() int32  { return m.Data2.ProviderId }

func (m *TLPaymentsPaymentReceipt) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLPaymentsPaymentReceipt) GetInfo() *PaymentRequestedInfo  { return m.Data2.Info }

func (m *TLPaymentsPaymentReceipt) SetShipping(v *ShippingOption) { m.Data2.Shipping = v }
func (m *TLPaymentsPaymentReceipt) GetShipping() *ShippingOption  { return m.Data2.Shipping }

func (m *TLPaymentsPaymentReceipt) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLPaymentsPaymentReceipt) GetCurrency() string  { return m.Data2.Currency }

func (m *TLPaymentsPaymentReceipt) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLPaymentsPaymentReceipt) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLPaymentsPaymentReceipt) SetCredentialsTitle(v string) { m.Data2.CredentialsTitle = v }
func (m *TLPaymentsPaymentReceipt) GetCredentialsTitle() string  { return m.Data2.CredentialsTitle }

func (m *TLPaymentsPaymentReceipt) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPaymentsPaymentReceipt) GetUsers() []*User  { return m.Data2.Users }

func NewTLPaymentsPaymentReceipt() *TLPaymentsPaymentReceipt {
	return &TLPaymentsPaymentReceipt{Data2: &Payments_PaymentReceipt_Data{}}
}

func (m *TLPaymentsPaymentReceipt) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentReceipt))

	// flags
	var flags uint32 = 0
	if m.GetInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetShipping() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetDate())
	x.Int(m.GetBotId())
	x.Bytes(m.GetInvoice().Encode())
	x.Int(m.GetProviderId())
	if m.GetInfo() != nil {
		x.Bytes(m.GetInfo().Encode())
	}
	if m.GetShipping() != nil {
		x.Bytes(m.GetShipping().Encode())
	}
	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())
	x.String(m.GetCredentialsTitle())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPaymentsPaymentReceipt) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentReceipt))

	// flags
	var flags uint32 = 0
	if m.GetInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetShipping() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetDate())
	x.Int(m.GetBotId())
	x.Bytes(m.GetInvoice().EncodeToLayer(layer))
	x.Int(m.GetProviderId())
	if m.GetInfo() != nil {
		x.Bytes(m.GetInfo().EncodeToLayer(layer))
	}
	if m.GetShipping() != nil {
		x.Bytes(m.GetShipping().EncodeToLayer(layer))
	}
	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())
	x.String(m.GetCredentialsTitle())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPaymentsPaymentReceipt) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetDate(dbuf.Int())
	m.SetBotId(dbuf.Int())
	m4 := &Invoice{}
	m4.Decode(dbuf)
	m.SetInvoice(m4)
	m.SetProviderId(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m6 := &PaymentRequestedInfo{}
		m6.Decode(dbuf)
		m.SetInfo(m6)
	}
	if (flags & (1 << 1)) != 0 {
		m7 := &ShippingOption{}
		m7.Decode(dbuf)
		m.SetShipping(m7)
	}
	m.SetCurrency(dbuf.String())
	m.SetTotalAmount(dbuf.Long())
	m.SetCredentialsTitle(dbuf.String())
	c11 := dbuf.Int()
	if c11 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
		return dbuf.err
	}
	l11 := dbuf.Int()
	v11 := make([]*User, l11)
	for i := int32(0); i < l11; i++ {
		v11[i] = &User{}
		v11[i].Decode(dbuf)
	}
	m.SetUsers(v11)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_RecentMeUrls <--
//  + TL_HelpRecentMeUrls
//

func (m *Help_RecentMeUrls) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_recentMeUrls:
		t := m.To_HelpRecentMeUrls()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_RecentMeUrls) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_recentMeUrls:
		t := m.To_HelpRecentMeUrls()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_RecentMeUrls) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_recentMeUrls:
		m2 := &TLHelpRecentMeUrls{Data2: &Help_RecentMeUrls_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.recentMeUrls#e0310d7 urls:Vector<RecentMeUrl> chats:Vector<Chat> users:Vector<User> = help.RecentMeUrls;
func (m *Help_RecentMeUrls) To_HelpRecentMeUrls() *TLHelpRecentMeUrls {
	return &TLHelpRecentMeUrls{
		Data2: m.Data2,
	}
}

// help.recentMeUrls#e0310d7 urls:Vector<RecentMeUrl> chats:Vector<Chat> users:Vector<User> = help.RecentMeUrls;
func (m *TLHelpRecentMeUrls) To_Help_RecentMeUrls() *Help_RecentMeUrls {
	return &Help_RecentMeUrls{
		Constructor: TLConstructor_CRC32_help_recentMeUrls,
		Data2:       m.Data2,
	}
}

func (m *TLHelpRecentMeUrls) SetUrls(v []*RecentMeUrl) { m.Data2.Urls = v }
func (m *TLHelpRecentMeUrls) GetUrls() []*RecentMeUrl  { return m.Data2.Urls }

func (m *TLHelpRecentMeUrls) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLHelpRecentMeUrls) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLHelpRecentMeUrls) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLHelpRecentMeUrls) GetUsers() []*User  { return m.Data2.Users }

func NewTLHelpRecentMeUrls() *TLHelpRecentMeUrls {
	return &TLHelpRecentMeUrls{Data2: &Help_RecentMeUrls_Data{}}
}

func (m *TLHelpRecentMeUrls) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_recentMeUrls))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUrls())))
	for _, v := range m.GetUrls() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLHelpRecentMeUrls) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_recentMeUrls))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUrls())))
	for _, v := range m.GetUrls() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLHelpRecentMeUrls) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*RecentMeUrl, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &RecentMeUrl{}
		v1[i].Decode(dbuf)
	}
	m.SetUrls(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PhoneCallProtocol <--
//  + TL_PhoneCallProtocol
//

func (m *PhoneCallProtocol) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_phoneCallProtocol:
		t := m.To_PhoneCallProtocol()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneCallProtocol) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_phoneCallProtocol:
		t := m.To_PhoneCallProtocol()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneCallProtocol) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_phoneCallProtocol:
		m2 := &TLPhoneCallProtocol{Data2: &PhoneCallProtocol_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// phoneCallProtocol#a2bb35cb flags:# udp_p2p:flags.0?true udp_reflector:flags.1?true min_layer:int max_layer:int = PhoneCallProtocol;
func (m *PhoneCallProtocol) To_PhoneCallProtocol() *TLPhoneCallProtocol {
	return &TLPhoneCallProtocol{
		Data2: m.Data2,
	}
}

// phoneCallProtocol#a2bb35cb flags:# udp_p2p:flags.0?true udp_reflector:flags.1?true min_layer:int max_layer:int = PhoneCallProtocol;
func (m *TLPhoneCallProtocol) To_PhoneCallProtocol() *PhoneCallProtocol {
	return &PhoneCallProtocol{
		Constructor: TLConstructor_CRC32_phoneCallProtocol,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCallProtocol) SetUdpP2P(v bool) { m.Data2.UdpP2P = v }
func (m *TLPhoneCallProtocol) GetUdpP2P() bool  { return m.Data2.UdpP2P }

func (m *TLPhoneCallProtocol) SetUdpReflector(v bool) { m.Data2.UdpReflector = v }
func (m *TLPhoneCallProtocol) GetUdpReflector() bool  { return m.Data2.UdpReflector }

func (m *TLPhoneCallProtocol) SetMinLayer(v int32) { m.Data2.MinLayer = v }
func (m *TLPhoneCallProtocol) GetMinLayer() int32  { return m.Data2.MinLayer }

func (m *TLPhoneCallProtocol) SetMaxLayer(v int32) { m.Data2.MaxLayer = v }
func (m *TLPhoneCallProtocol) GetMaxLayer() int32  { return m.Data2.MaxLayer }

func NewTLPhoneCallProtocol() *TLPhoneCallProtocol {
	return &TLPhoneCallProtocol{Data2: &PhoneCallProtocol_Data{}}
}

func (m *TLPhoneCallProtocol) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallProtocol))

	// flags
	var flags uint32 = 0
	if m.GetUdpP2P() == true {
		flags |= 1 << 0
	}
	if m.GetUdpReflector() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetMinLayer())
	x.Int(m.GetMaxLayer())

	return x.buf
}

func (m *TLPhoneCallProtocol) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallProtocol))

	// flags
	var flags uint32 = 0
	if m.GetUdpP2P() == true {
		flags |= 1 << 0
	}
	if m.GetUdpReflector() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetMinLayer())
	x.Int(m.GetMaxLayer())

	return x.buf
}

func (m *TLPhoneCallProtocol) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetUdpP2P(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetUdpReflector(true)
	}
	m.SetMinLayer(dbuf.Int())
	m.SetMaxLayer(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminRights <--
//  + TL_ChannelAdminRights
//

func (m *ChannelAdminRights) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelAdminRights:
		t := m.To_ChannelAdminRights()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminRights) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelAdminRights:
		t := m.To_ChannelAdminRights()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminRights) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelAdminRights:
		m2 := &TLChannelAdminRights{Data2: &ChannelAdminRights_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelAdminRights#5d7ceba5 flags:# change_info:flags.0?true post_messages:flags.1?true edit_messages:flags.2?true delete_messages:flags.3?true ban_users:flags.4?true invite_users:flags.5?true invite_link:flags.6?true pin_messages:flags.7?true add_admins:flags.9?true manage_call:flags.10?true = ChannelAdminRights;
func (m *ChannelAdminRights) To_ChannelAdminRights() *TLChannelAdminRights {
	return &TLChannelAdminRights{
		Data2: m.Data2,
	}
}

// channelAdminRights#5d7ceba5 flags:# change_info:flags.0?true post_messages:flags.1?true edit_messages:flags.2?true delete_messages:flags.3?true ban_users:flags.4?true invite_users:flags.5?true invite_link:flags.6?true pin_messages:flags.7?true add_admins:flags.9?true manage_call:flags.10?true = ChannelAdminRights;
func (m *TLChannelAdminRights) To_ChannelAdminRights() *ChannelAdminRights {
	return &ChannelAdminRights{
		Constructor: TLConstructor_CRC32_channelAdminRights,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminRights) SetChangeInfo(v bool) { m.Data2.ChangeInfo = v }
func (m *TLChannelAdminRights) GetChangeInfo() bool  { return m.Data2.ChangeInfo }

func (m *TLChannelAdminRights) SetPostMessages(v bool) { m.Data2.PostMessages = v }
func (m *TLChannelAdminRights) GetPostMessages() bool  { return m.Data2.PostMessages }

func (m *TLChannelAdminRights) SetEditMessages(v bool) { m.Data2.EditMessages = v }
func (m *TLChannelAdminRights) GetEditMessages() bool  { return m.Data2.EditMessages }

func (m *TLChannelAdminRights) SetDeleteMessages(v bool) { m.Data2.DeleteMessages = v }
func (m *TLChannelAdminRights) GetDeleteMessages() bool  { return m.Data2.DeleteMessages }

func (m *TLChannelAdminRights) SetBanUsers(v bool) { m.Data2.BanUsers = v }
func (m *TLChannelAdminRights) GetBanUsers() bool  { return m.Data2.BanUsers }

func (m *TLChannelAdminRights) SetInviteUsers(v bool) { m.Data2.InviteUsers = v }
func (m *TLChannelAdminRights) GetInviteUsers() bool  { return m.Data2.InviteUsers }

func (m *TLChannelAdminRights) SetInviteLink(v bool) { m.Data2.InviteLink = v }
func (m *TLChannelAdminRights) GetInviteLink() bool  { return m.Data2.InviteLink }

func (m *TLChannelAdminRights) SetPinMessages(v bool) { m.Data2.PinMessages = v }
func (m *TLChannelAdminRights) GetPinMessages() bool  { return m.Data2.PinMessages }

func (m *TLChannelAdminRights) SetAddAdmins(v bool) { m.Data2.AddAdmins = v }
func (m *TLChannelAdminRights) GetAddAdmins() bool  { return m.Data2.AddAdmins }

func (m *TLChannelAdminRights) SetManageCall(v bool) { m.Data2.ManageCall = v }
func (m *TLChannelAdminRights) GetManageCall() bool  { return m.Data2.ManageCall }

func NewTLChannelAdminRights() *TLChannelAdminRights {
	return &TLChannelAdminRights{Data2: &ChannelAdminRights_Data{}}
}

func (m *TLChannelAdminRights) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminRights))

	// flags
	var flags uint32 = 0
	if m.GetChangeInfo() == true {
		flags |= 1 << 0
	}
	if m.GetPostMessages() == true {
		flags |= 1 << 1
	}
	if m.GetEditMessages() == true {
		flags |= 1 << 2
	}
	if m.GetDeleteMessages() == true {
		flags |= 1 << 3
	}
	if m.GetBanUsers() == true {
		flags |= 1 << 4
	}
	if m.GetInviteUsers() == true {
		flags |= 1 << 5
	}
	if m.GetInviteLink() == true {
		flags |= 1 << 6
	}
	if m.GetPinMessages() == true {
		flags |= 1 << 7
	}
	if m.GetAddAdmins() == true {
		flags |= 1 << 9
	}
	if m.GetManageCall() == true {
		flags |= 1 << 10
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLChannelAdminRights) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminRights))

	// flags
	var flags uint32 = 0
	if m.GetChangeInfo() == true {
		flags |= 1 << 0
	}
	if m.GetPostMessages() == true {
		flags |= 1 << 1
	}
	if m.GetEditMessages() == true {
		flags |= 1 << 2
	}
	if m.GetDeleteMessages() == true {
		flags |= 1 << 3
	}
	if m.GetBanUsers() == true {
		flags |= 1 << 4
	}
	if m.GetInviteUsers() == true {
		flags |= 1 << 5
	}
	if m.GetInviteLink() == true {
		flags |= 1 << 6
	}
	if m.GetPinMessages() == true {
		flags |= 1 << 7
	}
	if m.GetAddAdmins() == true {
		flags |= 1 << 9
	}
	if m.GetManageCall() == true {
		flags |= 1 << 10
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLChannelAdminRights) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetChangeInfo(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetPostMessages(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetEditMessages(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetDeleteMessages(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetBanUsers(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetInviteUsers(true)
	}
	if (flags & (1 << 6)) != 0 {
		m.SetInviteLink(true)
	}
	if (flags & (1 << 7)) != 0 {
		m.SetPinMessages(true)
	}
	if (flags & (1 << 9)) != 0 {
		m.SetAddAdmins(true)
	}
	if (flags & (1 << 10)) != 0 {
		m.SetManageCall(true)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputSingleMedia <--
//  + TL_InputSingleMedia
//

func (m *InputSingleMedia) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputSingleMedia:
		t := m.To_InputSingleMedia()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputSingleMedia) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputSingleMedia:
		t := m.To_InputSingleMedia()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputSingleMedia) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputSingleMedia:
		m2 := &TLInputSingleMedia{Data2: &InputSingleMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputSingleMedia#1cc6e91f flags:# media:InputMedia random_id:long message:string entities:flags.0?Vector<MessageEntity> = InputSingleMedia;
func (m *InputSingleMedia) To_InputSingleMedia() *TLInputSingleMedia {
	return &TLInputSingleMedia{
		Data2: m.Data2,
	}
}

// inputSingleMedia#1cc6e91f flags:# media:InputMedia random_id:long message:string entities:flags.0?Vector<MessageEntity> = InputSingleMedia;
func (m *TLInputSingleMedia) To_InputSingleMedia() *InputSingleMedia {
	return &InputSingleMedia{
		Constructor: TLConstructor_CRC32_inputSingleMedia,
		Data2:       m.Data2,
	}
}

func (m *TLInputSingleMedia) SetMedia(v *InputMedia) { m.Data2.Media = v }
func (m *TLInputSingleMedia) GetMedia() *InputMedia  { return m.Data2.Media }

func (m *TLInputSingleMedia) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLInputSingleMedia) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLInputSingleMedia) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputSingleMedia) GetMessage() string  { return m.Data2.Message }

func (m *TLInputSingleMedia) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputSingleMedia) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func NewTLInputSingleMedia() *TLInputSingleMedia {
	return &TLInputSingleMedia{Data2: &InputSingleMedia_Data{}}
}

func (m *TLInputSingleMedia) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSingleMedia))

	// flags
	var flags uint32 = 0
	if m.GetEntities() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetMedia().Encode())
	x.Long(m.GetRandomId())
	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLInputSingleMedia) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSingleMedia))

	// flags
	var flags uint32 = 0
	if m.GetEntities() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetMedia().EncodeToLayer(layer))
	x.Long(m.GetRandomId())
	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLInputSingleMedia) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputMedia{}
	m2.Decode(dbuf)
	m.SetMedia(m2)
	m.SetRandomId(dbuf.Long())
	m.SetMessage(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		c5 := dbuf.Int()
		if c5 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
			return dbuf.err
		}
		l5 := dbuf.Int()
		v5 := make([]*MessageEntity, l5)
		for i := int32(0); i < l5; i++ {
			v5[i] = &MessageEntity{}
			v5[i].Decode(dbuf)
		}
		m.SetEntities(v5)

	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputStickerSet <--
//  + TL_InputStickerSetEmpty
//  + TL_InputStickerSetID
//  + TL_InputStickerSetShortName
//

func (m *InputStickerSet) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputStickerSetEmpty:
		t := m.To_InputStickerSetEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputStickerSetID:
		t := m.To_InputStickerSetID()
		return t.Encode()
	case TLConstructor_CRC32_inputStickerSetShortName:
		t := m.To_InputStickerSetShortName()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputStickerSet) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputStickerSetEmpty:
		t := m.To_InputStickerSetEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputStickerSetID:
		t := m.To_InputStickerSetID()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputStickerSetShortName:
		t := m.To_InputStickerSetShortName()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputStickerSet) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputStickerSetEmpty:
		m2 := &TLInputStickerSetEmpty{Data2: &InputStickerSet_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputStickerSetID:
		m2 := &TLInputStickerSetID{Data2: &InputStickerSet_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputStickerSetShortName:
		m2 := &TLInputStickerSetShortName{Data2: &InputStickerSet_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputStickerSetEmpty#ffb62b95 = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetEmpty() *TLInputStickerSetEmpty {
	return &TLInputStickerSetEmpty{
		Data2: m.Data2,
	}
}

// inputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetID() *TLInputStickerSetID {
	return &TLInputStickerSetID{
		Data2: m.Data2,
	}
}

// inputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetShortName() *TLInputStickerSetShortName {
	return &TLInputStickerSetShortName{
		Data2: m.Data2,
	}
}

// inputStickerSetEmpty#ffb62b95 = InputStickerSet;
func (m *TLInputStickerSetEmpty) To_InputStickerSet() *InputStickerSet {
	return &InputStickerSet{
		Constructor: TLConstructor_CRC32_inputStickerSetEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputStickerSetEmpty() *TLInputStickerSetEmpty {
	return &TLInputStickerSetEmpty{Data2: &InputStickerSet_Data{}}
}

func (m *TLInputStickerSetEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetEmpty))

	return x.buf
}

func (m *TLInputStickerSetEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetEmpty))

	return x.buf
}

func (m *TLInputStickerSetEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;
func (m *TLInputStickerSetID) To_InputStickerSet() *InputStickerSet {
	return &InputStickerSet{
		Constructor: TLConstructor_CRC32_inputStickerSetID,
		Data2:       m.Data2,
	}
}

func (m *TLInputStickerSetID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputStickerSetID) GetId() int64  { return m.Data2.Id }

func (m *TLInputStickerSetID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputStickerSetID) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputStickerSetID() *TLInputStickerSetID {
	return &TLInputStickerSetID{Data2: &InputStickerSet_Data{}}
}

func (m *TLInputStickerSetID) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetID))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputStickerSetID) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetID))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputStickerSetID) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;
func (m *TLInputStickerSetShortName) To_InputStickerSet() *InputStickerSet {
	return &InputStickerSet{
		Constructor: TLConstructor_CRC32_inputStickerSetShortName,
		Data2:       m.Data2,
	}
}

func (m *TLInputStickerSetShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputStickerSetShortName) GetShortName() string  { return m.Data2.ShortName }

func NewTLInputStickerSetShortName() *TLInputStickerSetShortName {
	return &TLInputStickerSetShortName{Data2: &InputStickerSet_Data{}}
}

func (m *TLInputStickerSetShortName) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetShortName))

	x.String(m.GetShortName())

	return x.buf
}

func (m *TLInputStickerSetShortName) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetShortName))

	x.String(m.GetShortName())

	return x.buf
}

func (m *TLInputStickerSetShortName) Decode(dbuf *DecodeBuf) error {
	m.SetShortName(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelParticipant <--
//  + TL_ChannelParticipant
//  + TL_ChannelParticipantSelf
//  + TL_ChannelParticipantCreator
//  + TL_ChannelParticipantAdmin
//  + TL_ChannelParticipantBanned
//

func (m *ChannelParticipant) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelParticipant:
		t := m.To_ChannelParticipant()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantSelf:
		t := m.To_ChannelParticipantSelf()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantCreator:
		t := m.To_ChannelParticipantCreator()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantAdmin:
		t := m.To_ChannelParticipantAdmin()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantBanned:
		t := m.To_ChannelParticipantBanned()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelParticipant) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelParticipant:
		t := m.To_ChannelParticipant()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantSelf:
		t := m.To_ChannelParticipantSelf()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantCreator:
		t := m.To_ChannelParticipantCreator()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantAdmin:
		t := m.To_ChannelParticipantAdmin()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantBanned:
		t := m.To_ChannelParticipantBanned()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelParticipant) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelParticipant:
		m2 := &TLChannelParticipant{Data2: &ChannelParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantSelf:
		m2 := &TLChannelParticipantSelf{Data2: &ChannelParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantCreator:
		m2 := &TLChannelParticipantCreator{Data2: &ChannelParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantAdmin:
		m2 := &TLChannelParticipantAdmin{Data2: &ChannelParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantBanned:
		m2 := &TLChannelParticipantBanned{Data2: &ChannelParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelParticipant#15ebac1d user_id:int date:int = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipant() *TLChannelParticipant {
	return &TLChannelParticipant{
		Data2: m.Data2,
	}
}

// channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantSelf() *TLChannelParticipantSelf {
	return &TLChannelParticipantSelf{
		Data2: m.Data2,
	}
}

// channelParticipantCreator#e3e2e1f9 user_id:int = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantCreator() *TLChannelParticipantCreator {
	return &TLChannelParticipantCreator{
		Data2: m.Data2,
	}
}

// channelParticipantAdmin#a82fa898 flags:# can_edit:flags.0?true user_id:int inviter_id:int promoted_by:int date:int admin_rights:ChannelAdminRights = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantAdmin() *TLChannelParticipantAdmin {
	return &TLChannelParticipantAdmin{
		Data2: m.Data2,
	}
}

// channelParticipantBanned#222c1886 flags:# left:flags.0?true user_id:int kicked_by:int date:int banned_rights:ChannelBannedRights = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantBanned() *TLChannelParticipantBanned {
	return &TLChannelParticipantBanned{
		Data2: m.Data2,
	}
}

// channelParticipant#15ebac1d user_id:int date:int = ChannelParticipant;
func (m *TLChannelParticipant) To_ChannelParticipant() *ChannelParticipant {
	return &ChannelParticipant{
		Constructor: TLConstructor_CRC32_channelParticipant,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipant) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipant) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChannelParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipant) GetDate() int32  { return m.Data2.Date }

func NewTLChannelParticipant() *TLChannelParticipant {
	return &TLChannelParticipant{Data2: &ChannelParticipant_Data{}}
}

func (m *TLChannelParticipant) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipant))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChannelParticipant) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipant))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChannelParticipant) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant;
func (m *TLChannelParticipantSelf) To_ChannelParticipant() *ChannelParticipant {
	return &ChannelParticipant{
		Constructor: TLConstructor_CRC32_channelParticipantSelf,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantSelf) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantSelf) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChannelParticipantSelf) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChannelParticipantSelf) GetInviterId() int32  { return m.Data2.InviterId }

func (m *TLChannelParticipantSelf) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantSelf) GetDate() int32  { return m.Data2.Date }

func NewTLChannelParticipantSelf() *TLChannelParticipantSelf {
	return &TLChannelParticipantSelf{Data2: &ChannelParticipant_Data{}}
}

func (m *TLChannelParticipantSelf) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantSelf))

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChannelParticipantSelf) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantSelf))

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChannelParticipantSelf) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetInviterId(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// channelParticipantCreator#e3e2e1f9 user_id:int = ChannelParticipant;
func (m *TLChannelParticipantCreator) To_ChannelParticipant() *ChannelParticipant {
	return &ChannelParticipant{
		Constructor: TLConstructor_CRC32_channelParticipantCreator,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantCreator) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantCreator) GetUserId() int32  { return m.Data2.UserId }

func NewTLChannelParticipantCreator() *TLChannelParticipantCreator {
	return &TLChannelParticipantCreator{Data2: &ChannelParticipant_Data{}}
}

func (m *TLChannelParticipantCreator) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantCreator))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLChannelParticipantCreator) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantCreator))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLChannelParticipantCreator) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// channelParticipantAdmin#a82fa898 flags:# can_edit:flags.0?true user_id:int inviter_id:int promoted_by:int date:int admin_rights:ChannelAdminRights = ChannelParticipant;
func (m *TLChannelParticipantAdmin) To_ChannelParticipant() *ChannelParticipant {
	return &ChannelParticipant{
		Constructor: TLConstructor_CRC32_channelParticipantAdmin,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantAdmin) SetCanEdit(v bool) { m.Data2.CanEdit = v }
func (m *TLChannelParticipantAdmin) GetCanEdit() bool  { return m.Data2.CanEdit }

func (m *TLChannelParticipantAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantAdmin) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChannelParticipantAdmin) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChannelParticipantAdmin) GetInviterId() int32  { return m.Data2.InviterId }

func (m *TLChannelParticipantAdmin) SetPromotedBy(v int32) { m.Data2.PromotedBy = v }
func (m *TLChannelParticipantAdmin) GetPromotedBy() int32  { return m.Data2.PromotedBy }

func (m *TLChannelParticipantAdmin) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantAdmin) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelParticipantAdmin) SetAdminRights(v *ChannelAdminRights) { m.Data2.AdminRights = v }
func (m *TLChannelParticipantAdmin) GetAdminRights() *ChannelAdminRights  { return m.Data2.AdminRights }

func NewTLChannelParticipantAdmin() *TLChannelParticipantAdmin {
	return &TLChannelParticipantAdmin{Data2: &ChannelParticipant_Data{}}
}

func (m *TLChannelParticipantAdmin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantAdmin))

	// flags
	var flags uint32 = 0
	if m.GetCanEdit() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetPromotedBy())
	x.Int(m.GetDate())
	x.Bytes(m.GetAdminRights().Encode())

	return x.buf
}

func (m *TLChannelParticipantAdmin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantAdmin))

	// flags
	var flags uint32 = 0
	if m.GetCanEdit() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetPromotedBy())
	x.Int(m.GetDate())
	x.Bytes(m.GetAdminRights().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelParticipantAdmin) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetCanEdit(true)
	}
	m.SetUserId(dbuf.Int())
	m.SetInviterId(dbuf.Int())
	m.SetPromotedBy(dbuf.Int())
	m.SetDate(dbuf.Int())
	m7 := &ChannelAdminRights{}
	m7.Decode(dbuf)
	m.SetAdminRights(m7)

	return dbuf.err
}

// channelParticipantBanned#222c1886 flags:# left:flags.0?true user_id:int kicked_by:int date:int banned_rights:ChannelBannedRights = ChannelParticipant;
func (m *TLChannelParticipantBanned) To_ChannelParticipant() *ChannelParticipant {
	return &ChannelParticipant{
		Constructor: TLConstructor_CRC32_channelParticipantBanned,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantBanned) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannelParticipantBanned) GetLeft() bool  { return m.Data2.Left }

func (m *TLChannelParticipantBanned) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantBanned) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChannelParticipantBanned) SetKickedBy(v int32) { m.Data2.KickedBy = v }
func (m *TLChannelParticipantBanned) GetKickedBy() int32  { return m.Data2.KickedBy }

func (m *TLChannelParticipantBanned) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantBanned) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelParticipantBanned) SetBannedRights(v *ChannelBannedRights) { m.Data2.BannedRights = v }
func (m *TLChannelParticipantBanned) GetBannedRights() *ChannelBannedRights {
	return m.Data2.BannedRights
}

func NewTLChannelParticipantBanned() *TLChannelParticipantBanned {
	return &TLChannelParticipantBanned{Data2: &ChannelParticipant_Data{}}
}

func (m *TLChannelParticipantBanned) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantBanned))

	// flags
	var flags uint32 = 0
	if m.GetLeft() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetUserId())
	x.Int(m.GetKickedBy())
	x.Int(m.GetDate())
	x.Bytes(m.GetBannedRights().Encode())

	return x.buf
}

func (m *TLChannelParticipantBanned) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantBanned))

	// flags
	var flags uint32 = 0
	if m.GetLeft() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetUserId())
	x.Int(m.GetKickedBy())
	x.Int(m.GetDate())
	x.Bytes(m.GetBannedRights().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelParticipantBanned) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetLeft(true)
	}
	m.SetUserId(dbuf.Int())
	m.SetKickedBy(dbuf.Int())
	m.SetDate(dbuf.Int())
	m6 := &ChannelBannedRights{}
	m6.Decode(dbuf)
	m.SetBannedRights(m6)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MessageFwdHeader <--
//  + TL_MessageFwdHeader
//

func (m *MessageFwdHeader) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messageFwdHeader:
		t := m.To_MessageFwdHeader()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageFwdHeader) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messageFwdHeader:
		t := m.To_MessageFwdHeader()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageFwdHeader) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messageFwdHeader:
		m2 := &TLMessageFwdHeader{Data2: &MessageFwdHeader_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messageFwdHeader#559ebe6d flags:# from_id:flags.0?int date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int = MessageFwdHeader;
func (m *MessageFwdHeader) To_MessageFwdHeader() *TLMessageFwdHeader {
	return &TLMessageFwdHeader{
		Data2: m.Data2,
	}
}

// messageFwdHeader#559ebe6d flags:# from_id:flags.0?int date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int = MessageFwdHeader;
func (m *TLMessageFwdHeader) To_MessageFwdHeader() *MessageFwdHeader {
	return &MessageFwdHeader{
		Constructor: TLConstructor_CRC32_messageFwdHeader,
		Data2:       m.Data2,
	}
}

func (m *TLMessageFwdHeader) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessageFwdHeader) GetFromId() int32  { return m.Data2.FromId }

func (m *TLMessageFwdHeader) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageFwdHeader) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageFwdHeader) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLMessageFwdHeader) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLMessageFwdHeader) SetChannelPost(v int32) { m.Data2.ChannelPost = v }
func (m *TLMessageFwdHeader) GetChannelPost() int32  { return m.Data2.ChannelPost }

func (m *TLMessageFwdHeader) SetPostAuthor(v string) { m.Data2.PostAuthor = v }
func (m *TLMessageFwdHeader) GetPostAuthor() string  { return m.Data2.PostAuthor }

func (m *TLMessageFwdHeader) SetSavedFromPeer(v *Peer) { m.Data2.SavedFromPeer = v }
func (m *TLMessageFwdHeader) GetSavedFromPeer() *Peer  { return m.Data2.SavedFromPeer }

func (m *TLMessageFwdHeader) SetSavedFromMsgId(v int32) { m.Data2.SavedFromMsgId = v }
func (m *TLMessageFwdHeader) GetSavedFromMsgId() int32  { return m.Data2.SavedFromMsgId }

func NewTLMessageFwdHeader() *TLMessageFwdHeader {
	return &TLMessageFwdHeader{Data2: &MessageFwdHeader_Data{}}
}

func (m *TLMessageFwdHeader) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageFwdHeader))

	// flags
	var flags uint32 = 0
	if m.GetFromId() != 0 {
		flags |= 1 << 0
	}
	if m.GetChannelId() != 0 {
		flags |= 1 << 1
	}
	if m.GetChannelPost() != 0 {
		flags |= 1 << 2
	}
	if m.GetPostAuthor() != "" {
		flags |= 1 << 3
	}
	if m.GetSavedFromPeer() != nil {
		flags |= 1 << 4
	}
	if m.GetSavedFromMsgId() != 0 {
		flags |= 1 << 4
	}
	x.UInt(flags)

	if m.GetFromId() != 0 {
		x.Int(m.GetFromId())
	}
	x.Int(m.GetDate())
	if m.GetChannelId() != 0 {
		x.Int(m.GetChannelId())
	}
	if m.GetChannelPost() != 0 {
		x.Int(m.GetChannelPost())
	}
	if m.GetPostAuthor() != "" {
		x.String(m.GetPostAuthor())
	}
	if m.GetSavedFromPeer() != nil {
		x.Bytes(m.GetSavedFromPeer().Encode())
	}
	if m.GetSavedFromMsgId() != 0 {
		x.Int(m.GetSavedFromMsgId())
	}

	return x.buf
}

func (m *TLMessageFwdHeader) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageFwdHeader))

	// flags
	var flags uint32 = 0
	if m.GetFromId() != 0 {
		flags |= 1 << 0
	}
	if m.GetChannelId() != 0 {
		flags |= 1 << 1
	}
	if m.GetChannelPost() != 0 {
		flags |= 1 << 2
	}
	if m.GetPostAuthor() != "" {
		flags |= 1 << 3
	}
	if m.GetSavedFromPeer() != nil {
		flags |= 1 << 4
	}
	if m.GetSavedFromMsgId() != 0 {
		flags |= 1 << 4
	}
	x.UInt(flags)

	if m.GetFromId() != 0 {
		x.Int(m.GetFromId())
	}
	x.Int(m.GetDate())
	if m.GetChannelId() != 0 {
		x.Int(m.GetChannelId())
	}
	if m.GetChannelPost() != 0 {
		x.Int(m.GetChannelPost())
	}
	if m.GetPostAuthor() != "" {
		x.String(m.GetPostAuthor())
	}
	if m.GetSavedFromPeer() != nil {
		x.Bytes(m.GetSavedFromPeer().EncodeToLayer(layer))
	}
	if m.GetSavedFromMsgId() != 0 {
		x.Int(m.GetSavedFromMsgId())
	}

	return x.buf
}

func (m *TLMessageFwdHeader) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetFromId(dbuf.Int())
	}
	m.SetDate(dbuf.Int())
	if (flags & (1 << 1)) != 0 {
		m.SetChannelId(dbuf.Int())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetChannelPost(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetPostAuthor(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m7 := &Peer{}
		m7.Decode(dbuf)
		m.SetSavedFromPeer(m7)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetSavedFromMsgId(dbuf.Int())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_SentCodeType <--
//  + TL_AuthSentCodeTypeApp
//  + TL_AuthSentCodeTypeSms
//  + TL_AuthSentCodeTypeCall
//  + TL_AuthSentCodeTypeFlashCall
//

func (m *Auth_SentCodeType) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_sentCodeTypeApp:
		t := m.To_AuthSentCodeTypeApp()
		return t.Encode()
	case TLConstructor_CRC32_auth_sentCodeTypeSms:
		t := m.To_AuthSentCodeTypeSms()
		return t.Encode()
	case TLConstructor_CRC32_auth_sentCodeTypeCall:
		t := m.To_AuthSentCodeTypeCall()
		return t.Encode()
	case TLConstructor_CRC32_auth_sentCodeTypeFlashCall:
		t := m.To_AuthSentCodeTypeFlashCall()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_SentCodeType) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_sentCodeTypeApp:
		t := m.To_AuthSentCodeTypeApp()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_auth_sentCodeTypeSms:
		t := m.To_AuthSentCodeTypeSms()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_auth_sentCodeTypeCall:
		t := m.To_AuthSentCodeTypeCall()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_auth_sentCodeTypeFlashCall:
		t := m.To_AuthSentCodeTypeFlashCall()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_SentCodeType) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_sentCodeTypeApp:
		m2 := &TLAuthSentCodeTypeApp{Data2: &Auth_SentCodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_auth_sentCodeTypeSms:
		m2 := &TLAuthSentCodeTypeSms{Data2: &Auth_SentCodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_auth_sentCodeTypeCall:
		m2 := &TLAuthSentCodeTypeCall{Data2: &Auth_SentCodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_auth_sentCodeTypeFlashCall:
		m2 := &TLAuthSentCodeTypeFlashCall{Data2: &Auth_SentCodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.sentCodeTypeApp#3dbb5986 length:int = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeApp() *TLAuthSentCodeTypeApp {
	return &TLAuthSentCodeTypeApp{
		Data2: m.Data2,
	}
}

// auth.sentCodeTypeSms#c000bba2 length:int = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeSms() *TLAuthSentCodeTypeSms {
	return &TLAuthSentCodeTypeSms{
		Data2: m.Data2,
	}
}

// auth.sentCodeTypeCall#5353e5a7 length:int = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeCall() *TLAuthSentCodeTypeCall {
	return &TLAuthSentCodeTypeCall{
		Data2: m.Data2,
	}
}

// auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeFlashCall() *TLAuthSentCodeTypeFlashCall {
	return &TLAuthSentCodeTypeFlashCall{
		Data2: m.Data2,
	}
}

// auth.sentCodeTypeApp#3dbb5986 length:int = auth.SentCodeType;
func (m *TLAuthSentCodeTypeApp) To_Auth_SentCodeType() *Auth_SentCodeType {
	return &Auth_SentCodeType{
		Constructor: TLConstructor_CRC32_auth_sentCodeTypeApp,
		Data2:       m.Data2,
	}
}

func (m *TLAuthSentCodeTypeApp) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeApp) GetLength() int32  { return m.Data2.Length }

func NewTLAuthSentCodeTypeApp() *TLAuthSentCodeTypeApp {
	return &TLAuthSentCodeTypeApp{Data2: &Auth_SentCodeType_Data{}}
}

func (m *TLAuthSentCodeTypeApp) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeApp))

	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAuthSentCodeTypeApp) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeApp))

	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAuthSentCodeTypeApp) Decode(dbuf *DecodeBuf) error {
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// auth.sentCodeTypeSms#c000bba2 length:int = auth.SentCodeType;
func (m *TLAuthSentCodeTypeSms) To_Auth_SentCodeType() *Auth_SentCodeType {
	return &Auth_SentCodeType{
		Constructor: TLConstructor_CRC32_auth_sentCodeTypeSms,
		Data2:       m.Data2,
	}
}

func (m *TLAuthSentCodeTypeSms) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeSms) GetLength() int32  { return m.Data2.Length }

func NewTLAuthSentCodeTypeSms() *TLAuthSentCodeTypeSms {
	return &TLAuthSentCodeTypeSms{Data2: &Auth_SentCodeType_Data{}}
}

func (m *TLAuthSentCodeTypeSms) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeSms))

	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAuthSentCodeTypeSms) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeSms))

	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAuthSentCodeTypeSms) Decode(dbuf *DecodeBuf) error {
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// auth.sentCodeTypeCall#5353e5a7 length:int = auth.SentCodeType;
func (m *TLAuthSentCodeTypeCall) To_Auth_SentCodeType() *Auth_SentCodeType {
	return &Auth_SentCodeType{
		Constructor: TLConstructor_CRC32_auth_sentCodeTypeCall,
		Data2:       m.Data2,
	}
}

func (m *TLAuthSentCodeTypeCall) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeCall) GetLength() int32  { return m.Data2.Length }

func NewTLAuthSentCodeTypeCall() *TLAuthSentCodeTypeCall {
	return &TLAuthSentCodeTypeCall{Data2: &Auth_SentCodeType_Data{}}
}

func (m *TLAuthSentCodeTypeCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeCall))

	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAuthSentCodeTypeCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeCall))

	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAuthSentCodeTypeCall) Decode(dbuf *DecodeBuf) error {
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType;
func (m *TLAuthSentCodeTypeFlashCall) To_Auth_SentCodeType() *Auth_SentCodeType {
	return &Auth_SentCodeType{
		Constructor: TLConstructor_CRC32_auth_sentCodeTypeFlashCall,
		Data2:       m.Data2,
	}
}

func (m *TLAuthSentCodeTypeFlashCall) SetPattern(v string) { m.Data2.Pattern = v }
func (m *TLAuthSentCodeTypeFlashCall) GetPattern() string  { return m.Data2.Pattern }

func NewTLAuthSentCodeTypeFlashCall() *TLAuthSentCodeTypeFlashCall {
	return &TLAuthSentCodeTypeFlashCall{Data2: &Auth_SentCodeType_Data{}}
}

func (m *TLAuthSentCodeTypeFlashCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeFlashCall))

	x.String(m.GetPattern())

	return x.buf
}

func (m *TLAuthSentCodeTypeFlashCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeFlashCall))

	x.String(m.GetPattern())

	return x.buf
}

func (m *TLAuthSentCodeTypeFlashCall) Decode(dbuf *DecodeBuf) error {
	m.SetPattern(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// TopPeer <--
//  + TL_TopPeer
//

func (m *TopPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_topPeer:
		t := m.To_TopPeer()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *TopPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_topPeer:
		t := m.To_TopPeer()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *TopPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_topPeer:
		m2 := &TLTopPeer{Data2: &TopPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// topPeer#edcdc05b peer:Peer rating:double = TopPeer;
func (m *TopPeer) To_TopPeer() *TLTopPeer {
	return &TLTopPeer{
		Data2: m.Data2,
	}
}

// topPeer#edcdc05b peer:Peer rating:double = TopPeer;
func (m *TLTopPeer) To_TopPeer() *TopPeer {
	return &TopPeer{
		Constructor: TLConstructor_CRC32_topPeer,
		Data2:       m.Data2,
	}
}

func (m *TLTopPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLTopPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLTopPeer) SetRating(v float64) { m.Data2.Rating = v }
func (m *TLTopPeer) GetRating() float64  { return m.Data2.Rating }

func NewTLTopPeer() *TLTopPeer {
	return &TLTopPeer{Data2: &TopPeer_Data{}}
}

func (m *TLTopPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeer))

	x.Bytes(m.GetPeer().Encode())
	x.Double(m.GetRating())

	return x.buf
}

func (m *TLTopPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeer))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Double(m.GetRating())

	return x.buf
}

func (m *TLTopPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)
	m.SetRating(dbuf.Double())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_SentEmailCode <--
//  + TL_AccountSentEmailCode
//

func (m *Account_SentEmailCode) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_sentEmailCode:
		t := m.To_AccountSentEmailCode()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_SentEmailCode) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_sentEmailCode:
		t := m.To_AccountSentEmailCode()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_SentEmailCode) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_sentEmailCode:
		m2 := &TLAccountSentEmailCode{Data2: &Account_SentEmailCode_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.sentEmailCode#811f854f email_pattern:string length:int = account.SentEmailCode;
func (m *Account_SentEmailCode) To_AccountSentEmailCode() *TLAccountSentEmailCode {
	return &TLAccountSentEmailCode{
		Data2: m.Data2,
	}
}

// account.sentEmailCode#811f854f email_pattern:string length:int = account.SentEmailCode;
func (m *TLAccountSentEmailCode) To_Account_SentEmailCode() *Account_SentEmailCode {
	return &Account_SentEmailCode{
		Constructor: TLConstructor_CRC32_account_sentEmailCode,
		Data2:       m.Data2,
	}
}

func (m *TLAccountSentEmailCode) SetEmailPattern(v string) { m.Data2.EmailPattern = v }
func (m *TLAccountSentEmailCode) GetEmailPattern() string  { return m.Data2.EmailPattern }

func (m *TLAccountSentEmailCode) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAccountSentEmailCode) GetLength() int32  { return m.Data2.Length }

func NewTLAccountSentEmailCode() *TLAccountSentEmailCode {
	return &TLAccountSentEmailCode{Data2: &Account_SentEmailCode_Data{}}
}

func (m *TLAccountSentEmailCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sentEmailCode))

	x.String(m.GetEmailPattern())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAccountSentEmailCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sentEmailCode))

	x.String(m.GetEmailPattern())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLAccountSentEmailCode) Decode(dbuf *DecodeBuf) error {
	m.SetEmailPattern(dbuf.String())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PaymentSavedCredentials <--
//  + TL_PaymentSavedCredentialsCard
//

func (m *PaymentSavedCredentials) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_paymentSavedCredentialsCard:
		t := m.To_PaymentSavedCredentialsCard()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PaymentSavedCredentials) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_paymentSavedCredentialsCard:
		t := m.To_PaymentSavedCredentialsCard()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PaymentSavedCredentials) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_paymentSavedCredentialsCard:
		m2 := &TLPaymentSavedCredentialsCard{Data2: &PaymentSavedCredentials_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// paymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials;
func (m *PaymentSavedCredentials) To_PaymentSavedCredentialsCard() *TLPaymentSavedCredentialsCard {
	return &TLPaymentSavedCredentialsCard{
		Data2: m.Data2,
	}
}

// paymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials;
func (m *TLPaymentSavedCredentialsCard) To_PaymentSavedCredentials() *PaymentSavedCredentials {
	return &PaymentSavedCredentials{
		Constructor: TLConstructor_CRC32_paymentSavedCredentialsCard,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentSavedCredentialsCard) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentSavedCredentialsCard) GetId() string  { return m.Data2.Id }

func (m *TLPaymentSavedCredentialsCard) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPaymentSavedCredentialsCard) GetTitle() string  { return m.Data2.Title }

func NewTLPaymentSavedCredentialsCard() *TLPaymentSavedCredentialsCard {
	return &TLPaymentSavedCredentialsCard{Data2: &PaymentSavedCredentials_Data{}}
}

func (m *TLPaymentSavedCredentialsCard) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_paymentSavedCredentialsCard))

	x.String(m.GetId())
	x.String(m.GetTitle())

	return x.buf
}

func (m *TLPaymentSavedCredentialsCard) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_paymentSavedCredentialsCard))

	x.String(m.GetId())
	x.String(m.GetTitle())

	return x.buf
}

func (m *TLPaymentSavedCredentialsCard) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.String())
	m.SetTitle(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputMedia <--
//  + TL_InputMediaPhotoLayer46
//  + TL_InputMediaEmpty
//  + TL_InputMediaUploadedPhoto
//  + TL_InputMediaPhoto
//  + TL_InputMediaGeoPoint
//  + TL_InputMediaContact
//  + TL_InputMediaUploadedDocument
//  + TL_InputMediaDocument
//  + TL_InputMediaVenue
//  + TL_InputMediaGifExternal
//  + TL_InputMediaPhotoExternal
//  + TL_InputMediaDocumentExternal
//  + TL_InputMediaGame
//  + TL_InputMediaInvoice
//  + TL_InputMediaGeoLive
//

func (m *InputMedia) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputMediaPhotoLayer46:
		t := m.To_InputMediaPhotoLayer46()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaEmpty:
		t := m.To_InputMediaEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaUploadedPhoto:
		t := m.To_InputMediaUploadedPhoto()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaPhoto:
		t := m.To_InputMediaPhoto()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaGeoPoint:
		t := m.To_InputMediaGeoPoint()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaContact:
		t := m.To_InputMediaContact()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaUploadedDocument:
		t := m.To_InputMediaUploadedDocument()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaDocument:
		t := m.To_InputMediaDocument()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaVenue:
		t := m.To_InputMediaVenue()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaGifExternal:
		t := m.To_InputMediaGifExternal()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaPhotoExternal:
		t := m.To_InputMediaPhotoExternal()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaDocumentExternal:
		t := m.To_InputMediaDocumentExternal()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaGame:
		t := m.To_InputMediaGame()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaInvoice:
		t := m.To_InputMediaInvoice()
		return t.Encode()
	case TLConstructor_CRC32_inputMediaGeoLive:
		t := m.To_InputMediaGeoLive()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputMedia) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputMediaPhotoLayer46:
		t := m.To_InputMediaPhotoLayer46()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaEmpty:
		t := m.To_InputMediaEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaUploadedPhoto:
		t := m.To_InputMediaUploadedPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaPhoto:
		t := m.To_InputMediaPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaGeoPoint:
		t := m.To_InputMediaGeoPoint()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaContact:
		t := m.To_InputMediaContact()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaUploadedDocument:
		t := m.To_InputMediaUploadedDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaDocument:
		t := m.To_InputMediaDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaVenue:
		t := m.To_InputMediaVenue()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaGifExternal:
		t := m.To_InputMediaGifExternal()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaPhotoExternal:
		t := m.To_InputMediaPhotoExternal()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaDocumentExternal:
		t := m.To_InputMediaDocumentExternal()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaGame:
		t := m.To_InputMediaGame()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaInvoice:
		t := m.To_InputMediaInvoice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMediaGeoLive:
		t := m.To_InputMediaGeoLive()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputMedia) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputMediaPhotoLayer46:
		m2 := &TLInputMediaPhotoLayer46{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaEmpty:
		m2 := &TLInputMediaEmpty{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaUploadedPhoto:
		m2 := &TLInputMediaUploadedPhoto{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaPhoto:
		m2 := &TLInputMediaPhoto{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaGeoPoint:
		m2 := &TLInputMediaGeoPoint{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaContact:
		m2 := &TLInputMediaContact{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaUploadedDocument:
		m2 := &TLInputMediaUploadedDocument{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaDocument:
		m2 := &TLInputMediaDocument{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaVenue:
		m2 := &TLInputMediaVenue{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaGifExternal:
		m2 := &TLInputMediaGifExternal{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaPhotoExternal:
		m2 := &TLInputMediaPhotoExternal{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaDocumentExternal:
		m2 := &TLInputMediaDocumentExternal{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaGame:
		m2 := &TLInputMediaGame{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaInvoice:
		m2 := &TLInputMediaInvoice{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMediaGeoLive:
		m2 := &TLInputMediaGeoLive{Data2: &InputMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputMediaPhoto#e9bfb4f3 id:InputPhoto caption:string = InputMedia;
func (m *InputMedia) To_InputMediaPhotoLayer46() *TLInputMediaPhotoLayer46 {
	return &TLInputMediaPhotoLayer46{
		Data2: m.Data2,
	}
}

// inputMediaEmpty#9664f57f = InputMedia;
func (m *InputMedia) To_InputMediaEmpty() *TLInputMediaEmpty {
	return &TLInputMediaEmpty{
		Data2: m.Data2,
	}
}

// inputMediaUploadedPhoto#1e287d04 flags:# file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaUploadedPhoto() *TLInputMediaUploadedPhoto {
	return &TLInputMediaUploadedPhoto{
		Data2: m.Data2,
	}
}

// inputMediaPhoto#b3ba0635 flags:# id:InputPhoto ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaPhoto() *TLInputMediaPhoto {
	return &TLInputMediaPhoto{
		Data2: m.Data2,
	}
}

// inputMediaGeoPoint#f9c44144 geo_point:InputGeoPoint = InputMedia;
func (m *InputMedia) To_InputMediaGeoPoint() *TLInputMediaGeoPoint {
	return &TLInputMediaGeoPoint{
		Data2: m.Data2,
	}
}

// inputMediaContact#f8ab7dfb phone_number:string first_name:string last_name:string vcard:string = InputMedia;
func (m *InputMedia) To_InputMediaContact() *TLInputMediaContact {
	return &TLInputMediaContact{
		Data2: m.Data2,
	}
}

// inputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaUploadedDocument() *TLInputMediaUploadedDocument {
	return &TLInputMediaUploadedDocument{
		Data2: m.Data2,
	}
}

// inputMediaDocument#23ab23d2 flags:# id:InputDocument ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaDocument() *TLInputMediaDocument {
	return &TLInputMediaDocument{
		Data2: m.Data2,
	}
}

// inputMediaVenue#c13d1c11 geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string = InputMedia;
func (m *InputMedia) To_InputMediaVenue() *TLInputMediaVenue {
	return &TLInputMediaVenue{
		Data2: m.Data2,
	}
}

// inputMediaGifExternal#4843b0fd url:string q:string = InputMedia;
func (m *InputMedia) To_InputMediaGifExternal() *TLInputMediaGifExternal {
	return &TLInputMediaGifExternal{
		Data2: m.Data2,
	}
}

// inputMediaPhotoExternal#e5bbfe1a flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaPhotoExternal() *TLInputMediaPhotoExternal {
	return &TLInputMediaPhotoExternal{
		Data2: m.Data2,
	}
}

// inputMediaDocumentExternal#fb52dc99 flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaDocumentExternal() *TLInputMediaDocumentExternal {
	return &TLInputMediaDocumentExternal{
		Data2: m.Data2,
	}
}

// inputMediaGame#d33f43f3 id:InputGame = InputMedia;
func (m *InputMedia) To_InputMediaGame() *TLInputMediaGame {
	return &TLInputMediaGame{
		Data2: m.Data2,
	}
}

// inputMediaInvoice#f4e096c3 flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:string provider_data:DataJSON start_param:string = InputMedia;
func (m *InputMedia) To_InputMediaInvoice() *TLInputMediaInvoice {
	return &TLInputMediaInvoice{
		Data2: m.Data2,
	}
}

// inputMediaGeoLive#7b1a118f geo_point:InputGeoPoint period:int = InputMedia;
func (m *InputMedia) To_InputMediaGeoLive() *TLInputMediaGeoLive {
	return &TLInputMediaGeoLive{
		Data2: m.Data2,
	}
}

// inputMediaPhoto#e9bfb4f3 id:InputPhoto caption:string = InputMedia;
func (m *TLInputMediaPhotoLayer46) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaPhotoLayer46,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaPhotoLayer46) SetId(v *InputPhoto) { m.Data2.Id_1 = v }
func (m *TLInputMediaPhotoLayer46) GetId() *InputPhoto  { return m.Data2.Id_1 }

func (m *TLInputMediaPhotoLayer46) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaPhotoLayer46) GetCaption() string  { return m.Data2.Caption }

func NewTLInputMediaPhotoLayer46() *TLInputMediaPhotoLayer46 {
	return &TLInputMediaPhotoLayer46{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaPhotoLayer46) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaPhotoLayer46))

	x.Bytes(m.GetId().Encode())
	x.String(m.GetCaption())

	return x.buf
}

func (m *TLInputMediaPhotoLayer46) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaPhotoLayer46))

	x.Bytes(m.GetId().EncodeToLayer(layer))
	x.String(m.GetCaption())

	return x.buf
}

func (m *TLInputMediaPhotoLayer46) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoto{}
	m1.Decode(dbuf)
	m.SetId(m1)
	m.SetCaption(dbuf.String())

	return dbuf.err
}

// inputMediaEmpty#9664f57f = InputMedia;
func (m *TLInputMediaEmpty) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputMediaEmpty() *TLInputMediaEmpty {
	return &TLInputMediaEmpty{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaEmpty))

	return x.buf
}

func (m *TLInputMediaEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaEmpty))

	return x.buf
}

func (m *TLInputMediaEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMediaUploadedPhoto#1e287d04 flags:# file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *TLInputMediaUploadedPhoto) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaUploadedPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaUploadedPhoto) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedPhoto) GetFile() *InputFile  { return m.Data2.File }

func (m *TLInputMediaUploadedPhoto) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedPhoto) GetStickers() []*InputDocument  { return m.Data2.Stickers }

func (m *TLInputMediaUploadedPhoto) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedPhoto) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLInputMediaUploadedPhoto() *TLInputMediaUploadedPhoto {
	return &TLInputMediaUploadedPhoto{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaUploadedPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaUploadedPhoto))

	// flags
	var flags uint32 = 0
	if m.GetStickers() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetFile().Encode())
	if m.GetStickers() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetStickers())))
		for _, v := range m.GetStickers() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaUploadedPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaUploadedPhoto))

	// flags
	var flags uint32 = 0
	if m.GetStickers() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetFile().EncodeToLayer(layer))
	if m.GetStickers() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetStickers())))
		for _, v := range m.GetStickers() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaUploadedPhoto) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputFile{}
	m2.Decode(dbuf)
	m.SetFile(m2)
	if (flags & (1 << 0)) != 0 {
		c3 := dbuf.Int()
		if c3 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
			return dbuf.err
		}
		l3 := dbuf.Int()
		v3 := make([]*InputDocument, l3)
		for i := int32(0); i < l3; i++ {
			v3[i] = &InputDocument{}
			v3[i].Decode(dbuf)
		}
		m.SetStickers(v3)

	}
	if (flags & (1 << 1)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// inputMediaPhoto#b3ba0635 flags:# id:InputPhoto ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaPhoto) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaPhoto) SetId(v *InputPhoto) { m.Data2.Id_1 = v }
func (m *TLInputMediaPhoto) GetId() *InputPhoto  { return m.Data2.Id_1 }

func (m *TLInputMediaPhoto) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhoto) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLInputMediaPhoto() *TLInputMediaPhoto {
	return &TLInputMediaPhoto{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaPhoto))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetId().Encode())
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaPhoto))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetId().EncodeToLayer(layer))
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaPhoto) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputPhoto{}
	m2.Decode(dbuf)
	m.SetId(m2)
	if (flags & (1 << 0)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// inputMediaGeoPoint#f9c44144 geo_point:InputGeoPoint = InputMedia;
func (m *TLInputMediaGeoPoint) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaGeoPoint,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaGeoPoint) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoPoint) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func NewTLInputMediaGeoPoint() *TLInputMediaGeoPoint {
	return &TLInputMediaGeoPoint{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaGeoPoint) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGeoPoint))

	x.Bytes(m.GetGeoPoint().Encode())

	return x.buf
}

func (m *TLInputMediaGeoPoint) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGeoPoint))

	x.Bytes(m.GetGeoPoint().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputMediaGeoPoint) Decode(dbuf *DecodeBuf) error {
	m1 := &InputGeoPoint{}
	m1.Decode(dbuf)
	m.SetGeoPoint(m1)

	return dbuf.err
}

// inputMediaContact#f8ab7dfb phone_number:string first_name:string last_name:string vcard:string = InputMedia;
func (m *TLInputMediaContact) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaContact,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLInputMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLInputMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLInputMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLInputMediaContact) GetVcard() string  { return m.Data2.Vcard }

func NewTLInputMediaContact() *TLInputMediaContact {
	return &TLInputMediaContact{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaContact))

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())

	return x.buf
}

func (m *TLInputMediaContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaContact))

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())

	return x.buf
}

func (m *TLInputMediaContact) Decode(dbuf *DecodeBuf) error {
	m.SetPhoneNumber(dbuf.String())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())
	m.SetVcard(dbuf.String())

	return dbuf.err
}

// inputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *TLInputMediaUploadedDocument) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaUploadedDocument,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaUploadedDocument) SetNosoundVideo(v bool) { m.Data2.NosoundVideo = v }
func (m *TLInputMediaUploadedDocument) GetNosoundVideo() bool  { return m.Data2.NosoundVideo }

func (m *TLInputMediaUploadedDocument) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedDocument) GetFile() *InputFile  { return m.Data2.File }

func (m *TLInputMediaUploadedDocument) SetThumb(v *InputFile) { m.Data2.Thumb = v }
func (m *TLInputMediaUploadedDocument) GetThumb() *InputFile  { return m.Data2.Thumb }

func (m *TLInputMediaUploadedDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputMediaUploadedDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLInputMediaUploadedDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputMediaUploadedDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func (m *TLInputMediaUploadedDocument) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedDocument) GetStickers() []*InputDocument  { return m.Data2.Stickers }

func (m *TLInputMediaUploadedDocument) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedDocument) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLInputMediaUploadedDocument() *TLInputMediaUploadedDocument {
	return &TLInputMediaUploadedDocument{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaUploadedDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaUploadedDocument))

	// flags
	var flags uint32 = 0
	if m.GetNosoundVideo() == true {
		flags |= 1 << 3
	}
	if m.GetThumb() != nil {
		flags |= 1 << 2
	}
	if m.GetStickers() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetFile().Encode())
	if m.GetThumb() != nil {
		x.Bytes(m.GetThumb().Encode())
	}
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	if m.GetStickers() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetStickers())))
		for _, v := range m.GetStickers() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaUploadedDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaUploadedDocument))

	// flags
	var flags uint32 = 0
	if m.GetNosoundVideo() == true {
		flags |= 1 << 3
	}
	if m.GetThumb() != nil {
		flags |= 1 << 2
	}
	if m.GetStickers() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetFile().EncodeToLayer(layer))
	if m.GetThumb() != nil {
		x.Bytes(m.GetThumb().EncodeToLayer(layer))
	}
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	if m.GetStickers() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetStickers())))
		for _, v := range m.GetStickers() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaUploadedDocument) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 3)) != 0 {
		m.SetNosoundVideo(true)
	}
	m3 := &InputFile{}
	m3.Decode(dbuf)
	m.SetFile(m3)
	if (flags & (1 << 2)) != 0 {
		m4 := &InputFile{}
		m4.Decode(dbuf)
		m.SetThumb(m4)
	}
	m.SetMimeType(dbuf.String())
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*DocumentAttribute, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &DocumentAttribute{}
		v6[i].Decode(dbuf)
	}
	m.SetAttributes(v6)

	if (flags & (1 << 0)) != 0 {
		c7 := dbuf.Int()
		if c7 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
			return dbuf.err
		}
		l7 := dbuf.Int()
		v7 := make([]*InputDocument, l7)
		for i := int32(0); i < l7; i++ {
			v7[i] = &InputDocument{}
			v7[i].Decode(dbuf)
		}
		m.SetStickers(v7)

	}
	if (flags & (1 << 1)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// inputMediaDocument#23ab23d2 flags:# id:InputDocument ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaDocument) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaDocument,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaDocument) SetId(v *InputDocument) { m.Data2.Id_15 = v }
func (m *TLInputMediaDocument) GetId() *InputDocument  { return m.Data2.Id_15 }

func (m *TLInputMediaDocument) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocument) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLInputMediaDocument() *TLInputMediaDocument {
	return &TLInputMediaDocument{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaDocument))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetId().Encode())
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaDocument))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetId().EncodeToLayer(layer))
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaDocument) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputDocument{}
	m2.Decode(dbuf)
	m.SetId(m2)
	if (flags & (1 << 0)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// inputMediaVenue#c13d1c11 geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string = InputMedia;
func (m *TLInputMediaVenue) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaVenue,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaVenue) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaVenue) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLInputMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLInputMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLInputMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLInputMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func NewTLInputMediaVenue() *TLInputMediaVenue {
	return &TLInputMediaVenue{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaVenue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaVenue))

	x.Bytes(m.GetGeoPoint().Encode())
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())

	return x.buf
}

func (m *TLInputMediaVenue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaVenue))

	x.Bytes(m.GetGeoPoint().EncodeToLayer(layer))
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())

	return x.buf
}

func (m *TLInputMediaVenue) Decode(dbuf *DecodeBuf) error {
	m1 := &InputGeoPoint{}
	m1.Decode(dbuf)
	m.SetGeoPoint(m1)
	m.SetTitle(dbuf.String())
	m.SetAddress(dbuf.String())
	m.SetProvider(dbuf.String())
	m.SetVenueId(dbuf.String())
	m.SetVenueType(dbuf.String())

	return dbuf.err
}

// inputMediaGifExternal#4843b0fd url:string q:string = InputMedia;
func (m *TLInputMediaGifExternal) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaGifExternal,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaGifExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaGifExternal) GetUrl() string  { return m.Data2.Url }

func (m *TLInputMediaGifExternal) SetQ(v string) { m.Data2.Q = v }
func (m *TLInputMediaGifExternal) GetQ() string  { return m.Data2.Q }

func NewTLInputMediaGifExternal() *TLInputMediaGifExternal {
	return &TLInputMediaGifExternal{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaGifExternal) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGifExternal))

	x.String(m.GetUrl())
	x.String(m.GetQ())

	return x.buf
}

func (m *TLInputMediaGifExternal) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGifExternal))

	x.String(m.GetUrl())
	x.String(m.GetQ())

	return x.buf
}

func (m *TLInputMediaGifExternal) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetQ(dbuf.String())

	return dbuf.err
}

// inputMediaPhotoExternal#e5bbfe1a flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaPhotoExternal) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaPhotoExternal,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaPhotoExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaPhotoExternal) GetUrl() string  { return m.Data2.Url }

func (m *TLInputMediaPhotoExternal) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhotoExternal) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLInputMediaPhotoExternal() *TLInputMediaPhotoExternal {
	return &TLInputMediaPhotoExternal{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaPhotoExternal) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaPhotoExternal))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetUrl())
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaPhotoExternal) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaPhotoExternal))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetUrl())
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaPhotoExternal) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetUrl(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// inputMediaDocumentExternal#fb52dc99 flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaDocumentExternal) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaDocumentExternal,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaDocumentExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaDocumentExternal) GetUrl() string  { return m.Data2.Url }

func (m *TLInputMediaDocumentExternal) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocumentExternal) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLInputMediaDocumentExternal() *TLInputMediaDocumentExternal {
	return &TLInputMediaDocumentExternal{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaDocumentExternal) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaDocumentExternal))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetUrl())
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaDocumentExternal) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaDocumentExternal))

	// flags
	var flags uint32 = 0
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetUrl())
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLInputMediaDocumentExternal) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetUrl(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// inputMediaGame#d33f43f3 id:InputGame = InputMedia;
func (m *TLInputMediaGame) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaGame,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaGame) SetId(v *InputGame) { m.Data2.Id_23 = v }
func (m *TLInputMediaGame) GetId() *InputGame  { return m.Data2.Id_23 }

func NewTLInputMediaGame() *TLInputMediaGame {
	return &TLInputMediaGame{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaGame) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGame))

	x.Bytes(m.GetId().Encode())

	return x.buf
}

func (m *TLInputMediaGame) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGame))

	x.Bytes(m.GetId().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputMediaGame) Decode(dbuf *DecodeBuf) error {
	m1 := &InputGame{}
	m1.Decode(dbuf)
	m.SetId(m1)

	return dbuf.err
}

// inputMediaInvoice#f4e096c3 flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:string provider_data:DataJSON start_param:string = InputMedia;
func (m *TLInputMediaInvoice) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaInvoice,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaInvoice) GetTitle() string  { return m.Data2.Title }

func (m *TLInputMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputMediaInvoice) GetDescription() string  { return m.Data2.Description }

func (m *TLInputMediaInvoice) SetPhoto(v *InputWebDocument) { m.Data2.Photo = v }
func (m *TLInputMediaInvoice) GetPhoto() *InputWebDocument  { return m.Data2.Photo }

func (m *TLInputMediaInvoice) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLInputMediaInvoice) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLInputMediaInvoice) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLInputMediaInvoice) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLInputMediaInvoice) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaInvoice) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputMediaInvoice) SetProviderData(v *DataJSON) { m.Data2.ProviderData = v }
func (m *TLInputMediaInvoice) GetProviderData() *DataJSON  { return m.Data2.ProviderData }

func (m *TLInputMediaInvoice) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLInputMediaInvoice) GetStartParam() string  { return m.Data2.StartParam }

func NewTLInputMediaInvoice() *TLInputMediaInvoice {
	return &TLInputMediaInvoice{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaInvoice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaInvoice))

	// flags
	var flags uint32 = 0
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetTitle())
	x.String(m.GetDescription())
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().Encode())
	}
	x.Bytes(m.GetInvoice().Encode())
	x.StringBytes(m.GetPayload())
	x.String(m.GetProvider())
	x.Bytes(m.GetProviderData().Encode())
	x.String(m.GetStartParam())

	return x.buf
}

func (m *TLInputMediaInvoice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaInvoice))

	// flags
	var flags uint32 = 0
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetTitle())
	x.String(m.GetDescription())
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	}
	x.Bytes(m.GetInvoice().EncodeToLayer(layer))
	x.StringBytes(m.GetPayload())
	x.String(m.GetProvider())
	x.Bytes(m.GetProviderData().EncodeToLayer(layer))
	x.String(m.GetStartParam())

	return x.buf
}

func (m *TLInputMediaInvoice) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetTitle(dbuf.String())
	m.SetDescription(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m4 := &InputWebDocument{}
		m4.Decode(dbuf)
		m.SetPhoto(m4)
	}
	m5 := &Invoice{}
	m5.Decode(dbuf)
	m.SetInvoice(m5)
	m.SetPayload(dbuf.StringBytes())
	m.SetProvider(dbuf.String())
	m8 := &DataJSON{}
	m8.Decode(dbuf)
	m.SetProviderData(m8)
	m.SetStartParam(dbuf.String())

	return dbuf.err
}

// inputMediaGeoLive#7b1a118f geo_point:InputGeoPoint period:int = InputMedia;
func (m *TLInputMediaGeoLive) To_InputMedia() *InputMedia {
	return &InputMedia{
		Constructor: TLConstructor_CRC32_inputMediaGeoLive,
		Data2:       m.Data2,
	}
}

func (m *TLInputMediaGeoLive) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoLive) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputMediaGeoLive) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLInputMediaGeoLive) GetPeriod() int32  { return m.Data2.Period }

func NewTLInputMediaGeoLive() *TLInputMediaGeoLive {
	return &TLInputMediaGeoLive{Data2: &InputMedia_Data{}}
}

func (m *TLInputMediaGeoLive) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGeoLive))

	x.Bytes(m.GetGeoPoint().Encode())
	x.Int(m.GetPeriod())

	return x.buf
}

func (m *TLInputMediaGeoLive) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMediaGeoLive))

	x.Bytes(m.GetGeoPoint().EncodeToLayer(layer))
	x.Int(m.GetPeriod())

	return x.buf
}

func (m *TLInputMediaGeoLive) Decode(dbuf *DecodeBuf) error {
	m1 := &InputGeoPoint{}
	m1.Decode(dbuf)
	m.SetGeoPoint(m1)
	m.SetPeriod(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChatParticipant <--
//  + TL_ChatParticipant
//  + TL_ChatParticipantCreator
//  + TL_ChatParticipantAdmin
//

func (m *ChatParticipant) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatParticipant:
		t := m.To_ChatParticipant()
		return t.Encode()
	case TLConstructor_CRC32_chatParticipantCreator:
		t := m.To_ChatParticipantCreator()
		return t.Encode()
	case TLConstructor_CRC32_chatParticipantAdmin:
		t := m.To_ChatParticipantAdmin()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatParticipant) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatParticipant:
		t := m.To_ChatParticipant()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatParticipantCreator:
		t := m.To_ChatParticipantCreator()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatParticipantAdmin:
		t := m.To_ChatParticipantAdmin()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatParticipant) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatParticipant:
		m2 := &TLChatParticipant{Data2: &ChatParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatParticipantCreator:
		m2 := &TLChatParticipantCreator{Data2: &ChatParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatParticipantAdmin:
		m2 := &TLChatParticipantAdmin{Data2: &ChatParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatParticipant#c8d7493e user_id:int inviter_id:int date:int = ChatParticipant;
func (m *ChatParticipant) To_ChatParticipant() *TLChatParticipant {
	return &TLChatParticipant{
		Data2: m.Data2,
	}
}

// chatParticipantCreator#da13538a user_id:int = ChatParticipant;
func (m *ChatParticipant) To_ChatParticipantCreator() *TLChatParticipantCreator {
	return &TLChatParticipantCreator{
		Data2: m.Data2,
	}
}

// chatParticipantAdmin#e2d6e436 user_id:int inviter_id:int date:int = ChatParticipant;
func (m *ChatParticipant) To_ChatParticipantAdmin() *TLChatParticipantAdmin {
	return &TLChatParticipantAdmin{
		Data2: m.Data2,
	}
}

// chatParticipant#c8d7493e user_id:int inviter_id:int date:int = ChatParticipant;
func (m *TLChatParticipant) To_ChatParticipant() *ChatParticipant {
	return &ChatParticipant{
		Constructor: TLConstructor_CRC32_chatParticipant,
		Data2:       m.Data2,
	}
}

func (m *TLChatParticipant) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChatParticipant) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChatParticipant) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChatParticipant) GetInviterId() int32  { return m.Data2.InviterId }

func (m *TLChatParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatParticipant) GetDate() int32  { return m.Data2.Date }

func NewTLChatParticipant() *TLChatParticipant {
	return &TLChatParticipant{Data2: &ChatParticipant_Data{}}
}

func (m *TLChatParticipant) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipant))

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChatParticipant) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipant))

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChatParticipant) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetInviterId(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// chatParticipantCreator#da13538a user_id:int = ChatParticipant;
func (m *TLChatParticipantCreator) To_ChatParticipant() *ChatParticipant {
	return &ChatParticipant{
		Constructor: TLConstructor_CRC32_chatParticipantCreator,
		Data2:       m.Data2,
	}
}

func (m *TLChatParticipantCreator) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChatParticipantCreator) GetUserId() int32  { return m.Data2.UserId }

func NewTLChatParticipantCreator() *TLChatParticipantCreator {
	return &TLChatParticipantCreator{Data2: &ChatParticipant_Data{}}
}

func (m *TLChatParticipantCreator) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipantCreator))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLChatParticipantCreator) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipantCreator))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLChatParticipantCreator) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// chatParticipantAdmin#e2d6e436 user_id:int inviter_id:int date:int = ChatParticipant;
func (m *TLChatParticipantAdmin) To_ChatParticipant() *ChatParticipant {
	return &ChatParticipant{
		Constructor: TLConstructor_CRC32_chatParticipantAdmin,
		Data2:       m.Data2,
	}
}

func (m *TLChatParticipantAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChatParticipantAdmin) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChatParticipantAdmin) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChatParticipantAdmin) GetInviterId() int32  { return m.Data2.InviterId }

func (m *TLChatParticipantAdmin) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatParticipantAdmin) GetDate() int32  { return m.Data2.Date }

func NewTLChatParticipantAdmin() *TLChatParticipantAdmin {
	return &TLChatParticipantAdmin{Data2: &ChatParticipant_Data{}}
}

func (m *TLChatParticipantAdmin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipantAdmin))

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChatParticipantAdmin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipantAdmin))

	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLChatParticipantAdmin) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetInviterId(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Photo <--
//  + TL_PhotoEmpty
//  + TL_Photo
//  + TL_PhotoLayer86
//

func (m *Photo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_photoEmpty:
		t := m.To_PhotoEmpty()
		return t.Encode()
	case TLConstructor_CRC32_photo:
		t := m.To_Photo()
		return t.Encode()
	case TLConstructor_CRC32_photoLayer86:
		t := m.To_PhotoLayer86()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Photo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_photoEmpty:
		t := m.To_PhotoEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_photo:
		t := m.To_Photo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_photoLayer86:
		t := m.To_PhotoLayer86()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Photo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_photoEmpty:
		m2 := &TLPhotoEmpty{Data2: &Photo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_photo:
		m2 := &TLPhoto{Data2: &Photo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_photoLayer86:
		m2 := &TLPhotoLayer86{Data2: &Photo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// photoEmpty#2331b22d id:long = Photo;
func (m *Photo) To_PhotoEmpty() *TLPhotoEmpty {
	return &TLPhotoEmpty{
		Data2: m.Data2,
	}
}

// photo#9288dd29 flags:# has_stickers:flags.0?true id:long access_hash:long date:int sizes:Vector<PhotoSize> = Photo;
func (m *Photo) To_Photo() *TLPhoto {
	return &TLPhoto{
		Data2: m.Data2,
	}
}

// photo#9c477dd8 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> = Photo;
func (m *Photo) To_PhotoLayer86() *TLPhotoLayer86 {
	return &TLPhotoLayer86{
		Data2: m.Data2,
	}
}

// photoEmpty#2331b22d id:long = Photo;
func (m *TLPhotoEmpty) To_Photo() *Photo {
	return &Photo{
		Constructor: TLConstructor_CRC32_photoEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLPhotoEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhotoEmpty) GetId() int64  { return m.Data2.Id }

func NewTLPhotoEmpty() *TLPhotoEmpty {
	return &TLPhotoEmpty{Data2: &Photo_Data{}}
}

func (m *TLPhotoEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLPhotoEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLPhotoEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())

	return dbuf.err
}

// photo#9288dd29 flags:# has_stickers:flags.0?true id:long access_hash:long date:int sizes:Vector<PhotoSize> = Photo;
func (m *TLPhoto) To_Photo() *Photo {
	return &Photo{
		Constructor: TLConstructor_CRC32_photo,
		Data2:       m.Data2,
	}
}

func (m *TLPhoto) SetHasStickers(v bool) { m.Data2.HasStickers = v }
func (m *TLPhoto) GetHasStickers() bool  { return m.Data2.HasStickers }

func (m *TLPhoto) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoto) GetId() int64  { return m.Data2.Id }

func (m *TLPhoto) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoto) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoto) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoto) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoto) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLPhoto) GetSizes() []*PhotoSize  { return m.Data2.Sizes }

func NewTLPhoto() *TLPhoto {
	return &TLPhoto{Data2: &Photo_Data{}}
}

func (m *TLPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photo))

	// flags
	var flags uint32 = 0
	if m.GetHasStickers() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSizes())))
	for _, v := range m.GetSizes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photo))

	// flags
	var flags uint32 = 0
	if m.GetHasStickers() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSizes())))
	for _, v := range m.GetSizes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhoto) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetHasStickers(true)
	}
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*PhotoSize, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &PhotoSize{}
		v6[i].Decode(dbuf)
	}
	m.SetSizes(v6)

	return dbuf.err
}

// photo#9c477dd8 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> = Photo;
func (m *TLPhotoLayer86) To_Photo() *Photo {
	return &Photo{
		Constructor: TLConstructor_CRC32_photoLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLPhotoLayer86) SetHasStickers(v bool) { m.Data2.HasStickers = v }
func (m *TLPhotoLayer86) GetHasStickers() bool  { return m.Data2.HasStickers }

func (m *TLPhotoLayer86) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhotoLayer86) GetId() int64  { return m.Data2.Id }

func (m *TLPhotoLayer86) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhotoLayer86) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhotoLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLPhotoLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLPhotoLayer86) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhotoLayer86) GetDate() int32  { return m.Data2.Date }

func (m *TLPhotoLayer86) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLPhotoLayer86) GetSizes() []*PhotoSize  { return m.Data2.Sizes }

func NewTLPhotoLayer86() *TLPhotoLayer86 {
	return &TLPhotoLayer86{Data2: &Photo_Data{}}
}

func (m *TLPhotoLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoLayer86))

	// flags
	var flags uint32 = 0
	if m.GetHasStickers() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())
	x.Int(m.GetDate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSizes())))
	for _, v := range m.GetSizes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhotoLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoLayer86))

	// flags
	var flags uint32 = 0
	if m.GetHasStickers() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())
	x.Int(m.GetDate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSizes())))
	for _, v := range m.GetSizes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhotoLayer86) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetHasStickers(true)
	}
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())
	m.SetDate(dbuf.Int())
	c7 := dbuf.Int()
	if c7 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
		return dbuf.err
	}
	l7 := dbuf.Int()
	v7 := make([]*PhotoSize, l7)
	for i := int32(0); i < l7; i++ {
		v7[i] = &PhotoSize{}
		v7[i].Decode(dbuf)
	}
	m.SetSizes(v7)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPeerNotifySettings <--
//  + TL_InputPeerNotifySettings
//

func (m *InputPeerNotifySettings) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPeerNotifySettings:
		t := m.To_InputPeerNotifySettings()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPeerNotifySettings) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPeerNotifySettings:
		t := m.To_InputPeerNotifySettings()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPeerNotifySettings) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPeerNotifySettings:
		m2 := &TLInputPeerNotifySettings{Data2: &InputPeerNotifySettings_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPeerNotifySettings#9c3d198e flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = InputPeerNotifySettings;
func (m *InputPeerNotifySettings) To_InputPeerNotifySettings() *TLInputPeerNotifySettings {
	return &TLInputPeerNotifySettings{
		Data2: m.Data2,
	}
}

// inputPeerNotifySettings#9c3d198e flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = InputPeerNotifySettings;
func (m *TLInputPeerNotifySettings) To_InputPeerNotifySettings() *InputPeerNotifySettings {
	return &InputPeerNotifySettings{
		Constructor: TLConstructor_CRC32_inputPeerNotifySettings,
		Data2:       m.Data2,
	}
}

func (m *TLInputPeerNotifySettings) SetShowPreviews(v *Bool) { m.Data2.ShowPreviews = v }
func (m *TLInputPeerNotifySettings) GetShowPreviews() *Bool  { return m.Data2.ShowPreviews }

func (m *TLInputPeerNotifySettings) SetSilent(v *Bool) { m.Data2.Silent = v }
func (m *TLInputPeerNotifySettings) GetSilent() *Bool  { return m.Data2.Silent }

func (m *TLInputPeerNotifySettings) SetMuteUntil(v int32) { m.Data2.MuteUntil = v }
func (m *TLInputPeerNotifySettings) GetMuteUntil() int32  { return m.Data2.MuteUntil }

func (m *TLInputPeerNotifySettings) SetSound(v string) { m.Data2.Sound = v }
func (m *TLInputPeerNotifySettings) GetSound() string  { return m.Data2.Sound }

func NewTLInputPeerNotifySettings() *TLInputPeerNotifySettings {
	return &TLInputPeerNotifySettings{Data2: &InputPeerNotifySettings_Data{}}
}

func (m *TLInputPeerNotifySettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerNotifySettings))

	// flags
	var flags uint32 = 0
	if m.GetShowPreviews() != nil {
		flags |= 1 << 0
	}
	if m.GetSilent() != nil {
		flags |= 1 << 1
	}
	if m.GetMuteUntil() != 0 {
		flags |= 1 << 2
	}
	if m.GetSound() != "" {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetShowPreviews() != nil {
		x.Bytes(m.GetShowPreviews().Encode())
	}
	if m.GetSilent() != nil {
		x.Bytes(m.GetSilent().Encode())
	}
	if m.GetMuteUntil() != 0 {
		x.Int(m.GetMuteUntil())
	}
	if m.GetSound() != "" {
		x.String(m.GetSound())
	}

	return x.buf
}

func (m *TLInputPeerNotifySettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerNotifySettings))

	// flags
	var flags uint32 = 0
	if m.GetShowPreviews() != nil {
		flags |= 1 << 0
	}
	if m.GetSilent() != nil {
		flags |= 1 << 1
	}
	if m.GetMuteUntil() != 0 {
		flags |= 1 << 2
	}
	if m.GetSound() != "" {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetShowPreviews() != nil {
		x.Bytes(m.GetShowPreviews().EncodeToLayer(layer))
	}
	if m.GetSilent() != nil {
		x.Bytes(m.GetSilent().EncodeToLayer(layer))
	}
	if m.GetMuteUntil() != 0 {
		x.Int(m.GetMuteUntil())
	}
	if m.GetSound() != "" {
		x.String(m.GetSound())
	}

	return x.buf
}

func (m *TLInputPeerNotifySettings) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m2 := &Bool{}
		m2.Decode(dbuf)
		m.SetShowPreviews(m2)
	}
	if (flags & (1 << 1)) != 0 {
		m3 := &Bool{}
		m3.Decode(dbuf)
		m.SetSilent(m3)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetMuteUntil(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetSound(dbuf.String())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MessageRange <--
//  + TL_MessageRange
//

func (m *MessageRange) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messageRange:
		t := m.To_MessageRange()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageRange) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messageRange:
		t := m.To_MessageRange()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageRange) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messageRange:
		m2 := &TLMessageRange{Data2: &MessageRange_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messageRange#ae30253 min_id:int max_id:int = MessageRange;
func (m *MessageRange) To_MessageRange() *TLMessageRange {
	return &TLMessageRange{
		Data2: m.Data2,
	}
}

// messageRange#ae30253 min_id:int max_id:int = MessageRange;
func (m *TLMessageRange) To_MessageRange() *MessageRange {
	return &MessageRange{
		Constructor: TLConstructor_CRC32_messageRange,
		Data2:       m.Data2,
	}
}

func (m *TLMessageRange) SetMinId(v int32) { m.Data2.MinId = v }
func (m *TLMessageRange) GetMinId() int32  { return m.Data2.MinId }

func (m *TLMessageRange) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLMessageRange) GetMaxId() int32  { return m.Data2.MaxId }

func NewTLMessageRange() *TLMessageRange {
	return &TLMessageRange{Data2: &MessageRange_Data{}}
}

func (m *TLMessageRange) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageRange))

	x.Int(m.GetMinId())
	x.Int(m.GetMaxId())

	return x.buf
}

func (m *TLMessageRange) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageRange))

	x.Int(m.GetMinId())
	x.Int(m.GetMaxId())

	return x.buf
}

func (m *TLMessageRange) Decode(dbuf *DecodeBuf) error {
	m.SetMinId(dbuf.Int())
	m.SetMaxId(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_ExportedAuthorization <--
//  + TL_AuthExportedAuthorization
//

func (m *Auth_ExportedAuthorization) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_exportedAuthorization:
		t := m.To_AuthExportedAuthorization()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_ExportedAuthorization) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_exportedAuthorization:
		t := m.To_AuthExportedAuthorization()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_ExportedAuthorization) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_exportedAuthorization:
		m2 := &TLAuthExportedAuthorization{Data2: &Auth_ExportedAuthorization_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization;
func (m *Auth_ExportedAuthorization) To_AuthExportedAuthorization() *TLAuthExportedAuthorization {
	return &TLAuthExportedAuthorization{
		Data2: m.Data2,
	}
}

// auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization;
func (m *TLAuthExportedAuthorization) To_Auth_ExportedAuthorization() *Auth_ExportedAuthorization {
	return &Auth_ExportedAuthorization{
		Constructor: TLConstructor_CRC32_auth_exportedAuthorization,
		Data2:       m.Data2,
	}
}

func (m *TLAuthExportedAuthorization) SetId(v int32) { m.Data2.Id = v }
func (m *TLAuthExportedAuthorization) GetId() int32  { return m.Data2.Id }

func (m *TLAuthExportedAuthorization) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLAuthExportedAuthorization) GetBytes() []byte  { return m.Data2.Bytes }

func NewTLAuthExportedAuthorization() *TLAuthExportedAuthorization {
	return &TLAuthExportedAuthorization{Data2: &Auth_ExportedAuthorization_Data{}}
}

func (m *TLAuthExportedAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_exportedAuthorization))

	x.Int(m.GetId())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLAuthExportedAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_exportedAuthorization))

	x.Int(m.GetId())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLAuthExportedAuthorization) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetBytes(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SentEncryptedMessage <--
//  + TL_MessagesSentEncryptedMessage
//  + TL_MessagesSentEncryptedFile
//

func (m *Messages_SentEncryptedMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_sentEncryptedMessage:
		t := m.To_MessagesSentEncryptedMessage()
		return t.Encode()
	case TLConstructor_CRC32_messages_sentEncryptedFile:
		t := m.To_MessagesSentEncryptedFile()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_SentEncryptedMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_sentEncryptedMessage:
		t := m.To_MessagesSentEncryptedMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_sentEncryptedFile:
		t := m.To_MessagesSentEncryptedFile()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_SentEncryptedMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_sentEncryptedMessage:
		m2 := &TLMessagesSentEncryptedMessage{Data2: &Messages_SentEncryptedMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_sentEncryptedFile:
		m2 := &TLMessagesSentEncryptedFile{Data2: &Messages_SentEncryptedMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.sentEncryptedMessage#560f8935 date:int = messages.SentEncryptedMessage;
func (m *Messages_SentEncryptedMessage) To_MessagesSentEncryptedMessage() *TLMessagesSentEncryptedMessage {
	return &TLMessagesSentEncryptedMessage{
		Data2: m.Data2,
	}
}

// messages.sentEncryptedFile#9493ff32 date:int file:EncryptedFile = messages.SentEncryptedMessage;
func (m *Messages_SentEncryptedMessage) To_MessagesSentEncryptedFile() *TLMessagesSentEncryptedFile {
	return &TLMessagesSentEncryptedFile{
		Data2: m.Data2,
	}
}

// messages.sentEncryptedMessage#560f8935 date:int = messages.SentEncryptedMessage;
func (m *TLMessagesSentEncryptedMessage) To_Messages_SentEncryptedMessage() *Messages_SentEncryptedMessage {
	return &Messages_SentEncryptedMessage{
		Constructor: TLConstructor_CRC32_messages_sentEncryptedMessage,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesSentEncryptedMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessagesSentEncryptedMessage) GetDate() int32  { return m.Data2.Date }

func NewTLMessagesSentEncryptedMessage() *TLMessagesSentEncryptedMessage {
	return &TLMessagesSentEncryptedMessage{Data2: &Messages_SentEncryptedMessage_Data{}}
}

func (m *TLMessagesSentEncryptedMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sentEncryptedMessage))

	x.Int(m.GetDate())

	return x.buf
}

func (m *TLMessagesSentEncryptedMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sentEncryptedMessage))

	x.Int(m.GetDate())

	return x.buf
}

func (m *TLMessagesSentEncryptedMessage) Decode(dbuf *DecodeBuf) error {
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// messages.sentEncryptedFile#9493ff32 date:int file:EncryptedFile = messages.SentEncryptedMessage;
func (m *TLMessagesSentEncryptedFile) To_Messages_SentEncryptedMessage() *Messages_SentEncryptedMessage {
	return &Messages_SentEncryptedMessage{
		Constructor: TLConstructor_CRC32_messages_sentEncryptedFile,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesSentEncryptedFile) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessagesSentEncryptedFile) GetDate() int32  { return m.Data2.Date }

func (m *TLMessagesSentEncryptedFile) SetFile(v *EncryptedFile) { m.Data2.File = v }
func (m *TLMessagesSentEncryptedFile) GetFile() *EncryptedFile  { return m.Data2.File }

func NewTLMessagesSentEncryptedFile() *TLMessagesSentEncryptedFile {
	return &TLMessagesSentEncryptedFile{Data2: &Messages_SentEncryptedMessage_Data{}}
}

func (m *TLMessagesSentEncryptedFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sentEncryptedFile))

	x.Int(m.GetDate())
	x.Bytes(m.GetFile().Encode())

	return x.buf
}

func (m *TLMessagesSentEncryptedFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sentEncryptedFile))

	x.Int(m.GetDate())
	x.Bytes(m.GetFile().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesSentEncryptedFile) Decode(dbuf *DecodeBuf) error {
	m.SetDate(dbuf.Int())
	m2 := &EncryptedFile{}
	m2.Decode(dbuf)
	m.SetFile(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// BotCommand <--
//  + TL_BotCommand
//

func (m *BotCommand) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_botCommand:
		t := m.To_BotCommand()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotCommand) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_botCommand:
		t := m.To_BotCommand()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotCommand) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_botCommand:
		m2 := &TLBotCommand{Data2: &BotCommand_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// botCommand#c27ac8c7 command:string description:string = BotCommand;
func (m *BotCommand) To_BotCommand() *TLBotCommand {
	return &TLBotCommand{
		Data2: m.Data2,
	}
}

// botCommand#c27ac8c7 command:string description:string = BotCommand;
func (m *TLBotCommand) To_BotCommand() *BotCommand {
	return &BotCommand{
		Constructor: TLConstructor_CRC32_botCommand,
		Data2:       m.Data2,
	}
}

func (m *TLBotCommand) SetCommand(v string) { m.Data2.Command = v }
func (m *TLBotCommand) GetCommand() string  { return m.Data2.Command }

func (m *TLBotCommand) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotCommand) GetDescription() string  { return m.Data2.Description }

func NewTLBotCommand() *TLBotCommand {
	return &TLBotCommand{Data2: &BotCommand_Data{}}
}

func (m *TLBotCommand) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botCommand))

	x.String(m.GetCommand())
	x.String(m.GetDescription())

	return x.buf
}

func (m *TLBotCommand) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botCommand))

	x.String(m.GetCommand())
	x.String(m.GetDescription())

	return x.buf
}

func (m *TLBotCommand) Decode(dbuf *DecodeBuf) error {
	m.SetCommand(dbuf.String())
	m.SetDescription(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputGame <--
//  + TL_InputGameID
//  + TL_InputGameShortName
//

func (m *InputGame) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputGameID:
		t := m.To_InputGameID()
		return t.Encode()
	case TLConstructor_CRC32_inputGameShortName:
		t := m.To_InputGameShortName()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputGame) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputGameID:
		t := m.To_InputGameID()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputGameShortName:
		t := m.To_InputGameShortName()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputGame) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputGameID:
		m2 := &TLInputGameID{Data2: &InputGame_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputGameShortName:
		m2 := &TLInputGameShortName{Data2: &InputGame_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputGameID#32c3e77 id:long access_hash:long = InputGame;
func (m *InputGame) To_InputGameID() *TLInputGameID {
	return &TLInputGameID{
		Data2: m.Data2,
	}
}

// inputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame;
func (m *InputGame) To_InputGameShortName() *TLInputGameShortName {
	return &TLInputGameShortName{
		Data2: m.Data2,
	}
}

// inputGameID#32c3e77 id:long access_hash:long = InputGame;
func (m *TLInputGameID) To_InputGame() *InputGame {
	return &InputGame{
		Constructor: TLConstructor_CRC32_inputGameID,
		Data2:       m.Data2,
	}
}

func (m *TLInputGameID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputGameID) GetId() int64  { return m.Data2.Id }

func (m *TLInputGameID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputGameID) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputGameID() *TLInputGameID {
	return &TLInputGameID{Data2: &InputGame_Data{}}
}

func (m *TLInputGameID) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGameID))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputGameID) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGameID))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputGameID) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame;
func (m *TLInputGameShortName) To_InputGame() *InputGame {
	return &InputGame{
		Constructor: TLConstructor_CRC32_inputGameShortName,
		Data2:       m.Data2,
	}
}

func (m *TLInputGameShortName) SetBotId(v *InputUser) { m.Data2.BotId = v }
func (m *TLInputGameShortName) GetBotId() *InputUser  { return m.Data2.BotId }

func (m *TLInputGameShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputGameShortName) GetShortName() string  { return m.Data2.ShortName }

func NewTLInputGameShortName() *TLInputGameShortName {
	return &TLInputGameShortName{Data2: &InputGame_Data{}}
}

func (m *TLInputGameShortName) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGameShortName))

	x.Bytes(m.GetBotId().Encode())
	x.String(m.GetShortName())

	return x.buf
}

func (m *TLInputGameShortName) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGameShortName))

	x.Bytes(m.GetBotId().EncodeToLayer(layer))
	x.String(m.GetShortName())

	return x.buf
}

func (m *TLInputGameShortName) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.SetBotId(m1)
	m.SetShortName(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// FileLocation <--
//  + TL_FileLocationUnavailable
//  + TL_FileLocation
//  + TL_FileLocationLayer86
//

func (m *FileLocation) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_fileLocationUnavailable:
		t := m.To_FileLocationUnavailable()
		return t.Encode()
	case TLConstructor_CRC32_fileLocation:
		t := m.To_FileLocation()
		return t.Encode()
	case TLConstructor_CRC32_fileLocationLayer86:
		t := m.To_FileLocationLayer86()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FileLocation) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_fileLocationUnavailable:
		t := m.To_FileLocationUnavailable()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_fileLocation:
		t := m.To_FileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_fileLocationLayer86:
		t := m.To_FileLocationLayer86()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FileLocation) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_fileLocationUnavailable:
		m2 := &TLFileLocationUnavailable{Data2: &FileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_fileLocation:
		m2 := &TLFileLocation{Data2: &FileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_fileLocationLayer86:
		m2 := &TLFileLocationLayer86{Data2: &FileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// fileLocationUnavailable#7c596b46 volume_id:long local_id:int secret:long = FileLocation;
func (m *FileLocation) To_FileLocationUnavailable() *TLFileLocationUnavailable {
	return &TLFileLocationUnavailable{
		Data2: m.Data2,
	}
}

// fileLocation#53d69076 dc_id:int volume_id:long local_id:int secret:long = FileLocation;
func (m *FileLocation) To_FileLocation() *TLFileLocation {
	return &TLFileLocation{
		Data2: m.Data2,
	}
}

// fileLocation#91d11eb dc_id:int volume_id:long local_id:int secret:long file_reference:bytes = FileLocation;
func (m *FileLocation) To_FileLocationLayer86() *TLFileLocationLayer86 {
	return &TLFileLocationLayer86{
		Data2: m.Data2,
	}
}

// fileLocationUnavailable#7c596b46 volume_id:long local_id:int secret:long = FileLocation;
func (m *TLFileLocationUnavailable) To_FileLocation() *FileLocation {
	return &FileLocation{
		Constructor: TLConstructor_CRC32_fileLocationUnavailable,
		Data2:       m.Data2,
	}
}

func (m *TLFileLocationUnavailable) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLFileLocationUnavailable) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLFileLocationUnavailable) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLFileLocationUnavailable) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLFileLocationUnavailable) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLFileLocationUnavailable) GetSecret() int64  { return m.Data2.Secret }

func NewTLFileLocationUnavailable() *TLFileLocationUnavailable {
	return &TLFileLocationUnavailable{Data2: &FileLocation_Data{}}
}

func (m *TLFileLocationUnavailable) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileLocationUnavailable))

	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())

	return x.buf
}

func (m *TLFileLocationUnavailable) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileLocationUnavailable))

	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())

	return x.buf
}

func (m *TLFileLocationUnavailable) Decode(dbuf *DecodeBuf) error {
	m.SetVolumeId(dbuf.Long())
	m.SetLocalId(dbuf.Int())
	m.SetSecret(dbuf.Long())

	return dbuf.err
}

// fileLocation#53d69076 dc_id:int volume_id:long local_id:int secret:long = FileLocation;
func (m *TLFileLocation) To_FileLocation() *FileLocation {
	return &FileLocation{
		Constructor: TLConstructor_CRC32_fileLocation,
		Data2:       m.Data2,
	}
}

func (m *TLFileLocation) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLFileLocation) GetDcId() int32  { return m.Data2.DcId }

func (m *TLFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLFileLocation) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLFileLocation) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLFileLocation) GetSecret() int64  { return m.Data2.Secret }

func NewTLFileLocation() *TLFileLocation {
	return &TLFileLocation{Data2: &FileLocation_Data{}}
}

func (m *TLFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileLocation))

	x.Int(m.GetDcId())
	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())

	return x.buf
}

func (m *TLFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileLocation))

	x.Int(m.GetDcId())
	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())

	return x.buf
}

func (m *TLFileLocation) Decode(dbuf *DecodeBuf) error {
	m.SetDcId(dbuf.Int())
	m.SetVolumeId(dbuf.Long())
	m.SetLocalId(dbuf.Int())
	m.SetSecret(dbuf.Long())

	return dbuf.err
}

// fileLocation#91d11eb dc_id:int volume_id:long local_id:int secret:long file_reference:bytes = FileLocation;
func (m *TLFileLocationLayer86) To_FileLocation() *FileLocation {
	return &FileLocation{
		Constructor: TLConstructor_CRC32_fileLocationLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLFileLocationLayer86) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLFileLocationLayer86) GetDcId() int32  { return m.Data2.DcId }

func (m *TLFileLocationLayer86) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLFileLocationLayer86) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLFileLocationLayer86) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLFileLocationLayer86) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLFileLocationLayer86) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLFileLocationLayer86) GetSecret() int64  { return m.Data2.Secret }

func (m *TLFileLocationLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLFileLocationLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func NewTLFileLocationLayer86() *TLFileLocationLayer86 {
	return &TLFileLocationLayer86{Data2: &FileLocation_Data{}}
}

func (m *TLFileLocationLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileLocationLayer86))

	x.Int(m.GetDcId())
	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLFileLocationLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileLocationLayer86))

	x.Int(m.GetDcId())
	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLFileLocationLayer86) Decode(dbuf *DecodeBuf) error {
	m.SetDcId(dbuf.Int())
	m.SetVolumeId(dbuf.Long())
	m.SetLocalId(dbuf.Int())
	m.SetSecret(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PhotoSize <--
//  + TL_PhotoSizeEmpty
//  + TL_PhotoSize
//  + TL_PhotoCachedSize
//

func (m *PhotoSize) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_photoSizeEmpty:
		t := m.To_PhotoSizeEmpty()
		return t.Encode()
	case TLConstructor_CRC32_photoSize:
		t := m.To_PhotoSize()
		return t.Encode()
	case TLConstructor_CRC32_photoCachedSize:
		t := m.To_PhotoCachedSize()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhotoSize) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_photoSizeEmpty:
		t := m.To_PhotoSizeEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_photoSize:
		t := m.To_PhotoSize()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_photoCachedSize:
		t := m.To_PhotoCachedSize()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhotoSize) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_photoSizeEmpty:
		m2 := &TLPhotoSizeEmpty{Data2: &PhotoSize_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_photoSize:
		m2 := &TLPhotoSize{Data2: &PhotoSize_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_photoCachedSize:
		m2 := &TLPhotoCachedSize{Data2: &PhotoSize_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// photoSizeEmpty#e17e23c type:string = PhotoSize;
func (m *PhotoSize) To_PhotoSizeEmpty() *TLPhotoSizeEmpty {
	return &TLPhotoSizeEmpty{
		Data2: m.Data2,
	}
}

// photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize;
func (m *PhotoSize) To_PhotoSize() *TLPhotoSize {
	return &TLPhotoSize{
		Data2: m.Data2,
	}
}

// photoCachedSize#e9a734fa type:string location:FileLocation w:int h:int bytes:bytes = PhotoSize;
func (m *PhotoSize) To_PhotoCachedSize() *TLPhotoCachedSize {
	return &TLPhotoCachedSize{
		Data2: m.Data2,
	}
}

// photoSizeEmpty#e17e23c type:string = PhotoSize;
func (m *TLPhotoSizeEmpty) To_PhotoSize() *PhotoSize {
	return &PhotoSize{
		Constructor: TLConstructor_CRC32_photoSizeEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLPhotoSizeEmpty) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSizeEmpty) GetType() string  { return m.Data2.Type }

func NewTLPhotoSizeEmpty() *TLPhotoSizeEmpty {
	return &TLPhotoSizeEmpty{Data2: &PhotoSize_Data{}}
}

func (m *TLPhotoSizeEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoSizeEmpty))

	x.String(m.GetType())

	return x.buf
}

func (m *TLPhotoSizeEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoSizeEmpty))

	x.String(m.GetType())

	return x.buf
}

func (m *TLPhotoSizeEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetType(dbuf.String())

	return dbuf.err
}

// photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize;
func (m *TLPhotoSize) To_PhotoSize() *PhotoSize {
	return &PhotoSize{
		Constructor: TLConstructor_CRC32_photoSize,
		Data2:       m.Data2,
	}
}

func (m *TLPhotoSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSize) GetType() string  { return m.Data2.Type }

func (m *TLPhotoSize) SetLocation(v *FileLocation) { m.Data2.Location = v }
func (m *TLPhotoSize) GetLocation() *FileLocation  { return m.Data2.Location }

func (m *TLPhotoSize) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoSize) GetW() int32  { return m.Data2.W }

func (m *TLPhotoSize) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoSize) GetH() int32  { return m.Data2.H }

func (m *TLPhotoSize) SetSize(v int32) { m.Data2.Size = v }
func (m *TLPhotoSize) GetSize() int32  { return m.Data2.Size }

func NewTLPhotoSize() *TLPhotoSize {
	return &TLPhotoSize{Data2: &PhotoSize_Data{}}
}

func (m *TLPhotoSize) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoSize))

	x.String(m.GetType())
	x.Bytes(m.GetLocation().Encode())
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.Int(m.GetSize())

	return x.buf
}

func (m *TLPhotoSize) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoSize))

	x.String(m.GetType())
	x.Bytes(m.GetLocation().EncodeToLayer(layer))
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.Int(m.GetSize())

	return x.buf
}

func (m *TLPhotoSize) Decode(dbuf *DecodeBuf) error {
	m.SetType(dbuf.String())
	m2 := &FileLocation{}
	m2.Decode(dbuf)
	m.SetLocation(m2)
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())
	m.SetSize(dbuf.Int())

	return dbuf.err
}

// photoCachedSize#e9a734fa type:string location:FileLocation w:int h:int bytes:bytes = PhotoSize;
func (m *TLPhotoCachedSize) To_PhotoSize() *PhotoSize {
	return &PhotoSize{
		Constructor: TLConstructor_CRC32_photoCachedSize,
		Data2:       m.Data2,
	}
}

func (m *TLPhotoCachedSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoCachedSize) GetType() string  { return m.Data2.Type }

func (m *TLPhotoCachedSize) SetLocation(v *FileLocation) { m.Data2.Location = v }
func (m *TLPhotoCachedSize) GetLocation() *FileLocation  { return m.Data2.Location }

func (m *TLPhotoCachedSize) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoCachedSize) GetW() int32  { return m.Data2.W }

func (m *TLPhotoCachedSize) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoCachedSize) GetH() int32  { return m.Data2.H }

func (m *TLPhotoCachedSize) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLPhotoCachedSize) GetBytes() []byte  { return m.Data2.Bytes }

func NewTLPhotoCachedSize() *TLPhotoCachedSize {
	return &TLPhotoCachedSize{Data2: &PhotoSize_Data{}}
}

func (m *TLPhotoCachedSize) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoCachedSize))

	x.String(m.GetType())
	x.Bytes(m.GetLocation().Encode())
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLPhotoCachedSize) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photoCachedSize))

	x.String(m.GetType())
	x.Bytes(m.GetLocation().EncodeToLayer(layer))
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLPhotoCachedSize) Decode(dbuf *DecodeBuf) error {
	m.SetType(dbuf.String())
	m2 := &FileLocation{}
	m2.Decode(dbuf)
	m.SetLocation(m2)
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())
	m.SetBytes(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_DeepLinkInfo <--
//  + TL_HelpDeepLinkInfoEmpty
//  + TL_HelpDeepLinkInfo
//

func (m *Help_DeepLinkInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_deepLinkInfoEmpty:
		t := m.To_HelpDeepLinkInfoEmpty()
		return t.Encode()
	case TLConstructor_CRC32_help_deepLinkInfo:
		t := m.To_HelpDeepLinkInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_DeepLinkInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_deepLinkInfoEmpty:
		t := m.To_HelpDeepLinkInfoEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_help_deepLinkInfo:
		t := m.To_HelpDeepLinkInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_DeepLinkInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_deepLinkInfoEmpty:
		m2 := &TLHelpDeepLinkInfoEmpty{Data2: &Help_DeepLinkInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_help_deepLinkInfo:
		m2 := &TLHelpDeepLinkInfo{Data2: &Help_DeepLinkInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.deepLinkInfoEmpty#66afa166 = help.DeepLinkInfo;
func (m *Help_DeepLinkInfo) To_HelpDeepLinkInfoEmpty() *TLHelpDeepLinkInfoEmpty {
	return &TLHelpDeepLinkInfoEmpty{
		Data2: m.Data2,
	}
}

// help.deepLinkInfo#6a4ee832 flags:# update_app:flags.0?true message:string entities:flags.1?Vector<MessageEntity> = help.DeepLinkInfo;
func (m *Help_DeepLinkInfo) To_HelpDeepLinkInfo() *TLHelpDeepLinkInfo {
	return &TLHelpDeepLinkInfo{
		Data2: m.Data2,
	}
}

// help.deepLinkInfoEmpty#66afa166 = help.DeepLinkInfo;
func (m *TLHelpDeepLinkInfoEmpty) To_Help_DeepLinkInfo() *Help_DeepLinkInfo {
	return &Help_DeepLinkInfo{
		Constructor: TLConstructor_CRC32_help_deepLinkInfoEmpty,
		Data2:       m.Data2,
	}
}

func NewTLHelpDeepLinkInfoEmpty() *TLHelpDeepLinkInfoEmpty {
	return &TLHelpDeepLinkInfoEmpty{Data2: &Help_DeepLinkInfo_Data{}}
}

func (m *TLHelpDeepLinkInfoEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_deepLinkInfoEmpty))

	return x.buf
}

func (m *TLHelpDeepLinkInfoEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_deepLinkInfoEmpty))

	return x.buf
}

func (m *TLHelpDeepLinkInfoEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// help.deepLinkInfo#6a4ee832 flags:# update_app:flags.0?true message:string entities:flags.1?Vector<MessageEntity> = help.DeepLinkInfo;
func (m *TLHelpDeepLinkInfo) To_Help_DeepLinkInfo() *Help_DeepLinkInfo {
	return &Help_DeepLinkInfo{
		Constructor: TLConstructor_CRC32_help_deepLinkInfo,
		Data2:       m.Data2,
	}
}

func (m *TLHelpDeepLinkInfo) SetUpdateApp(v bool) { m.Data2.UpdateApp = v }
func (m *TLHelpDeepLinkInfo) GetUpdateApp() bool  { return m.Data2.UpdateApp }

func (m *TLHelpDeepLinkInfo) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpDeepLinkInfo) GetMessage() string  { return m.Data2.Message }

func (m *TLHelpDeepLinkInfo) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpDeepLinkInfo) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func NewTLHelpDeepLinkInfo() *TLHelpDeepLinkInfo {
	return &TLHelpDeepLinkInfo{Data2: &Help_DeepLinkInfo_Data{}}
}

func (m *TLHelpDeepLinkInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_deepLinkInfo))

	// flags
	var flags uint32 = 0
	if m.GetUpdateApp() == true {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLHelpDeepLinkInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_deepLinkInfo))

	// flags
	var flags uint32 = 0
	if m.GetUpdateApp() == true {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLHelpDeepLinkInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetUpdateApp(true)
	}
	m.SetMessage(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		c4 := dbuf.Int()
		if c4 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
			return dbuf.err
		}
		l4 := dbuf.Int()
		v4 := make([]*MessageEntity, l4)
		for i := int32(0); i < l4; i++ {
			v4[i] = &MessageEntity{}
			v4[i].Decode(dbuf)
		}
		m.SetEntities(v4)

	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputFile <--
//  + TL_InputFile
//  + TL_InputFileBig
//

func (m *InputFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputFile:
		t := m.To_InputFile()
		return t.Encode()
	case TLConstructor_CRC32_inputFileBig:
		t := m.To_InputFileBig()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputFile:
		t := m.To_InputFile()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputFileBig:
		t := m.To_InputFileBig()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputFile:
		m2 := &TLInputFile{Data2: &InputFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputFileBig:
		m2 := &TLInputFileBig{Data2: &InputFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;
func (m *InputFile) To_InputFile() *TLInputFile {
	return &TLInputFile{
		Data2: m.Data2,
	}
}

// inputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile;
func (m *InputFile) To_InputFileBig() *TLInputFileBig {
	return &TLInputFileBig{
		Data2: m.Data2,
	}
}

// inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;
func (m *TLInputFile) To_InputFile() *InputFile {
	return &InputFile{
		Constructor: TLConstructor_CRC32_inputFile,
		Data2:       m.Data2,
	}
}

func (m *TLInputFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputFile) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputFile) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputFile) SetName(v string) { m.Data2.Name = v }
func (m *TLInputFile) GetName() string  { return m.Data2.Name }

func (m *TLInputFile) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputFile) GetMd5Checksum() string  { return m.Data2.Md5Checksum }

func NewTLInputFile() *TLInputFile {
	return &TLInputFile{Data2: &InputFile_Data{}}
}

func (m *TLInputFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFile))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetName())
	x.String(m.GetMd5Checksum())

	return x.buf
}

func (m *TLInputFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFile))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetName())
	x.String(m.GetMd5Checksum())

	return x.buf
}

func (m *TLInputFile) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetParts(dbuf.Int())
	m.SetName(dbuf.String())
	m.SetMd5Checksum(dbuf.String())

	return dbuf.err
}

// inputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile;
func (m *TLInputFileBig) To_InputFile() *InputFile {
	return &InputFile{
		Constructor: TLConstructor_CRC32_inputFileBig,
		Data2:       m.Data2,
	}
}

func (m *TLInputFileBig) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputFileBig) GetId() int64  { return m.Data2.Id }

func (m *TLInputFileBig) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputFileBig) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputFileBig) SetName(v string) { m.Data2.Name = v }
func (m *TLInputFileBig) GetName() string  { return m.Data2.Name }

func NewTLInputFileBig() *TLInputFileBig {
	return &TLInputFileBig{Data2: &InputFile_Data{}}
}

func (m *TLInputFileBig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFileBig))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetName())

	return x.buf
}

func (m *TLInputFileBig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFileBig))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetName())

	return x.buf
}

func (m *TLInputFileBig) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetParts(dbuf.Int())
	m.SetName(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Config <--
//  + TL_Config
//

func (m *Config) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_config:
		t := m.To_Config()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Config) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_config:
		t := m.To_Config()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Config) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_config:
		m2 := &TLConfig{Data2: &Config_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// config#3213dbba flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true ignore_phone_entities:flags.5?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int = Config;
func (m *Config) To_Config() *TLConfig {
	return &TLConfig{
		Data2: m.Data2,
	}
}

// config#3213dbba flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true ignore_phone_entities:flags.5?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int = Config;
func (m *TLConfig) To_Config() *Config {
	return &Config{
		Constructor: TLConstructor_CRC32_config,
		Data2:       m.Data2,
	}
}

func (m *TLConfig) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLConfig) GetPhonecallsEnabled() bool  { return m.Data2.PhonecallsEnabled }

func (m *TLConfig) SetDefaultP2PContacts(v bool) { m.Data2.DefaultP2PContacts = v }
func (m *TLConfig) GetDefaultP2PContacts() bool  { return m.Data2.DefaultP2PContacts }

func (m *TLConfig) SetPreloadFeaturedStickers(v bool) { m.Data2.PreloadFeaturedStickers = v }
func (m *TLConfig) GetPreloadFeaturedStickers() bool  { return m.Data2.PreloadFeaturedStickers }

func (m *TLConfig) SetIgnorePhoneEntities(v bool) { m.Data2.IgnorePhoneEntities = v }
func (m *TLConfig) GetIgnorePhoneEntities() bool  { return m.Data2.IgnorePhoneEntities }

func (m *TLConfig) SetRevokePmInbox(v bool) { m.Data2.RevokePmInbox = v }
func (m *TLConfig) GetRevokePmInbox() bool  { return m.Data2.RevokePmInbox }

func (m *TLConfig) SetBlockedMode(v bool) { m.Data2.BlockedMode = v }
func (m *TLConfig) GetBlockedMode() bool  { return m.Data2.BlockedMode }

func (m *TLConfig) SetDate(v int32) { m.Data2.Date = v }
func (m *TLConfig) GetDate() int32  { return m.Data2.Date }

func (m *TLConfig) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLConfig) GetExpires() int32  { return m.Data2.Expires }

func (m *TLConfig) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLConfig) GetTestMode() *Bool  { return m.Data2.TestMode }

func (m *TLConfig) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLConfig) GetThisDc() int32  { return m.Data2.ThisDc }

func (m *TLConfig) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLConfig) GetDcOptions() []*DcOption  { return m.Data2.DcOptions }

func (m *TLConfig) SetDcTxtDomainName(v string) { m.Data2.DcTxtDomainName = v }
func (m *TLConfig) GetDcTxtDomainName() string  { return m.Data2.DcTxtDomainName }

func (m *TLConfig) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLConfig) GetChatSizeMax() int32  { return m.Data2.ChatSizeMax }

func (m *TLConfig) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLConfig) GetMegagroupSizeMax() int32  { return m.Data2.MegagroupSizeMax }

func (m *TLConfig) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLConfig) GetForwardedCountMax() int32  { return m.Data2.ForwardedCountMax }

func (m *TLConfig) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLConfig) GetOnlineUpdatePeriodMs() int32  { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLConfig) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLConfig) GetOfflineBlurTimeoutMs() int32  { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLConfig) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLConfig) GetOfflineIdleTimeoutMs() int32  { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLConfig) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLConfig) GetOnlineCloudTimeoutMs() int32  { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLConfig) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLConfig) GetNotifyCloudDelayMs() int32  { return m.Data2.NotifyCloudDelayMs }

func (m *TLConfig) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLConfig) GetNotifyDefaultDelayMs() int32  { return m.Data2.NotifyDefaultDelayMs }

func (m *TLConfig) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLConfig) GetPushChatPeriodMs() int32  { return m.Data2.PushChatPeriodMs }

func (m *TLConfig) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLConfig) GetPushChatLimit() int32  { return m.Data2.PushChatLimit }

func (m *TLConfig) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLConfig) GetSavedGifsLimit() int32  { return m.Data2.SavedGifsLimit }

func (m *TLConfig) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLConfig) GetEditTimeLimit() int32  { return m.Data2.EditTimeLimit }

func (m *TLConfig) SetRevokeTimeLimit(v int32) { m.Data2.RevokeTimeLimit = v }
func (m *TLConfig) GetRevokeTimeLimit() int32  { return m.Data2.RevokeTimeLimit }

func (m *TLConfig) SetRevokePmTimeLimit(v int32) { m.Data2.RevokePmTimeLimit = v }
func (m *TLConfig) GetRevokePmTimeLimit() int32  { return m.Data2.RevokePmTimeLimit }

func (m *TLConfig) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLConfig) GetRatingEDecay() int32  { return m.Data2.RatingEDecay }

func (m *TLConfig) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLConfig) GetStickersRecentLimit() int32  { return m.Data2.StickersRecentLimit }

func (m *TLConfig) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLConfig) GetStickersFavedLimit() int32  { return m.Data2.StickersFavedLimit }

func (m *TLConfig) SetChannelsReadMediaPeriod(v int32) { m.Data2.ChannelsReadMediaPeriod = v }
func (m *TLConfig) GetChannelsReadMediaPeriod() int32  { return m.Data2.ChannelsReadMediaPeriod }

func (m *TLConfig) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLConfig) GetTmpSessions() int32  { return m.Data2.TmpSessions }

func (m *TLConfig) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLConfig) GetPinnedDialogsCountMax() int32  { return m.Data2.PinnedDialogsCountMax }

func (m *TLConfig) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLConfig) GetCallReceiveTimeoutMs() int32  { return m.Data2.CallReceiveTimeoutMs }

func (m *TLConfig) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLConfig) GetCallRingTimeoutMs() int32  { return m.Data2.CallRingTimeoutMs }

func (m *TLConfig) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLConfig) GetCallConnectTimeoutMs() int32  { return m.Data2.CallConnectTimeoutMs }

func (m *TLConfig) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLConfig) GetCallPacketTimeoutMs() int32  { return m.Data2.CallPacketTimeoutMs }

func (m *TLConfig) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLConfig) GetMeUrlPrefix() string  { return m.Data2.MeUrlPrefix }

func (m *TLConfig) SetAutoupdateUrlPrefix(v string) { m.Data2.AutoupdateUrlPrefix = v }
func (m *TLConfig) GetAutoupdateUrlPrefix() string  { return m.Data2.AutoupdateUrlPrefix }

func (m *TLConfig) SetGifSearchUsername(v string) { m.Data2.GifSearchUsername = v }
func (m *TLConfig) GetGifSearchUsername() string  { return m.Data2.GifSearchUsername }

func (m *TLConfig) SetVenueSearchUsername(v string) { m.Data2.VenueSearchUsername = v }
func (m *TLConfig) GetVenueSearchUsername() string  { return m.Data2.VenueSearchUsername }

func (m *TLConfig) SetImgSearchUsername(v string) { m.Data2.ImgSearchUsername = v }
func (m *TLConfig) GetImgSearchUsername() string  { return m.Data2.ImgSearchUsername }

func (m *TLConfig) SetStaticMapsProvider(v string) { m.Data2.StaticMapsProvider = v }
func (m *TLConfig) GetStaticMapsProvider() string  { return m.Data2.StaticMapsProvider }

func (m *TLConfig) SetCaptionLengthMax(v int32) { m.Data2.CaptionLengthMax = v }
func (m *TLConfig) GetCaptionLengthMax() int32  { return m.Data2.CaptionLengthMax }

func (m *TLConfig) SetMessageLengthMax(v int32) { m.Data2.MessageLengthMax = v }
func (m *TLConfig) GetMessageLengthMax() int32  { return m.Data2.MessageLengthMax }

func (m *TLConfig) SetWebfileDcId(v int32) { m.Data2.WebfileDcId = v }
func (m *TLConfig) GetWebfileDcId() int32  { return m.Data2.WebfileDcId }

func (m *TLConfig) SetSuggestedLangCode(v string) { m.Data2.SuggestedLangCode = v }
func (m *TLConfig) GetSuggestedLangCode() string  { return m.Data2.SuggestedLangCode }

func (m *TLConfig) SetLangPackVersion(v int32) { m.Data2.LangPackVersion = v }
func (m *TLConfig) GetLangPackVersion() int32  { return m.Data2.LangPackVersion }

func NewTLConfig() *TLConfig {
	return &TLConfig{Data2: &Config_Data{}}
}

func (m *TLConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_config))

	// flags
	var flags uint32 = 0
	if m.GetPhonecallsEnabled() == true {
		flags |= 1 << 1
	}
	if m.GetDefaultP2PContacts() == true {
		flags |= 1 << 3
	}
	if m.GetPreloadFeaturedStickers() == true {
		flags |= 1 << 4
	}
	if m.GetIgnorePhoneEntities() == true {
		flags |= 1 << 5
	}
	if m.GetRevokePmInbox() == true {
		flags |= 1 << 6
	}
	if m.GetBlockedMode() == true {
		flags |= 1 << 8
	}
	if m.GetTmpSessions() != 0 {
		flags |= 1 << 0
	}
	if m.GetAutoupdateUrlPrefix() != "" {
		flags |= 1 << 7
	}
	if m.GetGifSearchUsername() != "" {
		flags |= 1 << 9
	}
	if m.GetVenueSearchUsername() != "" {
		flags |= 1 << 10
	}
	if m.GetImgSearchUsername() != "" {
		flags |= 1 << 11
	}
	if m.GetStaticMapsProvider() != "" {
		flags |= 1 << 12
	}
	if m.GetSuggestedLangCode() != "" {
		flags |= 1 << 2
	}
	if m.GetLangPackVersion() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(m.GetDate())
	x.Int(m.GetExpires())
	x.Bytes(m.GetTestMode().Encode())
	x.Int(m.GetThisDc())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDcOptions())))
	for _, v := range m.GetDcOptions() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.String(m.GetDcTxtDomainName())
	x.Int(m.GetChatSizeMax())
	x.Int(m.GetMegagroupSizeMax())
	x.Int(m.GetForwardedCountMax())
	x.Int(m.GetOnlineUpdatePeriodMs())
	x.Int(m.GetOfflineBlurTimeoutMs())
	x.Int(m.GetOfflineIdleTimeoutMs())
	x.Int(m.GetOnlineCloudTimeoutMs())
	x.Int(m.GetNotifyCloudDelayMs())
	x.Int(m.GetNotifyDefaultDelayMs())
	x.Int(m.GetPushChatPeriodMs())
	x.Int(m.GetPushChatLimit())
	x.Int(m.GetSavedGifsLimit())
	x.Int(m.GetEditTimeLimit())
	x.Int(m.GetRevokeTimeLimit())
	x.Int(m.GetRevokePmTimeLimit())
	x.Int(m.GetRatingEDecay())
	x.Int(m.GetStickersRecentLimit())
	x.Int(m.GetStickersFavedLimit())
	x.Int(m.GetChannelsReadMediaPeriod())
	if m.GetTmpSessions() != 0 {
		x.Int(m.GetTmpSessions())
	}
	x.Int(m.GetPinnedDialogsCountMax())
	x.Int(m.GetCallReceiveTimeoutMs())
	x.Int(m.GetCallRingTimeoutMs())
	x.Int(m.GetCallConnectTimeoutMs())
	x.Int(m.GetCallPacketTimeoutMs())
	x.String(m.GetMeUrlPrefix())
	if m.GetAutoupdateUrlPrefix() != "" {
		x.String(m.GetAutoupdateUrlPrefix())
	}
	if m.GetGifSearchUsername() != "" {
		x.String(m.GetGifSearchUsername())
	}
	if m.GetVenueSearchUsername() != "" {
		x.String(m.GetVenueSearchUsername())
	}
	if m.GetImgSearchUsername() != "" {
		x.String(m.GetImgSearchUsername())
	}
	if m.GetStaticMapsProvider() != "" {
		x.String(m.GetStaticMapsProvider())
	}
	x.Int(m.GetCaptionLengthMax())
	x.Int(m.GetMessageLengthMax())
	x.Int(m.GetWebfileDcId())
	if m.GetSuggestedLangCode() != "" {
		x.String(m.GetSuggestedLangCode())
	}
	if m.GetLangPackVersion() != 0 {
		x.Int(m.GetLangPackVersion())
	}

	return x.buf
}

func (m *TLConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_config))

	// flags
	var flags uint32 = 0
	if m.GetPhonecallsEnabled() == true {
		flags |= 1 << 1
	}
	if m.GetDefaultP2PContacts() == true {
		flags |= 1 << 3
	}
	if m.GetPreloadFeaturedStickers() == true {
		flags |= 1 << 4
	}
	if m.GetIgnorePhoneEntities() == true {
		flags |= 1 << 5
	}
	if m.GetRevokePmInbox() == true {
		flags |= 1 << 6
	}
	if m.GetBlockedMode() == true {
		flags |= 1 << 8
	}
	if m.GetTmpSessions() != 0 {
		flags |= 1 << 0
	}
	if m.GetAutoupdateUrlPrefix() != "" {
		flags |= 1 << 7
	}
	if m.GetGifSearchUsername() != "" {
		flags |= 1 << 9
	}
	if m.GetVenueSearchUsername() != "" {
		flags |= 1 << 10
	}
	if m.GetImgSearchUsername() != "" {
		flags |= 1 << 11
	}
	if m.GetStaticMapsProvider() != "" {
		flags |= 1 << 12
	}
	if m.GetSuggestedLangCode() != "" {
		flags |= 1 << 2
	}
	if m.GetLangPackVersion() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(m.GetDate())
	x.Int(m.GetExpires())
	x.Bytes(m.GetTestMode().EncodeToLayer(layer))
	x.Int(m.GetThisDc())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDcOptions())))
	for _, v := range m.GetDcOptions() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.String(m.GetDcTxtDomainName())
	x.Int(m.GetChatSizeMax())
	x.Int(m.GetMegagroupSizeMax())
	x.Int(m.GetForwardedCountMax())
	x.Int(m.GetOnlineUpdatePeriodMs())
	x.Int(m.GetOfflineBlurTimeoutMs())
	x.Int(m.GetOfflineIdleTimeoutMs())
	x.Int(m.GetOnlineCloudTimeoutMs())
	x.Int(m.GetNotifyCloudDelayMs())
	x.Int(m.GetNotifyDefaultDelayMs())
	x.Int(m.GetPushChatPeriodMs())
	x.Int(m.GetPushChatLimit())
	x.Int(m.GetSavedGifsLimit())
	x.Int(m.GetEditTimeLimit())
	x.Int(m.GetRevokeTimeLimit())
	x.Int(m.GetRevokePmTimeLimit())
	x.Int(m.GetRatingEDecay())
	x.Int(m.GetStickersRecentLimit())
	x.Int(m.GetStickersFavedLimit())
	x.Int(m.GetChannelsReadMediaPeriod())
	if m.GetTmpSessions() != 0 {
		x.Int(m.GetTmpSessions())
	}
	x.Int(m.GetPinnedDialogsCountMax())
	x.Int(m.GetCallReceiveTimeoutMs())
	x.Int(m.GetCallRingTimeoutMs())
	x.Int(m.GetCallConnectTimeoutMs())
	x.Int(m.GetCallPacketTimeoutMs())
	x.String(m.GetMeUrlPrefix())
	if m.GetAutoupdateUrlPrefix() != "" {
		x.String(m.GetAutoupdateUrlPrefix())
	}
	if m.GetGifSearchUsername() != "" {
		x.String(m.GetGifSearchUsername())
	}
	if m.GetVenueSearchUsername() != "" {
		x.String(m.GetVenueSearchUsername())
	}
	if m.GetImgSearchUsername() != "" {
		x.String(m.GetImgSearchUsername())
	}
	if m.GetStaticMapsProvider() != "" {
		x.String(m.GetStaticMapsProvider())
	}
	x.Int(m.GetCaptionLengthMax())
	x.Int(m.GetMessageLengthMax())
	x.Int(m.GetWebfileDcId())
	if m.GetSuggestedLangCode() != "" {
		x.String(m.GetSuggestedLangCode())
	}
	if m.GetLangPackVersion() != 0 {
		x.Int(m.GetLangPackVersion())
	}

	return x.buf
}

func (m *TLConfig) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetPhonecallsEnabled(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetDefaultP2PContacts(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetPreloadFeaturedStickers(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetIgnorePhoneEntities(true)
	}
	if (flags & (1 << 6)) != 0 {
		m.SetRevokePmInbox(true)
	}
	if (flags & (1 << 8)) != 0 {
		m.SetBlockedMode(true)
	}
	m.SetDate(dbuf.Int())
	m.SetExpires(dbuf.Int())
	m10 := &Bool{}
	m10.Decode(dbuf)
	m.SetTestMode(m10)
	m.SetThisDc(dbuf.Int())
	c12 := dbuf.Int()
	if c12 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 12, c12)
		return dbuf.err
	}
	l12 := dbuf.Int()
	v12 := make([]*DcOption, l12)
	for i := int32(0); i < l12; i++ {
		v12[i] = &DcOption{}
		v12[i].Decode(dbuf)
	}
	m.SetDcOptions(v12)

	m.SetDcTxtDomainName(dbuf.String())
	m.SetChatSizeMax(dbuf.Int())
	m.SetMegagroupSizeMax(dbuf.Int())
	m.SetForwardedCountMax(dbuf.Int())
	m.SetOnlineUpdatePeriodMs(dbuf.Int())
	m.SetOfflineBlurTimeoutMs(dbuf.Int())
	m.SetOfflineIdleTimeoutMs(dbuf.Int())
	m.SetOnlineCloudTimeoutMs(dbuf.Int())
	m.SetNotifyCloudDelayMs(dbuf.Int())
	m.SetNotifyDefaultDelayMs(dbuf.Int())
	m.SetPushChatPeriodMs(dbuf.Int())
	m.SetPushChatLimit(dbuf.Int())
	m.SetSavedGifsLimit(dbuf.Int())
	m.SetEditTimeLimit(dbuf.Int())
	m.SetRevokeTimeLimit(dbuf.Int())
	m.SetRevokePmTimeLimit(dbuf.Int())
	m.SetRatingEDecay(dbuf.Int())
	m.SetStickersRecentLimit(dbuf.Int())
	m.SetStickersFavedLimit(dbuf.Int())
	m.SetChannelsReadMediaPeriod(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m.SetTmpSessions(dbuf.Int())
	}
	m.SetPinnedDialogsCountMax(dbuf.Int())
	m.SetCallReceiveTimeoutMs(dbuf.Int())
	m.SetCallRingTimeoutMs(dbuf.Int())
	m.SetCallConnectTimeoutMs(dbuf.Int())
	m.SetCallPacketTimeoutMs(dbuf.Int())
	m.SetMeUrlPrefix(dbuf.String())
	if (flags & (1 << 7)) != 0 {
		m.SetAutoupdateUrlPrefix(dbuf.String())
	}
	if (flags & (1 << 9)) != 0 {
		m.SetGifSearchUsername(dbuf.String())
	}
	if (flags & (1 << 10)) != 0 {
		m.SetVenueSearchUsername(dbuf.String())
	}
	if (flags & (1 << 11)) != 0 {
		m.SetImgSearchUsername(dbuf.String())
	}
	if (flags & (1 << 12)) != 0 {
		m.SetStaticMapsProvider(dbuf.String())
	}
	m.SetCaptionLengthMax(dbuf.Int())
	m.SetMessageLengthMax(dbuf.Int())
	m.SetWebfileDcId(dbuf.Int())
	if (flags & (1 << 2)) != 0 {
		m.SetSuggestedLangCode(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetLangPackVersion(dbuf.Int())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ImportedContact <--
//  + TL_ImportedContact
//

func (m *ImportedContact) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_importedContact:
		t := m.To_ImportedContact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ImportedContact) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_importedContact:
		t := m.To_ImportedContact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ImportedContact) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_importedContact:
		m2 := &TLImportedContact{Data2: &ImportedContact_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// importedContact#d0028438 user_id:int client_id:long = ImportedContact;
func (m *ImportedContact) To_ImportedContact() *TLImportedContact {
	return &TLImportedContact{
		Data2: m.Data2,
	}
}

// importedContact#d0028438 user_id:int client_id:long = ImportedContact;
func (m *TLImportedContact) To_ImportedContact() *ImportedContact {
	return &ImportedContact{
		Constructor: TLConstructor_CRC32_importedContact,
		Data2:       m.Data2,
	}
}

func (m *TLImportedContact) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLImportedContact) GetUserId() int32  { return m.Data2.UserId }

func (m *TLImportedContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLImportedContact) GetClientId() int64  { return m.Data2.ClientId }

func NewTLImportedContact() *TLImportedContact {
	return &TLImportedContact{Data2: &ImportedContact_Data{}}
}

func (m *TLImportedContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_importedContact))

	x.Int(m.GetUserId())
	x.Long(m.GetClientId())

	return x.buf
}

func (m *TLImportedContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_importedContact))

	x.Int(m.GetUserId())
	x.Long(m.GetClientId())

	return x.buf
}

func (m *TLImportedContact) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetClientId(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputContact <--
//  + TL_InputPhoneContact
//

func (m *InputContact) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPhoneContact:
		t := m.To_InputPhoneContact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputContact) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPhoneContact:
		t := m.To_InputPhoneContact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputContact) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPhoneContact:
		m2 := &TLInputPhoneContact{Data2: &InputContact_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPhoneContact#f392b7f4 client_id:long phone:string first_name:string last_name:string = InputContact;
func (m *InputContact) To_InputPhoneContact() *TLInputPhoneContact {
	return &TLInputPhoneContact{
		Data2: m.Data2,
	}
}

// inputPhoneContact#f392b7f4 client_id:long phone:string first_name:string last_name:string = InputContact;
func (m *TLInputPhoneContact) To_InputContact() *InputContact {
	return &InputContact{
		Constructor: TLConstructor_CRC32_inputPhoneContact,
		Data2:       m.Data2,
	}
}

func (m *TLInputPhoneContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLInputPhoneContact) GetClientId() int64  { return m.Data2.ClientId }

func (m *TLInputPhoneContact) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLInputPhoneContact) GetPhone() string  { return m.Data2.Phone }

func (m *TLInputPhoneContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputPhoneContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLInputPhoneContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputPhoneContact) GetLastName() string  { return m.Data2.LastName }

func NewTLInputPhoneContact() *TLInputPhoneContact {
	return &TLInputPhoneContact{Data2: &InputContact_Data{}}
}

func (m *TLInputPhoneContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhoneContact))

	x.Long(m.GetClientId())
	x.String(m.GetPhone())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())

	return x.buf
}

func (m *TLInputPhoneContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhoneContact))

	x.Long(m.GetClientId())
	x.String(m.GetPhone())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())

	return x.buf
}

func (m *TLInputPhoneContact) Decode(dbuf *DecodeBuf) error {
	m.SetClientId(dbuf.Long())
	m.SetPhone(dbuf.String())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_ImportedContacts <--
//  + TL_ContactsImportedContacts
//

func (m *Contacts_ImportedContacts) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_importedContacts:
		t := m.To_ContactsImportedContacts()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_ImportedContacts) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_importedContacts:
		t := m.To_ContactsImportedContacts()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_ImportedContacts) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_importedContacts:
		m2 := &TLContactsImportedContacts{Data2: &Contacts_ImportedContacts_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.importedContacts#77d01c3b imported:Vector<ImportedContact> popular_invites:Vector<PopularContact> retry_contacts:Vector<long> users:Vector<User> = contacts.ImportedContacts;
func (m *Contacts_ImportedContacts) To_ContactsImportedContacts() *TLContactsImportedContacts {
	return &TLContactsImportedContacts{
		Data2: m.Data2,
	}
}

// contacts.importedContacts#77d01c3b imported:Vector<ImportedContact> popular_invites:Vector<PopularContact> retry_contacts:Vector<long> users:Vector<User> = contacts.ImportedContacts;
func (m *TLContactsImportedContacts) To_Contacts_ImportedContacts() *Contacts_ImportedContacts {
	return &Contacts_ImportedContacts{
		Constructor: TLConstructor_CRC32_contacts_importedContacts,
		Data2:       m.Data2,
	}
}

func (m *TLContactsImportedContacts) SetImported(v []*ImportedContact) { m.Data2.Imported = v }
func (m *TLContactsImportedContacts) GetImported() []*ImportedContact  { return m.Data2.Imported }

func (m *TLContactsImportedContacts) SetPopularInvites(v []*PopularContact) {
	m.Data2.PopularInvites = v
}
func (m *TLContactsImportedContacts) GetPopularInvites() []*PopularContact {
	return m.Data2.PopularInvites
}

func (m *TLContactsImportedContacts) SetRetryContacts(v []int64) { m.Data2.RetryContacts = v }
func (m *TLContactsImportedContacts) GetRetryContacts() []int64  { return m.Data2.RetryContacts }

func (m *TLContactsImportedContacts) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsImportedContacts) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsImportedContacts() *TLContactsImportedContacts {
	return &TLContactsImportedContacts{Data2: &Contacts_ImportedContacts_Data{}}
}

func (m *TLContactsImportedContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_importedContacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetImported())))
	for _, v := range m.GetImported() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPopularInvites())))
	for _, v := range m.GetPopularInvites() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.VectorLong(m.GetRetryContacts())

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsImportedContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_importedContacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetImported())))
	for _, v := range m.GetImported() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPopularInvites())))
	for _, v := range m.GetPopularInvites() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.VectorLong(m.GetRetryContacts())

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsImportedContacts) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*ImportedContact, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &ImportedContact{}
		v1[i].Decode(dbuf)
	}
	m.SetImported(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*PopularContact, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &PopularContact{}
		v2[i].Decode(dbuf)
	}
	m.SetPopularInvites(v2)

	m.SetRetryContacts(dbuf.VectorLong())
	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*User, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &User{}
		v4[i].Decode(dbuf)
	}
	m.SetUsers(v4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// EncryptedChat <--
//  + TL_EncryptedChatEmpty
//  + TL_EncryptedChatWaiting
//  + TL_EncryptedChatRequested
//  + TL_EncryptedChat
//  + TL_EncryptedChatDiscarded
//

func (m *EncryptedChat) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_encryptedChatEmpty:
		t := m.To_EncryptedChatEmpty()
		return t.Encode()
	case TLConstructor_CRC32_encryptedChatWaiting:
		t := m.To_EncryptedChatWaiting()
		return t.Encode()
	case TLConstructor_CRC32_encryptedChatRequested:
		t := m.To_EncryptedChatRequested()
		return t.Encode()
	case TLConstructor_CRC32_encryptedChat:
		t := m.To_EncryptedChat()
		return t.Encode()
	case TLConstructor_CRC32_encryptedChatDiscarded:
		t := m.To_EncryptedChatDiscarded()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *EncryptedChat) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_encryptedChatEmpty:
		t := m.To_EncryptedChatEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_encryptedChatWaiting:
		t := m.To_EncryptedChatWaiting()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_encryptedChatRequested:
		t := m.To_EncryptedChatRequested()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_encryptedChat:
		t := m.To_EncryptedChat()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_encryptedChatDiscarded:
		t := m.To_EncryptedChatDiscarded()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *EncryptedChat) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_encryptedChatEmpty:
		m2 := &TLEncryptedChatEmpty{Data2: &EncryptedChat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_encryptedChatWaiting:
		m2 := &TLEncryptedChatWaiting{Data2: &EncryptedChat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_encryptedChatRequested:
		m2 := &TLEncryptedChatRequested{Data2: &EncryptedChat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_encryptedChat:
		m2 := &TLEncryptedChat{Data2: &EncryptedChat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_encryptedChatDiscarded:
		m2 := &TLEncryptedChatDiscarded{Data2: &EncryptedChat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// encryptedChatEmpty#ab7ec0a0 id:int = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatEmpty() *TLEncryptedChatEmpty {
	return &TLEncryptedChatEmpty{
		Data2: m.Data2,
	}
}

// encryptedChatWaiting#3bf703dc id:int access_hash:long date:int admin_id:int participant_id:int = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatWaiting() *TLEncryptedChatWaiting {
	return &TLEncryptedChatWaiting{
		Data2: m.Data2,
	}
}

// encryptedChatRequested#c878527e id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatRequested() *TLEncryptedChatRequested {
	return &TLEncryptedChatRequested{
		Data2: m.Data2,
	}
}

// encryptedChat#fa56ce36 id:int access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChat() *TLEncryptedChat {
	return &TLEncryptedChat{
		Data2: m.Data2,
	}
}

// encryptedChatDiscarded#13d6dd27 id:int = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatDiscarded() *TLEncryptedChatDiscarded {
	return &TLEncryptedChatDiscarded{
		Data2: m.Data2,
	}
}

// encryptedChatEmpty#ab7ec0a0 id:int = EncryptedChat;
func (m *TLEncryptedChatEmpty) To_EncryptedChat() *EncryptedChat {
	return &EncryptedChat{
		Constructor: TLConstructor_CRC32_encryptedChatEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedChatEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatEmpty) GetId() int32  { return m.Data2.Id }

func NewTLEncryptedChatEmpty() *TLEncryptedChatEmpty {
	return &TLEncryptedChatEmpty{Data2: &EncryptedChat_Data{}}
}

func (m *TLEncryptedChatEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLEncryptedChatEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLEncryptedChatEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

// encryptedChatWaiting#3bf703dc id:int access_hash:long date:int admin_id:int participant_id:int = EncryptedChat;
func (m *TLEncryptedChatWaiting) To_EncryptedChat() *EncryptedChat {
	return &EncryptedChat{
		Constructor: TLConstructor_CRC32_encryptedChatWaiting,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedChatWaiting) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatWaiting) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChatWaiting) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatWaiting) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedChatWaiting) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatWaiting) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedChatWaiting) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChatWaiting) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLEncryptedChatWaiting) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatWaiting) GetParticipantId() int32  { return m.Data2.ParticipantId }

func NewTLEncryptedChatWaiting() *TLEncryptedChatWaiting {
	return &TLEncryptedChatWaiting{Data2: &EncryptedChat_Data{}}
}

func (m *TLEncryptedChatWaiting) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatWaiting))

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())

	return x.buf
}

func (m *TLEncryptedChatWaiting) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatWaiting))

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())

	return x.buf
}

func (m *TLEncryptedChatWaiting) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())

	return dbuf.err
}

// encryptedChatRequested#c878527e id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat;
func (m *TLEncryptedChatRequested) To_EncryptedChat() *EncryptedChat {
	return &EncryptedChat{
		Constructor: TLConstructor_CRC32_encryptedChatRequested,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedChatRequested) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatRequested) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChatRequested) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatRequested) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedChatRequested) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatRequested) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedChatRequested) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChatRequested) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLEncryptedChatRequested) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatRequested) GetParticipantId() int32  { return m.Data2.ParticipantId }

func (m *TLEncryptedChatRequested) SetGA(v []byte) { m.Data2.GA = v }
func (m *TLEncryptedChatRequested) GetGA() []byte  { return m.Data2.GA }

func NewTLEncryptedChatRequested() *TLEncryptedChatRequested {
	return &TLEncryptedChatRequested{Data2: &EncryptedChat_Data{}}
}

func (m *TLEncryptedChatRequested) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatRequested))

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGA())

	return x.buf
}

func (m *TLEncryptedChatRequested) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatRequested))

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGA())

	return x.buf
}

func (m *TLEncryptedChatRequested) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())
	m.SetGA(dbuf.StringBytes())

	return dbuf.err
}

// encryptedChat#fa56ce36 id:int access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long = EncryptedChat;
func (m *TLEncryptedChat) To_EncryptedChat() *EncryptedChat {
	return &EncryptedChat{
		Constructor: TLConstructor_CRC32_encryptedChat,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedChat) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChat) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChat) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChat) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedChat) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChat) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedChat) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChat) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLEncryptedChat) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChat) GetParticipantId() int32  { return m.Data2.ParticipantId }

func (m *TLEncryptedChat) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLEncryptedChat) GetGAOrB() []byte  { return m.Data2.GAOrB }

func (m *TLEncryptedChat) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLEncryptedChat) GetKeyFingerprint() int64  { return m.Data2.KeyFingerprint }

func NewTLEncryptedChat() *TLEncryptedChat {
	return &TLEncryptedChat{Data2: &EncryptedChat_Data{}}
}

func (m *TLEncryptedChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChat))

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGAOrB())
	x.Long(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLEncryptedChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChat))

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGAOrB())
	x.Long(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLEncryptedChat) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())
	m.SetGAOrB(dbuf.StringBytes())
	m.SetKeyFingerprint(dbuf.Long())

	return dbuf.err
}

// encryptedChatDiscarded#13d6dd27 id:int = EncryptedChat;
func (m *TLEncryptedChatDiscarded) To_EncryptedChat() *EncryptedChat {
	return &EncryptedChat{
		Constructor: TLConstructor_CRC32_encryptedChatDiscarded,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedChatDiscarded) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatDiscarded) GetId() int32  { return m.Data2.Id }

func NewTLEncryptedChatDiscarded() *TLEncryptedChatDiscarded {
	return &TLEncryptedChatDiscarded{Data2: &EncryptedChat_Data{}}
}

func (m *TLEncryptedChatDiscarded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatDiscarded))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLEncryptedChatDiscarded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedChatDiscarded))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLEncryptedChatDiscarded) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Scheme <--
//  + TL_SchemeNotModified
//  + TL_Scheme
//

func (m *Scheme) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_schemeNotModified:
		t := m.To_SchemeNotModified()
		return t.Encode()
	case TLConstructor_CRC32_scheme:
		t := m.To_Scheme()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Scheme) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_schemeNotModified:
		t := m.To_SchemeNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_scheme:
		t := m.To_Scheme()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Scheme) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_schemeNotModified:
		m2 := &TLSchemeNotModified{Data2: &Scheme_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_scheme:
		m2 := &TLScheme{Data2: &Scheme_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// schemeNotModified#263c9c58 = Scheme;
func (m *Scheme) To_SchemeNotModified() *TLSchemeNotModified {
	return &TLSchemeNotModified{
		Data2: m.Data2,
	}
}

// scheme#4e6ef65e scheme_raw:string types:Vector<SchemeType> methods:Vector<SchemeMethod> version:int = Scheme;
func (m *Scheme) To_Scheme() *TLScheme {
	return &TLScheme{
		Data2: m.Data2,
	}
}

// schemeNotModified#263c9c58 = Scheme;
func (m *TLSchemeNotModified) To_Scheme() *Scheme {
	return &Scheme{
		Constructor: TLConstructor_CRC32_schemeNotModified,
		Data2:       m.Data2,
	}
}

func NewTLSchemeNotModified() *TLSchemeNotModified {
	return &TLSchemeNotModified{Data2: &Scheme_Data{}}
}

func (m *TLSchemeNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeNotModified))

	return x.buf
}

func (m *TLSchemeNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeNotModified))

	return x.buf
}

func (m *TLSchemeNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// scheme#4e6ef65e scheme_raw:string types:Vector<SchemeType> methods:Vector<SchemeMethod> version:int = Scheme;
func (m *TLScheme) To_Scheme() *Scheme {
	return &Scheme{
		Constructor: TLConstructor_CRC32_scheme,
		Data2:       m.Data2,
	}
}

func (m *TLScheme) SetSchemeRaw(v string) { m.Data2.SchemeRaw = v }
func (m *TLScheme) GetSchemeRaw() string  { return m.Data2.SchemeRaw }

func (m *TLScheme) SetTypes(v []*SchemeType) { m.Data2.Types = v }
func (m *TLScheme) GetTypes() []*SchemeType  { return m.Data2.Types }

func (m *TLScheme) SetMethods(v []*SchemeMethod) { m.Data2.Methods = v }
func (m *TLScheme) GetMethods() []*SchemeMethod  { return m.Data2.Methods }

func (m *TLScheme) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLScheme) GetVersion() int32  { return m.Data2.Version }

func NewTLScheme() *TLScheme {
	return &TLScheme{Data2: &Scheme_Data{}}
}

func (m *TLScheme) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_scheme))

	x.String(m.GetSchemeRaw())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTypes())))
	for _, v := range m.GetTypes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMethods())))
	for _, v := range m.GetMethods() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLScheme) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_scheme))

	x.String(m.GetSchemeRaw())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTypes())))
	for _, v := range m.GetTypes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMethods())))
	for _, v := range m.GetMethods() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLScheme) Decode(dbuf *DecodeBuf) error {
	m.SetSchemeRaw(dbuf.String())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*SchemeType, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &SchemeType{}
		v2[i].Decode(dbuf)
	}
	m.SetTypes(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*SchemeMethod, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &SchemeMethod{}
		v3[i].Decode(dbuf)
	}
	m.SetMethods(v3)

	m.SetVersion(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PaymentCharge <--
//  + TL_PaymentCharge
//

func (m *PaymentCharge) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_paymentCharge:
		t := m.To_PaymentCharge()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PaymentCharge) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_paymentCharge:
		t := m.To_PaymentCharge()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PaymentCharge) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_paymentCharge:
		m2 := &TLPaymentCharge{Data2: &PaymentCharge_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// paymentCharge#ea02c27e id:string provider_charge_id:string = PaymentCharge;
func (m *PaymentCharge) To_PaymentCharge() *TLPaymentCharge {
	return &TLPaymentCharge{
		Data2: m.Data2,
	}
}

// paymentCharge#ea02c27e id:string provider_charge_id:string = PaymentCharge;
func (m *TLPaymentCharge) To_PaymentCharge() *PaymentCharge {
	return &PaymentCharge{
		Constructor: TLConstructor_CRC32_paymentCharge,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentCharge) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentCharge) GetId() string  { return m.Data2.Id }

func (m *TLPaymentCharge) SetProviderChargeId(v string) { m.Data2.ProviderChargeId = v }
func (m *TLPaymentCharge) GetProviderChargeId() string  { return m.Data2.ProviderChargeId }

func NewTLPaymentCharge() *TLPaymentCharge {
	return &TLPaymentCharge{Data2: &PaymentCharge_Data{}}
}

func (m *TLPaymentCharge) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_paymentCharge))

	x.String(m.GetId())
	x.String(m.GetProviderChargeId())

	return x.buf
}

func (m *TLPaymentCharge) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_paymentCharge))

	x.String(m.GetId())
	x.String(m.GetProviderChargeId())

	return x.buf
}

func (m *TLPaymentCharge) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.String())
	m.SetProviderChargeId(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_WebAuthorizations <--
//  + TL_AccountWebAuthorizations
//

func (m *Account_WebAuthorizations) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_webAuthorizations:
		t := m.To_AccountWebAuthorizations()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_WebAuthorizations) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_webAuthorizations:
		t := m.To_AccountWebAuthorizations()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_WebAuthorizations) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_webAuthorizations:
		m2 := &TLAccountWebAuthorizations{Data2: &Account_WebAuthorizations_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.webAuthorizations#ed56c9fc authorizations:Vector<WebAuthorization> users:Vector<User> = account.WebAuthorizations;
func (m *Account_WebAuthorizations) To_AccountWebAuthorizations() *TLAccountWebAuthorizations {
	return &TLAccountWebAuthorizations{
		Data2: m.Data2,
	}
}

// account.webAuthorizations#ed56c9fc authorizations:Vector<WebAuthorization> users:Vector<User> = account.WebAuthorizations;
func (m *TLAccountWebAuthorizations) To_Account_WebAuthorizations() *Account_WebAuthorizations {
	return &Account_WebAuthorizations{
		Constructor: TLConstructor_CRC32_account_webAuthorizations,
		Data2:       m.Data2,
	}
}

func (m *TLAccountWebAuthorizations) SetAuthorizations(v []*WebAuthorization) {
	m.Data2.Authorizations = v
}
func (m *TLAccountWebAuthorizations) GetAuthorizations() []*WebAuthorization {
	return m.Data2.Authorizations
}

func (m *TLAccountWebAuthorizations) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountWebAuthorizations) GetUsers() []*User  { return m.Data2.Users }

func NewTLAccountWebAuthorizations() *TLAccountWebAuthorizations {
	return &TLAccountWebAuthorizations{Data2: &Account_WebAuthorizations_Data{}}
}

func (m *TLAccountWebAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_webAuthorizations))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAuthorizations())))
	for _, v := range m.GetAuthorizations() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccountWebAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_webAuthorizations))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAuthorizations())))
	for _, v := range m.GetAuthorizations() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccountWebAuthorizations) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*WebAuthorization, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &WebAuthorization{}
		v1[i].Decode(dbuf)
	}
	m.SetAuthorizations(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SchemeMethod <--
//  + TL_SchemeMethod
//

func (m *SchemeMethod) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_schemeMethod:
		t := m.To_SchemeMethod()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SchemeMethod) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_schemeMethod:
		t := m.To_SchemeMethod()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SchemeMethod) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_schemeMethod:
		m2 := &TLSchemeMethod{Data2: &SchemeMethod_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// schemeMethod#479357c0 id:int method:string params:Vector<SchemeParam> type:string = SchemeMethod;
func (m *SchemeMethod) To_SchemeMethod() *TLSchemeMethod {
	return &TLSchemeMethod{
		Data2: m.Data2,
	}
}

// schemeMethod#479357c0 id:int method:string params:Vector<SchemeParam> type:string = SchemeMethod;
func (m *TLSchemeMethod) To_SchemeMethod() *SchemeMethod {
	return &SchemeMethod{
		Constructor: TLConstructor_CRC32_schemeMethod,
		Data2:       m.Data2,
	}
}

func (m *TLSchemeMethod) SetId(v int32) { m.Data2.Id = v }
func (m *TLSchemeMethod) GetId() int32  { return m.Data2.Id }

func (m *TLSchemeMethod) SetMethod(v string) { m.Data2.Method = v }
func (m *TLSchemeMethod) GetMethod() string  { return m.Data2.Method }

func (m *TLSchemeMethod) SetParams(v []*SchemeParam) { m.Data2.Params = v }
func (m *TLSchemeMethod) GetParams() []*SchemeParam  { return m.Data2.Params }

func (m *TLSchemeMethod) SetType(v string) { m.Data2.Type = v }
func (m *TLSchemeMethod) GetType() string  { return m.Data2.Type }

func NewTLSchemeMethod() *TLSchemeMethod {
	return &TLSchemeMethod{Data2: &SchemeMethod_Data{}}
}

func (m *TLSchemeMethod) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeMethod))

	x.Int(m.GetId())
	x.String(m.GetMethod())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParams())))
	for _, v := range m.GetParams() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.String(m.GetType())

	return x.buf
}

func (m *TLSchemeMethod) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeMethod))

	x.Int(m.GetId())
	x.String(m.GetMethod())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParams())))
	for _, v := range m.GetParams() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.String(m.GetType())

	return x.buf
}

func (m *TLSchemeMethod) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetMethod(dbuf.String())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*SchemeParam, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &SchemeParam{}
		v3[i].Decode(dbuf)
	}
	m.SetParams(v3)

	m.SetType(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputAppEvent <--
//  + TL_InputAppEvent
//

func (m *InputAppEvent) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputAppEvent:
		t := m.To_InputAppEvent()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputAppEvent) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputAppEvent:
		t := m.To_InputAppEvent()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputAppEvent) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputAppEvent:
		m2 := &TLInputAppEvent{Data2: &InputAppEvent_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputAppEvent#770656a8 time:double type:string peer:long data:string = InputAppEvent;
func (m *InputAppEvent) To_InputAppEvent() *TLInputAppEvent {
	return &TLInputAppEvent{
		Data2: m.Data2,
	}
}

// inputAppEvent#770656a8 time:double type:string peer:long data:string = InputAppEvent;
func (m *TLInputAppEvent) To_InputAppEvent() *InputAppEvent {
	return &InputAppEvent{
		Constructor: TLConstructor_CRC32_inputAppEvent,
		Data2:       m.Data2,
	}
}

func (m *TLInputAppEvent) SetTime(v float64) { m.Data2.Time = v }
func (m *TLInputAppEvent) GetTime() float64  { return m.Data2.Time }

func (m *TLInputAppEvent) SetType(v string) { m.Data2.Type = v }
func (m *TLInputAppEvent) GetType() string  { return m.Data2.Type }

func (m *TLInputAppEvent) SetPeer(v int64) { m.Data2.Peer = v }
func (m *TLInputAppEvent) GetPeer() int64  { return m.Data2.Peer }

func (m *TLInputAppEvent) SetData(v string) { m.Data2.Data = v }
func (m *TLInputAppEvent) GetData() string  { return m.Data2.Data }

func NewTLInputAppEvent() *TLInputAppEvent {
	return &TLInputAppEvent{Data2: &InputAppEvent_Data{}}
}

func (m *TLInputAppEvent) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputAppEvent))

	x.Double(m.GetTime())
	x.String(m.GetType())
	x.Long(m.GetPeer())
	x.String(m.GetData())

	return x.buf
}

func (m *TLInputAppEvent) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputAppEvent))

	x.Double(m.GetTime())
	x.String(m.GetType())
	x.Long(m.GetPeer())
	x.String(m.GetData())

	return x.buf
}

func (m *TLInputAppEvent) Decode(dbuf *DecodeBuf) error {
	m.SetTime(dbuf.Double())
	m.SetType(dbuf.String())
	m.SetPeer(dbuf.Long())
	m.SetData(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Updates_State <--
//  + TL_UpdatesState
//

func (m *Updates_State) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_updates_state:
		t := m.To_UpdatesState()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates_State) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_updates_state:
		t := m.To_UpdatesState()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates_State) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_updates_state:
		m2 := &TLUpdatesState{Data2: &Updates_State_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State;
func (m *Updates_State) To_UpdatesState() *TLUpdatesState {
	return &TLUpdatesState{
		Data2: m.Data2,
	}
}

// updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State;
func (m *TLUpdatesState) To_Updates_State() *Updates_State {
	return &Updates_State{
		Constructor: TLConstructor_CRC32_updates_state,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesState) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesState) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesState) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdatesState) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdatesState) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesState) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdatesState) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesState) GetSeq() int32  { return m.Data2.Seq }

func (m *TLUpdatesState) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLUpdatesState) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func NewTLUpdatesState() *TLUpdatesState {
	return &TLUpdatesState{Data2: &Updates_State_Data{}}
}

func (m *TLUpdatesState) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_state))

	x.Int(m.GetPts())
	x.Int(m.GetQts())
	x.Int(m.GetDate())
	x.Int(m.GetSeq())
	x.Int(m.GetUnreadCount())

	return x.buf
}

func (m *TLUpdatesState) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_state))

	x.Int(m.GetPts())
	x.Int(m.GetQts())
	x.Int(m.GetDate())
	x.Int(m.GetSeq())
	x.Int(m.GetUnreadCount())

	return x.buf
}

func (m *TLUpdatesState) Decode(dbuf *DecodeBuf) error {
	m.SetPts(dbuf.Int())
	m.SetQts(dbuf.Int())
	m.SetDate(dbuf.Int())
	m.SetSeq(dbuf.Int())
	m.SetUnreadCount(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// LabeledPrice <--
//  + TL_LabeledPrice
//

func (m *LabeledPrice) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_labeledPrice:
		t := m.To_LabeledPrice()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LabeledPrice) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_labeledPrice:
		t := m.To_LabeledPrice()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LabeledPrice) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_labeledPrice:
		m2 := &TLLabeledPrice{Data2: &LabeledPrice_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// labeledPrice#cb296bf8 label:string amount:long = LabeledPrice;
func (m *LabeledPrice) To_LabeledPrice() *TLLabeledPrice {
	return &TLLabeledPrice{
		Data2: m.Data2,
	}
}

// labeledPrice#cb296bf8 label:string amount:long = LabeledPrice;
func (m *TLLabeledPrice) To_LabeledPrice() *LabeledPrice {
	return &LabeledPrice{
		Constructor: TLConstructor_CRC32_labeledPrice,
		Data2:       m.Data2,
	}
}

func (m *TLLabeledPrice) SetLabel(v string) { m.Data2.Label = v }
func (m *TLLabeledPrice) GetLabel() string  { return m.Data2.Label }

func (m *TLLabeledPrice) SetAmount(v int64) { m.Data2.Amount = v }
func (m *TLLabeledPrice) GetAmount() int64  { return m.Data2.Amount }

func NewTLLabeledPrice() *TLLabeledPrice {
	return &TLLabeledPrice{Data2: &LabeledPrice_Data{}}
}

func (m *TLLabeledPrice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_labeledPrice))

	x.String(m.GetLabel())
	x.Long(m.GetAmount())

	return x.buf
}

func (m *TLLabeledPrice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_labeledPrice))

	x.String(m.GetLabel())
	x.Long(m.GetAmount())

	return x.buf
}

func (m *TLLabeledPrice) Decode(dbuf *DecodeBuf) error {
	m.SetLabel(dbuf.String())
	m.SetAmount(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPhoneCall <--
//  + TL_InputPhoneCall
//

func (m *InputPhoneCall) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPhoneCall:
		t := m.To_InputPhoneCall()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPhoneCall) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPhoneCall:
		t := m.To_InputPhoneCall()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPhoneCall) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPhoneCall:
		m2 := &TLInputPhoneCall{Data2: &InputPhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPhoneCall#1e36fded id:long access_hash:long = InputPhoneCall;
func (m *InputPhoneCall) To_InputPhoneCall() *TLInputPhoneCall {
	return &TLInputPhoneCall{
		Data2: m.Data2,
	}
}

// inputPhoneCall#1e36fded id:long access_hash:long = InputPhoneCall;
func (m *TLInputPhoneCall) To_InputPhoneCall() *InputPhoneCall {
	return &InputPhoneCall{
		Constructor: TLConstructor_CRC32_inputPhoneCall,
		Data2:       m.Data2,
	}
}

func (m *TLInputPhoneCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoneCall) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhoneCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoneCall) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputPhoneCall() *TLInputPhoneCall {
	return &TLInputPhoneCall{Data2: &InputPhoneCall_Data{}}
}

func (m *TLInputPhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhoneCall))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhoneCall))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPhoneCall) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_Support <--
//  + TL_HelpSupport
//

func (m *Help_Support) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_support:
		t := m.To_HelpSupport()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_Support) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_support:
		t := m.To_HelpSupport()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_Support) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_support:
		m2 := &TLHelpSupport{Data2: &Help_Support_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.support#17c6b5f6 phone_number:string user:User = help.Support;
func (m *Help_Support) To_HelpSupport() *TLHelpSupport {
	return &TLHelpSupport{
		Data2: m.Data2,
	}
}

// help.support#17c6b5f6 phone_number:string user:User = help.Support;
func (m *TLHelpSupport) To_Help_Support() *Help_Support {
	return &Help_Support{
		Constructor: TLConstructor_CRC32_help_support,
		Data2:       m.Data2,
	}
}

func (m *TLHelpSupport) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLHelpSupport) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLHelpSupport) SetUser(v *User) { m.Data2.User = v }
func (m *TLHelpSupport) GetUser() *User  { return m.Data2.User }

func NewTLHelpSupport() *TLHelpSupport {
	return &TLHelpSupport{Data2: &Help_Support_Data{}}
}

func (m *TLHelpSupport) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_support))

	x.String(m.GetPhoneNumber())
	x.Bytes(m.GetUser().Encode())

	return x.buf
}

func (m *TLHelpSupport) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_support))

	x.String(m.GetPhoneNumber())
	x.Bytes(m.GetUser().EncodeToLayer(layer))

	return x.buf
}

func (m *TLHelpSupport) Decode(dbuf *DecodeBuf) error {
	m.SetPhoneNumber(dbuf.String())
	m2 := &User{}
	m2.Decode(dbuf)
	m.SetUser(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_PasswordInputSettings <--
//  + TL_AccountPasswordInputSettings
//

func (m *Account_PasswordInputSettings) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_passwordInputSettings:
		t := m.To_AccountPasswordInputSettings()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_PasswordInputSettings) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_passwordInputSettings:
		t := m.To_AccountPasswordInputSettings()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_PasswordInputSettings) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_passwordInputSettings:
		m2 := &TLAccountPasswordInputSettings{Data2: &Account_PasswordInputSettings_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.passwordInputSettings#c23727c9 flags:# new_algo:flags.0?PasswordKdfAlgo new_password_hash:flags.0?bytes hint:flags.0?string email:flags.1?string new_secure_settings:flags.2?SecureSecretSettings = account.PasswordInputSettings;
func (m *Account_PasswordInputSettings) To_AccountPasswordInputSettings() *TLAccountPasswordInputSettings {
	return &TLAccountPasswordInputSettings{
		Data2: m.Data2,
	}
}

// account.passwordInputSettings#c23727c9 flags:# new_algo:flags.0?PasswordKdfAlgo new_password_hash:flags.0?bytes hint:flags.0?string email:flags.1?string new_secure_settings:flags.2?SecureSecretSettings = account.PasswordInputSettings;
func (m *TLAccountPasswordInputSettings) To_Account_PasswordInputSettings() *Account_PasswordInputSettings {
	return &Account_PasswordInputSettings{
		Constructor: TLConstructor_CRC32_account_passwordInputSettings,
		Data2:       m.Data2,
	}
}

func (m *TLAccountPasswordInputSettings) SetNewAlgo(v *PasswordKdfAlgo) { m.Data2.NewAlgo = v }
func (m *TLAccountPasswordInputSettings) GetNewAlgo() *PasswordKdfAlgo  { return m.Data2.NewAlgo }

func (m *TLAccountPasswordInputSettings) SetNewPasswordHash(v []byte) { m.Data2.NewPasswordHash = v }
func (m *TLAccountPasswordInputSettings) GetNewPasswordHash() []byte  { return m.Data2.NewPasswordHash }

func (m *TLAccountPasswordInputSettings) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPasswordInputSettings) GetHint() string  { return m.Data2.Hint }

func (m *TLAccountPasswordInputSettings) SetEmail(v string) { m.Data2.Email = v }
func (m *TLAccountPasswordInputSettings) GetEmail() string  { return m.Data2.Email }

func (m *TLAccountPasswordInputSettings) SetNewSecureSettings(v *SecureSecretSettings) {
	m.Data2.NewSecureSettings = v
}
func (m *TLAccountPasswordInputSettings) GetNewSecureSettings() *SecureSecretSettings {
	return m.Data2.NewSecureSettings
}

func NewTLAccountPasswordInputSettings() *TLAccountPasswordInputSettings {
	return &TLAccountPasswordInputSettings{Data2: &Account_PasswordInputSettings_Data{}}
}

func (m *TLAccountPasswordInputSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_passwordInputSettings))

	// flags
	var flags uint32 = 0
	if m.GetNewAlgo() != nil {
		flags |= 1 << 0
	}
	if m.GetNewPasswordHash() != nil {
		flags |= 1 << 0
	}
	if m.GetHint() != "" {
		flags |= 1 << 0
	}
	if m.GetEmail() != "" {
		flags |= 1 << 1
	}
	if m.GetNewSecureSettings() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetNewAlgo() != nil {
		x.Bytes(m.GetNewAlgo().Encode())
	}
	if m.GetNewPasswordHash() != nil {
		x.StringBytes(m.GetNewPasswordHash())
	}
	if m.GetHint() != "" {
		x.String(m.GetHint())
	}
	if m.GetEmail() != "" {
		x.String(m.GetEmail())
	}
	if m.GetNewSecureSettings() != nil {
		x.Bytes(m.GetNewSecureSettings().Encode())
	}

	return x.buf
}

func (m *TLAccountPasswordInputSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_passwordInputSettings))

	// flags
	var flags uint32 = 0
	if m.GetNewAlgo() != nil {
		flags |= 1 << 0
	}
	if m.GetNewPasswordHash() != nil {
		flags |= 1 << 0
	}
	if m.GetHint() != "" {
		flags |= 1 << 0
	}
	if m.GetEmail() != "" {
		flags |= 1 << 1
	}
	if m.GetNewSecureSettings() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetNewAlgo() != nil {
		x.Bytes(m.GetNewAlgo().EncodeToLayer(layer))
	}
	if m.GetNewPasswordHash() != nil {
		x.StringBytes(m.GetNewPasswordHash())
	}
	if m.GetHint() != "" {
		x.String(m.GetHint())
	}
	if m.GetEmail() != "" {
		x.String(m.GetEmail())
	}
	if m.GetNewSecureSettings() != nil {
		x.Bytes(m.GetNewSecureSettings().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAccountPasswordInputSettings) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m2 := &PasswordKdfAlgo{}
		m2.Decode(dbuf)
		m.SetNewAlgo(m2)
	}
	if (flags & (1 << 0)) != 0 {
		m.SetNewPasswordHash(dbuf.StringBytes())
	}
	if (flags & (1 << 0)) != 0 {
		m.SetHint(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetEmail(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m6 := &SecureSecretSettings{}
		m6.Decode(dbuf)
		m.SetNewSecureSettings(m6)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PhoneConnection <--
//  + TL_PhoneConnection
//

func (m *PhoneConnection) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_phoneConnection:
		t := m.To_PhoneConnection()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneConnection) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_phoneConnection:
		t := m.To_PhoneConnection()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneConnection) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_phoneConnection:
		m2 := &TLPhoneConnection{Data2: &PhoneConnection_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// phoneConnection#9d4c17c0 id:long ip:string ipv6:string port:int peer_tag:bytes = PhoneConnection;
func (m *PhoneConnection) To_PhoneConnection() *TLPhoneConnection {
	return &TLPhoneConnection{
		Data2: m.Data2,
	}
}

// phoneConnection#9d4c17c0 id:long ip:string ipv6:string port:int peer_tag:bytes = PhoneConnection;
func (m *TLPhoneConnection) To_PhoneConnection() *PhoneConnection {
	return &PhoneConnection{
		Constructor: TLConstructor_CRC32_phoneConnection,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneConnection) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneConnection) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneConnection) SetIp(v string) { m.Data2.Ip = v }
func (m *TLPhoneConnection) GetIp() string  { return m.Data2.Ip }

func (m *TLPhoneConnection) SetIpv6(v string) { m.Data2.Ipv6 = v }
func (m *TLPhoneConnection) GetIpv6() string  { return m.Data2.Ipv6 }

func (m *TLPhoneConnection) SetPort(v int32) { m.Data2.Port = v }
func (m *TLPhoneConnection) GetPort() int32  { return m.Data2.Port }

func (m *TLPhoneConnection) SetPeerTag(v []byte) { m.Data2.PeerTag = v }
func (m *TLPhoneConnection) GetPeerTag() []byte  { return m.Data2.PeerTag }

func NewTLPhoneConnection() *TLPhoneConnection {
	return &TLPhoneConnection{Data2: &PhoneConnection_Data{}}
}

func (m *TLPhoneConnection) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneConnection))

	x.Long(m.GetId())
	x.String(m.GetIp())
	x.String(m.GetIpv6())
	x.Int(m.GetPort())
	x.StringBytes(m.GetPeerTag())

	return x.buf
}

func (m *TLPhoneConnection) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneConnection))

	x.Long(m.GetId())
	x.String(m.GetIp())
	x.String(m.GetIpv6())
	x.Int(m.GetPort())
	x.StringBytes(m.GetPeerTag())

	return x.buf
}

func (m *TLPhoneConnection) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetIp(dbuf.String())
	m.SetIpv6(dbuf.String())
	m.SetPort(dbuf.Int())
	m.SetPeerTag(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Peer <--
//  + TL_PeerUser
//  + TL_PeerChat
//  + TL_PeerChannel
//

func (m *Peer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_peerUser:
		t := m.To_PeerUser()
		return t.Encode()
	case TLConstructor_CRC32_peerChat:
		t := m.To_PeerChat()
		return t.Encode()
	case TLConstructor_CRC32_peerChannel:
		t := m.To_PeerChannel()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Peer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_peerUser:
		t := m.To_PeerUser()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_peerChat:
		t := m.To_PeerChat()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_peerChannel:
		t := m.To_PeerChannel()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Peer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_peerUser:
		m2 := &TLPeerUser{Data2: &Peer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_peerChat:
		m2 := &TLPeerChat{Data2: &Peer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_peerChannel:
		m2 := &TLPeerChannel{Data2: &Peer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// peerUser#9db1bc6d user_id:int = Peer;
func (m *Peer) To_PeerUser() *TLPeerUser {
	return &TLPeerUser{
		Data2: m.Data2,
	}
}

// peerChat#bad0e5bb chat_id:int = Peer;
func (m *Peer) To_PeerChat() *TLPeerChat {
	return &TLPeerChat{
		Data2: m.Data2,
	}
}

// peerChannel#bddde532 channel_id:int = Peer;
func (m *Peer) To_PeerChannel() *TLPeerChannel {
	return &TLPeerChannel{
		Data2: m.Data2,
	}
}

// peerUser#9db1bc6d user_id:int = Peer;
func (m *TLPeerUser) To_Peer() *Peer {
	return &Peer{
		Constructor: TLConstructor_CRC32_peerUser,
		Data2:       m.Data2,
	}
}

func (m *TLPeerUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLPeerUser) GetUserId() int32  { return m.Data2.UserId }

func NewTLPeerUser() *TLPeerUser {
	return &TLPeerUser{Data2: &Peer_Data{}}
}

func (m *TLPeerUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerUser))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLPeerUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerUser))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLPeerUser) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// peerChat#bad0e5bb chat_id:int = Peer;
func (m *TLPeerChat) To_Peer() *Peer {
	return &Peer{
		Constructor: TLConstructor_CRC32_peerChat,
		Data2:       m.Data2,
	}
}

func (m *TLPeerChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLPeerChat) GetChatId() int32  { return m.Data2.ChatId }

func NewTLPeerChat() *TLPeerChat {
	return &TLPeerChat{Data2: &Peer_Data{}}
}

func (m *TLPeerChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerChat))

	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLPeerChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerChat))

	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLPeerChat) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())

	return dbuf.err
}

// peerChannel#bddde532 channel_id:int = Peer;
func (m *TLPeerChannel) To_Peer() *Peer {
	return &Peer{
		Constructor: TLConstructor_CRC32_peerChannel,
		Data2:       m.Data2,
	}
}

func (m *TLPeerChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLPeerChannel) GetChannelId() int32  { return m.Data2.ChannelId }

func NewTLPeerChannel() *TLPeerChannel {
	return &TLPeerChannel{Data2: &Peer_Data{}}
}

func (m *TLPeerChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerChannel))

	x.Int(m.GetChannelId())

	return x.buf
}

func (m *TLPeerChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerChannel))

	x.Int(m.GetChannelId())

	return x.buf
}

func (m *TLPeerChannel) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Dialogs <--
//  + TL_MessagesDialogs
//  + TL_MessagesDialogsSlice
//  + TL_MessagesDialogsNotModified
//

func (m *Messages_Dialogs) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_dialogs:
		t := m.To_MessagesDialogs()
		return t.Encode()
	case TLConstructor_CRC32_messages_dialogsSlice:
		t := m.To_MessagesDialogsSlice()
		return t.Encode()
	case TLConstructor_CRC32_messages_dialogsNotModified:
		t := m.To_MessagesDialogsNotModified()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Dialogs) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_dialogs:
		t := m.To_MessagesDialogs()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_dialogsSlice:
		t := m.To_MessagesDialogsSlice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_dialogsNotModified:
		t := m.To_MessagesDialogsNotModified()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Dialogs) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_dialogs:
		m2 := &TLMessagesDialogs{Data2: &Messages_Dialogs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_dialogsSlice:
		m2 := &TLMessagesDialogsSlice{Data2: &Messages_Dialogs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_dialogsNotModified:
		m2 := &TLMessagesDialogsNotModified{Data2: &Messages_Dialogs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.dialogs#15ba6c40 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *Messages_Dialogs) To_MessagesDialogs() *TLMessagesDialogs {
	return &TLMessagesDialogs{
		Data2: m.Data2,
	}
}

// messages.dialogsSlice#71e094f3 count:int dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *Messages_Dialogs) To_MessagesDialogsSlice() *TLMessagesDialogsSlice {
	return &TLMessagesDialogsSlice{
		Data2: m.Data2,
	}
}

// messages.dialogsNotModified#f0e3e596 count:int = messages.Dialogs;
func (m *Messages_Dialogs) To_MessagesDialogsNotModified() *TLMessagesDialogsNotModified {
	return &TLMessagesDialogsNotModified{
		Data2: m.Data2,
	}
}

// messages.dialogs#15ba6c40 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *TLMessagesDialogs) To_Messages_Dialogs() *Messages_Dialogs {
	return &Messages_Dialogs{
		Constructor: TLConstructor_CRC32_messages_dialogs,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesDialogs) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesDialogs) GetDialogs() []*Dialog  { return m.Data2.Dialogs }

func (m *TLMessagesDialogs) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDialogs) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesDialogs) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDialogs) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesDialogs) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDialogs) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesDialogs() *TLMessagesDialogs {
	return &TLMessagesDialogs{Data2: &Messages_Dialogs_Data{}}
}

func (m *TLMessagesDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dialogs))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDialogs())))
	for _, v := range m.GetDialogs() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dialogs))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDialogs())))
	for _, v := range m.GetDialogs() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesDialogs) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Dialog, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Dialog{}
		v1[i].Decode(dbuf)
	}
	m.SetDialogs(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Message, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Message{}
		v2[i].Decode(dbuf)
	}
	m.SetMessages(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*User, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &User{}
		v4[i].Decode(dbuf)
	}
	m.SetUsers(v4)

	return dbuf.err
}

// messages.dialogsSlice#71e094f3 count:int dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *TLMessagesDialogsSlice) To_Messages_Dialogs() *Messages_Dialogs {
	return &Messages_Dialogs{
		Constructor: TLConstructor_CRC32_messages_dialogsSlice,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesDialogsSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesDialogsSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesDialogsSlice) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesDialogsSlice) GetDialogs() []*Dialog  { return m.Data2.Dialogs }

func (m *TLMessagesDialogsSlice) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDialogsSlice) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesDialogsSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDialogsSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesDialogsSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDialogsSlice) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesDialogsSlice() *TLMessagesDialogsSlice {
	return &TLMessagesDialogsSlice{Data2: &Messages_Dialogs_Data{}}
}

func (m *TLMessagesDialogsSlice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dialogsSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDialogs())))
	for _, v := range m.GetDialogs() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesDialogsSlice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dialogsSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDialogs())))
	for _, v := range m.GetDialogs() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesDialogsSlice) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Dialog, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Dialog{}
		v2[i].Decode(dbuf)
	}
	m.SetDialogs(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Message, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Message{}
		v3[i].Decode(dbuf)
	}
	m.SetMessages(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*Chat, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &Chat{}
		v4[i].Decode(dbuf)
	}
	m.SetChats(v4)

	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*User, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &User{}
		v5[i].Decode(dbuf)
	}
	m.SetUsers(v5)

	return dbuf.err
}

// messages.dialogsNotModified#f0e3e596 count:int = messages.Dialogs;
func (m *TLMessagesDialogsNotModified) To_Messages_Dialogs() *Messages_Dialogs {
	return &Messages_Dialogs{
		Constructor: TLConstructor_CRC32_messages_dialogsNotModified,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesDialogsNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesDialogsNotModified) GetCount() int32  { return m.Data2.Count }

func NewTLMessagesDialogsNotModified() *TLMessagesDialogsNotModified {
	return &TLMessagesDialogsNotModified{Data2: &Messages_Dialogs_Data{}}
}

func (m *TLMessagesDialogsNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dialogsNotModified))

	x.Int(m.GetCount())

	return x.buf
}

func (m *TLMessagesDialogsNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dialogsNotModified))

	x.Int(m.GetCount())

	return x.buf
}

func (m *TLMessagesDialogsNotModified) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Update <--
//  + TL_UpdateNewMessage
//  + TL_UpdateMessageID
//  + TL_UpdateDeleteMessages
//  + TL_UpdateUserTyping
//  + TL_UpdateChatUserTyping
//  + TL_UpdateChatParticipants
//  + TL_UpdateUserStatus
//  + TL_UpdateUserName
//  + TL_UpdateUserPhoto
//  + TL_UpdateContactRegistered
//  + TL_UpdateContactLink
//  + TL_UpdateNewEncryptedMessage
//  + TL_UpdateEncryptedChatTyping
//  + TL_UpdateEncryption
//  + TL_UpdateEncryptedMessagesRead
//  + TL_UpdateChatParticipantAdd
//  + TL_UpdateChatParticipantDelete
//  + TL_UpdateDcOptions
//  + TL_UpdateUserBlocked
//  + TL_UpdateNotifySettings
//  + TL_UpdateServiceNotification
//  + TL_UpdatePrivacy
//  + TL_UpdateUserPhone
//  + TL_UpdateReadHistoryInbox
//  + TL_UpdateReadHistoryOutbox
//  + TL_UpdateWebPage
//  + TL_UpdateReadMessagesContents
//  + TL_UpdateChannelTooLong
//  + TL_UpdateChannel
//  + TL_UpdateNewChannelMessage
//  + TL_UpdateReadChannelInbox
//  + TL_UpdateDeleteChannelMessages
//  + TL_UpdateChannelMessageViews
//  + TL_UpdateChatAdmins
//  + TL_UpdateChatParticipantAdmin
//  + TL_UpdateNewStickerSet
//  + TL_UpdateStickerSetsOrder
//  + TL_UpdateStickerSets
//  + TL_UpdateSavedGifs
//  + TL_UpdateBotInlineQuery
//  + TL_UpdateBotInlineSend
//  + TL_UpdateEditChannelMessage
//  + TL_UpdateChannelPinnedMessage
//  + TL_UpdateBotCallbackQuery
//  + TL_UpdateEditMessage
//  + TL_UpdateInlineBotCallbackQuery
//  + TL_UpdateReadChannelOutbox
//  + TL_UpdateDraftMessage
//  + TL_UpdateReadFeaturedStickers
//  + TL_UpdateRecentStickers
//  + TL_UpdateConfig
//  + TL_UpdatePtsChanged
//  + TL_UpdateChannelWebPage
//  + TL_UpdateDialogPinned
//  + TL_UpdatePinnedDialogs
//  + TL_UpdateBotWebhookJSON
//  + TL_UpdateBotWebhookJSONQuery
//  + TL_UpdateBotShippingQuery
//  + TL_UpdateBotPrecheckoutQuery
//  + TL_UpdatePhoneCall
//  + TL_UpdateLangPackTooLong
//  + TL_UpdateLangPack
//  + TL_UpdateFavedStickers
//  + TL_UpdateChannelReadMessagesContents
//  + TL_UpdateContactsReset
//  + TL_UpdateChannelAvailableMessages
//  + TL_UpdateDialogUnreadMark
//

func (m *Update) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_updateNewMessage:
		t := m.To_UpdateNewMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateMessageID:
		t := m.To_UpdateMessageID()
		return t.Encode()
	case TLConstructor_CRC32_updateDeleteMessages:
		t := m.To_UpdateDeleteMessages()
		return t.Encode()
	case TLConstructor_CRC32_updateUserTyping:
		t := m.To_UpdateUserTyping()
		return t.Encode()
	case TLConstructor_CRC32_updateChatUserTyping:
		t := m.To_UpdateChatUserTyping()
		return t.Encode()
	case TLConstructor_CRC32_updateChatParticipants:
		t := m.To_UpdateChatParticipants()
		return t.Encode()
	case TLConstructor_CRC32_updateUserStatus:
		t := m.To_UpdateUserStatus()
		return t.Encode()
	case TLConstructor_CRC32_updateUserName:
		t := m.To_UpdateUserName()
		return t.Encode()
	case TLConstructor_CRC32_updateUserPhoto:
		t := m.To_UpdateUserPhoto()
		return t.Encode()
	case TLConstructor_CRC32_updateContactRegistered:
		t := m.To_UpdateContactRegistered()
		return t.Encode()
	case TLConstructor_CRC32_updateContactLink:
		t := m.To_UpdateContactLink()
		return t.Encode()
	case TLConstructor_CRC32_updateNewEncryptedMessage:
		t := m.To_UpdateNewEncryptedMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateEncryptedChatTyping:
		t := m.To_UpdateEncryptedChatTyping()
		return t.Encode()
	case TLConstructor_CRC32_updateEncryption:
		t := m.To_UpdateEncryption()
		return t.Encode()
	case TLConstructor_CRC32_updateEncryptedMessagesRead:
		t := m.To_UpdateEncryptedMessagesRead()
		return t.Encode()
	case TLConstructor_CRC32_updateChatParticipantAdd:
		t := m.To_UpdateChatParticipantAdd()
		return t.Encode()
	case TLConstructor_CRC32_updateChatParticipantDelete:
		t := m.To_UpdateChatParticipantDelete()
		return t.Encode()
	case TLConstructor_CRC32_updateDcOptions:
		t := m.To_UpdateDcOptions()
		return t.Encode()
	case TLConstructor_CRC32_updateUserBlocked:
		t := m.To_UpdateUserBlocked()
		return t.Encode()
	case TLConstructor_CRC32_updateNotifySettings:
		t := m.To_UpdateNotifySettings()
		return t.Encode()
	case TLConstructor_CRC32_updateServiceNotification:
		t := m.To_UpdateServiceNotification()
		return t.Encode()
	case TLConstructor_CRC32_updatePrivacy:
		t := m.To_UpdatePrivacy()
		return t.Encode()
	case TLConstructor_CRC32_updateUserPhone:
		t := m.To_UpdateUserPhone()
		return t.Encode()
	case TLConstructor_CRC32_updateReadHistoryInbox:
		t := m.To_UpdateReadHistoryInbox()
		return t.Encode()
	case TLConstructor_CRC32_updateReadHistoryOutbox:
		t := m.To_UpdateReadHistoryOutbox()
		return t.Encode()
	case TLConstructor_CRC32_updateWebPage:
		t := m.To_UpdateWebPage()
		return t.Encode()
	case TLConstructor_CRC32_updateReadMessagesContents:
		t := m.To_UpdateReadMessagesContents()
		return t.Encode()
	case TLConstructor_CRC32_updateChannelTooLong:
		t := m.To_UpdateChannelTooLong()
		return t.Encode()
	case TLConstructor_CRC32_updateChannel:
		t := m.To_UpdateChannel()
		return t.Encode()
	case TLConstructor_CRC32_updateNewChannelMessage:
		t := m.To_UpdateNewChannelMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateReadChannelInbox:
		t := m.To_UpdateReadChannelInbox()
		return t.Encode()
	case TLConstructor_CRC32_updateDeleteChannelMessages:
		t := m.To_UpdateDeleteChannelMessages()
		return t.Encode()
	case TLConstructor_CRC32_updateChannelMessageViews:
		t := m.To_UpdateChannelMessageViews()
		return t.Encode()
	case TLConstructor_CRC32_updateChatAdmins:
		t := m.To_UpdateChatAdmins()
		return t.Encode()
	case TLConstructor_CRC32_updateChatParticipantAdmin:
		t := m.To_UpdateChatParticipantAdmin()
		return t.Encode()
	case TLConstructor_CRC32_updateNewStickerSet:
		t := m.To_UpdateNewStickerSet()
		return t.Encode()
	case TLConstructor_CRC32_updateStickerSetsOrder:
		t := m.To_UpdateStickerSetsOrder()
		return t.Encode()
	case TLConstructor_CRC32_updateStickerSets:
		t := m.To_UpdateStickerSets()
		return t.Encode()
	case TLConstructor_CRC32_updateSavedGifs:
		t := m.To_UpdateSavedGifs()
		return t.Encode()
	case TLConstructor_CRC32_updateBotInlineQuery:
		t := m.To_UpdateBotInlineQuery()
		return t.Encode()
	case TLConstructor_CRC32_updateBotInlineSend:
		t := m.To_UpdateBotInlineSend()
		return t.Encode()
	case TLConstructor_CRC32_updateEditChannelMessage:
		t := m.To_UpdateEditChannelMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateChannelPinnedMessage:
		t := m.To_UpdateChannelPinnedMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateBotCallbackQuery:
		t := m.To_UpdateBotCallbackQuery()
		return t.Encode()
	case TLConstructor_CRC32_updateEditMessage:
		t := m.To_UpdateEditMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateInlineBotCallbackQuery:
		t := m.To_UpdateInlineBotCallbackQuery()
		return t.Encode()
	case TLConstructor_CRC32_updateReadChannelOutbox:
		t := m.To_UpdateReadChannelOutbox()
		return t.Encode()
	case TLConstructor_CRC32_updateDraftMessage:
		t := m.To_UpdateDraftMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateReadFeaturedStickers:
		t := m.To_UpdateReadFeaturedStickers()
		return t.Encode()
	case TLConstructor_CRC32_updateRecentStickers:
		t := m.To_UpdateRecentStickers()
		return t.Encode()
	case TLConstructor_CRC32_updateConfig:
		t := m.To_UpdateConfig()
		return t.Encode()
	case TLConstructor_CRC32_updatePtsChanged:
		t := m.To_UpdatePtsChanged()
		return t.Encode()
	case TLConstructor_CRC32_updateChannelWebPage:
		t := m.To_UpdateChannelWebPage()
		return t.Encode()
	case TLConstructor_CRC32_updateDialogPinned:
		t := m.To_UpdateDialogPinned()
		return t.Encode()
	case TLConstructor_CRC32_updatePinnedDialogs:
		t := m.To_UpdatePinnedDialogs()
		return t.Encode()
	case TLConstructor_CRC32_updateBotWebhookJSON:
		t := m.To_UpdateBotWebhookJSON()
		return t.Encode()
	case TLConstructor_CRC32_updateBotWebhookJSONQuery:
		t := m.To_UpdateBotWebhookJSONQuery()
		return t.Encode()
	case TLConstructor_CRC32_updateBotShippingQuery:
		t := m.To_UpdateBotShippingQuery()
		return t.Encode()
	case TLConstructor_CRC32_updateBotPrecheckoutQuery:
		t := m.To_UpdateBotPrecheckoutQuery()
		return t.Encode()
	case TLConstructor_CRC32_updatePhoneCall:
		t := m.To_UpdatePhoneCall()
		return t.Encode()
	case TLConstructor_CRC32_updateLangPackTooLong:
		t := m.To_UpdateLangPackTooLong()
		return t.Encode()
	case TLConstructor_CRC32_updateLangPack:
		t := m.To_UpdateLangPack()
		return t.Encode()
	case TLConstructor_CRC32_updateFavedStickers:
		t := m.To_UpdateFavedStickers()
		return t.Encode()
	case TLConstructor_CRC32_updateChannelReadMessagesContents:
		t := m.To_UpdateChannelReadMessagesContents()
		return t.Encode()
	case TLConstructor_CRC32_updateContactsReset:
		t := m.To_UpdateContactsReset()
		return t.Encode()
	case TLConstructor_CRC32_updateChannelAvailableMessages:
		t := m.To_UpdateChannelAvailableMessages()
		return t.Encode()
	case TLConstructor_CRC32_updateDialogUnreadMark:
		t := m.To_UpdateDialogUnreadMark()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Update) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_updateNewMessage:
		t := m.To_UpdateNewMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateMessageID:
		t := m.To_UpdateMessageID()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateDeleteMessages:
		t := m.To_UpdateDeleteMessages()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateUserTyping:
		t := m.To_UpdateUserTyping()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChatUserTyping:
		t := m.To_UpdateChatUserTyping()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChatParticipants:
		t := m.To_UpdateChatParticipants()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateUserStatus:
		t := m.To_UpdateUserStatus()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateUserName:
		t := m.To_UpdateUserName()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateUserPhoto:
		t := m.To_UpdateUserPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateContactRegistered:
		t := m.To_UpdateContactRegistered()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateContactLink:
		t := m.To_UpdateContactLink()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateNewEncryptedMessage:
		t := m.To_UpdateNewEncryptedMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateEncryptedChatTyping:
		t := m.To_UpdateEncryptedChatTyping()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateEncryption:
		t := m.To_UpdateEncryption()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateEncryptedMessagesRead:
		t := m.To_UpdateEncryptedMessagesRead()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChatParticipantAdd:
		t := m.To_UpdateChatParticipantAdd()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChatParticipantDelete:
		t := m.To_UpdateChatParticipantDelete()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateDcOptions:
		t := m.To_UpdateDcOptions()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateUserBlocked:
		t := m.To_UpdateUserBlocked()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateNotifySettings:
		t := m.To_UpdateNotifySettings()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateServiceNotification:
		t := m.To_UpdateServiceNotification()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updatePrivacy:
		t := m.To_UpdatePrivacy()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateUserPhone:
		t := m.To_UpdateUserPhone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateReadHistoryInbox:
		t := m.To_UpdateReadHistoryInbox()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateReadHistoryOutbox:
		t := m.To_UpdateReadHistoryOutbox()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateWebPage:
		t := m.To_UpdateWebPage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateReadMessagesContents:
		t := m.To_UpdateReadMessagesContents()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannelTooLong:
		t := m.To_UpdateChannelTooLong()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannel:
		t := m.To_UpdateChannel()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateNewChannelMessage:
		t := m.To_UpdateNewChannelMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateReadChannelInbox:
		t := m.To_UpdateReadChannelInbox()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateDeleteChannelMessages:
		t := m.To_UpdateDeleteChannelMessages()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannelMessageViews:
		t := m.To_UpdateChannelMessageViews()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChatAdmins:
		t := m.To_UpdateChatAdmins()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChatParticipantAdmin:
		t := m.To_UpdateChatParticipantAdmin()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateNewStickerSet:
		t := m.To_UpdateNewStickerSet()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateStickerSetsOrder:
		t := m.To_UpdateStickerSetsOrder()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateStickerSets:
		t := m.To_UpdateStickerSets()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateSavedGifs:
		t := m.To_UpdateSavedGifs()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotInlineQuery:
		t := m.To_UpdateBotInlineQuery()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotInlineSend:
		t := m.To_UpdateBotInlineSend()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateEditChannelMessage:
		t := m.To_UpdateEditChannelMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannelPinnedMessage:
		t := m.To_UpdateChannelPinnedMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotCallbackQuery:
		t := m.To_UpdateBotCallbackQuery()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateEditMessage:
		t := m.To_UpdateEditMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateInlineBotCallbackQuery:
		t := m.To_UpdateInlineBotCallbackQuery()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateReadChannelOutbox:
		t := m.To_UpdateReadChannelOutbox()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateDraftMessage:
		t := m.To_UpdateDraftMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateReadFeaturedStickers:
		t := m.To_UpdateReadFeaturedStickers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateRecentStickers:
		t := m.To_UpdateRecentStickers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateConfig:
		t := m.To_UpdateConfig()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updatePtsChanged:
		t := m.To_UpdatePtsChanged()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannelWebPage:
		t := m.To_UpdateChannelWebPage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateDialogPinned:
		t := m.To_UpdateDialogPinned()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updatePinnedDialogs:
		t := m.To_UpdatePinnedDialogs()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotWebhookJSON:
		t := m.To_UpdateBotWebhookJSON()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotWebhookJSONQuery:
		t := m.To_UpdateBotWebhookJSONQuery()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotShippingQuery:
		t := m.To_UpdateBotShippingQuery()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateBotPrecheckoutQuery:
		t := m.To_UpdateBotPrecheckoutQuery()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updatePhoneCall:
		t := m.To_UpdatePhoneCall()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateLangPackTooLong:
		t := m.To_UpdateLangPackTooLong()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateLangPack:
		t := m.To_UpdateLangPack()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateFavedStickers:
		t := m.To_UpdateFavedStickers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannelReadMessagesContents:
		t := m.To_UpdateChannelReadMessagesContents()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateContactsReset:
		t := m.To_UpdateContactsReset()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateChannelAvailableMessages:
		t := m.To_UpdateChannelAvailableMessages()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateDialogUnreadMark:
		t := m.To_UpdateDialogUnreadMark()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Update) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_updateNewMessage:
		m2 := &TLUpdateNewMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateMessageID:
		m2 := &TLUpdateMessageID{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateDeleteMessages:
		m2 := &TLUpdateDeleteMessages{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateUserTyping:
		m2 := &TLUpdateUserTyping{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChatUserTyping:
		m2 := &TLUpdateChatUserTyping{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChatParticipants:
		m2 := &TLUpdateChatParticipants{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateUserStatus:
		m2 := &TLUpdateUserStatus{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateUserName:
		m2 := &TLUpdateUserName{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateUserPhoto:
		m2 := &TLUpdateUserPhoto{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateContactRegistered:
		m2 := &TLUpdateContactRegistered{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateContactLink:
		m2 := &TLUpdateContactLink{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateNewEncryptedMessage:
		m2 := &TLUpdateNewEncryptedMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateEncryptedChatTyping:
		m2 := &TLUpdateEncryptedChatTyping{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateEncryption:
		m2 := &TLUpdateEncryption{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateEncryptedMessagesRead:
		m2 := &TLUpdateEncryptedMessagesRead{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChatParticipantAdd:
		m2 := &TLUpdateChatParticipantAdd{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChatParticipantDelete:
		m2 := &TLUpdateChatParticipantDelete{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateDcOptions:
		m2 := &TLUpdateDcOptions{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateUserBlocked:
		m2 := &TLUpdateUserBlocked{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateNotifySettings:
		m2 := &TLUpdateNotifySettings{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateServiceNotification:
		m2 := &TLUpdateServiceNotification{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updatePrivacy:
		m2 := &TLUpdatePrivacy{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateUserPhone:
		m2 := &TLUpdateUserPhone{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateReadHistoryInbox:
		m2 := &TLUpdateReadHistoryInbox{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateReadHistoryOutbox:
		m2 := &TLUpdateReadHistoryOutbox{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateWebPage:
		m2 := &TLUpdateWebPage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateReadMessagesContents:
		m2 := &TLUpdateReadMessagesContents{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannelTooLong:
		m2 := &TLUpdateChannelTooLong{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannel:
		m2 := &TLUpdateChannel{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateNewChannelMessage:
		m2 := &TLUpdateNewChannelMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateReadChannelInbox:
		m2 := &TLUpdateReadChannelInbox{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateDeleteChannelMessages:
		m2 := &TLUpdateDeleteChannelMessages{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannelMessageViews:
		m2 := &TLUpdateChannelMessageViews{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChatAdmins:
		m2 := &TLUpdateChatAdmins{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChatParticipantAdmin:
		m2 := &TLUpdateChatParticipantAdmin{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateNewStickerSet:
		m2 := &TLUpdateNewStickerSet{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateStickerSetsOrder:
		m2 := &TLUpdateStickerSetsOrder{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateStickerSets:
		m2 := &TLUpdateStickerSets{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateSavedGifs:
		m2 := &TLUpdateSavedGifs{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotInlineQuery:
		m2 := &TLUpdateBotInlineQuery{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotInlineSend:
		m2 := &TLUpdateBotInlineSend{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateEditChannelMessage:
		m2 := &TLUpdateEditChannelMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannelPinnedMessage:
		m2 := &TLUpdateChannelPinnedMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotCallbackQuery:
		m2 := &TLUpdateBotCallbackQuery{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateEditMessage:
		m2 := &TLUpdateEditMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateInlineBotCallbackQuery:
		m2 := &TLUpdateInlineBotCallbackQuery{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateReadChannelOutbox:
		m2 := &TLUpdateReadChannelOutbox{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateDraftMessage:
		m2 := &TLUpdateDraftMessage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateReadFeaturedStickers:
		m2 := &TLUpdateReadFeaturedStickers{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateRecentStickers:
		m2 := &TLUpdateRecentStickers{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateConfig:
		m2 := &TLUpdateConfig{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updatePtsChanged:
		m2 := &TLUpdatePtsChanged{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannelWebPage:
		m2 := &TLUpdateChannelWebPage{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateDialogPinned:
		m2 := &TLUpdateDialogPinned{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updatePinnedDialogs:
		m2 := &TLUpdatePinnedDialogs{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotWebhookJSON:
		m2 := &TLUpdateBotWebhookJSON{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotWebhookJSONQuery:
		m2 := &TLUpdateBotWebhookJSONQuery{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotShippingQuery:
		m2 := &TLUpdateBotShippingQuery{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateBotPrecheckoutQuery:
		m2 := &TLUpdateBotPrecheckoutQuery{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updatePhoneCall:
		m2 := &TLUpdatePhoneCall{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateLangPackTooLong:
		m2 := &TLUpdateLangPackTooLong{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateLangPack:
		m2 := &TLUpdateLangPack{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateFavedStickers:
		m2 := &TLUpdateFavedStickers{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannelReadMessagesContents:
		m2 := &TLUpdateChannelReadMessagesContents{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateContactsReset:
		m2 := &TLUpdateContactsReset{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateChannelAvailableMessages:
		m2 := &TLUpdateChannelAvailableMessages{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateDialogUnreadMark:
		m2 := &TLUpdateDialogUnreadMark{Data2: &Update_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// updateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateNewMessage() *TLUpdateNewMessage {
	return &TLUpdateNewMessage{
		Data2: m.Data2,
	}
}

// updateMessageID#4e90bfd6 id:int random_id:long = Update;
func (m *Update) To_UpdateMessageID() *TLUpdateMessageID {
	return &TLUpdateMessageID{
		Data2: m.Data2,
	}
}

// updateDeleteMessages#a20db0e5 messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdateDeleteMessages() *TLUpdateDeleteMessages {
	return &TLUpdateDeleteMessages{
		Data2: m.Data2,
	}
}

// updateUserTyping#5c486927 user_id:int action:SendMessageAction = Update;
func (m *Update) To_UpdateUserTyping() *TLUpdateUserTyping {
	return &TLUpdateUserTyping{
		Data2: m.Data2,
	}
}

// updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update;
func (m *Update) To_UpdateChatUserTyping() *TLUpdateChatUserTyping {
	return &TLUpdateChatUserTyping{
		Data2: m.Data2,
	}
}

// updateChatParticipants#7761198 participants:ChatParticipants = Update;
func (m *Update) To_UpdateChatParticipants() *TLUpdateChatParticipants {
	return &TLUpdateChatParticipants{
		Data2: m.Data2,
	}
}

// updateUserStatus#1bfbd823 user_id:int status:UserStatus = Update;
func (m *Update) To_UpdateUserStatus() *TLUpdateUserStatus {
	return &TLUpdateUserStatus{
		Data2: m.Data2,
	}
}

// updateUserName#a7332b73 user_id:int first_name:string last_name:string username:string = Update;
func (m *Update) To_UpdateUserName() *TLUpdateUserName {
	return &TLUpdateUserName{
		Data2: m.Data2,
	}
}

// updateUserPhoto#95313b0c user_id:int date:int photo:UserProfilePhoto previous:Bool = Update;
func (m *Update) To_UpdateUserPhoto() *TLUpdateUserPhoto {
	return &TLUpdateUserPhoto{
		Data2: m.Data2,
	}
}

// updateContactRegistered#2575bbb9 user_id:int date:int = Update;
func (m *Update) To_UpdateContactRegistered() *TLUpdateContactRegistered {
	return &TLUpdateContactRegistered{
		Data2: m.Data2,
	}
}

// updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update;
func (m *Update) To_UpdateContactLink() *TLUpdateContactLink {
	return &TLUpdateContactLink{
		Data2: m.Data2,
	}
}

// updateNewEncryptedMessage#12bcbd9a message:EncryptedMessage qts:int = Update;
func (m *Update) To_UpdateNewEncryptedMessage() *TLUpdateNewEncryptedMessage {
	return &TLUpdateNewEncryptedMessage{
		Data2: m.Data2,
	}
}

// updateEncryptedChatTyping#1710f156 chat_id:int = Update;
func (m *Update) To_UpdateEncryptedChatTyping() *TLUpdateEncryptedChatTyping {
	return &TLUpdateEncryptedChatTyping{
		Data2: m.Data2,
	}
}

// updateEncryption#b4a2e88d chat:EncryptedChat date:int = Update;
func (m *Update) To_UpdateEncryption() *TLUpdateEncryption {
	return &TLUpdateEncryption{
		Data2: m.Data2,
	}
}

// updateEncryptedMessagesRead#38fe25b7 chat_id:int max_date:int date:int = Update;
func (m *Update) To_UpdateEncryptedMessagesRead() *TLUpdateEncryptedMessagesRead {
	return &TLUpdateEncryptedMessagesRead{
		Data2: m.Data2,
	}
}

// updateChatParticipantAdd#ea4b0e5c chat_id:int user_id:int inviter_id:int date:int version:int = Update;
func (m *Update) To_UpdateChatParticipantAdd() *TLUpdateChatParticipantAdd {
	return &TLUpdateChatParticipantAdd{
		Data2: m.Data2,
	}
}

// updateChatParticipantDelete#6e5f8c22 chat_id:int user_id:int version:int = Update;
func (m *Update) To_UpdateChatParticipantDelete() *TLUpdateChatParticipantDelete {
	return &TLUpdateChatParticipantDelete{
		Data2: m.Data2,
	}
}

// updateDcOptions#8e5e9873 dc_options:Vector<DcOption> = Update;
func (m *Update) To_UpdateDcOptions() *TLUpdateDcOptions {
	return &TLUpdateDcOptions{
		Data2: m.Data2,
	}
}

// updateUserBlocked#80ece81a user_id:int blocked:Bool = Update;
func (m *Update) To_UpdateUserBlocked() *TLUpdateUserBlocked {
	return &TLUpdateUserBlocked{
		Data2: m.Data2,
	}
}

// updateNotifySettings#bec268ef peer:NotifyPeer notify_settings:PeerNotifySettings = Update;
func (m *Update) To_UpdateNotifySettings() *TLUpdateNotifySettings {
	return &TLUpdateNotifySettings{
		Data2: m.Data2,
	}
}

// updateServiceNotification#ebe46819 flags:# popup:flags.0?true inbox_date:flags.1?int type:string message:string media:MessageMedia entities:Vector<MessageEntity> = Update;
func (m *Update) To_UpdateServiceNotification() *TLUpdateServiceNotification {
	return &TLUpdateServiceNotification{
		Data2: m.Data2,
	}
}

// updatePrivacy#ee3b272a key:PrivacyKey rules:Vector<PrivacyRule> = Update;
func (m *Update) To_UpdatePrivacy() *TLUpdatePrivacy {
	return &TLUpdatePrivacy{
		Data2: m.Data2,
	}
}

// updateUserPhone#12b9417b user_id:int phone:string = Update;
func (m *Update) To_UpdateUserPhone() *TLUpdateUserPhone {
	return &TLUpdateUserPhone{
		Data2: m.Data2,
	}
}

// updateReadHistoryInbox#9961fd5c peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadHistoryInbox() *TLUpdateReadHistoryInbox {
	return &TLUpdateReadHistoryInbox{
		Data2: m.Data2,
	}
}

// updateReadHistoryOutbox#2f2f21bf peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadHistoryOutbox() *TLUpdateReadHistoryOutbox {
	return &TLUpdateReadHistoryOutbox{
		Data2: m.Data2,
	}
}

// updateWebPage#7f891213 webpage:WebPage pts:int pts_count:int = Update;
func (m *Update) To_UpdateWebPage() *TLUpdateWebPage {
	return &TLUpdateWebPage{
		Data2: m.Data2,
	}
}

// updateReadMessagesContents#68c13933 messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadMessagesContents() *TLUpdateReadMessagesContents {
	return &TLUpdateReadMessagesContents{
		Data2: m.Data2,
	}
}

// updateChannelTooLong#eb0467fb flags:# channel_id:int pts:flags.0?int = Update;
func (m *Update) To_UpdateChannelTooLong() *TLUpdateChannelTooLong {
	return &TLUpdateChannelTooLong{
		Data2: m.Data2,
	}
}

// updateChannel#b6d45656 channel_id:int = Update;
func (m *Update) To_UpdateChannel() *TLUpdateChannel {
	return &TLUpdateChannel{
		Data2: m.Data2,
	}
}

// updateNewChannelMessage#62ba04d9 message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateNewChannelMessage() *TLUpdateNewChannelMessage {
	return &TLUpdateNewChannelMessage{
		Data2: m.Data2,
	}
}

// updateReadChannelInbox#4214f37f channel_id:int max_id:int = Update;
func (m *Update) To_UpdateReadChannelInbox() *TLUpdateReadChannelInbox {
	return &TLUpdateReadChannelInbox{
		Data2: m.Data2,
	}
}

// updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdateDeleteChannelMessages() *TLUpdateDeleteChannelMessages {
	return &TLUpdateDeleteChannelMessages{
		Data2: m.Data2,
	}
}

// updateChannelMessageViews#98a12b4b channel_id:int id:int views:int = Update;
func (m *Update) To_UpdateChannelMessageViews() *TLUpdateChannelMessageViews {
	return &TLUpdateChannelMessageViews{
		Data2: m.Data2,
	}
}

// updateChatAdmins#6e947941 chat_id:int enabled:Bool version:int = Update;
func (m *Update) To_UpdateChatAdmins() *TLUpdateChatAdmins {
	return &TLUpdateChatAdmins{
		Data2: m.Data2,
	}
}

// updateChatParticipantAdmin#b6901959 chat_id:int user_id:int is_admin:Bool version:int = Update;
func (m *Update) To_UpdateChatParticipantAdmin() *TLUpdateChatParticipantAdmin {
	return &TLUpdateChatParticipantAdmin{
		Data2: m.Data2,
	}
}

// updateNewStickerSet#688a30aa stickerset:messages.StickerSet = Update;
func (m *Update) To_UpdateNewStickerSet() *TLUpdateNewStickerSet {
	return &TLUpdateNewStickerSet{
		Data2: m.Data2,
	}
}

// updateStickerSetsOrder#bb2d201 flags:# masks:flags.0?true order:Vector<long> = Update;
func (m *Update) To_UpdateStickerSetsOrder() *TLUpdateStickerSetsOrder {
	return &TLUpdateStickerSetsOrder{
		Data2: m.Data2,
	}
}

// updateStickerSets#43ae3dec = Update;
func (m *Update) To_UpdateStickerSets() *TLUpdateStickerSets {
	return &TLUpdateStickerSets{
		Data2: m.Data2,
	}
}

// updateSavedGifs#9375341e = Update;
func (m *Update) To_UpdateSavedGifs() *TLUpdateSavedGifs {
	return &TLUpdateSavedGifs{
		Data2: m.Data2,
	}
}

// updateBotInlineQuery#54826690 flags:# query_id:long user_id:int query:string geo:flags.0?GeoPoint offset:string = Update;
func (m *Update) To_UpdateBotInlineQuery() *TLUpdateBotInlineQuery {
	return &TLUpdateBotInlineQuery{
		Data2: m.Data2,
	}
}

// updateBotInlineSend#e48f964 flags:# user_id:int query:string geo:flags.0?GeoPoint id:string msg_id:flags.1?InputBotInlineMessageID = Update;
func (m *Update) To_UpdateBotInlineSend() *TLUpdateBotInlineSend {
	return &TLUpdateBotInlineSend{
		Data2: m.Data2,
	}
}

// updateEditChannelMessage#1b3f4df7 message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateEditChannelMessage() *TLUpdateEditChannelMessage {
	return &TLUpdateEditChannelMessage{
		Data2: m.Data2,
	}
}

// updateChannelPinnedMessage#98592475 channel_id:int id:int = Update;
func (m *Update) To_UpdateChannelPinnedMessage() *TLUpdateChannelPinnedMessage {
	return &TLUpdateChannelPinnedMessage{
		Data2: m.Data2,
	}
}

// updateBotCallbackQuery#e73547e1 flags:# query_id:long user_id:int peer:Peer msg_id:int chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *Update) To_UpdateBotCallbackQuery() *TLUpdateBotCallbackQuery {
	return &TLUpdateBotCallbackQuery{
		Data2: m.Data2,
	}
}

// updateEditMessage#e40370a3 message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateEditMessage() *TLUpdateEditMessage {
	return &TLUpdateEditMessage{
		Data2: m.Data2,
	}
}

// updateInlineBotCallbackQuery#f9d27a5a flags:# query_id:long user_id:int msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *Update) To_UpdateInlineBotCallbackQuery() *TLUpdateInlineBotCallbackQuery {
	return &TLUpdateInlineBotCallbackQuery{
		Data2: m.Data2,
	}
}

// updateReadChannelOutbox#25d6c9c7 channel_id:int max_id:int = Update;
func (m *Update) To_UpdateReadChannelOutbox() *TLUpdateReadChannelOutbox {
	return &TLUpdateReadChannelOutbox{
		Data2: m.Data2,
	}
}

// updateDraftMessage#ee2bb969 peer:Peer draft:DraftMessage = Update;
func (m *Update) To_UpdateDraftMessage() *TLUpdateDraftMessage {
	return &TLUpdateDraftMessage{
		Data2: m.Data2,
	}
}

// updateReadFeaturedStickers#571d2742 = Update;
func (m *Update) To_UpdateReadFeaturedStickers() *TLUpdateReadFeaturedStickers {
	return &TLUpdateReadFeaturedStickers{
		Data2: m.Data2,
	}
}

// updateRecentStickers#9a422c20 = Update;
func (m *Update) To_UpdateRecentStickers() *TLUpdateRecentStickers {
	return &TLUpdateRecentStickers{
		Data2: m.Data2,
	}
}

// updateConfig#a229dd06 = Update;
func (m *Update) To_UpdateConfig() *TLUpdateConfig {
	return &TLUpdateConfig{
		Data2: m.Data2,
	}
}

// updatePtsChanged#3354678f = Update;
func (m *Update) To_UpdatePtsChanged() *TLUpdatePtsChanged {
	return &TLUpdatePtsChanged{
		Data2: m.Data2,
	}
}

// updateChannelWebPage#40771900 channel_id:int webpage:WebPage pts:int pts_count:int = Update;
func (m *Update) To_UpdateChannelWebPage() *TLUpdateChannelWebPage {
	return &TLUpdateChannelWebPage{
		Data2: m.Data2,
	}
}

// updateDialogPinned#19d27f3c flags:# pinned:flags.0?true peer:DialogPeer = Update;
func (m *Update) To_UpdateDialogPinned() *TLUpdateDialogPinned {
	return &TLUpdateDialogPinned{
		Data2: m.Data2,
	}
}

// updatePinnedDialogs#ea4cb65b flags:# order:flags.0?Vector<DialogPeer> = Update;
func (m *Update) To_UpdatePinnedDialogs() *TLUpdatePinnedDialogs {
	return &TLUpdatePinnedDialogs{
		Data2: m.Data2,
	}
}

// updateBotWebhookJSON#8317c0c3 data:DataJSON = Update;
func (m *Update) To_UpdateBotWebhookJSON() *TLUpdateBotWebhookJSON {
	return &TLUpdateBotWebhookJSON{
		Data2: m.Data2,
	}
}

// updateBotWebhookJSONQuery#9b9240a6 query_id:long data:DataJSON timeout:int = Update;
func (m *Update) To_UpdateBotWebhookJSONQuery() *TLUpdateBotWebhookJSONQuery {
	return &TLUpdateBotWebhookJSONQuery{
		Data2: m.Data2,
	}
}

// updateBotShippingQuery#e0cdc940 query_id:long user_id:int payload:bytes shipping_address:PostAddress = Update;
func (m *Update) To_UpdateBotShippingQuery() *TLUpdateBotShippingQuery {
	return &TLUpdateBotShippingQuery{
		Data2: m.Data2,
	}
}

// updateBotPrecheckoutQuery#5d2f3aa9 flags:# query_id:long user_id:int payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string currency:string total_amount:long = Update;
func (m *Update) To_UpdateBotPrecheckoutQuery() *TLUpdateBotPrecheckoutQuery {
	return &TLUpdateBotPrecheckoutQuery{
		Data2: m.Data2,
	}
}

// updatePhoneCall#ab0f6b1e phone_call:PhoneCall = Update;
func (m *Update) To_UpdatePhoneCall() *TLUpdatePhoneCall {
	return &TLUpdatePhoneCall{
		Data2: m.Data2,
	}
}

// updateLangPackTooLong#10c2404b = Update;
func (m *Update) To_UpdateLangPackTooLong() *TLUpdateLangPackTooLong {
	return &TLUpdateLangPackTooLong{
		Data2: m.Data2,
	}
}

// updateLangPack#56022f4d difference:LangPackDifference = Update;
func (m *Update) To_UpdateLangPack() *TLUpdateLangPack {
	return &TLUpdateLangPack{
		Data2: m.Data2,
	}
}

// updateFavedStickers#e511996d = Update;
func (m *Update) To_UpdateFavedStickers() *TLUpdateFavedStickers {
	return &TLUpdateFavedStickers{
		Data2: m.Data2,
	}
}

// updateChannelReadMessagesContents#89893b45 channel_id:int messages:Vector<int> = Update;
func (m *Update) To_UpdateChannelReadMessagesContents() *TLUpdateChannelReadMessagesContents {
	return &TLUpdateChannelReadMessagesContents{
		Data2: m.Data2,
	}
}

// updateContactsReset#7084a7be = Update;
func (m *Update) To_UpdateContactsReset() *TLUpdateContactsReset {
	return &TLUpdateContactsReset{
		Data2: m.Data2,
	}
}

// updateChannelAvailableMessages#70db6837 channel_id:int available_min_id:int = Update;
func (m *Update) To_UpdateChannelAvailableMessages() *TLUpdateChannelAvailableMessages {
	return &TLUpdateChannelAvailableMessages{
		Data2: m.Data2,
	}
}

// updateDialogUnreadMark#e16459c3 flags:# unread:flags.0?true peer:DialogPeer = Update;
func (m *Update) To_UpdateDialogUnreadMark() *TLUpdateDialogUnreadMark {
	return &TLUpdateDialogUnreadMark{
		Data2: m.Data2,
	}
}

// updateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;
func (m *TLUpdateNewMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateNewMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateNewMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateNewMessage) GetMessage() *Message  { return m.Data2.Message_1 }

func (m *TLUpdateNewMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateNewMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateNewMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateNewMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateNewMessage() *TLUpdateNewMessage {
	return &TLUpdateNewMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateNewMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewMessage))

	x.Bytes(m.GetMessage().Encode())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateNewMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewMessage))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateNewMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetMessage(m1)
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateMessageID#4e90bfd6 id:int random_id:long = Update;
func (m *TLUpdateMessageID) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateMessageID,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateMessageID) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateMessageID) GetId() int32  { return m.Data2.Id_4 }

func (m *TLUpdateMessageID) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLUpdateMessageID) GetRandomId() int64  { return m.Data2.RandomId }

func NewTLUpdateMessageID() *TLUpdateMessageID {
	return &TLUpdateMessageID{Data2: &Update_Data{}}
}

func (m *TLUpdateMessageID) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateMessageID))

	x.Int(m.GetId())
	x.Long(m.GetRandomId())

	return x.buf
}

func (m *TLUpdateMessageID) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateMessageID))

	x.Int(m.GetId())
	x.Long(m.GetRandomId())

	return x.buf
}

func (m *TLUpdateMessageID) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetRandomId(dbuf.Long())

	return dbuf.err
}

// updateDeleteMessages#a20db0e5 messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdateDeleteMessages) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateDeleteMessages,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateDeleteMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateDeleteMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateDeleteMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateDeleteMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateDeleteMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateDeleteMessages() *TLUpdateDeleteMessages {
	return &TLUpdateDeleteMessages{Data2: &Update_Data{}}
}

func (m *TLUpdateDeleteMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDeleteMessages))

	x.VectorInt(m.GetMessages())

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateDeleteMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDeleteMessages))

	x.VectorInt(m.GetMessages())

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateDeleteMessages) Decode(dbuf *DecodeBuf) error {
	m.SetMessages(dbuf.VectorInt())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateUserTyping#5c486927 user_id:int action:SendMessageAction = Update;
func (m *TLUpdateUserTyping) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateUserTyping,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateUserTyping) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserTyping) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateUserTyping) GetAction() *SendMessageAction  { return m.Data2.Action }

func NewTLUpdateUserTyping() *TLUpdateUserTyping {
	return &TLUpdateUserTyping{Data2: &Update_Data{}}
}

func (m *TLUpdateUserTyping) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserTyping))

	x.Int(m.GetUserId())
	x.Bytes(m.GetAction().Encode())

	return x.buf
}

func (m *TLUpdateUserTyping) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserTyping))

	x.Int(m.GetUserId())
	x.Bytes(m.GetAction().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateUserTyping) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m2 := &SendMessageAction{}
	m2.Decode(dbuf)
	m.SetAction(m2)

	return dbuf.err
}

// updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update;
func (m *TLUpdateChatUserTyping) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChatUserTyping,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChatUserTyping) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatUserTyping) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateChatUserTyping) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatUserTyping) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateChatUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateChatUserTyping) GetAction() *SendMessageAction  { return m.Data2.Action }

func NewTLUpdateChatUserTyping() *TLUpdateChatUserTyping {
	return &TLUpdateChatUserTyping{Data2: &Update_Data{}}
}

func (m *TLUpdateChatUserTyping) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatUserTyping))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetAction().Encode())

	return x.buf
}

func (m *TLUpdateChatUserTyping) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatUserTyping))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetAction().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateChatUserTyping) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m3 := &SendMessageAction{}
	m3.Decode(dbuf)
	m.SetAction(m3)

	return dbuf.err
}

// updateChatParticipants#7761198 participants:ChatParticipants = Update;
func (m *TLUpdateChatParticipants) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChatParticipants,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChatParticipants) SetParticipants(v *ChatParticipants) { m.Data2.Participants = v }
func (m *TLUpdateChatParticipants) GetParticipants() *ChatParticipants  { return m.Data2.Participants }

func NewTLUpdateChatParticipants() *TLUpdateChatParticipants {
	return &TLUpdateChatParticipants{Data2: &Update_Data{}}
}

func (m *TLUpdateChatParticipants) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipants))

	x.Bytes(m.GetParticipants().Encode())

	return x.buf
}

func (m *TLUpdateChatParticipants) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipants))

	x.Bytes(m.GetParticipants().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateChatParticipants) Decode(dbuf *DecodeBuf) error {
	m1 := &ChatParticipants{}
	m1.Decode(dbuf)
	m.SetParticipants(m1)

	return dbuf.err
}

// updateUserStatus#1bfbd823 user_id:int status:UserStatus = Update;
func (m *TLUpdateUserStatus) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateUserStatus,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateUserStatus) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserStatus) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateUserStatus) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUpdateUserStatus) GetStatus() *UserStatus  { return m.Data2.Status }

func NewTLUpdateUserStatus() *TLUpdateUserStatus {
	return &TLUpdateUserStatus{Data2: &Update_Data{}}
}

func (m *TLUpdateUserStatus) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserStatus))

	x.Int(m.GetUserId())
	x.Bytes(m.GetStatus().Encode())

	return x.buf
}

func (m *TLUpdateUserStatus) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserStatus))

	x.Int(m.GetUserId())
	x.Bytes(m.GetStatus().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateUserStatus) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m2 := &UserStatus{}
	m2.Decode(dbuf)
	m.SetStatus(m2)

	return dbuf.err
}

// updateUserName#a7332b73 user_id:int first_name:string last_name:string username:string = Update;
func (m *TLUpdateUserName) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateUserName,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateUserName) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserName) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateUserName) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLUpdateUserName) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLUpdateUserName) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLUpdateUserName) GetLastName() string  { return m.Data2.LastName }

func (m *TLUpdateUserName) SetUsername(v string) { m.Data2.Username = v }
func (m *TLUpdateUserName) GetUsername() string  { return m.Data2.Username }

func NewTLUpdateUserName() *TLUpdateUserName {
	return &TLUpdateUserName{Data2: &Update_Data{}}
}

func (m *TLUpdateUserName) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserName))

	x.Int(m.GetUserId())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetUsername())

	return x.buf
}

func (m *TLUpdateUserName) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserName))

	x.Int(m.GetUserId())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetUsername())

	return x.buf
}

func (m *TLUpdateUserName) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())
	m.SetUsername(dbuf.String())

	return dbuf.err
}

// updateUserPhoto#95313b0c user_id:int date:int photo:UserProfilePhoto previous:Bool = Update;
func (m *TLUpdateUserPhoto) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateUserPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateUserPhoto) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserPhoto) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateUserPhoto) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateUserPhoto) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateUserPhoto) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUpdateUserPhoto) GetPhoto() *UserProfilePhoto  { return m.Data2.Photo }

func (m *TLUpdateUserPhoto) SetPrevious(v *Bool) { m.Data2.Previous = v }
func (m *TLUpdateUserPhoto) GetPrevious() *Bool  { return m.Data2.Previous }

func NewTLUpdateUserPhoto() *TLUpdateUserPhoto {
	return &TLUpdateUserPhoto{Data2: &Update_Data{}}
}

func (m *TLUpdateUserPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserPhoto))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())
	x.Bytes(m.GetPhoto().Encode())
	x.Bytes(m.GetPrevious().Encode())

	return x.buf
}

func (m *TLUpdateUserPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserPhoto))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Bytes(m.GetPrevious().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateUserPhoto) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetDate(dbuf.Int())
	m3 := &UserProfilePhoto{}
	m3.Decode(dbuf)
	m.SetPhoto(m3)
	m4 := &Bool{}
	m4.Decode(dbuf)
	m.SetPrevious(m4)

	return dbuf.err
}

// updateContactRegistered#2575bbb9 user_id:int date:int = Update;
func (m *TLUpdateContactRegistered) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateContactRegistered,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateContactRegistered) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateContactRegistered) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateContactRegistered) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateContactRegistered) GetDate() int32  { return m.Data2.Date }

func NewTLUpdateContactRegistered() *TLUpdateContactRegistered {
	return &TLUpdateContactRegistered{Data2: &Update_Data{}}
}

func (m *TLUpdateContactRegistered) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateContactRegistered))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateContactRegistered) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateContactRegistered))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateContactRegistered) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update;
func (m *TLUpdateContactLink) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateContactLink,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateContactLink) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateContactLink) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateContactLink) SetMyLink(v *ContactLink) { m.Data2.MyLink = v }
func (m *TLUpdateContactLink) GetMyLink() *ContactLink  { return m.Data2.MyLink }

func (m *TLUpdateContactLink) SetForeignLink(v *ContactLink) { m.Data2.ForeignLink = v }
func (m *TLUpdateContactLink) GetForeignLink() *ContactLink  { return m.Data2.ForeignLink }

func NewTLUpdateContactLink() *TLUpdateContactLink {
	return &TLUpdateContactLink{Data2: &Update_Data{}}
}

func (m *TLUpdateContactLink) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateContactLink))

	x.Int(m.GetUserId())
	x.Bytes(m.GetMyLink().Encode())
	x.Bytes(m.GetForeignLink().Encode())

	return x.buf
}

func (m *TLUpdateContactLink) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateContactLink))

	x.Int(m.GetUserId())
	x.Bytes(m.GetMyLink().EncodeToLayer(layer))
	x.Bytes(m.GetForeignLink().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateContactLink) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m2 := &ContactLink{}
	m2.Decode(dbuf)
	m.SetMyLink(m2)
	m3 := &ContactLink{}
	m3.Decode(dbuf)
	m.SetForeignLink(m3)

	return dbuf.err
}

// updateNewEncryptedMessage#12bcbd9a message:EncryptedMessage qts:int = Update;
func (m *TLUpdateNewEncryptedMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateNewEncryptedMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateNewEncryptedMessage) SetMessage(v *EncryptedMessage) { m.Data2.Message_20 = v }
func (m *TLUpdateNewEncryptedMessage) GetMessage() *EncryptedMessage  { return m.Data2.Message_20 }

func (m *TLUpdateNewEncryptedMessage) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateNewEncryptedMessage) GetQts() int32  { return m.Data2.Qts }

func NewTLUpdateNewEncryptedMessage() *TLUpdateNewEncryptedMessage {
	return &TLUpdateNewEncryptedMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateNewEncryptedMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewEncryptedMessage))

	x.Bytes(m.GetMessage().Encode())
	x.Int(m.GetQts())

	return x.buf
}

func (m *TLUpdateNewEncryptedMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewEncryptedMessage))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))
	x.Int(m.GetQts())

	return x.buf
}

func (m *TLUpdateNewEncryptedMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &EncryptedMessage{}
	m1.Decode(dbuf)
	m.SetMessage(m1)
	m.SetQts(dbuf.Int())

	return dbuf.err
}

// updateEncryptedChatTyping#1710f156 chat_id:int = Update;
func (m *TLUpdateEncryptedChatTyping) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateEncryptedChatTyping,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateEncryptedChatTyping) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateEncryptedChatTyping) GetChatId() int32  { return m.Data2.ChatId }

func NewTLUpdateEncryptedChatTyping() *TLUpdateEncryptedChatTyping {
	return &TLUpdateEncryptedChatTyping{Data2: &Update_Data{}}
}

func (m *TLUpdateEncryptedChatTyping) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEncryptedChatTyping))

	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLUpdateEncryptedChatTyping) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEncryptedChatTyping))

	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLUpdateEncryptedChatTyping) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())

	return dbuf.err
}

// updateEncryption#b4a2e88d chat:EncryptedChat date:int = Update;
func (m *TLUpdateEncryption) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateEncryption,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateEncryption) SetChat(v *EncryptedChat) { m.Data2.Chat = v }
func (m *TLUpdateEncryption) GetChat() *EncryptedChat  { return m.Data2.Chat }

func (m *TLUpdateEncryption) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateEncryption) GetDate() int32  { return m.Data2.Date }

func NewTLUpdateEncryption() *TLUpdateEncryption {
	return &TLUpdateEncryption{Data2: &Update_Data{}}
}

func (m *TLUpdateEncryption) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEncryption))

	x.Bytes(m.GetChat().Encode())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateEncryption) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEncryption))

	x.Bytes(m.GetChat().EncodeToLayer(layer))
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateEncryption) Decode(dbuf *DecodeBuf) error {
	m1 := &EncryptedChat{}
	m1.Decode(dbuf)
	m.SetChat(m1)
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// updateEncryptedMessagesRead#38fe25b7 chat_id:int max_date:int date:int = Update;
func (m *TLUpdateEncryptedMessagesRead) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateEncryptedMessagesRead,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateEncryptedMessagesRead) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateEncryptedMessagesRead) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateEncryptedMessagesRead) SetMaxDate(v int32) { m.Data2.MaxDate = v }
func (m *TLUpdateEncryptedMessagesRead) GetMaxDate() int32  { return m.Data2.MaxDate }

func (m *TLUpdateEncryptedMessagesRead) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateEncryptedMessagesRead) GetDate() int32  { return m.Data2.Date }

func NewTLUpdateEncryptedMessagesRead() *TLUpdateEncryptedMessagesRead {
	return &TLUpdateEncryptedMessagesRead{Data2: &Update_Data{}}
}

func (m *TLUpdateEncryptedMessagesRead) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEncryptedMessagesRead))

	x.Int(m.GetChatId())
	x.Int(m.GetMaxDate())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateEncryptedMessagesRead) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEncryptedMessagesRead))

	x.Int(m.GetChatId())
	x.Int(m.GetMaxDate())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateEncryptedMessagesRead) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m.SetMaxDate(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// updateChatParticipantAdd#ea4b0e5c chat_id:int user_id:int inviter_id:int date:int version:int = Update;
func (m *TLUpdateChatParticipantAdd) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChatParticipantAdd,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChatParticipantAdd) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatParticipantAdd) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateChatParticipantAdd) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantAdd) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateChatParticipantAdd) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLUpdateChatParticipantAdd) GetInviterId() int32  { return m.Data2.InviterId }

func (m *TLUpdateChatParticipantAdd) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateChatParticipantAdd) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateChatParticipantAdd) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantAdd) GetVersion() int32  { return m.Data2.Version }

func NewTLUpdateChatParticipantAdd() *TLUpdateChatParticipantAdd {
	return &TLUpdateChatParticipantAdd{Data2: &Update_Data{}}
}

func (m *TLUpdateChatParticipantAdd) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipantAdd))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatParticipantAdd) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipantAdd))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Int(m.GetInviterId())
	x.Int(m.GetDate())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatParticipantAdd) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m.SetInviterId(dbuf.Int())
	m.SetDate(dbuf.Int())
	m.SetVersion(dbuf.Int())

	return dbuf.err
}

// updateChatParticipantDelete#6e5f8c22 chat_id:int user_id:int version:int = Update;
func (m *TLUpdateChatParticipantDelete) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChatParticipantDelete,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChatParticipantDelete) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatParticipantDelete) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateChatParticipantDelete) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantDelete) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateChatParticipantDelete) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantDelete) GetVersion() int32  { return m.Data2.Version }

func NewTLUpdateChatParticipantDelete() *TLUpdateChatParticipantDelete {
	return &TLUpdateChatParticipantDelete{Data2: &Update_Data{}}
}

func (m *TLUpdateChatParticipantDelete) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipantDelete))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatParticipantDelete) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipantDelete))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatParticipantDelete) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m.SetVersion(dbuf.Int())

	return dbuf.err
}

// updateDcOptions#8e5e9873 dc_options:Vector<DcOption> = Update;
func (m *TLUpdateDcOptions) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateDcOptions,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateDcOptions) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLUpdateDcOptions) GetDcOptions() []*DcOption  { return m.Data2.DcOptions }

func NewTLUpdateDcOptions() *TLUpdateDcOptions {
	return &TLUpdateDcOptions{Data2: &Update_Data{}}
}

func (m *TLUpdateDcOptions) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDcOptions))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDcOptions())))
	for _, v := range m.GetDcOptions() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUpdateDcOptions) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDcOptions))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDcOptions())))
	for _, v := range m.GetDcOptions() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUpdateDcOptions) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*DcOption, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &DcOption{}
		v1[i].Decode(dbuf)
	}
	m.SetDcOptions(v1)

	return dbuf.err
}

// updateUserBlocked#80ece81a user_id:int blocked:Bool = Update;
func (m *TLUpdateUserBlocked) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateUserBlocked,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateUserBlocked) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserBlocked) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateUserBlocked) SetBlocked(v *Bool) { m.Data2.Blocked = v }
func (m *TLUpdateUserBlocked) GetBlocked() *Bool  { return m.Data2.Blocked }

func NewTLUpdateUserBlocked() *TLUpdateUserBlocked {
	return &TLUpdateUserBlocked{Data2: &Update_Data{}}
}

func (m *TLUpdateUserBlocked) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserBlocked))

	x.Int(m.GetUserId())
	x.Bytes(m.GetBlocked().Encode())

	return x.buf
}

func (m *TLUpdateUserBlocked) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserBlocked))

	x.Int(m.GetUserId())
	x.Bytes(m.GetBlocked().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateUserBlocked) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.SetBlocked(m2)

	return dbuf.err
}

// updateNotifySettings#bec268ef peer:NotifyPeer notify_settings:PeerNotifySettings = Update;
func (m *TLUpdateNotifySettings) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateNotifySettings,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateNotifySettings) SetPeer(v *NotifyPeer) { m.Data2.Peer_28 = v }
func (m *TLUpdateNotifySettings) GetPeer() *NotifyPeer  { return m.Data2.Peer_28 }

func (m *TLUpdateNotifySettings) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUpdateNotifySettings) GetNotifySettings() *PeerNotifySettings {
	return m.Data2.NotifySettings
}

func NewTLUpdateNotifySettings() *TLUpdateNotifySettings {
	return &TLUpdateNotifySettings{Data2: &Update_Data{}}
}

func (m *TLUpdateNotifySettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNotifySettings))

	x.Bytes(m.GetPeer().Encode())
	x.Bytes(m.GetNotifySettings().Encode())

	return x.buf
}

func (m *TLUpdateNotifySettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNotifySettings))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Bytes(m.GetNotifySettings().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateNotifySettings) Decode(dbuf *DecodeBuf) error {
	m1 := &NotifyPeer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)
	m2 := &PeerNotifySettings{}
	m2.Decode(dbuf)
	m.SetNotifySettings(m2)

	return dbuf.err
}

// updateServiceNotification#ebe46819 flags:# popup:flags.0?true inbox_date:flags.1?int type:string message:string media:MessageMedia entities:Vector<MessageEntity> = Update;
func (m *TLUpdateServiceNotification) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateServiceNotification,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateServiceNotification) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLUpdateServiceNotification) GetPopup() bool  { return m.Data2.Popup }

func (m *TLUpdateServiceNotification) SetInboxDate(v int32) { m.Data2.InboxDate = v }
func (m *TLUpdateServiceNotification) GetInboxDate() int32  { return m.Data2.InboxDate }

func (m *TLUpdateServiceNotification) SetType(v string) { m.Data2.Type = v }
func (m *TLUpdateServiceNotification) GetType() string  { return m.Data2.Type }

func (m *TLUpdateServiceNotification) SetMessage(v string) { m.Data2.Message_33 = v }
func (m *TLUpdateServiceNotification) GetMessage() string  { return m.Data2.Message_33 }

func (m *TLUpdateServiceNotification) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLUpdateServiceNotification) GetMedia() *MessageMedia  { return m.Data2.Media }

func (m *TLUpdateServiceNotification) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateServiceNotification) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func NewTLUpdateServiceNotification() *TLUpdateServiceNotification {
	return &TLUpdateServiceNotification{Data2: &Update_Data{}}
}

func (m *TLUpdateServiceNotification) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateServiceNotification))

	// flags
	var flags uint32 = 0
	if m.GetPopup() == true {
		flags |= 1 << 0
	}
	if m.GetInboxDate() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	if m.GetInboxDate() != 0 {
		x.Int(m.GetInboxDate())
	}
	x.String(m.GetType())
	x.String(m.GetMessage())
	x.Bytes(m.GetMedia().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEntities())))
	for _, v := range m.GetEntities() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUpdateServiceNotification) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateServiceNotification))

	// flags
	var flags uint32 = 0
	if m.GetPopup() == true {
		flags |= 1 << 0
	}
	if m.GetInboxDate() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	if m.GetInboxDate() != 0 {
		x.Int(m.GetInboxDate())
	}
	x.String(m.GetType())
	x.String(m.GetMessage())
	x.Bytes(m.GetMedia().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEntities())))
	for _, v := range m.GetEntities() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUpdateServiceNotification) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetPopup(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetInboxDate(dbuf.Int())
	}
	m.SetType(dbuf.String())
	m.SetMessage(dbuf.String())
	m6 := &MessageMedia{}
	m6.Decode(dbuf)
	m.SetMedia(m6)
	c7 := dbuf.Int()
	if c7 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
		return dbuf.err
	}
	l7 := dbuf.Int()
	v7 := make([]*MessageEntity, l7)
	for i := int32(0); i < l7; i++ {
		v7[i] = &MessageEntity{}
		v7[i].Decode(dbuf)
	}
	m.SetEntities(v7)

	return dbuf.err
}

// updatePrivacy#ee3b272a key:PrivacyKey rules:Vector<PrivacyRule> = Update;
func (m *TLUpdatePrivacy) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updatePrivacy,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatePrivacy) SetKey(v *PrivacyKey) { m.Data2.Key = v }
func (m *TLUpdatePrivacy) GetKey() *PrivacyKey  { return m.Data2.Key }

func (m *TLUpdatePrivacy) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLUpdatePrivacy) GetRules() []*PrivacyRule  { return m.Data2.Rules }

func NewTLUpdatePrivacy() *TLUpdatePrivacy {
	return &TLUpdatePrivacy{Data2: &Update_Data{}}
}

func (m *TLUpdatePrivacy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePrivacy))

	x.Bytes(m.GetKey().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRules())))
	for _, v := range m.GetRules() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUpdatePrivacy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePrivacy))

	x.Bytes(m.GetKey().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRules())))
	for _, v := range m.GetRules() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUpdatePrivacy) Decode(dbuf *DecodeBuf) error {
	m1 := &PrivacyKey{}
	m1.Decode(dbuf)
	m.SetKey(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*PrivacyRule, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &PrivacyRule{}
		v2[i].Decode(dbuf)
	}
	m.SetRules(v2)

	return dbuf.err
}

// updateUserPhone#12b9417b user_id:int phone:string = Update;
func (m *TLUpdateUserPhone) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateUserPhone,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateUserPhone) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserPhone) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateUserPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLUpdateUserPhone) GetPhone() string  { return m.Data2.Phone }

func NewTLUpdateUserPhone() *TLUpdateUserPhone {
	return &TLUpdateUserPhone{Data2: &Update_Data{}}
}

func (m *TLUpdateUserPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserPhone))

	x.Int(m.GetUserId())
	x.String(m.GetPhone())

	return x.buf
}

func (m *TLUpdateUserPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateUserPhone))

	x.Int(m.GetUserId())
	x.String(m.GetPhone())

	return x.buf
}

func (m *TLUpdateUserPhone) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetPhone(dbuf.String())

	return dbuf.err
}

// updateReadHistoryInbox#9961fd5c peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *TLUpdateReadHistoryInbox) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateReadHistoryInbox,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateReadHistoryInbox) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateReadHistoryInbox) GetPeer() *Peer  { return m.Data2.Peer_39 }

func (m *TLUpdateReadHistoryInbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryInbox) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryInbox) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadHistoryInbox) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateReadHistoryInbox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryInbox) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateReadHistoryInbox() *TLUpdateReadHistoryInbox {
	return &TLUpdateReadHistoryInbox{Data2: &Update_Data{}}
}

func (m *TLUpdateReadHistoryInbox) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadHistoryInbox))

	x.Bytes(m.GetPeer().Encode())
	x.Int(m.GetMaxId())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateReadHistoryInbox) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadHistoryInbox))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Int(m.GetMaxId())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateReadHistoryInbox) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)
	m.SetMaxId(dbuf.Int())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateReadHistoryOutbox#2f2f21bf peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *TLUpdateReadHistoryOutbox) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateReadHistoryOutbox,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateReadHistoryOutbox) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateReadHistoryOutbox) GetPeer() *Peer  { return m.Data2.Peer_39 }

func (m *TLUpdateReadHistoryOutbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryOutbox) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryOutbox) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadHistoryOutbox) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateReadHistoryOutbox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryOutbox) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateReadHistoryOutbox() *TLUpdateReadHistoryOutbox {
	return &TLUpdateReadHistoryOutbox{Data2: &Update_Data{}}
}

func (m *TLUpdateReadHistoryOutbox) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadHistoryOutbox))

	x.Bytes(m.GetPeer().Encode())
	x.Int(m.GetMaxId())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateReadHistoryOutbox) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadHistoryOutbox))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Int(m.GetMaxId())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateReadHistoryOutbox) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)
	m.SetMaxId(dbuf.Int())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateWebPage#7f891213 webpage:WebPage pts:int pts_count:int = Update;
func (m *TLUpdateWebPage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateWebPage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLUpdateWebPage) GetWebpage() *WebPage  { return m.Data2.Webpage }

func (m *TLUpdateWebPage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateWebPage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateWebPage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateWebPage) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateWebPage() *TLUpdateWebPage {
	return &TLUpdateWebPage{Data2: &Update_Data{}}
}

func (m *TLUpdateWebPage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateWebPage))

	x.Bytes(m.GetWebpage().Encode())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateWebPage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateWebPage))

	x.Bytes(m.GetWebpage().EncodeToLayer(layer))
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateWebPage) Decode(dbuf *DecodeBuf) error {
	m1 := &WebPage{}
	m1.Decode(dbuf)
	m.SetWebpage(m1)
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateReadMessagesContents#68c13933 messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdateReadMessagesContents) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateReadMessagesContents,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateReadMessagesContents) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateReadMessagesContents) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateReadMessagesContents) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadMessagesContents) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateReadMessagesContents) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadMessagesContents) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateReadMessagesContents() *TLUpdateReadMessagesContents {
	return &TLUpdateReadMessagesContents{Data2: &Update_Data{}}
}

func (m *TLUpdateReadMessagesContents) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadMessagesContents))

	x.VectorInt(m.GetMessages())

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateReadMessagesContents) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadMessagesContents))

	x.VectorInt(m.GetMessages())

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateReadMessagesContents) Decode(dbuf *DecodeBuf) error {
	m.SetMessages(dbuf.VectorInt())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateChannelTooLong#eb0467fb flags:# channel_id:int pts:flags.0?int = Update;
func (m *TLUpdateChannelTooLong) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannelTooLong,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannelTooLong) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelTooLong) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateChannelTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateChannelTooLong) GetPts() int32  { return m.Data2.Pts }

func NewTLUpdateChannelTooLong() *TLUpdateChannelTooLong {
	return &TLUpdateChannelTooLong{Data2: &Update_Data{}}
}

func (m *TLUpdateChannelTooLong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelTooLong))

	// flags
	var flags uint32 = 0
	if m.GetPts() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetChannelId())
	if m.GetPts() != 0 {
		x.Int(m.GetPts())
	}

	return x.buf
}

func (m *TLUpdateChannelTooLong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelTooLong))

	// flags
	var flags uint32 = 0
	if m.GetPts() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetChannelId())
	if m.GetPts() != 0 {
		x.Int(m.GetPts())
	}

	return x.buf
}

func (m *TLUpdateChannelTooLong) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetChannelId(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m.SetPts(dbuf.Int())
	}

	return dbuf.err
}

// updateChannel#b6d45656 channel_id:int = Update;
func (m *TLUpdateChannel) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannel,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannel) GetChannelId() int32  { return m.Data2.ChannelId }

func NewTLUpdateChannel() *TLUpdateChannel {
	return &TLUpdateChannel{Data2: &Update_Data{}}
}

func (m *TLUpdateChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannel))

	x.Int(m.GetChannelId())

	return x.buf
}

func (m *TLUpdateChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannel))

	x.Int(m.GetChannelId())

	return x.buf
}

func (m *TLUpdateChannel) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())

	return dbuf.err
}

// updateNewChannelMessage#62ba04d9 message:Message pts:int pts_count:int = Update;
func (m *TLUpdateNewChannelMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateNewChannelMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateNewChannelMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateNewChannelMessage) GetMessage() *Message  { return m.Data2.Message_1 }

func (m *TLUpdateNewChannelMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateNewChannelMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateNewChannelMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateNewChannelMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateNewChannelMessage() *TLUpdateNewChannelMessage {
	return &TLUpdateNewChannelMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateNewChannelMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewChannelMessage))

	x.Bytes(m.GetMessage().Encode())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateNewChannelMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewChannelMessage))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateNewChannelMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetMessage(m1)
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateReadChannelInbox#4214f37f channel_id:int max_id:int = Update;
func (m *TLUpdateReadChannelInbox) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateReadChannelInbox,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateReadChannelInbox) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelInbox) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelInbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelInbox) GetMaxId() int32  { return m.Data2.MaxId }

func NewTLUpdateReadChannelInbox() *TLUpdateReadChannelInbox {
	return &TLUpdateReadChannelInbox{Data2: &Update_Data{}}
}

func (m *TLUpdateReadChannelInbox) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadChannelInbox))

	x.Int(m.GetChannelId())
	x.Int(m.GetMaxId())

	return x.buf
}

func (m *TLUpdateReadChannelInbox) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadChannelInbox))

	x.Int(m.GetChannelId())
	x.Int(m.GetMaxId())

	return x.buf
}

func (m *TLUpdateReadChannelInbox) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetMaxId(dbuf.Int())

	return dbuf.err
}

// updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdateDeleteChannelMessages) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateDeleteChannelMessages,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateDeleteChannelMessages) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateDeleteChannelMessages) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateDeleteChannelMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteChannelMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateDeleteChannelMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateDeleteChannelMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateDeleteChannelMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateDeleteChannelMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateDeleteChannelMessages() *TLUpdateDeleteChannelMessages {
	return &TLUpdateDeleteChannelMessages{Data2: &Update_Data{}}
}

func (m *TLUpdateDeleteChannelMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDeleteChannelMessages))

	x.Int(m.GetChannelId())
	x.VectorInt(m.GetMessages())

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateDeleteChannelMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDeleteChannelMessages))

	x.Int(m.GetChannelId())
	x.VectorInt(m.GetMessages())

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateDeleteChannelMessages) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetMessages(dbuf.VectorInt())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateChannelMessageViews#98a12b4b channel_id:int id:int views:int = Update;
func (m *TLUpdateChannelMessageViews) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannelMessageViews,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannelMessageViews) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelMessageViews) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateChannelMessageViews) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateChannelMessageViews) GetId() int32  { return m.Data2.Id_4 }

func (m *TLUpdateChannelMessageViews) SetViews(v int32) { m.Data2.Views = v }
func (m *TLUpdateChannelMessageViews) GetViews() int32  { return m.Data2.Views }

func NewTLUpdateChannelMessageViews() *TLUpdateChannelMessageViews {
	return &TLUpdateChannelMessageViews{Data2: &Update_Data{}}
}

func (m *TLUpdateChannelMessageViews) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelMessageViews))

	x.Int(m.GetChannelId())
	x.Int(m.GetId())
	x.Int(m.GetViews())

	return x.buf
}

func (m *TLUpdateChannelMessageViews) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelMessageViews))

	x.Int(m.GetChannelId())
	x.Int(m.GetId())
	x.Int(m.GetViews())

	return x.buf
}

func (m *TLUpdateChannelMessageViews) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetId(dbuf.Int())
	m.SetViews(dbuf.Int())

	return dbuf.err
}

// updateChatAdmins#6e947941 chat_id:int enabled:Bool version:int = Update;
func (m *TLUpdateChatAdmins) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChatAdmins,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChatAdmins) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatAdmins) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateChatAdmins) SetEnabled(v *Bool) { m.Data2.Enabled = v }
func (m *TLUpdateChatAdmins) GetEnabled() *Bool  { return m.Data2.Enabled }

func (m *TLUpdateChatAdmins) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatAdmins) GetVersion() int32  { return m.Data2.Version }

func NewTLUpdateChatAdmins() *TLUpdateChatAdmins {
	return &TLUpdateChatAdmins{Data2: &Update_Data{}}
}

func (m *TLUpdateChatAdmins) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatAdmins))

	x.Int(m.GetChatId())
	x.Bytes(m.GetEnabled().Encode())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatAdmins) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatAdmins))

	x.Int(m.GetChatId())
	x.Bytes(m.GetEnabled().EncodeToLayer(layer))
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatAdmins) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.SetEnabled(m2)
	m.SetVersion(dbuf.Int())

	return dbuf.err
}

// updateChatParticipantAdmin#b6901959 chat_id:int user_id:int is_admin:Bool version:int = Update;
func (m *TLUpdateChatParticipantAdmin) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChatParticipantAdmin,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChatParticipantAdmin) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatParticipantAdmin) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateChatParticipantAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantAdmin) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateChatParticipantAdmin) SetIsAdmin(v *Bool) { m.Data2.IsAdmin = v }
func (m *TLUpdateChatParticipantAdmin) GetIsAdmin() *Bool  { return m.Data2.IsAdmin }

func (m *TLUpdateChatParticipantAdmin) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantAdmin) GetVersion() int32  { return m.Data2.Version }

func NewTLUpdateChatParticipantAdmin() *TLUpdateChatParticipantAdmin {
	return &TLUpdateChatParticipantAdmin{Data2: &Update_Data{}}
}

func (m *TLUpdateChatParticipantAdmin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipantAdmin))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetIsAdmin().Encode())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatParticipantAdmin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChatParticipantAdmin))

	x.Int(m.GetChatId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetIsAdmin().EncodeToLayer(layer))
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLUpdateChatParticipantAdmin) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m3 := &Bool{}
	m3.Decode(dbuf)
	m.SetIsAdmin(m3)
	m.SetVersion(dbuf.Int())

	return dbuf.err
}

// updateNewStickerSet#688a30aa stickerset:messages.StickerSet = Update;
func (m *TLUpdateNewStickerSet) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateNewStickerSet,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateNewStickerSet) SetStickerset(v *Messages_StickerSet) { m.Data2.Stickerset = v }
func (m *TLUpdateNewStickerSet) GetStickerset() *Messages_StickerSet  { return m.Data2.Stickerset }

func NewTLUpdateNewStickerSet() *TLUpdateNewStickerSet {
	return &TLUpdateNewStickerSet{Data2: &Update_Data{}}
}

func (m *TLUpdateNewStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewStickerSet))

	x.Bytes(m.GetStickerset().Encode())

	return x.buf
}

func (m *TLUpdateNewStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateNewStickerSet))

	x.Bytes(m.GetStickerset().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateNewStickerSet) Decode(dbuf *DecodeBuf) error {
	m1 := &Messages_StickerSet{}
	m1.Decode(dbuf)
	m.SetStickerset(m1)

	return dbuf.err
}

// updateStickerSetsOrder#bb2d201 flags:# masks:flags.0?true order:Vector<long> = Update;
func (m *TLUpdateStickerSetsOrder) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateStickerSetsOrder,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateStickerSetsOrder) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLUpdateStickerSetsOrder) GetMasks() bool  { return m.Data2.Masks }

func (m *TLUpdateStickerSetsOrder) SetOrder(v []int64) { m.Data2.Order_48 = v }
func (m *TLUpdateStickerSetsOrder) GetOrder() []int64  { return m.Data2.Order_48 }

func NewTLUpdateStickerSetsOrder() *TLUpdateStickerSetsOrder {
	return &TLUpdateStickerSetsOrder{Data2: &Update_Data{}}
}

func (m *TLUpdateStickerSetsOrder) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateStickerSetsOrder))

	// flags
	var flags uint32 = 0
	if m.GetMasks() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.VectorLong(m.GetOrder())

	return x.buf
}

func (m *TLUpdateStickerSetsOrder) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateStickerSetsOrder))

	// flags
	var flags uint32 = 0
	if m.GetMasks() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.VectorLong(m.GetOrder())

	return x.buf
}

func (m *TLUpdateStickerSetsOrder) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetMasks(true)
	}
	m.SetOrder(dbuf.VectorLong())

	return dbuf.err
}

// updateStickerSets#43ae3dec = Update;
func (m *TLUpdateStickerSets) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateStickerSets,
		Data2:       m.Data2,
	}
}

func NewTLUpdateStickerSets() *TLUpdateStickerSets {
	return &TLUpdateStickerSets{Data2: &Update_Data{}}
}

func (m *TLUpdateStickerSets) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateStickerSets))

	return x.buf
}

func (m *TLUpdateStickerSets) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateStickerSets))

	return x.buf
}

func (m *TLUpdateStickerSets) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateSavedGifs#9375341e = Update;
func (m *TLUpdateSavedGifs) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateSavedGifs,
		Data2:       m.Data2,
	}
}

func NewTLUpdateSavedGifs() *TLUpdateSavedGifs {
	return &TLUpdateSavedGifs{Data2: &Update_Data{}}
}

func (m *TLUpdateSavedGifs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateSavedGifs))

	return x.buf
}

func (m *TLUpdateSavedGifs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateSavedGifs))

	return x.buf
}

func (m *TLUpdateSavedGifs) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateBotInlineQuery#54826690 flags:# query_id:long user_id:int query:string geo:flags.0?GeoPoint offset:string = Update;
func (m *TLUpdateBotInlineQuery) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotInlineQuery,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotInlineQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotInlineQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotInlineQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotInlineQuery) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateBotInlineQuery) SetQuery(v string) { m.Data2.Query = v }
func (m *TLUpdateBotInlineQuery) GetQuery() string  { return m.Data2.Query }

func (m *TLUpdateBotInlineQuery) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLUpdateBotInlineQuery) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLUpdateBotInlineQuery) SetOffset(v string) { m.Data2.Offset = v }
func (m *TLUpdateBotInlineQuery) GetOffset() string  { return m.Data2.Offset }

func NewTLUpdateBotInlineQuery() *TLUpdateBotInlineQuery {
	return &TLUpdateBotInlineQuery{Data2: &Update_Data{}}
}

func (m *TLUpdateBotInlineQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotInlineQuery))

	// flags
	var flags uint32 = 0
	if m.GetGeo() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.String(m.GetQuery())
	if m.GetGeo() != nil {
		x.Bytes(m.GetGeo().Encode())
	}
	x.String(m.GetOffset())

	return x.buf
}

func (m *TLUpdateBotInlineQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotInlineQuery))

	// flags
	var flags uint32 = 0
	if m.GetGeo() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.String(m.GetQuery())
	if m.GetGeo() != nil {
		x.Bytes(m.GetGeo().EncodeToLayer(layer))
	}
	x.String(m.GetOffset())

	return x.buf
}

func (m *TLUpdateBotInlineQuery) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetQueryId(dbuf.Long())
	m.SetUserId(dbuf.Int())
	m.SetQuery(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m5 := &GeoPoint{}
		m5.Decode(dbuf)
		m.SetGeo(m5)
	}
	m.SetOffset(dbuf.String())

	return dbuf.err
}

// updateBotInlineSend#e48f964 flags:# user_id:int query:string geo:flags.0?GeoPoint id:string msg_id:flags.1?InputBotInlineMessageID = Update;
func (m *TLUpdateBotInlineSend) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotInlineSend,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotInlineSend) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotInlineSend) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateBotInlineSend) SetQuery(v string) { m.Data2.Query = v }
func (m *TLUpdateBotInlineSend) GetQuery() string  { return m.Data2.Query }

func (m *TLUpdateBotInlineSend) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLUpdateBotInlineSend) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLUpdateBotInlineSend) SetId(v string) { m.Data2.Id_53 = v }
func (m *TLUpdateBotInlineSend) GetId() string  { return m.Data2.Id_53 }

func (m *TLUpdateBotInlineSend) SetMsgId(v *InputBotInlineMessageID) { m.Data2.MsgId_54 = v }
func (m *TLUpdateBotInlineSend) GetMsgId() *InputBotInlineMessageID  { return m.Data2.MsgId_54 }

func NewTLUpdateBotInlineSend() *TLUpdateBotInlineSend {
	return &TLUpdateBotInlineSend{Data2: &Update_Data{}}
}

func (m *TLUpdateBotInlineSend) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotInlineSend))

	// flags
	var flags uint32 = 0
	if m.GetGeo() != nil {
		flags |= 1 << 0
	}
	if m.GetMsgId() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetUserId())
	x.String(m.GetQuery())
	if m.GetGeo() != nil {
		x.Bytes(m.GetGeo().Encode())
	}
	x.String(m.GetId())
	if m.GetMsgId() != nil {
		x.Bytes(m.GetMsgId().Encode())
	}

	return x.buf
}

func (m *TLUpdateBotInlineSend) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotInlineSend))

	// flags
	var flags uint32 = 0
	if m.GetGeo() != nil {
		flags |= 1 << 0
	}
	if m.GetMsgId() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetUserId())
	x.String(m.GetQuery())
	if m.GetGeo() != nil {
		x.Bytes(m.GetGeo().EncodeToLayer(layer))
	}
	x.String(m.GetId())
	if m.GetMsgId() != nil {
		x.Bytes(m.GetMsgId().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLUpdateBotInlineSend) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetUserId(dbuf.Int())
	m.SetQuery(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m4 := &GeoPoint{}
		m4.Decode(dbuf)
		m.SetGeo(m4)
	}
	m.SetId(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		m6 := &InputBotInlineMessageID{}
		m6.Decode(dbuf)
		m.SetMsgId(m6)
	}

	return dbuf.err
}

// updateEditChannelMessage#1b3f4df7 message:Message pts:int pts_count:int = Update;
func (m *TLUpdateEditChannelMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateEditChannelMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateEditChannelMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateEditChannelMessage) GetMessage() *Message  { return m.Data2.Message_1 }

func (m *TLUpdateEditChannelMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateEditChannelMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateEditChannelMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateEditChannelMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateEditChannelMessage() *TLUpdateEditChannelMessage {
	return &TLUpdateEditChannelMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateEditChannelMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEditChannelMessage))

	x.Bytes(m.GetMessage().Encode())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateEditChannelMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEditChannelMessage))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateEditChannelMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetMessage(m1)
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateChannelPinnedMessage#98592475 channel_id:int id:int = Update;
func (m *TLUpdateChannelPinnedMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannelPinnedMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannelPinnedMessage) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelPinnedMessage) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateChannelPinnedMessage) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateChannelPinnedMessage) GetId() int32  { return m.Data2.Id_4 }

func NewTLUpdateChannelPinnedMessage() *TLUpdateChannelPinnedMessage {
	return &TLUpdateChannelPinnedMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateChannelPinnedMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelPinnedMessage))

	x.Int(m.GetChannelId())
	x.Int(m.GetId())

	return x.buf
}

func (m *TLUpdateChannelPinnedMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelPinnedMessage))

	x.Int(m.GetChannelId())
	x.Int(m.GetId())

	return x.buf
}

func (m *TLUpdateChannelPinnedMessage) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetId(dbuf.Int())

	return dbuf.err
}

// updateBotCallbackQuery#e73547e1 flags:# query_id:long user_id:int peer:Peer msg_id:int chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *TLUpdateBotCallbackQuery) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotCallbackQuery,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotCallbackQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotCallbackQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotCallbackQuery) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateBotCallbackQuery) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateBotCallbackQuery) GetPeer() *Peer  { return m.Data2.Peer_39 }

func (m *TLUpdateBotCallbackQuery) SetMsgId(v int32) { m.Data2.MsgId_55 = v }
func (m *TLUpdateBotCallbackQuery) GetMsgId() int32  { return m.Data2.MsgId_55 }

func (m *TLUpdateBotCallbackQuery) SetChatInstance(v int64) { m.Data2.ChatInstance = v }
func (m *TLUpdateBotCallbackQuery) GetChatInstance() int64  { return m.Data2.ChatInstance }

func (m *TLUpdateBotCallbackQuery) SetData(v []byte) { m.Data2.Data_57 = v }
func (m *TLUpdateBotCallbackQuery) GetData() []byte  { return m.Data2.Data_57 }

func (m *TLUpdateBotCallbackQuery) SetGameShortName(v string) { m.Data2.GameShortName = v }
func (m *TLUpdateBotCallbackQuery) GetGameShortName() string  { return m.Data2.GameShortName }

func NewTLUpdateBotCallbackQuery() *TLUpdateBotCallbackQuery {
	return &TLUpdateBotCallbackQuery{Data2: &Update_Data{}}
}

func (m *TLUpdateBotCallbackQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotCallbackQuery))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetGameShortName() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetPeer().Encode())
	x.Int(m.GetMsgId())
	x.Long(m.GetChatInstance())
	if m.GetData() != nil {
		x.StringBytes(m.GetData())
	}
	if m.GetGameShortName() != "" {
		x.String(m.GetGameShortName())
	}

	return x.buf
}

func (m *TLUpdateBotCallbackQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotCallbackQuery))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetGameShortName() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Int(m.GetMsgId())
	x.Long(m.GetChatInstance())
	if m.GetData() != nil {
		x.StringBytes(m.GetData())
	}
	if m.GetGameShortName() != "" {
		x.String(m.GetGameShortName())
	}

	return x.buf
}

func (m *TLUpdateBotCallbackQuery) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetQueryId(dbuf.Long())
	m.SetUserId(dbuf.Int())
	m4 := &Peer{}
	m4.Decode(dbuf)
	m.SetPeer(m4)
	m.SetMsgId(dbuf.Int())
	m.SetChatInstance(dbuf.Long())
	if (flags & (1 << 0)) != 0 {
		m.SetData(dbuf.StringBytes())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetGameShortName(dbuf.String())
	}

	return dbuf.err
}

// updateEditMessage#e40370a3 message:Message pts:int pts_count:int = Update;
func (m *TLUpdateEditMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateEditMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateEditMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateEditMessage) GetMessage() *Message  { return m.Data2.Message_1 }

func (m *TLUpdateEditMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateEditMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateEditMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateEditMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateEditMessage() *TLUpdateEditMessage {
	return &TLUpdateEditMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateEditMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEditMessage))

	x.Bytes(m.GetMessage().Encode())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateEditMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateEditMessage))

	x.Bytes(m.GetMessage().EncodeToLayer(layer))
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateEditMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Message{}
	m1.Decode(dbuf)
	m.SetMessage(m1)
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateInlineBotCallbackQuery#f9d27a5a flags:# query_id:long user_id:int msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *TLUpdateInlineBotCallbackQuery) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateInlineBotCallbackQuery,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateInlineBotCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateInlineBotCallbackQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateInlineBotCallbackQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateInlineBotCallbackQuery) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateInlineBotCallbackQuery) SetMsgId(v *InputBotInlineMessageID) { m.Data2.MsgId_54 = v }
func (m *TLUpdateInlineBotCallbackQuery) GetMsgId() *InputBotInlineMessageID  { return m.Data2.MsgId_54 }

func (m *TLUpdateInlineBotCallbackQuery) SetChatInstance(v int64) { m.Data2.ChatInstance = v }
func (m *TLUpdateInlineBotCallbackQuery) GetChatInstance() int64  { return m.Data2.ChatInstance }

func (m *TLUpdateInlineBotCallbackQuery) SetData(v []byte) { m.Data2.Data_57 = v }
func (m *TLUpdateInlineBotCallbackQuery) GetData() []byte  { return m.Data2.Data_57 }

func (m *TLUpdateInlineBotCallbackQuery) SetGameShortName(v string) { m.Data2.GameShortName = v }
func (m *TLUpdateInlineBotCallbackQuery) GetGameShortName() string  { return m.Data2.GameShortName }

func NewTLUpdateInlineBotCallbackQuery() *TLUpdateInlineBotCallbackQuery {
	return &TLUpdateInlineBotCallbackQuery{Data2: &Update_Data{}}
}

func (m *TLUpdateInlineBotCallbackQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateInlineBotCallbackQuery))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetGameShortName() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetMsgId().Encode())
	x.Long(m.GetChatInstance())
	if m.GetData() != nil {
		x.StringBytes(m.GetData())
	}
	if m.GetGameShortName() != "" {
		x.String(m.GetGameShortName())
	}

	return x.buf
}

func (m *TLUpdateInlineBotCallbackQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateInlineBotCallbackQuery))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetGameShortName() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.Bytes(m.GetMsgId().EncodeToLayer(layer))
	x.Long(m.GetChatInstance())
	if m.GetData() != nil {
		x.StringBytes(m.GetData())
	}
	if m.GetGameShortName() != "" {
		x.String(m.GetGameShortName())
	}

	return x.buf
}

func (m *TLUpdateInlineBotCallbackQuery) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetQueryId(dbuf.Long())
	m.SetUserId(dbuf.Int())
	m4 := &InputBotInlineMessageID{}
	m4.Decode(dbuf)
	m.SetMsgId(m4)
	m.SetChatInstance(dbuf.Long())
	if (flags & (1 << 0)) != 0 {
		m.SetData(dbuf.StringBytes())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetGameShortName(dbuf.String())
	}

	return dbuf.err
}

// updateReadChannelOutbox#25d6c9c7 channel_id:int max_id:int = Update;
func (m *TLUpdateReadChannelOutbox) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateReadChannelOutbox,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateReadChannelOutbox) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelOutbox) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelOutbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelOutbox) GetMaxId() int32  { return m.Data2.MaxId }

func NewTLUpdateReadChannelOutbox() *TLUpdateReadChannelOutbox {
	return &TLUpdateReadChannelOutbox{Data2: &Update_Data{}}
}

func (m *TLUpdateReadChannelOutbox) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadChannelOutbox))

	x.Int(m.GetChannelId())
	x.Int(m.GetMaxId())

	return x.buf
}

func (m *TLUpdateReadChannelOutbox) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadChannelOutbox))

	x.Int(m.GetChannelId())
	x.Int(m.GetMaxId())

	return x.buf
}

func (m *TLUpdateReadChannelOutbox) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetMaxId(dbuf.Int())

	return dbuf.err
}

// updateDraftMessage#ee2bb969 peer:Peer draft:DraftMessage = Update;
func (m *TLUpdateDraftMessage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateDraftMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateDraftMessage) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateDraftMessage) GetPeer() *Peer  { return m.Data2.Peer_39 }

func (m *TLUpdateDraftMessage) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLUpdateDraftMessage) GetDraft() *DraftMessage  { return m.Data2.Draft }

func NewTLUpdateDraftMessage() *TLUpdateDraftMessage {
	return &TLUpdateDraftMessage{Data2: &Update_Data{}}
}

func (m *TLUpdateDraftMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDraftMessage))

	x.Bytes(m.GetPeer().Encode())
	x.Bytes(m.GetDraft().Encode())

	return x.buf
}

func (m *TLUpdateDraftMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDraftMessage))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Bytes(m.GetDraft().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateDraftMessage) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)
	m2 := &DraftMessage{}
	m2.Decode(dbuf)
	m.SetDraft(m2)

	return dbuf.err
}

// updateReadFeaturedStickers#571d2742 = Update;
func (m *TLUpdateReadFeaturedStickers) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateReadFeaturedStickers,
		Data2:       m.Data2,
	}
}

func NewTLUpdateReadFeaturedStickers() *TLUpdateReadFeaturedStickers {
	return &TLUpdateReadFeaturedStickers{Data2: &Update_Data{}}
}

func (m *TLUpdateReadFeaturedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadFeaturedStickers))

	return x.buf
}

func (m *TLUpdateReadFeaturedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateReadFeaturedStickers))

	return x.buf
}

func (m *TLUpdateReadFeaturedStickers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateRecentStickers#9a422c20 = Update;
func (m *TLUpdateRecentStickers) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateRecentStickers,
		Data2:       m.Data2,
	}
}

func NewTLUpdateRecentStickers() *TLUpdateRecentStickers {
	return &TLUpdateRecentStickers{Data2: &Update_Data{}}
}

func (m *TLUpdateRecentStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateRecentStickers))

	return x.buf
}

func (m *TLUpdateRecentStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateRecentStickers))

	return x.buf
}

func (m *TLUpdateRecentStickers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateConfig#a229dd06 = Update;
func (m *TLUpdateConfig) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateConfig,
		Data2:       m.Data2,
	}
}

func NewTLUpdateConfig() *TLUpdateConfig {
	return &TLUpdateConfig{Data2: &Update_Data{}}
}

func (m *TLUpdateConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateConfig))

	return x.buf
}

func (m *TLUpdateConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateConfig))

	return x.buf
}

func (m *TLUpdateConfig) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updatePtsChanged#3354678f = Update;
func (m *TLUpdatePtsChanged) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updatePtsChanged,
		Data2:       m.Data2,
	}
}

func NewTLUpdatePtsChanged() *TLUpdatePtsChanged {
	return &TLUpdatePtsChanged{Data2: &Update_Data{}}
}

func (m *TLUpdatePtsChanged) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePtsChanged))

	return x.buf
}

func (m *TLUpdatePtsChanged) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePtsChanged))

	return x.buf
}

func (m *TLUpdatePtsChanged) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateChannelWebPage#40771900 channel_id:int webpage:WebPage pts:int pts_count:int = Update;
func (m *TLUpdateChannelWebPage) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannelWebPage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannelWebPage) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelWebPage) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateChannelWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLUpdateChannelWebPage) GetWebpage() *WebPage  { return m.Data2.Webpage }

func (m *TLUpdateChannelWebPage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateChannelWebPage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateChannelWebPage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateChannelWebPage) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLUpdateChannelWebPage() *TLUpdateChannelWebPage {
	return &TLUpdateChannelWebPage{Data2: &Update_Data{}}
}

func (m *TLUpdateChannelWebPage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelWebPage))

	x.Int(m.GetChannelId())
	x.Bytes(m.GetWebpage().Encode())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateChannelWebPage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelWebPage))

	x.Int(m.GetChannelId())
	x.Bytes(m.GetWebpage().EncodeToLayer(layer))
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLUpdateChannelWebPage) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m2 := &WebPage{}
	m2.Decode(dbuf)
	m.SetWebpage(m2)
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

// updateDialogPinned#19d27f3c flags:# pinned:flags.0?true peer:DialogPeer = Update;
func (m *TLUpdateDialogPinned) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateDialogPinned,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateDialogPinned) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdateDialogPinned) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLUpdateDialogPinned) SetPeer(v *DialogPeer) { m.Data2.Peer_61 = v }
func (m *TLUpdateDialogPinned) GetPeer() *DialogPeer  { return m.Data2.Peer_61 }

func NewTLUpdateDialogPinned() *TLUpdateDialogPinned {
	return &TLUpdateDialogPinned{Data2: &Update_Data{}}
}

func (m *TLUpdateDialogPinned) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDialogPinned))

	// flags
	var flags uint32 = 0
	if m.GetPinned() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetPeer().Encode())

	return x.buf
}

func (m *TLUpdateDialogPinned) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDialogPinned))

	// flags
	var flags uint32 = 0
	if m.GetPinned() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetPeer().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateDialogPinned) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetPinned(true)
	}
	m3 := &DialogPeer{}
	m3.Decode(dbuf)
	m.SetPeer(m3)

	return dbuf.err
}

// updatePinnedDialogs#ea4cb65b flags:# order:flags.0?Vector<DialogPeer> = Update;
func (m *TLUpdatePinnedDialogs) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updatePinnedDialogs,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatePinnedDialogs) SetOrder(v []*DialogPeer) { m.Data2.Order_62 = v }
func (m *TLUpdatePinnedDialogs) GetOrder() []*DialogPeer  { return m.Data2.Order_62 }

func NewTLUpdatePinnedDialogs() *TLUpdatePinnedDialogs {
	return &TLUpdatePinnedDialogs{Data2: &Update_Data{}}
}

func (m *TLUpdatePinnedDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePinnedDialogs))

	// flags
	var flags uint32 = 0
	if m.GetOrder() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetOrder() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetOrder())))
		for _, v := range m.GetOrder() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLUpdatePinnedDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePinnedDialogs))

	// flags
	var flags uint32 = 0
	if m.GetOrder() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetOrder() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetOrder())))
		for _, v := range m.GetOrder() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLUpdatePinnedDialogs) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		c2 := dbuf.Int()
		if c2 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
			return dbuf.err
		}
		l2 := dbuf.Int()
		v2 := make([]*DialogPeer, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &DialogPeer{}
			v2[i].Decode(dbuf)
		}
		m.SetOrder(v2)

	}

	return dbuf.err
}

// updateBotWebhookJSON#8317c0c3 data:DataJSON = Update;
func (m *TLUpdateBotWebhookJSON) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotWebhookJSON,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotWebhookJSON) SetData(v *DataJSON) { m.Data2.Data_63 = v }
func (m *TLUpdateBotWebhookJSON) GetData() *DataJSON  { return m.Data2.Data_63 }

func NewTLUpdateBotWebhookJSON() *TLUpdateBotWebhookJSON {
	return &TLUpdateBotWebhookJSON{Data2: &Update_Data{}}
}

func (m *TLUpdateBotWebhookJSON) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotWebhookJSON))

	x.Bytes(m.GetData().Encode())

	return x.buf
}

func (m *TLUpdateBotWebhookJSON) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotWebhookJSON))

	x.Bytes(m.GetData().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateBotWebhookJSON) Decode(dbuf *DecodeBuf) error {
	m1 := &DataJSON{}
	m1.Decode(dbuf)
	m.SetData(m1)

	return dbuf.err
}

// updateBotWebhookJSONQuery#9b9240a6 query_id:long data:DataJSON timeout:int = Update;
func (m *TLUpdateBotWebhookJSONQuery) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotWebhookJSONQuery,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotWebhookJSONQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotWebhookJSONQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotWebhookJSONQuery) SetData(v *DataJSON) { m.Data2.Data_63 = v }
func (m *TLUpdateBotWebhookJSONQuery) GetData() *DataJSON  { return m.Data2.Data_63 }

func (m *TLUpdateBotWebhookJSONQuery) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdateBotWebhookJSONQuery) GetTimeout() int32  { return m.Data2.Timeout }

func NewTLUpdateBotWebhookJSONQuery() *TLUpdateBotWebhookJSONQuery {
	return &TLUpdateBotWebhookJSONQuery{Data2: &Update_Data{}}
}

func (m *TLUpdateBotWebhookJSONQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotWebhookJSONQuery))

	x.Long(m.GetQueryId())
	x.Bytes(m.GetData().Encode())
	x.Int(m.GetTimeout())

	return x.buf
}

func (m *TLUpdateBotWebhookJSONQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotWebhookJSONQuery))

	x.Long(m.GetQueryId())
	x.Bytes(m.GetData().EncodeToLayer(layer))
	x.Int(m.GetTimeout())

	return x.buf
}

func (m *TLUpdateBotWebhookJSONQuery) Decode(dbuf *DecodeBuf) error {
	m.SetQueryId(dbuf.Long())
	m2 := &DataJSON{}
	m2.Decode(dbuf)
	m.SetData(m2)
	m.SetTimeout(dbuf.Int())

	return dbuf.err
}

// updateBotShippingQuery#e0cdc940 query_id:long user_id:int payload:bytes shipping_address:PostAddress = Update;
func (m *TLUpdateBotShippingQuery) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotShippingQuery,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotShippingQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotShippingQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotShippingQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotShippingQuery) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateBotShippingQuery) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLUpdateBotShippingQuery) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLUpdateBotShippingQuery) SetShippingAddress(v *PostAddress) { m.Data2.ShippingAddress = v }
func (m *TLUpdateBotShippingQuery) GetShippingAddress() *PostAddress  { return m.Data2.ShippingAddress }

func NewTLUpdateBotShippingQuery() *TLUpdateBotShippingQuery {
	return &TLUpdateBotShippingQuery{Data2: &Update_Data{}}
}

func (m *TLUpdateBotShippingQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotShippingQuery))

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.StringBytes(m.GetPayload())
	x.Bytes(m.GetShippingAddress().Encode())

	return x.buf
}

func (m *TLUpdateBotShippingQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotShippingQuery))

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.StringBytes(m.GetPayload())
	x.Bytes(m.GetShippingAddress().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateBotShippingQuery) Decode(dbuf *DecodeBuf) error {
	m.SetQueryId(dbuf.Long())
	m.SetUserId(dbuf.Int())
	m.SetPayload(dbuf.StringBytes())
	m4 := &PostAddress{}
	m4.Decode(dbuf)
	m.SetShippingAddress(m4)

	return dbuf.err
}

// updateBotPrecheckoutQuery#5d2f3aa9 flags:# query_id:long user_id:int payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string currency:string total_amount:long = Update;
func (m *TLUpdateBotPrecheckoutQuery) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateBotPrecheckoutQuery,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateBotPrecheckoutQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotPrecheckoutQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateBotPrecheckoutQuery) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLUpdateBotPrecheckoutQuery) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLUpdateBotPrecheckoutQuery) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLUpdateBotPrecheckoutQuery) GetInfo() *PaymentRequestedInfo  { return m.Data2.Info }

func (m *TLUpdateBotPrecheckoutQuery) SetShippingOptionId(v string) { m.Data2.ShippingOptionId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetShippingOptionId() string  { return m.Data2.ShippingOptionId }

func (m *TLUpdateBotPrecheckoutQuery) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLUpdateBotPrecheckoutQuery) GetCurrency() string  { return m.Data2.Currency }

func (m *TLUpdateBotPrecheckoutQuery) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLUpdateBotPrecheckoutQuery) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func NewTLUpdateBotPrecheckoutQuery() *TLUpdateBotPrecheckoutQuery {
	return &TLUpdateBotPrecheckoutQuery{Data2: &Update_Data{}}
}

func (m *TLUpdateBotPrecheckoutQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotPrecheckoutQuery))

	// flags
	var flags uint32 = 0
	if m.GetInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetShippingOptionId() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.StringBytes(m.GetPayload())
	if m.GetInfo() != nil {
		x.Bytes(m.GetInfo().Encode())
	}
	if m.GetShippingOptionId() != "" {
		x.String(m.GetShippingOptionId())
	}
	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())

	return x.buf
}

func (m *TLUpdateBotPrecheckoutQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateBotPrecheckoutQuery))

	// flags
	var flags uint32 = 0
	if m.GetInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetShippingOptionId() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	x.Int(m.GetUserId())
	x.StringBytes(m.GetPayload())
	if m.GetInfo() != nil {
		x.Bytes(m.GetInfo().EncodeToLayer(layer))
	}
	if m.GetShippingOptionId() != "" {
		x.String(m.GetShippingOptionId())
	}
	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())

	return x.buf
}

func (m *TLUpdateBotPrecheckoutQuery) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetQueryId(dbuf.Long())
	m.SetUserId(dbuf.Int())
	m.SetPayload(dbuf.StringBytes())
	if (flags & (1 << 0)) != 0 {
		m5 := &PaymentRequestedInfo{}
		m5.Decode(dbuf)
		m.SetInfo(m5)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetShippingOptionId(dbuf.String())
	}
	m.SetCurrency(dbuf.String())
	m.SetTotalAmount(dbuf.Long())

	return dbuf.err
}

// updatePhoneCall#ab0f6b1e phone_call:PhoneCall = Update;
func (m *TLUpdatePhoneCall) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updatePhoneCall,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatePhoneCall) SetPhoneCall(v *PhoneCall) { m.Data2.PhoneCall = v }
func (m *TLUpdatePhoneCall) GetPhoneCall() *PhoneCall  { return m.Data2.PhoneCall }

func NewTLUpdatePhoneCall() *TLUpdatePhoneCall {
	return &TLUpdatePhoneCall{Data2: &Update_Data{}}
}

func (m *TLUpdatePhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePhoneCall))

	x.Bytes(m.GetPhoneCall().Encode())

	return x.buf
}

func (m *TLUpdatePhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatePhoneCall))

	x.Bytes(m.GetPhoneCall().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdatePhoneCall) Decode(dbuf *DecodeBuf) error {
	m1 := &PhoneCall{}
	m1.Decode(dbuf)
	m.SetPhoneCall(m1)

	return dbuf.err
}

// updateLangPackTooLong#10c2404b = Update;
func (m *TLUpdateLangPackTooLong) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateLangPackTooLong,
		Data2:       m.Data2,
	}
}

func NewTLUpdateLangPackTooLong() *TLUpdateLangPackTooLong {
	return &TLUpdateLangPackTooLong{Data2: &Update_Data{}}
}

func (m *TLUpdateLangPackTooLong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateLangPackTooLong))

	return x.buf
}

func (m *TLUpdateLangPackTooLong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateLangPackTooLong))

	return x.buf
}

func (m *TLUpdateLangPackTooLong) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateLangPack#56022f4d difference:LangPackDifference = Update;
func (m *TLUpdateLangPack) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateLangPack,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateLangPack) SetDifference(v *LangPackDifference) { m.Data2.Difference = v }
func (m *TLUpdateLangPack) GetDifference() *LangPackDifference  { return m.Data2.Difference }

func NewTLUpdateLangPack() *TLUpdateLangPack {
	return &TLUpdateLangPack{Data2: &Update_Data{}}
}

func (m *TLUpdateLangPack) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateLangPack))

	x.Bytes(m.GetDifference().Encode())

	return x.buf
}

func (m *TLUpdateLangPack) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateLangPack))

	x.Bytes(m.GetDifference().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateLangPack) Decode(dbuf *DecodeBuf) error {
	m1 := &LangPackDifference{}
	m1.Decode(dbuf)
	m.SetDifference(m1)

	return dbuf.err
}

// updateFavedStickers#e511996d = Update;
func (m *TLUpdateFavedStickers) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateFavedStickers,
		Data2:       m.Data2,
	}
}

func NewTLUpdateFavedStickers() *TLUpdateFavedStickers {
	return &TLUpdateFavedStickers{Data2: &Update_Data{}}
}

func (m *TLUpdateFavedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateFavedStickers))

	return x.buf
}

func (m *TLUpdateFavedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateFavedStickers))

	return x.buf
}

func (m *TLUpdateFavedStickers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateChannelReadMessagesContents#89893b45 channel_id:int messages:Vector<int> = Update;
func (m *TLUpdateChannelReadMessagesContents) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannelReadMessagesContents,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannelReadMessagesContents) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelReadMessagesContents) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateChannelReadMessagesContents) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateChannelReadMessagesContents) GetMessages() []int32  { return m.Data2.Messages }

func NewTLUpdateChannelReadMessagesContents() *TLUpdateChannelReadMessagesContents {
	return &TLUpdateChannelReadMessagesContents{Data2: &Update_Data{}}
}

func (m *TLUpdateChannelReadMessagesContents) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelReadMessagesContents))

	x.Int(m.GetChannelId())
	x.VectorInt(m.GetMessages())

	return x.buf
}

func (m *TLUpdateChannelReadMessagesContents) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelReadMessagesContents))

	x.Int(m.GetChannelId())
	x.VectorInt(m.GetMessages())

	return x.buf
}

func (m *TLUpdateChannelReadMessagesContents) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetMessages(dbuf.VectorInt())

	return dbuf.err
}

// updateContactsReset#7084a7be = Update;
func (m *TLUpdateContactsReset) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateContactsReset,
		Data2:       m.Data2,
	}
}

func NewTLUpdateContactsReset() *TLUpdateContactsReset {
	return &TLUpdateContactsReset{Data2: &Update_Data{}}
}

func (m *TLUpdateContactsReset) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateContactsReset))

	return x.buf
}

func (m *TLUpdateContactsReset) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateContactsReset))

	return x.buf
}

func (m *TLUpdateContactsReset) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateChannelAvailableMessages#70db6837 channel_id:int available_min_id:int = Update;
func (m *TLUpdateChannelAvailableMessages) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateChannelAvailableMessages,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateChannelAvailableMessages) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelAvailableMessages) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLUpdateChannelAvailableMessages) SetAvailableMinId(v int32) { m.Data2.AvailableMinId = v }
func (m *TLUpdateChannelAvailableMessages) GetAvailableMinId() int32  { return m.Data2.AvailableMinId }

func NewTLUpdateChannelAvailableMessages() *TLUpdateChannelAvailableMessages {
	return &TLUpdateChannelAvailableMessages{Data2: &Update_Data{}}
}

func (m *TLUpdateChannelAvailableMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelAvailableMessages))

	x.Int(m.GetChannelId())
	x.Int(m.GetAvailableMinId())

	return x.buf
}

func (m *TLUpdateChannelAvailableMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateChannelAvailableMessages))

	x.Int(m.GetChannelId())
	x.Int(m.GetAvailableMinId())

	return x.buf
}

func (m *TLUpdateChannelAvailableMessages) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetAvailableMinId(dbuf.Int())

	return dbuf.err
}

// updateDialogUnreadMark#e16459c3 flags:# unread:flags.0?true peer:DialogPeer = Update;
func (m *TLUpdateDialogUnreadMark) To_Update() *Update {
	return &Update{
		Constructor: TLConstructor_CRC32_updateDialogUnreadMark,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateDialogUnreadMark) SetUnread(v bool) { m.Data2.Unread = v }
func (m *TLUpdateDialogUnreadMark) GetUnread() bool  { return m.Data2.Unread }

func (m *TLUpdateDialogUnreadMark) SetPeer(v *DialogPeer) { m.Data2.Peer_61 = v }
func (m *TLUpdateDialogUnreadMark) GetPeer() *DialogPeer  { return m.Data2.Peer_61 }

func NewTLUpdateDialogUnreadMark() *TLUpdateDialogUnreadMark {
	return &TLUpdateDialogUnreadMark{Data2: &Update_Data{}}
}

func (m *TLUpdateDialogUnreadMark) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDialogUnreadMark))

	// flags
	var flags uint32 = 0
	if m.GetUnread() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetPeer().Encode())

	return x.buf
}

func (m *TLUpdateDialogUnreadMark) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateDialogUnreadMark))

	// flags
	var flags uint32 = 0
	if m.GetUnread() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetPeer().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdateDialogUnreadMark) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetUnread(true)
	}
	m3 := &DialogPeer{}
	m3.Decode(dbuf)
	m.SetPeer(m3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PaymentRequestedInfo <--
//  + TL_PaymentRequestedInfo
//

func (m *PaymentRequestedInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_paymentRequestedInfo:
		t := m.To_PaymentRequestedInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PaymentRequestedInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_paymentRequestedInfo:
		t := m.To_PaymentRequestedInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PaymentRequestedInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_paymentRequestedInfo:
		m2 := &TLPaymentRequestedInfo{Data2: &PaymentRequestedInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// paymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;
func (m *PaymentRequestedInfo) To_PaymentRequestedInfo() *TLPaymentRequestedInfo {
	return &TLPaymentRequestedInfo{
		Data2: m.Data2,
	}
}

// paymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;
func (m *TLPaymentRequestedInfo) To_PaymentRequestedInfo() *PaymentRequestedInfo {
	return &PaymentRequestedInfo{
		Constructor: TLConstructor_CRC32_paymentRequestedInfo,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentRequestedInfo) SetName(v string) { m.Data2.Name = v }
func (m *TLPaymentRequestedInfo) GetName() string  { return m.Data2.Name }

func (m *TLPaymentRequestedInfo) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLPaymentRequestedInfo) GetPhone() string  { return m.Data2.Phone }

func (m *TLPaymentRequestedInfo) SetEmail(v string) { m.Data2.Email = v }
func (m *TLPaymentRequestedInfo) GetEmail() string  { return m.Data2.Email }

func (m *TLPaymentRequestedInfo) SetShippingAddress(v *PostAddress) { m.Data2.ShippingAddress = v }
func (m *TLPaymentRequestedInfo) GetShippingAddress() *PostAddress  { return m.Data2.ShippingAddress }

func NewTLPaymentRequestedInfo() *TLPaymentRequestedInfo {
	return &TLPaymentRequestedInfo{Data2: &PaymentRequestedInfo_Data{}}
}

func (m *TLPaymentRequestedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_paymentRequestedInfo))

	// flags
	var flags uint32 = 0
	if m.GetName() != "" {
		flags |= 1 << 0
	}
	if m.GetPhone() != "" {
		flags |= 1 << 1
	}
	if m.GetEmail() != "" {
		flags |= 1 << 2
	}
	if m.GetShippingAddress() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetName() != "" {
		x.String(m.GetName())
	}
	if m.GetPhone() != "" {
		x.String(m.GetPhone())
	}
	if m.GetEmail() != "" {
		x.String(m.GetEmail())
	}
	if m.GetShippingAddress() != nil {
		x.Bytes(m.GetShippingAddress().Encode())
	}

	return x.buf
}

func (m *TLPaymentRequestedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_paymentRequestedInfo))

	// flags
	var flags uint32 = 0
	if m.GetName() != "" {
		flags |= 1 << 0
	}
	if m.GetPhone() != "" {
		flags |= 1 << 1
	}
	if m.GetEmail() != "" {
		flags |= 1 << 2
	}
	if m.GetShippingAddress() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetName() != "" {
		x.String(m.GetName())
	}
	if m.GetPhone() != "" {
		x.String(m.GetPhone())
	}
	if m.GetEmail() != "" {
		x.String(m.GetEmail())
	}
	if m.GetShippingAddress() != nil {
		x.Bytes(m.GetShippingAddress().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLPaymentRequestedInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetName(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetPhone(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetEmail(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m5 := &PostAddress{}
		m5.Decode(dbuf)
		m.SetShippingAddress(m5)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// UserProfilePhoto <--
//  + TL_UserProfilePhotoEmpty
//  + TL_UserProfilePhoto
//

func (m *UserProfilePhoto) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_userProfilePhotoEmpty:
		t := m.To_UserProfilePhotoEmpty()
		return t.Encode()
	case TLConstructor_CRC32_userProfilePhoto:
		t := m.To_UserProfilePhoto()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *UserProfilePhoto) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_userProfilePhotoEmpty:
		t := m.To_UserProfilePhotoEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_userProfilePhoto:
		t := m.To_UserProfilePhoto()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *UserProfilePhoto) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_userProfilePhotoEmpty:
		m2 := &TLUserProfilePhotoEmpty{Data2: &UserProfilePhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_userProfilePhoto:
		m2 := &TLUserProfilePhoto{Data2: &UserProfilePhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// userProfilePhotoEmpty#4f11bae1 = UserProfilePhoto;
func (m *UserProfilePhoto) To_UserProfilePhotoEmpty() *TLUserProfilePhotoEmpty {
	return &TLUserProfilePhotoEmpty{
		Data2: m.Data2,
	}
}

// userProfilePhoto#d559d8c8 photo_id:long photo_small:FileLocation photo_big:FileLocation = UserProfilePhoto;
func (m *UserProfilePhoto) To_UserProfilePhoto() *TLUserProfilePhoto {
	return &TLUserProfilePhoto{
		Data2: m.Data2,
	}
}

// userProfilePhotoEmpty#4f11bae1 = UserProfilePhoto;
func (m *TLUserProfilePhotoEmpty) To_UserProfilePhoto() *UserProfilePhoto {
	return &UserProfilePhoto{
		Constructor: TLConstructor_CRC32_userProfilePhotoEmpty,
		Data2:       m.Data2,
	}
}

func NewTLUserProfilePhotoEmpty() *TLUserProfilePhotoEmpty {
	return &TLUserProfilePhotoEmpty{Data2: &UserProfilePhoto_Data{}}
}

func (m *TLUserProfilePhotoEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userProfilePhotoEmpty))

	return x.buf
}

func (m *TLUserProfilePhotoEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userProfilePhotoEmpty))

	return x.buf
}

func (m *TLUserProfilePhotoEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// userProfilePhoto#d559d8c8 photo_id:long photo_small:FileLocation photo_big:FileLocation = UserProfilePhoto;
func (m *TLUserProfilePhoto) To_UserProfilePhoto() *UserProfilePhoto {
	return &UserProfilePhoto{
		Constructor: TLConstructor_CRC32_userProfilePhoto,
		Data2:       m.Data2,
	}
}

func (m *TLUserProfilePhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLUserProfilePhoto) GetPhotoId() int64  { return m.Data2.PhotoId }

func (m *TLUserProfilePhoto) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLUserProfilePhoto) GetPhotoSmall() *FileLocation  { return m.Data2.PhotoSmall }

func (m *TLUserProfilePhoto) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLUserProfilePhoto) GetPhotoBig() *FileLocation  { return m.Data2.PhotoBig }

func NewTLUserProfilePhoto() *TLUserProfilePhoto {
	return &TLUserProfilePhoto{Data2: &UserProfilePhoto_Data{}}
}

func (m *TLUserProfilePhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userProfilePhoto))

	x.Long(m.GetPhotoId())
	x.Bytes(m.GetPhotoSmall().Encode())
	x.Bytes(m.GetPhotoBig().Encode())

	return x.buf
}

func (m *TLUserProfilePhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userProfilePhoto))

	x.Long(m.GetPhotoId())
	x.Bytes(m.GetPhotoSmall().EncodeToLayer(layer))
	x.Bytes(m.GetPhotoBig().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUserProfilePhoto) Decode(dbuf *DecodeBuf) error {
	m.SetPhotoId(dbuf.Long())
	m2 := &FileLocation{}
	m2.Decode(dbuf)
	m.SetPhotoSmall(m2)
	m3 := &FileLocation{}
	m3.Decode(dbuf)
	m.SetPhotoBig(m3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// LangPackDifference <--
//  + TL_LangPackDifference
//

func (m *LangPackDifference) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_langPackDifference:
		t := m.To_LangPackDifference()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LangPackDifference) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_langPackDifference:
		t := m.To_LangPackDifference()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LangPackDifference) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_langPackDifference:
		m2 := &TLLangPackDifference{Data2: &LangPackDifference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// langPackDifference#f385c1f6 lang_code:string from_version:int version:int strings:Vector<LangPackString> = LangPackDifference;
func (m *LangPackDifference) To_LangPackDifference() *TLLangPackDifference {
	return &TLLangPackDifference{
		Data2: m.Data2,
	}
}

// langPackDifference#f385c1f6 lang_code:string from_version:int version:int strings:Vector<LangPackString> = LangPackDifference;
func (m *TLLangPackDifference) To_LangPackDifference() *LangPackDifference {
	return &LangPackDifference{
		Constructor: TLConstructor_CRC32_langPackDifference,
		Data2:       m.Data2,
	}
}

func (m *TLLangPackDifference) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackDifference) GetLangCode() string  { return m.Data2.LangCode }

func (m *TLLangPackDifference) SetFromVersion(v int32) { m.Data2.FromVersion = v }
func (m *TLLangPackDifference) GetFromVersion() int32  { return m.Data2.FromVersion }

func (m *TLLangPackDifference) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLLangPackDifference) GetVersion() int32  { return m.Data2.Version }

func (m *TLLangPackDifference) SetStrings(v []*LangPackString) { m.Data2.Strings = v }
func (m *TLLangPackDifference) GetStrings() []*LangPackString  { return m.Data2.Strings }

func NewTLLangPackDifference() *TLLangPackDifference {
	return &TLLangPackDifference{Data2: &LangPackDifference_Data{}}
}

func (m *TLLangPackDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackDifference))

	x.String(m.GetLangCode())
	x.Int(m.GetFromVersion())
	x.Int(m.GetVersion())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStrings())))
	for _, v := range m.GetStrings() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLLangPackDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackDifference))

	x.String(m.GetLangCode())
	x.Int(m.GetFromVersion())
	x.Int(m.GetVersion())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStrings())))
	for _, v := range m.GetStrings() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLLangPackDifference) Decode(dbuf *DecodeBuf) error {
	m.SetLangCode(dbuf.String())
	m.SetFromVersion(dbuf.Int())
	m.SetVersion(dbuf.Int())
	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*LangPackString, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &LangPackString{}
		v4[i].Decode(dbuf)
	}
	m.SetStrings(v4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PopularContact <--
//  + TL_PopularContact
//

func (m *PopularContact) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_popularContact:
		t := m.To_PopularContact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PopularContact) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_popularContact:
		t := m.To_PopularContact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PopularContact) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_popularContact:
		m2 := &TLPopularContact{Data2: &PopularContact_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// popularContact#5ce14175 client_id:long importers:int = PopularContact;
func (m *PopularContact) To_PopularContact() *TLPopularContact {
	return &TLPopularContact{
		Data2: m.Data2,
	}
}

// popularContact#5ce14175 client_id:long importers:int = PopularContact;
func (m *TLPopularContact) To_PopularContact() *PopularContact {
	return &PopularContact{
		Constructor: TLConstructor_CRC32_popularContact,
		Data2:       m.Data2,
	}
}

func (m *TLPopularContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLPopularContact) GetClientId() int64  { return m.Data2.ClientId }

func (m *TLPopularContact) SetImporters(v int32) { m.Data2.Importers = v }
func (m *TLPopularContact) GetImporters() int32  { return m.Data2.Importers }

func NewTLPopularContact() *TLPopularContact {
	return &TLPopularContact{Data2: &PopularContact_Data{}}
}

func (m *TLPopularContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_popularContact))

	x.Long(m.GetClientId())
	x.Int(m.GetImporters())

	return x.buf
}

func (m *TLPopularContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_popularContact))

	x.Long(m.GetClientId())
	x.Int(m.GetImporters())

	return x.buf
}

func (m *TLPopularContact) Decode(dbuf *DecodeBuf) error {
	m.SetClientId(dbuf.Long())
	m.SetImporters(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PasswordKdfAlgo <--
//  + TL_PasswordKdfAlgoUnknown
//  + TL_PasswordKdfAlgoModPow
//

func (m *PasswordKdfAlgo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_passwordKdfAlgoUnknown:
		t := m.To_PasswordKdfAlgoUnknown()
		return t.Encode()
	case TLConstructor_CRC32_passwordKdfAlgoModPow:
		t := m.To_PasswordKdfAlgoModPow()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PasswordKdfAlgo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_passwordKdfAlgoUnknown:
		t := m.To_PasswordKdfAlgoUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_passwordKdfAlgoModPow:
		t := m.To_PasswordKdfAlgoModPow()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PasswordKdfAlgo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_passwordKdfAlgoUnknown:
		m2 := &TLPasswordKdfAlgoUnknown{Data2: &PasswordKdfAlgo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_passwordKdfAlgoModPow:
		m2 := &TLPasswordKdfAlgoModPow{Data2: &PasswordKdfAlgo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// passwordKdfAlgoUnknown#d45ab096 = PasswordKdfAlgo;
func (m *PasswordKdfAlgo) To_PasswordKdfAlgoUnknown() *TLPasswordKdfAlgoUnknown {
	return &TLPasswordKdfAlgoUnknown{
		Data2: m.Data2,
	}
}

// passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow#3a912d4a salt1:bytes salt2:bytes g:int p:bytes = PasswordKdfAlgo;
func (m *PasswordKdfAlgo) To_PasswordKdfAlgoModPow() *TLPasswordKdfAlgoModPow {
	return &TLPasswordKdfAlgoModPow{
		Data2: m.Data2,
	}
}

// passwordKdfAlgoUnknown#d45ab096 = PasswordKdfAlgo;
func (m *TLPasswordKdfAlgoUnknown) To_PasswordKdfAlgo() *PasswordKdfAlgo {
	return &PasswordKdfAlgo{
		Constructor: TLConstructor_CRC32_passwordKdfAlgoUnknown,
		Data2:       m.Data2,
	}
}

func NewTLPasswordKdfAlgoUnknown() *TLPasswordKdfAlgoUnknown {
	return &TLPasswordKdfAlgoUnknown{Data2: &PasswordKdfAlgo_Data{}}
}

func (m *TLPasswordKdfAlgoUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_passwordKdfAlgoUnknown))

	return x.buf
}

func (m *TLPasswordKdfAlgoUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_passwordKdfAlgoUnknown))

	return x.buf
}

func (m *TLPasswordKdfAlgoUnknown) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow#3a912d4a salt1:bytes salt2:bytes g:int p:bytes = PasswordKdfAlgo;
func (m *TLPasswordKdfAlgoModPow) To_PasswordKdfAlgo() *PasswordKdfAlgo {
	return &PasswordKdfAlgo{
		Constructor: TLConstructor_CRC32_passwordKdfAlgoModPow,
		Data2:       m.Data2,
	}
}

func (m *TLPasswordKdfAlgoModPow) SetSalt1(v []byte) { m.Data2.Salt1 = v }
func (m *TLPasswordKdfAlgoModPow) GetSalt1() []byte  { return m.Data2.Salt1 }

func (m *TLPasswordKdfAlgoModPow) SetSalt2(v []byte) { m.Data2.Salt2 = v }
func (m *TLPasswordKdfAlgoModPow) GetSalt2() []byte  { return m.Data2.Salt2 }

func (m *TLPasswordKdfAlgoModPow) SetG(v int32) { m.Data2.G = v }
func (m *TLPasswordKdfAlgoModPow) GetG() int32  { return m.Data2.G }

func (m *TLPasswordKdfAlgoModPow) SetP(v []byte) { m.Data2.P = v }
func (m *TLPasswordKdfAlgoModPow) GetP() []byte  { return m.Data2.P }

func NewTLPasswordKdfAlgoModPow() *TLPasswordKdfAlgoModPow {
	return &TLPasswordKdfAlgoModPow{Data2: &PasswordKdfAlgo_Data{}}
}

func (m *TLPasswordKdfAlgoModPow) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_passwordKdfAlgoModPow))

	x.StringBytes(m.GetSalt1())
	x.StringBytes(m.GetSalt2())
	x.Int(m.GetG())
	x.StringBytes(m.GetP())

	return x.buf
}

func (m *TLPasswordKdfAlgoModPow) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_passwordKdfAlgoModPow))

	x.StringBytes(m.GetSalt1())
	x.StringBytes(m.GetSalt2())
	x.Int(m.GetG())
	x.StringBytes(m.GetP())

	return x.buf
}

func (m *TLPasswordKdfAlgoModPow) Decode(dbuf *DecodeBuf) error {
	m.SetSalt1(dbuf.StringBytes())
	m.SetSalt2(dbuf.StringBytes())
	m.SetG(dbuf.Int())
	m.SetP(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Stickers <--
//  + TL_MessagesStickersNotModified
//  + TL_MessagesStickers
//

func (m *Messages_Stickers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_stickersNotModified:
		t := m.To_MessagesStickersNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_stickers:
		t := m.To_MessagesStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Stickers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_stickersNotModified:
		t := m.To_MessagesStickersNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_stickers:
		t := m.To_MessagesStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Stickers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_stickersNotModified:
		m2 := &TLMessagesStickersNotModified{Data2: &Messages_Stickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_stickers:
		m2 := &TLMessagesStickers{Data2: &Messages_Stickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.stickersNotModified#f1749a22 = messages.Stickers;
func (m *Messages_Stickers) To_MessagesStickersNotModified() *TLMessagesStickersNotModified {
	return &TLMessagesStickersNotModified{
		Data2: m.Data2,
	}
}

// messages.stickers#e4599bbd hash:int stickers:Vector<Document> = messages.Stickers;
func (m *Messages_Stickers) To_MessagesStickers() *TLMessagesStickers {
	return &TLMessagesStickers{
		Data2: m.Data2,
	}
}

// messages.stickersNotModified#f1749a22 = messages.Stickers;
func (m *TLMessagesStickersNotModified) To_Messages_Stickers() *Messages_Stickers {
	return &Messages_Stickers{
		Constructor: TLConstructor_CRC32_messages_stickersNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesStickersNotModified() *TLMessagesStickersNotModified {
	return &TLMessagesStickersNotModified{Data2: &Messages_Stickers_Data{}}
}

func (m *TLMessagesStickersNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickersNotModified))

	return x.buf
}

func (m *TLMessagesStickersNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickersNotModified))

	return x.buf
}

func (m *TLMessagesStickersNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.stickers#e4599bbd hash:int stickers:Vector<Document> = messages.Stickers;
func (m *TLMessagesStickers) To_Messages_Stickers() *Messages_Stickers {
	return &Messages_Stickers{
		Constructor: TLConstructor_CRC32_messages_stickers,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesStickers) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesStickers) GetStickers() []*Document  { return m.Data2.Stickers }

func NewTLMessagesStickers() *TLMessagesStickers {
	return &TLMessagesStickers{Data2: &Messages_Stickers_Data{}}
}

func (m *TLMessagesStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStickers())))
	for _, v := range m.GetStickers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStickers())))
	for _, v := range m.GetStickers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesStickers) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Document, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Document{}
		v2[i].Decode(dbuf)
	}
	m.SetStickers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Game <--
//  + TL_Game
//

func (m *Game) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_game:
		t := m.To_Game()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Game) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_game:
		t := m.To_Game()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Game) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_game:
		m2 := &TLGame{Data2: &Game_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game;
func (m *Game) To_Game() *TLGame {
	return &TLGame{
		Data2: m.Data2,
	}
}

// game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game;
func (m *TLGame) To_Game() *Game {
	return &Game{
		Constructor: TLConstructor_CRC32_game,
		Data2:       m.Data2,
	}
}

func (m *TLGame) SetId(v int64) { m.Data2.Id = v }
func (m *TLGame) GetId() int64  { return m.Data2.Id }

func (m *TLGame) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGame) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLGame) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLGame) GetShortName() string  { return m.Data2.ShortName }

func (m *TLGame) SetTitle(v string) { m.Data2.Title = v }
func (m *TLGame) GetTitle() string  { return m.Data2.Title }

func (m *TLGame) SetDescription(v string) { m.Data2.Description = v }
func (m *TLGame) GetDescription() string  { return m.Data2.Description }

func (m *TLGame) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLGame) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLGame) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLGame) GetDocument() *Document  { return m.Data2.Document }

func NewTLGame() *TLGame {
	return &TLGame{Data2: &Game_Data{}}
}

func (m *TLGame) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_game))

	// flags
	var flags uint32 = 0
	if m.GetDocument() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.String(m.GetShortName())
	x.String(m.GetTitle())
	x.String(m.GetDescription())
	x.Bytes(m.GetPhoto().Encode())
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().Encode())
	}

	return x.buf
}

func (m *TLGame) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_game))

	// flags
	var flags uint32 = 0
	if m.GetDocument() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.String(m.GetShortName())
	x.String(m.GetTitle())
	x.String(m.GetDescription())
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLGame) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetShortName(dbuf.String())
	m.SetTitle(dbuf.String())
	m.SetDescription(dbuf.String())
	m7 := &Photo{}
	m7.Decode(dbuf)
	m.SetPhoto(m7)
	if (flags & (1 << 0)) != 0 {
		m8 := &Document{}
		m8.Decode(dbuf)
		m.SetDocument(m8)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ReportReason <--
//  + TL_InputReportReasonSpam
//  + TL_InputReportReasonViolence
//  + TL_InputReportReasonPornography
//  + TL_InputReportReasonOther
//  + TL_InputReportReasonCopyright
//

func (m *ReportReason) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputReportReasonSpam:
		t := m.To_InputReportReasonSpam()
		return t.Encode()
	case TLConstructor_CRC32_inputReportReasonViolence:
		t := m.To_InputReportReasonViolence()
		return t.Encode()
	case TLConstructor_CRC32_inputReportReasonPornography:
		t := m.To_InputReportReasonPornography()
		return t.Encode()
	case TLConstructor_CRC32_inputReportReasonOther:
		t := m.To_InputReportReasonOther()
		return t.Encode()
	case TLConstructor_CRC32_inputReportReasonCopyright:
		t := m.To_InputReportReasonCopyright()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ReportReason) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputReportReasonSpam:
		t := m.To_InputReportReasonSpam()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputReportReasonViolence:
		t := m.To_InputReportReasonViolence()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputReportReasonPornography:
		t := m.To_InputReportReasonPornography()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputReportReasonOther:
		t := m.To_InputReportReasonOther()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputReportReasonCopyright:
		t := m.To_InputReportReasonCopyright()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ReportReason) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputReportReasonSpam:
		m2 := &TLInputReportReasonSpam{Data2: &ReportReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputReportReasonViolence:
		m2 := &TLInputReportReasonViolence{Data2: &ReportReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputReportReasonPornography:
		m2 := &TLInputReportReasonPornography{Data2: &ReportReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputReportReasonOther:
		m2 := &TLInputReportReasonOther{Data2: &ReportReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputReportReasonCopyright:
		m2 := &TLInputReportReasonCopyright{Data2: &ReportReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputReportReasonSpam#58dbcab8 = ReportReason;
func (m *ReportReason) To_InputReportReasonSpam() *TLInputReportReasonSpam {
	return &TLInputReportReasonSpam{
		Data2: m.Data2,
	}
}

// inputReportReasonViolence#1e22c78d = ReportReason;
func (m *ReportReason) To_InputReportReasonViolence() *TLInputReportReasonViolence {
	return &TLInputReportReasonViolence{
		Data2: m.Data2,
	}
}

// inputReportReasonPornography#2e59d922 = ReportReason;
func (m *ReportReason) To_InputReportReasonPornography() *TLInputReportReasonPornography {
	return &TLInputReportReasonPornography{
		Data2: m.Data2,
	}
}

// inputReportReasonOther#e1746d0a text:string = ReportReason;
func (m *ReportReason) To_InputReportReasonOther() *TLInputReportReasonOther {
	return &TLInputReportReasonOther{
		Data2: m.Data2,
	}
}

// inputReportReasonCopyright#9b89f93a = ReportReason;
func (m *ReportReason) To_InputReportReasonCopyright() *TLInputReportReasonCopyright {
	return &TLInputReportReasonCopyright{
		Data2: m.Data2,
	}
}

// inputReportReasonSpam#58dbcab8 = ReportReason;
func (m *TLInputReportReasonSpam) To_ReportReason() *ReportReason {
	return &ReportReason{
		Constructor: TLConstructor_CRC32_inputReportReasonSpam,
		Data2:       m.Data2,
	}
}

func NewTLInputReportReasonSpam() *TLInputReportReasonSpam {
	return &TLInputReportReasonSpam{Data2: &ReportReason_Data{}}
}

func (m *TLInputReportReasonSpam) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonSpam))

	return x.buf
}

func (m *TLInputReportReasonSpam) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonSpam))

	return x.buf
}

func (m *TLInputReportReasonSpam) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputReportReasonViolence#1e22c78d = ReportReason;
func (m *TLInputReportReasonViolence) To_ReportReason() *ReportReason {
	return &ReportReason{
		Constructor: TLConstructor_CRC32_inputReportReasonViolence,
		Data2:       m.Data2,
	}
}

func NewTLInputReportReasonViolence() *TLInputReportReasonViolence {
	return &TLInputReportReasonViolence{Data2: &ReportReason_Data{}}
}

func (m *TLInputReportReasonViolence) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonViolence))

	return x.buf
}

func (m *TLInputReportReasonViolence) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonViolence))

	return x.buf
}

func (m *TLInputReportReasonViolence) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputReportReasonPornography#2e59d922 = ReportReason;
func (m *TLInputReportReasonPornography) To_ReportReason() *ReportReason {
	return &ReportReason{
		Constructor: TLConstructor_CRC32_inputReportReasonPornography,
		Data2:       m.Data2,
	}
}

func NewTLInputReportReasonPornography() *TLInputReportReasonPornography {
	return &TLInputReportReasonPornography{Data2: &ReportReason_Data{}}
}

func (m *TLInputReportReasonPornography) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonPornography))

	return x.buf
}

func (m *TLInputReportReasonPornography) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonPornography))

	return x.buf
}

func (m *TLInputReportReasonPornography) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputReportReasonOther#e1746d0a text:string = ReportReason;
func (m *TLInputReportReasonOther) To_ReportReason() *ReportReason {
	return &ReportReason{
		Constructor: TLConstructor_CRC32_inputReportReasonOther,
		Data2:       m.Data2,
	}
}

func (m *TLInputReportReasonOther) SetText(v string) { m.Data2.Text = v }
func (m *TLInputReportReasonOther) GetText() string  { return m.Data2.Text }

func NewTLInputReportReasonOther() *TLInputReportReasonOther {
	return &TLInputReportReasonOther{Data2: &ReportReason_Data{}}
}

func (m *TLInputReportReasonOther) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonOther))

	x.String(m.GetText())

	return x.buf
}

func (m *TLInputReportReasonOther) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonOther))

	x.String(m.GetText())

	return x.buf
}

func (m *TLInputReportReasonOther) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

// inputReportReasonCopyright#9b89f93a = ReportReason;
func (m *TLInputReportReasonCopyright) To_ReportReason() *ReportReason {
	return &ReportReason{
		Constructor: TLConstructor_CRC32_inputReportReasonCopyright,
		Data2:       m.Data2,
	}
}

func NewTLInputReportReasonCopyright() *TLInputReportReasonCopyright {
	return &TLInputReportReasonCopyright{Data2: &ReportReason_Data{}}
}

func (m *TLInputReportReasonCopyright) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonCopyright))

	return x.buf
}

func (m *TLInputReportReasonCopyright) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputReportReasonCopyright))

	return x.buf
}

func (m *TLInputReportReasonCopyright) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// AccountDaysTTL <--
//  + TL_AccountDaysTTL
//

func (m *AccountDaysTTL) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_accountDaysTTL:
		t := m.To_AccountDaysTTL()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AccountDaysTTL) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_accountDaysTTL:
		t := m.To_AccountDaysTTL()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AccountDaysTTL) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_accountDaysTTL:
		m2 := &TLAccountDaysTTL{Data2: &AccountDaysTTL_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// accountDaysTTL#b8d0afdf days:int = AccountDaysTTL;
func (m *AccountDaysTTL) To_AccountDaysTTL() *TLAccountDaysTTL {
	return &TLAccountDaysTTL{
		Data2: m.Data2,
	}
}

// accountDaysTTL#b8d0afdf days:int = AccountDaysTTL;
func (m *TLAccountDaysTTL) To_AccountDaysTTL() *AccountDaysTTL {
	return &AccountDaysTTL{
		Constructor: TLConstructor_CRC32_accountDaysTTL,
		Data2:       m.Data2,
	}
}

func (m *TLAccountDaysTTL) SetDays(v int32) { m.Data2.Days = v }
func (m *TLAccountDaysTTL) GetDays() int32  { return m.Data2.Days }

func NewTLAccountDaysTTL() *TLAccountDaysTTL {
	return &TLAccountDaysTTL{Data2: &AccountDaysTTL_Data{}}
}

func (m *TLAccountDaysTTL) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_accountDaysTTL))

	x.Int(m.GetDays())

	return x.buf
}

func (m *TLAccountDaysTTL) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_accountDaysTTL))

	x.Int(m.GetDays())

	return x.buf
}

func (m *TLAccountDaysTTL) Decode(dbuf *DecodeBuf) error {
	m.SetDays(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputBotInlineResult <--
//  + TL_InputBotInlineResult
//  + TL_InputBotInlineResultPhoto
//  + TL_InputBotInlineResultDocument
//  + TL_InputBotInlineResultGame
//

func (m *InputBotInlineResult) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputBotInlineResult:
		t := m.To_InputBotInlineResult()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineResultPhoto:
		t := m.To_InputBotInlineResultPhoto()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineResultDocument:
		t := m.To_InputBotInlineResultDocument()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineResultGame:
		t := m.To_InputBotInlineResultGame()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputBotInlineResult) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputBotInlineResult:
		t := m.To_InputBotInlineResult()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineResultPhoto:
		t := m.To_InputBotInlineResultPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineResultDocument:
		t := m.To_InputBotInlineResultDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineResultGame:
		t := m.To_InputBotInlineResultGame()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputBotInlineResult) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputBotInlineResult:
		m2 := &TLInputBotInlineResult{Data2: &InputBotInlineResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineResultPhoto:
		m2 := &TLInputBotInlineResultPhoto{Data2: &InputBotInlineResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineResultDocument:
		m2 := &TLInputBotInlineResultDocument{Data2: &InputBotInlineResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineResultGame:
		m2 := &TLInputBotInlineResultGame{Data2: &InputBotInlineResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResult() *TLInputBotInlineResult {
	return &TLInputBotInlineResult{
		Data2: m.Data2,
	}
}

// inputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResultPhoto() *TLInputBotInlineResultPhoto {
	return &TLInputBotInlineResultPhoto{
		Data2: m.Data2,
	}
}

// inputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResultDocument() *TLInputBotInlineResultDocument {
	return &TLInputBotInlineResultDocument{
		Data2: m.Data2,
	}
}

// inputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResultGame() *TLInputBotInlineResultGame {
	return &TLInputBotInlineResultGame{
		Data2: m.Data2,
	}
}

// inputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResult) To_InputBotInlineResult() *InputBotInlineResult {
	return &InputBotInlineResult{
		Constructor: TLConstructor_CRC32_inputBotInlineResult,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineResult) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResult) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResult) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResult) GetType() string  { return m.Data2.Type }

func (m *TLInputBotInlineResult) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineResult) GetTitle() string  { return m.Data2.Title }

func (m *TLInputBotInlineResult) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputBotInlineResult) GetDescription() string  { return m.Data2.Description }

func (m *TLInputBotInlineResult) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputBotInlineResult) GetUrl() string  { return m.Data2.Url }

func (m *TLInputBotInlineResult) SetThumb(v *InputWebDocument) { m.Data2.Thumb = v }
func (m *TLInputBotInlineResult) GetThumb() *InputWebDocument  { return m.Data2.Thumb }

func (m *TLInputBotInlineResult) SetContent(v *InputWebDocument) { m.Data2.Content = v }
func (m *TLInputBotInlineResult) GetContent() *InputWebDocument  { return m.Data2.Content }

func (m *TLInputBotInlineResult) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResult) GetSendMessage() *InputBotInlineMessage  { return m.Data2.SendMessage }

func NewTLInputBotInlineResult() *TLInputBotInlineResult {
	return &TLInputBotInlineResult{Data2: &InputBotInlineResult_Data{}}
}

func (m *TLInputBotInlineResult) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResult))

	// flags
	var flags uint32 = 0
	if m.GetTitle() != "" {
		flags |= 1 << 1
	}
	if m.GetDescription() != "" {
		flags |= 1 << 2
	}
	if m.GetUrl() != "" {
		flags |= 1 << 3
	}
	if m.GetThumb() != nil {
		flags |= 1 << 4
	}
	if m.GetContent() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	if m.GetThumb() != nil {
		x.Bytes(m.GetThumb().Encode())
	}
	if m.GetContent() != nil {
		x.Bytes(m.GetContent().Encode())
	}
	x.Bytes(m.GetSendMessage().Encode())

	return x.buf
}

func (m *TLInputBotInlineResult) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResult))

	// flags
	var flags uint32 = 0
	if m.GetTitle() != "" {
		flags |= 1 << 1
	}
	if m.GetDescription() != "" {
		flags |= 1 << 2
	}
	if m.GetUrl() != "" {
		flags |= 1 << 3
	}
	if m.GetThumb() != nil {
		flags |= 1 << 4
	}
	if m.GetContent() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	if m.GetThumb() != nil {
		x.Bytes(m.GetThumb().EncodeToLayer(layer))
	}
	if m.GetContent() != nil {
		x.Bytes(m.GetContent().EncodeToLayer(layer))
	}
	x.Bytes(m.GetSendMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputBotInlineResult) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.String())
	m.SetType(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		m.SetTitle(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetDescription(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetUrl(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m7 := &InputWebDocument{}
		m7.Decode(dbuf)
		m.SetThumb(m7)
	}
	if (flags & (1 << 5)) != 0 {
		m8 := &InputWebDocument{}
		m8.Decode(dbuf)
		m.SetContent(m8)
	}
	m9 := &InputBotInlineMessage{}
	m9.Decode(dbuf)
	m.SetSendMessage(m9)

	return dbuf.err
}

// inputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResultPhoto) To_InputBotInlineResult() *InputBotInlineResult {
	return &InputBotInlineResult{
		Constructor: TLConstructor_CRC32_inputBotInlineResultPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineResultPhoto) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultPhoto) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResultPhoto) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResultPhoto) GetType() string  { return m.Data2.Type }

func (m *TLInputBotInlineResultPhoto) SetPhoto(v *InputPhoto) { m.Data2.Photo = v }
func (m *TLInputBotInlineResultPhoto) GetPhoto() *InputPhoto  { return m.Data2.Photo }

func (m *TLInputBotInlineResultPhoto) SetSendMessage(v *InputBotInlineMessage) {
	m.Data2.SendMessage = v
}
func (m *TLInputBotInlineResultPhoto) GetSendMessage() *InputBotInlineMessage {
	return m.Data2.SendMessage
}

func NewTLInputBotInlineResultPhoto() *TLInputBotInlineResultPhoto {
	return &TLInputBotInlineResultPhoto{Data2: &InputBotInlineResult_Data{}}
}

func (m *TLInputBotInlineResultPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResultPhoto))

	x.String(m.GetId())
	x.String(m.GetType())
	x.Bytes(m.GetPhoto().Encode())
	x.Bytes(m.GetSendMessage().Encode())

	return x.buf
}

func (m *TLInputBotInlineResultPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResultPhoto))

	x.String(m.GetId())
	x.String(m.GetType())
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Bytes(m.GetSendMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputBotInlineResultPhoto) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.String())
	m.SetType(dbuf.String())
	m3 := &InputPhoto{}
	m3.Decode(dbuf)
	m.SetPhoto(m3)
	m4 := &InputBotInlineMessage{}
	m4.Decode(dbuf)
	m.SetSendMessage(m4)

	return dbuf.err
}

// inputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResultDocument) To_InputBotInlineResult() *InputBotInlineResult {
	return &InputBotInlineResult{
		Constructor: TLConstructor_CRC32_inputBotInlineResultDocument,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineResultDocument) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultDocument) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResultDocument) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResultDocument) GetType() string  { return m.Data2.Type }

func (m *TLInputBotInlineResultDocument) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineResultDocument) GetTitle() string  { return m.Data2.Title }

func (m *TLInputBotInlineResultDocument) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputBotInlineResultDocument) GetDescription() string  { return m.Data2.Description }

func (m *TLInputBotInlineResultDocument) SetDocument(v *InputDocument) { m.Data2.Document = v }
func (m *TLInputBotInlineResultDocument) GetDocument() *InputDocument  { return m.Data2.Document }

func (m *TLInputBotInlineResultDocument) SetSendMessage(v *InputBotInlineMessage) {
	m.Data2.SendMessage = v
}
func (m *TLInputBotInlineResultDocument) GetSendMessage() *InputBotInlineMessage {
	return m.Data2.SendMessage
}

func NewTLInputBotInlineResultDocument() *TLInputBotInlineResultDocument {
	return &TLInputBotInlineResultDocument{Data2: &InputBotInlineResult_Data{}}
}

func (m *TLInputBotInlineResultDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResultDocument))

	// flags
	var flags uint32 = 0
	if m.GetTitle() != "" {
		flags |= 1 << 1
	}
	if m.GetDescription() != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	x.Bytes(m.GetDocument().Encode())
	x.Bytes(m.GetSendMessage().Encode())

	return x.buf
}

func (m *TLInputBotInlineResultDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResultDocument))

	// flags
	var flags uint32 = 0
	if m.GetTitle() != "" {
		flags |= 1 << 1
	}
	if m.GetDescription() != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	x.Bytes(m.GetDocument().EncodeToLayer(layer))
	x.Bytes(m.GetSendMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputBotInlineResultDocument) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.String())
	m.SetType(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		m.SetTitle(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetDescription(dbuf.String())
	}
	m6 := &InputDocument{}
	m6.Decode(dbuf)
	m.SetDocument(m6)
	m7 := &InputBotInlineMessage{}
	m7.Decode(dbuf)
	m.SetSendMessage(m7)

	return dbuf.err
}

// inputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResultGame) To_InputBotInlineResult() *InputBotInlineResult {
	return &InputBotInlineResult{
		Constructor: TLConstructor_CRC32_inputBotInlineResultGame,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineResultGame) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultGame) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResultGame) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputBotInlineResultGame) GetShortName() string  { return m.Data2.ShortName }

func (m *TLInputBotInlineResultGame) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResultGame) GetSendMessage() *InputBotInlineMessage {
	return m.Data2.SendMessage
}

func NewTLInputBotInlineResultGame() *TLInputBotInlineResultGame {
	return &TLInputBotInlineResultGame{Data2: &InputBotInlineResult_Data{}}
}

func (m *TLInputBotInlineResultGame) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResultGame))

	x.String(m.GetId())
	x.String(m.GetShortName())
	x.Bytes(m.GetSendMessage().Encode())

	return x.buf
}

func (m *TLInputBotInlineResultGame) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineResultGame))

	x.String(m.GetId())
	x.String(m.GetShortName())
	x.Bytes(m.GetSendMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputBotInlineResultGame) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.String())
	m.SetShortName(dbuf.String())
	m3 := &InputBotInlineMessage{}
	m3.Decode(dbuf)
	m.SetSendMessage(m3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Upload_CdnFile <--
//  + TL_UploadCdnFileReuploadNeeded
//  + TL_UploadCdnFile
//

func (m *Upload_CdnFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_upload_cdnFileReuploadNeeded:
		t := m.To_UploadCdnFileReuploadNeeded()
		return t.Encode()
	case TLConstructor_CRC32_upload_cdnFile:
		t := m.To_UploadCdnFile()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Upload_CdnFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_upload_cdnFileReuploadNeeded:
		t := m.To_UploadCdnFileReuploadNeeded()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_upload_cdnFile:
		t := m.To_UploadCdnFile()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Upload_CdnFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_upload_cdnFileReuploadNeeded:
		m2 := &TLUploadCdnFileReuploadNeeded{Data2: &Upload_CdnFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_upload_cdnFile:
		m2 := &TLUploadCdnFile{Data2: &Upload_CdnFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// upload.cdnFileReuploadNeeded#eea8e46e request_token:bytes = upload.CdnFile;
func (m *Upload_CdnFile) To_UploadCdnFileReuploadNeeded() *TLUploadCdnFileReuploadNeeded {
	return &TLUploadCdnFileReuploadNeeded{
		Data2: m.Data2,
	}
}

// upload.cdnFile#a99fca4f bytes:bytes = upload.CdnFile;
func (m *Upload_CdnFile) To_UploadCdnFile() *TLUploadCdnFile {
	return &TLUploadCdnFile{
		Data2: m.Data2,
	}
}

// upload.cdnFileReuploadNeeded#eea8e46e request_token:bytes = upload.CdnFile;
func (m *TLUploadCdnFileReuploadNeeded) To_Upload_CdnFile() *Upload_CdnFile {
	return &Upload_CdnFile{
		Constructor: TLConstructor_CRC32_upload_cdnFileReuploadNeeded,
		Data2:       m.Data2,
	}
}

func (m *TLUploadCdnFileReuploadNeeded) SetRequestToken(v []byte) { m.Data2.RequestToken = v }
func (m *TLUploadCdnFileReuploadNeeded) GetRequestToken() []byte  { return m.Data2.RequestToken }

func NewTLUploadCdnFileReuploadNeeded() *TLUploadCdnFileReuploadNeeded {
	return &TLUploadCdnFileReuploadNeeded{Data2: &Upload_CdnFile_Data{}}
}

func (m *TLUploadCdnFileReuploadNeeded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_cdnFileReuploadNeeded))

	x.StringBytes(m.GetRequestToken())

	return x.buf
}

func (m *TLUploadCdnFileReuploadNeeded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_cdnFileReuploadNeeded))

	x.StringBytes(m.GetRequestToken())

	return x.buf
}

func (m *TLUploadCdnFileReuploadNeeded) Decode(dbuf *DecodeBuf) error {
	m.SetRequestToken(dbuf.StringBytes())

	return dbuf.err
}

// upload.cdnFile#a99fca4f bytes:bytes = upload.CdnFile;
func (m *TLUploadCdnFile) To_Upload_CdnFile() *Upload_CdnFile {
	return &Upload_CdnFile{
		Constructor: TLConstructor_CRC32_upload_cdnFile,
		Data2:       m.Data2,
	}
}

func (m *TLUploadCdnFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadCdnFile) GetBytes() []byte  { return m.Data2.Bytes }

func NewTLUploadCdnFile() *TLUploadCdnFile {
	return &TLUploadCdnFile{Data2: &Upload_CdnFile_Data{}}
}

func (m *TLUploadCdnFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_cdnFile))

	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLUploadCdnFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_cdnFile))

	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLUploadCdnFile) Decode(dbuf *DecodeBuf) error {
	m.SetBytes(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputClientProxy <--
//  + TL_InputClientProxy
//

func (m *InputClientProxy) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputClientProxy:
		t := m.To_InputClientProxy()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputClientProxy) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputClientProxy:
		t := m.To_InputClientProxy()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputClientProxy) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputClientProxy:
		m2 := &TLInputClientProxy{Data2: &InputClientProxy_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputClientProxy#75588b3f address:string port:int = InputClientProxy;
func (m *InputClientProxy) To_InputClientProxy() *TLInputClientProxy {
	return &TLInputClientProxy{
		Data2: m.Data2,
	}
}

// inputClientProxy#75588b3f address:string port:int = InputClientProxy;
func (m *TLInputClientProxy) To_InputClientProxy() *InputClientProxy {
	return &InputClientProxy{
		Constructor: TLConstructor_CRC32_inputClientProxy,
		Data2:       m.Data2,
	}
}

func (m *TLInputClientProxy) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputClientProxy) GetAddress() string  { return m.Data2.Address }

func (m *TLInputClientProxy) SetPort(v int32) { m.Data2.Port = v }
func (m *TLInputClientProxy) GetPort() int32  { return m.Data2.Port }

func NewTLInputClientProxy() *TLInputClientProxy {
	return &TLInputClientProxy{Data2: &InputClientProxy_Data{}}
}

func (m *TLInputClientProxy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputClientProxy))

	x.String(m.GetAddress())
	x.Int(m.GetPort())

	return x.buf
}

func (m *TLInputClientProxy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputClientProxy))

	x.String(m.GetAddress())
	x.Int(m.GetPort())

	return x.buf
}

func (m *TLInputClientProxy) Decode(dbuf *DecodeBuf) error {
	m.SetAddress(dbuf.String())
	m.SetPort(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEventsFilter <--
//  + TL_ChannelAdminLogEventsFilter
//

func (m *ChannelAdminLogEventsFilter) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelAdminLogEventsFilter:
		t := m.To_ChannelAdminLogEventsFilter()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminLogEventsFilter) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelAdminLogEventsFilter:
		t := m.To_ChannelAdminLogEventsFilter()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminLogEventsFilter) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelAdminLogEventsFilter:
		m2 := &TLChannelAdminLogEventsFilter{Data2: &ChannelAdminLogEventsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelAdminLogEventsFilter#ea107ae4 flags:# join:flags.0?true leave:flags.1?true invite:flags.2?true ban:flags.3?true unban:flags.4?true kick:flags.5?true unkick:flags.6?true promote:flags.7?true demote:flags.8?true info:flags.9?true settings:flags.10?true pinned:flags.11?true edit:flags.12?true delete:flags.13?true = ChannelAdminLogEventsFilter;
func (m *ChannelAdminLogEventsFilter) To_ChannelAdminLogEventsFilter() *TLChannelAdminLogEventsFilter {
	return &TLChannelAdminLogEventsFilter{
		Data2: m.Data2,
	}
}

// channelAdminLogEventsFilter#ea107ae4 flags:# join:flags.0?true leave:flags.1?true invite:flags.2?true ban:flags.3?true unban:flags.4?true kick:flags.5?true unkick:flags.6?true promote:flags.7?true demote:flags.8?true info:flags.9?true settings:flags.10?true pinned:flags.11?true edit:flags.12?true delete:flags.13?true = ChannelAdminLogEventsFilter;
func (m *TLChannelAdminLogEventsFilter) To_ChannelAdminLogEventsFilter() *ChannelAdminLogEventsFilter {
	return &ChannelAdminLogEventsFilter{
		Constructor: TLConstructor_CRC32_channelAdminLogEventsFilter,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEventsFilter) SetJoin(v bool) { m.Data2.Join = v }
func (m *TLChannelAdminLogEventsFilter) GetJoin() bool  { return m.Data2.Join }

func (m *TLChannelAdminLogEventsFilter) SetLeave(v bool) { m.Data2.Leave = v }
func (m *TLChannelAdminLogEventsFilter) GetLeave() bool  { return m.Data2.Leave }

func (m *TLChannelAdminLogEventsFilter) SetInvite(v bool) { m.Data2.Invite = v }
func (m *TLChannelAdminLogEventsFilter) GetInvite() bool  { return m.Data2.Invite }

func (m *TLChannelAdminLogEventsFilter) SetBan(v bool) { m.Data2.Ban = v }
func (m *TLChannelAdminLogEventsFilter) GetBan() bool  { return m.Data2.Ban }

func (m *TLChannelAdminLogEventsFilter) SetUnban(v bool) { m.Data2.Unban = v }
func (m *TLChannelAdminLogEventsFilter) GetUnban() bool  { return m.Data2.Unban }

func (m *TLChannelAdminLogEventsFilter) SetKick(v bool) { m.Data2.Kick = v }
func (m *TLChannelAdminLogEventsFilter) GetKick() bool  { return m.Data2.Kick }

func (m *TLChannelAdminLogEventsFilter) SetUnkick(v bool) { m.Data2.Unkick = v }
func (m *TLChannelAdminLogEventsFilter) GetUnkick() bool  { return m.Data2.Unkick }

func (m *TLChannelAdminLogEventsFilter) SetPromote(v bool) { m.Data2.Promote = v }
func (m *TLChannelAdminLogEventsFilter) GetPromote() bool  { return m.Data2.Promote }

func (m *TLChannelAdminLogEventsFilter) SetDemote(v bool) { m.Data2.Demote = v }
func (m *TLChannelAdminLogEventsFilter) GetDemote() bool  { return m.Data2.Demote }

func (m *TLChannelAdminLogEventsFilter) SetInfo(v bool) { m.Data2.Info = v }
func (m *TLChannelAdminLogEventsFilter) GetInfo() bool  { return m.Data2.Info }

func (m *TLChannelAdminLogEventsFilter) SetSettings(v bool) { m.Data2.Settings = v }
func (m *TLChannelAdminLogEventsFilter) GetSettings() bool  { return m.Data2.Settings }

func (m *TLChannelAdminLogEventsFilter) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLChannelAdminLogEventsFilter) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLChannelAdminLogEventsFilter) SetEdit(v bool) { m.Data2.Edit = v }
func (m *TLChannelAdminLogEventsFilter) GetEdit() bool  { return m.Data2.Edit }

func (m *TLChannelAdminLogEventsFilter) SetDelete(v bool) { m.Data2.Delete = v }
func (m *TLChannelAdminLogEventsFilter) GetDelete() bool  { return m.Data2.Delete }

func NewTLChannelAdminLogEventsFilter() *TLChannelAdminLogEventsFilter {
	return &TLChannelAdminLogEventsFilter{Data2: &ChannelAdminLogEventsFilter_Data{}}
}

func (m *TLChannelAdminLogEventsFilter) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventsFilter))

	// flags
	var flags uint32 = 0
	if m.GetJoin() == true {
		flags |= 1 << 0
	}
	if m.GetLeave() == true {
		flags |= 1 << 1
	}
	if m.GetInvite() == true {
		flags |= 1 << 2
	}
	if m.GetBan() == true {
		flags |= 1 << 3
	}
	if m.GetUnban() == true {
		flags |= 1 << 4
	}
	if m.GetKick() == true {
		flags |= 1 << 5
	}
	if m.GetUnkick() == true {
		flags |= 1 << 6
	}
	if m.GetPromote() == true {
		flags |= 1 << 7
	}
	if m.GetDemote() == true {
		flags |= 1 << 8
	}
	if m.GetInfo() == true {
		flags |= 1 << 9
	}
	if m.GetSettings() == true {
		flags |= 1 << 10
	}
	if m.GetPinned() == true {
		flags |= 1 << 11
	}
	if m.GetEdit() == true {
		flags |= 1 << 12
	}
	if m.GetDelete() == true {
		flags |= 1 << 13
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLChannelAdminLogEventsFilter) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEventsFilter))

	// flags
	var flags uint32 = 0
	if m.GetJoin() == true {
		flags |= 1 << 0
	}
	if m.GetLeave() == true {
		flags |= 1 << 1
	}
	if m.GetInvite() == true {
		flags |= 1 << 2
	}
	if m.GetBan() == true {
		flags |= 1 << 3
	}
	if m.GetUnban() == true {
		flags |= 1 << 4
	}
	if m.GetKick() == true {
		flags |= 1 << 5
	}
	if m.GetUnkick() == true {
		flags |= 1 << 6
	}
	if m.GetPromote() == true {
		flags |= 1 << 7
	}
	if m.GetDemote() == true {
		flags |= 1 << 8
	}
	if m.GetInfo() == true {
		flags |= 1 << 9
	}
	if m.GetSettings() == true {
		flags |= 1 << 10
	}
	if m.GetPinned() == true {
		flags |= 1 << 11
	}
	if m.GetEdit() == true {
		flags |= 1 << 12
	}
	if m.GetDelete() == true {
		flags |= 1 << 13
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLChannelAdminLogEventsFilter) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetJoin(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetLeave(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetInvite(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetBan(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetUnban(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetKick(true)
	}
	if (flags & (1 << 6)) != 0 {
		m.SetUnkick(true)
	}
	if (flags & (1 << 7)) != 0 {
		m.SetPromote(true)
	}
	if (flags & (1 << 8)) != 0 {
		m.SetDemote(true)
	}
	if (flags & (1 << 9)) != 0 {
		m.SetInfo(true)
	}
	if (flags & (1 << 10)) != 0 {
		m.SetSettings(true)
	}
	if (flags & (1 << 11)) != 0 {
		m.SetPinned(true)
	}
	if (flags & (1 << 12)) != 0 {
		m.SetEdit(true)
	}
	if (flags & (1 << 13)) != 0 {
		m.SetDelete(true)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Messages <--
//  + TL_MessagesMessages
//  + TL_MessagesMessagesSlice
//  + TL_MessagesChannelMessages
//  + TL_MessagesMessagesNotModified
//

func (m *Messages_Messages) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_messages:
		t := m.To_MessagesMessages()
		return t.Encode()
	case TLConstructor_CRC32_messages_messagesSlice:
		t := m.To_MessagesMessagesSlice()
		return t.Encode()
	case TLConstructor_CRC32_messages_channelMessages:
		t := m.To_MessagesChannelMessages()
		return t.Encode()
	case TLConstructor_CRC32_messages_messagesNotModified:
		t := m.To_MessagesMessagesNotModified()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Messages) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_messages:
		t := m.To_MessagesMessages()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_messagesSlice:
		t := m.To_MessagesMessagesSlice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_channelMessages:
		t := m.To_MessagesChannelMessages()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_messagesNotModified:
		t := m.To_MessagesMessagesNotModified()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Messages) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_messages:
		m2 := &TLMessagesMessages{Data2: &Messages_Messages_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_messagesSlice:
		m2 := &TLMessagesMessagesSlice{Data2: &Messages_Messages_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_channelMessages:
		m2 := &TLMessagesChannelMessages{Data2: &Messages_Messages_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_messagesNotModified:
		m2 := &TLMessagesMessagesNotModified{Data2: &Messages_Messages_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesMessages() *TLMessagesMessages {
	return &TLMessagesMessages{
		Data2: m.Data2,
	}
}

// messages.messagesSlice#b446ae3 count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesMessagesSlice() *TLMessagesMessagesSlice {
	return &TLMessagesMessagesSlice{
		Data2: m.Data2,
	}
}

// messages.channelMessages#99262e37 flags:# pts:int count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesChannelMessages() *TLMessagesChannelMessages {
	return &TLMessagesChannelMessages{
		Data2: m.Data2,
	}
}

// messages.messagesNotModified#74535f21 count:int = messages.Messages;
func (m *Messages_Messages) To_MessagesMessagesNotModified() *TLMessagesMessagesNotModified {
	return &TLMessagesMessagesNotModified{
		Data2: m.Data2,
	}
}

// messages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesMessages) To_Messages_Messages() *Messages_Messages {
	return &Messages_Messages{
		Constructor: TLConstructor_CRC32_messages_messages,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesMessages) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessages) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessages) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessages) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesMessages() *TLMessagesMessages {
	return &TLMessagesMessages{Data2: &Messages_Messages_Data{}}
}

func (m *TLMessagesMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messages))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messages))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesMessages) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Message, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Message{}
		v1[i].Decode(dbuf)
	}
	m.SetMessages(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

// messages.messagesSlice#b446ae3 count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesMessagesSlice) To_Messages_Messages() *Messages_Messages {
	return &Messages_Messages{
		Constructor: TLConstructor_CRC32_messages_messagesSlice,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesMessagesSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesMessagesSlice) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessagesSlice) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesMessagesSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessagesSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesMessagesSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessagesSlice) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesMessagesSlice() *TLMessagesMessagesSlice {
	return &TLMessagesMessagesSlice{Data2: &Messages_Messages_Data{}}
}

func (m *TLMessagesMessagesSlice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messagesSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesMessagesSlice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messagesSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesMessagesSlice) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Message, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Message{}
		v2[i].Decode(dbuf)
	}
	m.SetMessages(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*User, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &User{}
		v4[i].Decode(dbuf)
	}
	m.SetUsers(v4)

	return dbuf.err
}

// messages.channelMessages#99262e37 flags:# pts:int count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesChannelMessages) To_Messages_Messages() *Messages_Messages {
	return &Messages_Messages{
		Constructor: TLConstructor_CRC32_messages_channelMessages,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesChannelMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesChannelMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesChannelMessages) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChannelMessages) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesChannelMessages) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesChannelMessages) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesChannelMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChannelMessages) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesChannelMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChannelMessages) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesChannelMessages() *TLMessagesChannelMessages {
	return &TLMessagesChannelMessages{Data2: &Messages_Messages_Data{}}
}

func (m *TLMessagesChannelMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_channelMessages))

	// flags
	var flags uint32 = 0
	x.UInt(flags)

	x.Int(m.GetPts())
	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesChannelMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_channelMessages))

	// flags
	var flags uint32 = 0
	x.UInt(flags)

	x.Int(m.GetPts())
	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesChannelMessages) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetPts(dbuf.Int())
	m.SetCount(dbuf.Int())
	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*Message, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &Message{}
		v4[i].Decode(dbuf)
	}
	m.SetMessages(v4)

	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*Chat, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &Chat{}
		v5[i].Decode(dbuf)
	}
	m.SetChats(v5)

	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*User, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &User{}
		v6[i].Decode(dbuf)
	}
	m.SetUsers(v6)

	return dbuf.err
}

// messages.messagesNotModified#74535f21 count:int = messages.Messages;
func (m *TLMessagesMessagesNotModified) To_Messages_Messages() *Messages_Messages {
	return &Messages_Messages{
		Constructor: TLConstructor_CRC32_messages_messagesNotModified,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesMessagesNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesNotModified) GetCount() int32  { return m.Data2.Count }

func NewTLMessagesMessagesNotModified() *TLMessagesMessagesNotModified {
	return &TLMessagesMessagesNotModified{Data2: &Messages_Messages_Data{}}
}

func (m *TLMessagesMessagesNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messagesNotModified))

	x.Int(m.GetCount())

	return x.buf
}

func (m *TLMessagesMessagesNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messagesNotModified))

	x.Int(m.GetCount())

	return x.buf
}

func (m *TLMessagesMessagesNotModified) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_StickerSet <--
//  + TL_MessagesStickerSet
//

func (m *Messages_StickerSet) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_stickerSet:
		t := m.To_MessagesStickerSet()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_StickerSet) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_stickerSet:
		t := m.To_MessagesStickerSet()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_StickerSet) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_stickerSet:
		m2 := &TLMessagesStickerSet{Data2: &Messages_StickerSet_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.stickerSet#b60a24a6 set:StickerSet packs:Vector<StickerPack> documents:Vector<Document> = messages.StickerSet;
func (m *Messages_StickerSet) To_MessagesStickerSet() *TLMessagesStickerSet {
	return &TLMessagesStickerSet{
		Data2: m.Data2,
	}
}

// messages.stickerSet#b60a24a6 set:StickerSet packs:Vector<StickerPack> documents:Vector<Document> = messages.StickerSet;
func (m *TLMessagesStickerSet) To_Messages_StickerSet() *Messages_StickerSet {
	return &Messages_StickerSet{
		Constructor: TLConstructor_CRC32_messages_stickerSet,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesStickerSet) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLMessagesStickerSet) GetSet() *StickerSet  { return m.Data2.Set }

func (m *TLMessagesStickerSet) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesStickerSet) GetPacks() []*StickerPack  { return m.Data2.Packs }

func (m *TLMessagesStickerSet) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLMessagesStickerSet) GetDocuments() []*Document  { return m.Data2.Documents }

func NewTLMessagesStickerSet() *TLMessagesStickerSet {
	return &TLMessagesStickerSet{Data2: &Messages_StickerSet_Data{}}
}

func (m *TLMessagesStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickerSet))

	x.Bytes(m.GetSet().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPacks())))
	for _, v := range m.GetPacks() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDocuments())))
	for _, v := range m.GetDocuments() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickerSet))

	x.Bytes(m.GetSet().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPacks())))
	for _, v := range m.GetPacks() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDocuments())))
	for _, v := range m.GetDocuments() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesStickerSet) Decode(dbuf *DecodeBuf) error {
	m1 := &StickerSet{}
	m1.Decode(dbuf)
	m.SetSet(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerPack, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerPack{}
		v2[i].Decode(dbuf)
	}
	m.SetPacks(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Document, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Document{}
		v3[i].Decode(dbuf)
	}
	m.SetDocuments(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_ResolvedPeer <--
//  + TL_ContactsResolvedPeer
//

func (m *Contacts_ResolvedPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_resolvedPeer:
		t := m.To_ContactsResolvedPeer()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_ResolvedPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_resolvedPeer:
		t := m.To_ContactsResolvedPeer()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_ResolvedPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_resolvedPeer:
		m2 := &TLContactsResolvedPeer{Data2: &Contacts_ResolvedPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer;
func (m *Contacts_ResolvedPeer) To_ContactsResolvedPeer() *TLContactsResolvedPeer {
	return &TLContactsResolvedPeer{
		Data2: m.Data2,
	}
}

// contacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer;
func (m *TLContactsResolvedPeer) To_Contacts_ResolvedPeer() *Contacts_ResolvedPeer {
	return &Contacts_ResolvedPeer{
		Constructor: TLConstructor_CRC32_contacts_resolvedPeer,
		Data2:       m.Data2,
	}
}

func (m *TLContactsResolvedPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLContactsResolvedPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLContactsResolvedPeer) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsResolvedPeer) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsResolvedPeer) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsResolvedPeer) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsResolvedPeer() *TLContactsResolvedPeer {
	return &TLContactsResolvedPeer{Data2: &Contacts_ResolvedPeer_Data{}}
}

func (m *TLContactsResolvedPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resolvedPeer))

	x.Bytes(m.GetPeer().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsResolvedPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resolvedPeer))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsResolvedPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_BotCallbackAnswer <--
//  + TL_MessagesBotCallbackAnswer
//

func (m *Messages_BotCallbackAnswer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_botCallbackAnswer:
		t := m.To_MessagesBotCallbackAnswer()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_BotCallbackAnswer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_botCallbackAnswer:
		t := m.To_MessagesBotCallbackAnswer()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_BotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_botCallbackAnswer:
		m2 := &TLMessagesBotCallbackAnswer{Data2: &Messages_BotCallbackAnswer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.botCallbackAnswer#36585ea4 flags:# alert:flags.1?true has_url:flags.3?true native_ui:flags.4?true message:flags.0?string url:flags.2?string cache_time:int = messages.BotCallbackAnswer;
func (m *Messages_BotCallbackAnswer) To_MessagesBotCallbackAnswer() *TLMessagesBotCallbackAnswer {
	return &TLMessagesBotCallbackAnswer{
		Data2: m.Data2,
	}
}

// messages.botCallbackAnswer#36585ea4 flags:# alert:flags.1?true has_url:flags.3?true native_ui:flags.4?true message:flags.0?string url:flags.2?string cache_time:int = messages.BotCallbackAnswer;
func (m *TLMessagesBotCallbackAnswer) To_Messages_BotCallbackAnswer() *Messages_BotCallbackAnswer {
	return &Messages_BotCallbackAnswer{
		Constructor: TLConstructor_CRC32_messages_botCallbackAnswer,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesBotCallbackAnswer) SetAlert(v bool) { m.Data2.Alert = v }
func (m *TLMessagesBotCallbackAnswer) GetAlert() bool  { return m.Data2.Alert }

func (m *TLMessagesBotCallbackAnswer) SetHasUrl(v bool) { m.Data2.HasUrl = v }
func (m *TLMessagesBotCallbackAnswer) GetHasUrl() bool  { return m.Data2.HasUrl }

func (m *TLMessagesBotCallbackAnswer) SetNativeUi(v bool) { m.Data2.NativeUi = v }
func (m *TLMessagesBotCallbackAnswer) GetNativeUi() bool  { return m.Data2.NativeUi }

func (m *TLMessagesBotCallbackAnswer) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessagesBotCallbackAnswer) GetMessage() string  { return m.Data2.Message }

func (m *TLMessagesBotCallbackAnswer) SetUrl(v string) { m.Data2.Url = v }
func (m *TLMessagesBotCallbackAnswer) GetUrl() string  { return m.Data2.Url }

func (m *TLMessagesBotCallbackAnswer) SetCacheTime(v int32) { m.Data2.CacheTime = v }
func (m *TLMessagesBotCallbackAnswer) GetCacheTime() int32  { return m.Data2.CacheTime }

func NewTLMessagesBotCallbackAnswer() *TLMessagesBotCallbackAnswer {
	return &TLMessagesBotCallbackAnswer{Data2: &Messages_BotCallbackAnswer_Data{}}
}

func (m *TLMessagesBotCallbackAnswer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_botCallbackAnswer))

	// flags
	var flags uint32 = 0
	if m.GetAlert() == true {
		flags |= 1 << 1
	}
	if m.GetHasUrl() == true {
		flags |= 1 << 3
	}
	if m.GetNativeUi() == true {
		flags |= 1 << 4
	}
	if m.GetMessage() != "" {
		flags |= 1 << 0
	}
	if m.GetUrl() != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetMessage() != "" {
		x.String(m.GetMessage())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	x.Int(m.GetCacheTime())

	return x.buf
}

func (m *TLMessagesBotCallbackAnswer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_botCallbackAnswer))

	// flags
	var flags uint32 = 0
	if m.GetAlert() == true {
		flags |= 1 << 1
	}
	if m.GetHasUrl() == true {
		flags |= 1 << 3
	}
	if m.GetNativeUi() == true {
		flags |= 1 << 4
	}
	if m.GetMessage() != "" {
		flags |= 1 << 0
	}
	if m.GetUrl() != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetMessage() != "" {
		x.String(m.GetMessage())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	x.Int(m.GetCacheTime())

	return x.buf
}

func (m *TLMessagesBotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetAlert(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetHasUrl(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetNativeUi(true)
	}
	if (flags & (1 << 0)) != 0 {
		m.SetMessage(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetUrl(dbuf.String())
	}
	m.SetCacheTime(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PhoneCall <--
//  + TL_PhoneCallEmpty
//  + TL_PhoneCallWaiting
//  + TL_PhoneCallRequested
//  + TL_PhoneCallAccepted
//  + TL_PhoneCall
//  + TL_PhoneCallDiscarded
//

func (m *PhoneCall) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_phoneCallEmpty:
		t := m.To_PhoneCallEmpty()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallWaiting:
		t := m.To_PhoneCallWaiting()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallRequested:
		t := m.To_PhoneCallRequested()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallAccepted:
		t := m.To_PhoneCallAccepted()
		return t.Encode()
	case TLConstructor_CRC32_phoneCall:
		t := m.To_PhoneCall()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallDiscarded:
		t := m.To_PhoneCallDiscarded()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneCall) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_phoneCallEmpty:
		t := m.To_PhoneCallEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallWaiting:
		t := m.To_PhoneCallWaiting()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallRequested:
		t := m.To_PhoneCallRequested()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallAccepted:
		t := m.To_PhoneCallAccepted()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCall:
		t := m.To_PhoneCall()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallDiscarded:
		t := m.To_PhoneCallDiscarded()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneCall) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_phoneCallEmpty:
		m2 := &TLPhoneCallEmpty{Data2: &PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallWaiting:
		m2 := &TLPhoneCallWaiting{Data2: &PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallRequested:
		m2 := &TLPhoneCallRequested{Data2: &PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallAccepted:
		m2 := &TLPhoneCallAccepted{Data2: &PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCall:
		m2 := &TLPhoneCall{Data2: &PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallDiscarded:
		m2 := &TLPhoneCallDiscarded{Data2: &PhoneCall_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// phoneCallEmpty#5366c915 id:long = PhoneCall;
func (m *PhoneCall) To_PhoneCallEmpty() *TLPhoneCallEmpty {
	return &TLPhoneCallEmpty{
		Data2: m.Data2,
	}
}

// phoneCallWaiting#1b8f4ad1 flags:# id:long access_hash:long date:int admin_id:int participant_id:int protocol:PhoneCallProtocol receive_date:flags.0?int = PhoneCall;
func (m *PhoneCall) To_PhoneCallWaiting() *TLPhoneCallWaiting {
	return &TLPhoneCallWaiting{
		Data2: m.Data2,
	}
}

// phoneCallRequested#83761ce4 id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *PhoneCall) To_PhoneCallRequested() *TLPhoneCallRequested {
	return &TLPhoneCallRequested{
		Data2: m.Data2,
	}
}

// phoneCallAccepted#6d003d3f id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *PhoneCall) To_PhoneCallAccepted() *TLPhoneCallAccepted {
	return &TLPhoneCallAccepted{
		Data2: m.Data2,
	}
}

// phoneCall#ffe6ab67 id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connection:PhoneConnection alternative_connections:Vector<PhoneConnection> start_date:int = PhoneCall;
func (m *PhoneCall) To_PhoneCall() *TLPhoneCall {
	return &TLPhoneCall{
		Data2: m.Data2,
	}
}

// phoneCallDiscarded#50ca4de1 flags:# need_rating:flags.2?true need_debug:flags.3?true id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = PhoneCall;
func (m *PhoneCall) To_PhoneCallDiscarded() *TLPhoneCallDiscarded {
	return &TLPhoneCallDiscarded{
		Data2: m.Data2,
	}
}

// phoneCallEmpty#5366c915 id:long = PhoneCall;
func (m *TLPhoneCallEmpty) To_PhoneCall() *PhoneCall {
	return &PhoneCall{
		Constructor: TLConstructor_CRC32_phoneCallEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCallEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallEmpty) GetId() int64  { return m.Data2.Id }

func NewTLPhoneCallEmpty() *TLPhoneCallEmpty {
	return &TLPhoneCallEmpty{Data2: &PhoneCall_Data{}}
}

func (m *TLPhoneCallEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLPhoneCallEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLPhoneCallEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())

	return dbuf.err
}

// phoneCallWaiting#1b8f4ad1 flags:# id:long access_hash:long date:int admin_id:int participant_id:int protocol:PhoneCallProtocol receive_date:flags.0?int = PhoneCall;
func (m *TLPhoneCallWaiting) To_PhoneCall() *PhoneCall {
	return &PhoneCall{
		Constructor: TLConstructor_CRC32_phoneCallWaiting,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCallWaiting) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallWaiting) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallWaiting) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallWaiting) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCallWaiting) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallWaiting) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCallWaiting) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallWaiting) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLPhoneCallWaiting) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallWaiting) GetParticipantId() int32  { return m.Data2.ParticipantId }

func (m *TLPhoneCallWaiting) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallWaiting) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func (m *TLPhoneCallWaiting) SetReceiveDate(v int32) { m.Data2.ReceiveDate = v }
func (m *TLPhoneCallWaiting) GetReceiveDate() int32  { return m.Data2.ReceiveDate }

func NewTLPhoneCallWaiting() *TLPhoneCallWaiting {
	return &TLPhoneCallWaiting{Data2: &PhoneCall_Data{}}
}

func (m *TLPhoneCallWaiting) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallWaiting))

	// flags
	var flags uint32 = 0
	if m.GetReceiveDate() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.Bytes(m.GetProtocol().Encode())
	if m.GetReceiveDate() != 0 {
		x.Int(m.GetReceiveDate())
	}

	return x.buf
}

func (m *TLPhoneCallWaiting) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallWaiting))

	// flags
	var flags uint32 = 0
	if m.GetReceiveDate() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.Bytes(m.GetProtocol().EncodeToLayer(layer))
	if m.GetReceiveDate() != 0 {
		x.Int(m.GetReceiveDate())
	}

	return x.buf
}

func (m *TLPhoneCallWaiting) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())
	m7 := &PhoneCallProtocol{}
	m7.Decode(dbuf)
	m.SetProtocol(m7)
	if (flags & (1 << 0)) != 0 {
		m.SetReceiveDate(dbuf.Int())
	}

	return dbuf.err
}

// phoneCallRequested#83761ce4 id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *TLPhoneCallRequested) To_PhoneCall() *PhoneCall {
	return &PhoneCall{
		Constructor: TLConstructor_CRC32_phoneCallRequested,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCallRequested) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallRequested) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallRequested) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallRequested) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCallRequested) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallRequested) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCallRequested) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallRequested) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLPhoneCallRequested) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallRequested) GetParticipantId() int32  { return m.Data2.ParticipantId }

func (m *TLPhoneCallRequested) SetGAHash(v []byte) { m.Data2.GAHash = v }
func (m *TLPhoneCallRequested) GetGAHash() []byte  { return m.Data2.GAHash }

func (m *TLPhoneCallRequested) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallRequested) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func NewTLPhoneCallRequested() *TLPhoneCallRequested {
	return &TLPhoneCallRequested{Data2: &PhoneCall_Data{}}
}

func (m *TLPhoneCallRequested) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallRequested))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGAHash())
	x.Bytes(m.GetProtocol().Encode())

	return x.buf
}

func (m *TLPhoneCallRequested) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallRequested))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGAHash())
	x.Bytes(m.GetProtocol().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneCallRequested) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())
	m.SetGAHash(dbuf.StringBytes())
	m7 := &PhoneCallProtocol{}
	m7.Decode(dbuf)
	m.SetProtocol(m7)

	return dbuf.err
}

// phoneCallAccepted#6d003d3f id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *TLPhoneCallAccepted) To_PhoneCall() *PhoneCall {
	return &PhoneCall{
		Constructor: TLConstructor_CRC32_phoneCallAccepted,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCallAccepted) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallAccepted) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallAccepted) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallAccepted) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCallAccepted) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallAccepted) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCallAccepted) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallAccepted) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLPhoneCallAccepted) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallAccepted) GetParticipantId() int32  { return m.Data2.ParticipantId }

func (m *TLPhoneCallAccepted) SetGB(v []byte) { m.Data2.GB = v }
func (m *TLPhoneCallAccepted) GetGB() []byte  { return m.Data2.GB }

func (m *TLPhoneCallAccepted) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallAccepted) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func NewTLPhoneCallAccepted() *TLPhoneCallAccepted {
	return &TLPhoneCallAccepted{Data2: &PhoneCall_Data{}}
}

func (m *TLPhoneCallAccepted) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallAccepted))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGB())
	x.Bytes(m.GetProtocol().Encode())

	return x.buf
}

func (m *TLPhoneCallAccepted) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallAccepted))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGB())
	x.Bytes(m.GetProtocol().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneCallAccepted) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())
	m.SetGB(dbuf.StringBytes())
	m7 := &PhoneCallProtocol{}
	m7.Decode(dbuf)
	m.SetProtocol(m7)

	return dbuf.err
}

// phoneCall#ffe6ab67 id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connection:PhoneConnection alternative_connections:Vector<PhoneConnection> start_date:int = PhoneCall;
func (m *TLPhoneCall) To_PhoneCall() *PhoneCall {
	return &PhoneCall{
		Constructor: TLConstructor_CRC32_phoneCall,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCall) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCall) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCall) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCall) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCall) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCall) GetAdminId() int32  { return m.Data2.AdminId }

func (m *TLPhoneCall) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCall) GetParticipantId() int32  { return m.Data2.ParticipantId }

func (m *TLPhoneCall) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLPhoneCall) GetGAOrB() []byte  { return m.Data2.GAOrB }

func (m *TLPhoneCall) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLPhoneCall) GetKeyFingerprint() int64  { return m.Data2.KeyFingerprint }

func (m *TLPhoneCall) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCall) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func (m *TLPhoneCall) SetConnection(v *PhoneConnection) { m.Data2.Connection = v }
func (m *TLPhoneCall) GetConnection() *PhoneConnection  { return m.Data2.Connection }

func (m *TLPhoneCall) SetAlternativeConnections(v []*PhoneConnection) {
	m.Data2.AlternativeConnections = v
}
func (m *TLPhoneCall) GetAlternativeConnections() []*PhoneConnection {
	return m.Data2.AlternativeConnections
}

func (m *TLPhoneCall) SetStartDate(v int32) { m.Data2.StartDate = v }
func (m *TLPhoneCall) GetStartDate() int32  { return m.Data2.StartDate }

func NewTLPhoneCall() *TLPhoneCall {
	return &TLPhoneCall{Data2: &PhoneCall_Data{}}
}

func (m *TLPhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCall))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGAOrB())
	x.Long(m.GetKeyFingerprint())
	x.Bytes(m.GetProtocol().Encode())
	x.Bytes(m.GetConnection().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAlternativeConnections())))
	for _, v := range m.GetAlternativeConnections() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetStartDate())

	return x.buf
}

func (m *TLPhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCall))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.Int(m.GetAdminId())
	x.Int(m.GetParticipantId())
	x.StringBytes(m.GetGAOrB())
	x.Long(m.GetKeyFingerprint())
	x.Bytes(m.GetProtocol().EncodeToLayer(layer))
	x.Bytes(m.GetConnection().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAlternativeConnections())))
	for _, v := range m.GetAlternativeConnections() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetStartDate())

	return x.buf
}

func (m *TLPhoneCall) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetAdminId(dbuf.Int())
	m.SetParticipantId(dbuf.Int())
	m.SetGAOrB(dbuf.StringBytes())
	m.SetKeyFingerprint(dbuf.Long())
	m8 := &PhoneCallProtocol{}
	m8.Decode(dbuf)
	m.SetProtocol(m8)
	m9 := &PhoneConnection{}
	m9.Decode(dbuf)
	m.SetConnection(m9)
	c10 := dbuf.Int()
	if c10 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 10, c10)
		return dbuf.err
	}
	l10 := dbuf.Int()
	v10 := make([]*PhoneConnection, l10)
	for i := int32(0); i < l10; i++ {
		v10[i] = &PhoneConnection{}
		v10[i].Decode(dbuf)
	}
	m.SetAlternativeConnections(v10)

	m.SetStartDate(dbuf.Int())

	return dbuf.err
}

// phoneCallDiscarded#50ca4de1 flags:# need_rating:flags.2?true need_debug:flags.3?true id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = PhoneCall;
func (m *TLPhoneCallDiscarded) To_PhoneCall() *PhoneCall {
	return &PhoneCall{
		Constructor: TLConstructor_CRC32_phoneCallDiscarded,
		Data2:       m.Data2,
	}
}

func (m *TLPhoneCallDiscarded) SetNeedRating(v bool) { m.Data2.NeedRating = v }
func (m *TLPhoneCallDiscarded) GetNeedRating() bool  { return m.Data2.NeedRating }

func (m *TLPhoneCallDiscarded) SetNeedDebug(v bool) { m.Data2.NeedDebug = v }
func (m *TLPhoneCallDiscarded) GetNeedDebug() bool  { return m.Data2.NeedDebug }

func (m *TLPhoneCallDiscarded) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallDiscarded) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallDiscarded) SetReason(v *PhoneCallDiscardReason) { m.Data2.Reason = v }
func (m *TLPhoneCallDiscarded) GetReason() *PhoneCallDiscardReason  { return m.Data2.Reason }

func (m *TLPhoneCallDiscarded) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLPhoneCallDiscarded) GetDuration() int32  { return m.Data2.Duration }

func NewTLPhoneCallDiscarded() *TLPhoneCallDiscarded {
	return &TLPhoneCallDiscarded{Data2: &PhoneCall_Data{}}
}

func (m *TLPhoneCallDiscarded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscarded))

	// flags
	var flags uint32 = 0
	if m.GetNeedRating() == true {
		flags |= 1 << 2
	}
	if m.GetNeedDebug() == true {
		flags |= 1 << 3
	}
	if m.GetReason() != nil {
		flags |= 1 << 0
	}
	if m.GetDuration() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetId())
	if m.GetReason() != nil {
		x.Bytes(m.GetReason().Encode())
	}
	if m.GetDuration() != 0 {
		x.Int(m.GetDuration())
	}

	return x.buf
}

func (m *TLPhoneCallDiscarded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscarded))

	// flags
	var flags uint32 = 0
	if m.GetNeedRating() == true {
		flags |= 1 << 2
	}
	if m.GetNeedDebug() == true {
		flags |= 1 << 3
	}
	if m.GetReason() != nil {
		flags |= 1 << 0
	}
	if m.GetDuration() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetId())
	if m.GetReason() != nil {
		x.Bytes(m.GetReason().EncodeToLayer(layer))
	}
	if m.GetDuration() != 0 {
		x.Int(m.GetDuration())
	}

	return x.buf
}

func (m *TLPhoneCallDiscarded) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 2)) != 0 {
		m.SetNeedRating(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetNeedDebug(true)
	}
	m.SetId(dbuf.Long())
	if (flags & (1 << 0)) != 0 {
		m5 := &PhoneCallDiscardReason{}
		m5.Decode(dbuf)
		m.SetReason(m5)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetDuration(dbuf.Int())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Updates <--
//  + TL_UpdatesTooLong
//  + TL_UpdateShortMessage
//  + TL_UpdateShortChatMessage
//  + TL_UpdateShort
//  + TL_UpdatesCombined
//  + TL_Updates
//  + TL_UpdateShortSentMessage
//

func (m *Updates) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_updatesTooLong:
		t := m.To_UpdatesTooLong()
		return t.Encode()
	case TLConstructor_CRC32_updateShortMessage:
		t := m.To_UpdateShortMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateShortChatMessage:
		t := m.To_UpdateShortChatMessage()
		return t.Encode()
	case TLConstructor_CRC32_updateShort:
		t := m.To_UpdateShort()
		return t.Encode()
	case TLConstructor_CRC32_updatesCombined:
		t := m.To_UpdatesCombined()
		return t.Encode()
	case TLConstructor_CRC32_updates:
		t := m.To_Updates()
		return t.Encode()
	case TLConstructor_CRC32_updateShortSentMessage:
		t := m.To_UpdateShortSentMessage()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_updatesTooLong:
		t := m.To_UpdatesTooLong()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateShortMessage:
		t := m.To_UpdateShortMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateShortChatMessage:
		t := m.To_UpdateShortChatMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateShort:
		t := m.To_UpdateShort()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updatesCombined:
		t := m.To_UpdatesCombined()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updates:
		t := m.To_Updates()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updateShortSentMessage:
		t := m.To_UpdateShortSentMessage()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_updatesTooLong:
		m2 := &TLUpdatesTooLong{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateShortMessage:
		m2 := &TLUpdateShortMessage{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateShortChatMessage:
		m2 := &TLUpdateShortChatMessage{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateShort:
		m2 := &TLUpdateShort{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updatesCombined:
		m2 := &TLUpdatesCombined{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updates:
		m2 := &TLUpdates{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updateShortSentMessage:
		m2 := &TLUpdateShortSentMessage{Data2: &Updates_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// updatesTooLong#e317af7e = Updates;
func (m *Updates) To_UpdatesTooLong() *TLUpdatesTooLong {
	return &TLUpdatesTooLong{
		Data2: m.Data2,
	}
}

// updateShortMessage#914fbf11 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int user_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *Updates) To_UpdateShortMessage() *TLUpdateShortMessage {
	return &TLUpdateShortMessage{
		Data2: m.Data2,
	}
}

// updateShortChatMessage#16812688 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int from_id:int chat_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *Updates) To_UpdateShortChatMessage() *TLUpdateShortChatMessage {
	return &TLUpdateShortChatMessage{
		Data2: m.Data2,
	}
}

// updateShort#78d4dec1 update:Update date:int = Updates;
func (m *Updates) To_UpdateShort() *TLUpdateShort {
	return &TLUpdateShort{
		Data2: m.Data2,
	}
}

// updatesCombined#725b04c3 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq_start:int seq:int = Updates;
func (m *Updates) To_UpdatesCombined() *TLUpdatesCombined {
	return &TLUpdatesCombined{
		Data2: m.Data2,
	}
}

// updates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;
func (m *Updates) To_Updates() *TLUpdates {
	return &TLUpdates{
		Data2: m.Data2,
	}
}

// updateShortSentMessage#11f1331c flags:# out:flags.1?true id:int pts:int pts_count:int date:int media:flags.9?MessageMedia entities:flags.7?Vector<MessageEntity> = Updates;
func (m *Updates) To_UpdateShortSentMessage() *TLUpdateShortSentMessage {
	return &TLUpdateShortSentMessage{
		Data2: m.Data2,
	}
}

// updatesTooLong#e317af7e = Updates;
func (m *TLUpdatesTooLong) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updatesTooLong,
		Data2:       m.Data2,
	}
}

func NewTLUpdatesTooLong() *TLUpdatesTooLong {
	return &TLUpdatesTooLong{Data2: &Updates_Data{}}
}

func (m *TLUpdatesTooLong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatesTooLong))

	return x.buf
}

func (m *TLUpdatesTooLong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatesTooLong))

	return x.buf
}

func (m *TLUpdatesTooLong) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// updateShortMessage#914fbf11 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int user_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *TLUpdateShortMessage) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updateShortMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateShortMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLUpdateShortMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLUpdateShortMessage) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLUpdateShortMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLUpdateShortMessage) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLUpdateShortMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLUpdateShortMessage) GetSilent() bool  { return m.Data2.Silent }

func (m *TLUpdateShortMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortMessage) GetId() int32  { return m.Data2.Id }

func (m *TLUpdateShortMessage) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateShortMessage) GetUserId() int32  { return m.Data2.UserId }

func (m *TLUpdateShortMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLUpdateShortMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLUpdateShortMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateShortMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateShortMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShortMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLUpdateShortMessage) GetFwdFrom() *MessageFwdHeader  { return m.Data2.FwdFrom }

func (m *TLUpdateShortMessage) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLUpdateShortMessage) GetViaBotId() int32  { return m.Data2.ViaBotId }

func (m *TLUpdateShortMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLUpdateShortMessage) GetReplyToMsgId() int32  { return m.Data2.ReplyToMsgId }

func (m *TLUpdateShortMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func NewTLUpdateShortMessage() *TLUpdateShortMessage {
	return &TLUpdateShortMessage{Data2: &Updates_Data{}}
}

func (m *TLUpdateShortMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShortMessage))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetFwdFrom() != nil {
		flags |= 1 << 2
	}
	if m.GetViaBotId() != 0 {
		flags |= 1 << 11
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Int(m.GetUserId())
	x.String(m.GetMessage())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetDate())
	if m.GetFwdFrom() != nil {
		x.Bytes(m.GetFwdFrom().Encode())
	}
	if m.GetViaBotId() != 0 {
		x.Int(m.GetViaBotId())
	}
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLUpdateShortMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShortMessage))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetFwdFrom() != nil {
		flags |= 1 << 2
	}
	if m.GetViaBotId() != 0 {
		flags |= 1 << 11
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Int(m.GetUserId())
	x.String(m.GetMessage())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetDate())
	if m.GetFwdFrom() != nil {
		x.Bytes(m.GetFwdFrom().EncodeToLayer(layer))
	}
	if m.GetViaBotId() != 0 {
		x.Int(m.GetViaBotId())
	}
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLUpdateShortMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetOut(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetMentioned(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetMediaUnread(true)
	}
	if (flags & (1 << 13)) != 0 {
		m.SetSilent(true)
	}
	m.SetId(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m.SetMessage(dbuf.String())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())
	m.SetDate(dbuf.Int())
	if (flags & (1 << 2)) != 0 {
		m12 := &MessageFwdHeader{}
		m12.Decode(dbuf)
		m.SetFwdFrom(m12)
	}
	if (flags & (1 << 11)) != 0 {
		m.SetViaBotId(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetReplyToMsgId(dbuf.Int())
	}
	if (flags & (1 << 7)) != 0 {
		c15 := dbuf.Int()
		if c15 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 15, c15)
			return dbuf.err
		}
		l15 := dbuf.Int()
		v15 := make([]*MessageEntity, l15)
		for i := int32(0); i < l15; i++ {
			v15[i] = &MessageEntity{}
			v15[i].Decode(dbuf)
		}
		m.SetEntities(v15)

	}

	return dbuf.err
}

// updateShortChatMessage#16812688 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int from_id:int chat_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *TLUpdateShortChatMessage) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updateShortChatMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateShortChatMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortChatMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLUpdateShortChatMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLUpdateShortChatMessage) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLUpdateShortChatMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLUpdateShortChatMessage) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLUpdateShortChatMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLUpdateShortChatMessage) GetSilent() bool  { return m.Data2.Silent }

func (m *TLUpdateShortChatMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortChatMessage) GetId() int32  { return m.Data2.Id }

func (m *TLUpdateShortChatMessage) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLUpdateShortChatMessage) GetFromId() int32  { return m.Data2.FromId }

func (m *TLUpdateShortChatMessage) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateShortChatMessage) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLUpdateShortChatMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLUpdateShortChatMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLUpdateShortChatMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortChatMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateShortChatMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortChatMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateShortChatMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortChatMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShortChatMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLUpdateShortChatMessage) GetFwdFrom() *MessageFwdHeader  { return m.Data2.FwdFrom }

func (m *TLUpdateShortChatMessage) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLUpdateShortChatMessage) GetViaBotId() int32  { return m.Data2.ViaBotId }

func (m *TLUpdateShortChatMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLUpdateShortChatMessage) GetReplyToMsgId() int32  { return m.Data2.ReplyToMsgId }

func (m *TLUpdateShortChatMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortChatMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func NewTLUpdateShortChatMessage() *TLUpdateShortChatMessage {
	return &TLUpdateShortChatMessage{Data2: &Updates_Data{}}
}

func (m *TLUpdateShortChatMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShortChatMessage))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetFwdFrom() != nil {
		flags |= 1 << 2
	}
	if m.GetViaBotId() != 0 {
		flags |= 1 << 11
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Int(m.GetFromId())
	x.Int(m.GetChatId())
	x.String(m.GetMessage())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetDate())
	if m.GetFwdFrom() != nil {
		x.Bytes(m.GetFwdFrom().Encode())
	}
	if m.GetViaBotId() != 0 {
		x.Int(m.GetViaBotId())
	}
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLUpdateShortChatMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShortChatMessage))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMentioned() == true {
		flags |= 1 << 4
	}
	if m.GetMediaUnread() == true {
		flags |= 1 << 5
	}
	if m.GetSilent() == true {
		flags |= 1 << 13
	}
	if m.GetFwdFrom() != nil {
		flags |= 1 << 2
	}
	if m.GetViaBotId() != 0 {
		flags |= 1 << 11
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 3
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Int(m.GetFromId())
	x.Int(m.GetChatId())
	x.String(m.GetMessage())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetDate())
	if m.GetFwdFrom() != nil {
		x.Bytes(m.GetFwdFrom().EncodeToLayer(layer))
	}
	if m.GetViaBotId() != 0 {
		x.Int(m.GetViaBotId())
	}
	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLUpdateShortChatMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetOut(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetMentioned(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetMediaUnread(true)
	}
	if (flags & (1 << 13)) != 0 {
		m.SetSilent(true)
	}
	m.SetId(dbuf.Int())
	m.SetFromId(dbuf.Int())
	m.SetChatId(dbuf.Int())
	m.SetMessage(dbuf.String())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())
	m.SetDate(dbuf.Int())
	if (flags & (1 << 2)) != 0 {
		m13 := &MessageFwdHeader{}
		m13.Decode(dbuf)
		m.SetFwdFrom(m13)
	}
	if (flags & (1 << 11)) != 0 {
		m.SetViaBotId(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetReplyToMsgId(dbuf.Int())
	}
	if (flags & (1 << 7)) != 0 {
		c16 := dbuf.Int()
		if c16 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 16, c16)
			return dbuf.err
		}
		l16 := dbuf.Int()
		v16 := make([]*MessageEntity, l16)
		for i := int32(0); i < l16; i++ {
			v16[i] = &MessageEntity{}
			v16[i].Decode(dbuf)
		}
		m.SetEntities(v16)

	}

	return dbuf.err
}

// updateShort#78d4dec1 update:Update date:int = Updates;
func (m *TLUpdateShort) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updateShort,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateShort) SetUpdate(v *Update) { m.Data2.Update = v }
func (m *TLUpdateShort) GetUpdate() *Update  { return m.Data2.Update }

func (m *TLUpdateShort) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShort) GetDate() int32  { return m.Data2.Date }

func NewTLUpdateShort() *TLUpdateShort {
	return &TLUpdateShort{Data2: &Updates_Data{}}
}

func (m *TLUpdateShort) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShort))

	x.Bytes(m.GetUpdate().Encode())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateShort) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShort))

	x.Bytes(m.GetUpdate().EncodeToLayer(layer))
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLUpdateShort) Decode(dbuf *DecodeBuf) error {
	m1 := &Update{}
	m1.Decode(dbuf)
	m.SetUpdate(m1)
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// updatesCombined#725b04c3 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq_start:int seq:int = Updates;
func (m *TLUpdatesCombined) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updatesCombined,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesCombined) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdatesCombined) GetUpdates() []*Update  { return m.Data2.Updates }

func (m *TLUpdatesCombined) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesCombined) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesCombined) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesCombined) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesCombined) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesCombined) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdatesCombined) SetSeqStart(v int32) { m.Data2.SeqStart = v }
func (m *TLUpdatesCombined) GetSeqStart() int32  { return m.Data2.SeqStart }

func (m *TLUpdatesCombined) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesCombined) GetSeq() int32  { return m.Data2.Seq }

func NewTLUpdatesCombined() *TLUpdatesCombined {
	return &TLUpdatesCombined{Data2: &Updates_Data{}}
}

func (m *TLUpdatesCombined) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatesCombined))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUpdates())))
	for _, v := range m.GetUpdates() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetDate())
	x.Int(m.GetSeqStart())
	x.Int(m.GetSeq())

	return x.buf
}

func (m *TLUpdatesCombined) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updatesCombined))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUpdates())))
	for _, v := range m.GetUpdates() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetDate())
	x.Int(m.GetSeqStart())
	x.Int(m.GetSeq())

	return x.buf
}

func (m *TLUpdatesCombined) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Update, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Update{}
		v1[i].Decode(dbuf)
	}
	m.SetUpdates(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	m.SetDate(dbuf.Int())
	m.SetSeqStart(dbuf.Int())
	m.SetSeq(dbuf.Int())

	return dbuf.err
}

// updates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;
func (m *TLUpdates) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updates,
		Data2:       m.Data2,
	}
}

func (m *TLUpdates) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdates) GetUpdates() []*Update  { return m.Data2.Updates }

func (m *TLUpdates) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdates) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdates) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdates) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdates) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdates) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdates) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdates) GetSeq() int32  { return m.Data2.Seq }

func NewTLUpdates() *TLUpdates {
	return &TLUpdates{Data2: &Updates_Data{}}
}

func (m *TLUpdates) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUpdates())))
	for _, v := range m.GetUpdates() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetDate())
	x.Int(m.GetSeq())

	return x.buf
}

func (m *TLUpdates) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUpdates())))
	for _, v := range m.GetUpdates() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetDate())
	x.Int(m.GetSeq())

	return x.buf
}

func (m *TLUpdates) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Update, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Update{}
		v1[i].Decode(dbuf)
	}
	m.SetUpdates(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	m.SetDate(dbuf.Int())
	m.SetSeq(dbuf.Int())

	return dbuf.err
}

// updateShortSentMessage#11f1331c flags:# out:flags.1?true id:int pts:int pts_count:int date:int media:flags.9?MessageMedia entities:flags.7?Vector<MessageEntity> = Updates;
func (m *TLUpdateShortSentMessage) To_Updates() *Updates {
	return &Updates{
		Constructor: TLConstructor_CRC32_updateShortSentMessage,
		Data2:       m.Data2,
	}
}

func (m *TLUpdateShortSentMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortSentMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLUpdateShortSentMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortSentMessage) GetId() int32  { return m.Data2.Id }

func (m *TLUpdateShortSentMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortSentMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateShortSentMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortSentMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateShortSentMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortSentMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShortSentMessage) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLUpdateShortSentMessage) GetMedia() *MessageMedia  { return m.Data2.Media }

func (m *TLUpdateShortSentMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortSentMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func NewTLUpdateShortSentMessage() *TLUpdateShortSentMessage {
	return &TLUpdateShortSentMessage{Data2: &Updates_Data{}}
}

func (m *TLUpdateShortSentMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShortSentMessage))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMedia() != nil {
		flags |= 1 << 9
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetDate())
	if m.GetMedia() != nil {
		x.Bytes(m.GetMedia().Encode())
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLUpdateShortSentMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updateShortSentMessage))

	// flags
	var flags uint32 = 0
	if m.GetOut() == true {
		flags |= 1 << 1
	}
	if m.GetMedia() != nil {
		flags |= 1 << 9
	}
	if m.GetEntities() != nil {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetDate())
	if m.GetMedia() != nil {
		x.Bytes(m.GetMedia().EncodeToLayer(layer))
	}
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLUpdateShortSentMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetOut(true)
	}
	m.SetId(dbuf.Int())
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())
	m.SetDate(dbuf.Int())
	if (flags & (1 << 9)) != 0 {
		m7 := &MessageMedia{}
		m7.Decode(dbuf)
		m.SetMedia(m7)
	}
	if (flags & (1 << 7)) != 0 {
		c8 := dbuf.Int()
		if c8 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
			return dbuf.err
		}
		l8 := dbuf.Int()
		v8 := make([]*MessageEntity, l8)
		for i := int32(0); i < l8; i++ {
			v8[i] = &MessageEntity{}
			v8[i].Decode(dbuf)
		}
		m.SetEntities(v8)

	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contact <--
//  + TL_Contact
//

func (m *Contact) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contact:
		t := m.To_Contact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contact) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contact:
		t := m.To_Contact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contact) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contact:
		m2 := &TLContact{Data2: &Contact_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contact#f911c994 user_id:int mutual:Bool = Contact;
func (m *Contact) To_Contact() *TLContact {
	return &TLContact{
		Data2: m.Data2,
	}
}

// contact#f911c994 user_id:int mutual:Bool = Contact;
func (m *TLContact) To_Contact() *Contact {
	return &Contact{
		Constructor: TLConstructor_CRC32_contact,
		Data2:       m.Data2,
	}
}

func (m *TLContact) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLContact) GetUserId() int32  { return m.Data2.UserId }

func (m *TLContact) SetMutual(v *Bool) { m.Data2.Mutual = v }
func (m *TLContact) GetMutual() *Bool  { return m.Data2.Mutual }

func NewTLContact() *TLContact {
	return &TLContact{Data2: &Contact_Data{}}
}

func (m *TLContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contact))

	x.Int(m.GetUserId())
	x.Bytes(m.GetMutual().Encode())

	return x.buf
}

func (m *TLContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contact))

	x.Int(m.GetUserId())
	x.Bytes(m.GetMutual().EncodeToLayer(layer))

	return x.buf
}

func (m *TLContact) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.SetMutual(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ContactBlocked <--
//  + TL_ContactBlocked
//

func (m *ContactBlocked) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contactBlocked:
		t := m.To_ContactBlocked()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ContactBlocked) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contactBlocked:
		t := m.To_ContactBlocked()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ContactBlocked) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contactBlocked:
		m2 := &TLContactBlocked{Data2: &ContactBlocked_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contactBlocked#561bc879 user_id:int date:int = ContactBlocked;
func (m *ContactBlocked) To_ContactBlocked() *TLContactBlocked {
	return &TLContactBlocked{
		Data2: m.Data2,
	}
}

// contactBlocked#561bc879 user_id:int date:int = ContactBlocked;
func (m *TLContactBlocked) To_ContactBlocked() *ContactBlocked {
	return &ContactBlocked{
		Constructor: TLConstructor_CRC32_contactBlocked,
		Data2:       m.Data2,
	}
}

func (m *TLContactBlocked) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLContactBlocked) GetUserId() int32  { return m.Data2.UserId }

func (m *TLContactBlocked) SetDate(v int32) { m.Data2.Date = v }
func (m *TLContactBlocked) GetDate() int32  { return m.Data2.Date }

func NewTLContactBlocked() *TLContactBlocked {
	return &TLContactBlocked{Data2: &ContactBlocked_Data{}}
}

func (m *TLContactBlocked) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactBlocked))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLContactBlocked) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactBlocked))

	x.Int(m.GetUserId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLContactBlocked) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// FileHash <--
//  + TL_FileHash
//

func (m *FileHash) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_fileHash:
		t := m.To_FileHash()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FileHash) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_fileHash:
		t := m.To_FileHash()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *FileHash) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_fileHash:
		m2 := &TLFileHash{Data2: &FileHash_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// fileHash#6242c773 offset:int limit:int hash:bytes = FileHash;
func (m *FileHash) To_FileHash() *TLFileHash {
	return &TLFileHash{
		Data2: m.Data2,
	}
}

// fileHash#6242c773 offset:int limit:int hash:bytes = FileHash;
func (m *TLFileHash) To_FileHash() *FileHash {
	return &FileHash{
		Constructor: TLConstructor_CRC32_fileHash,
		Data2:       m.Data2,
	}
}

func (m *TLFileHash) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLFileHash) GetOffset() int32  { return m.Data2.Offset }

func (m *TLFileHash) SetLimit(v int32) { m.Data2.Limit = v }
func (m *TLFileHash) GetLimit() int32  { return m.Data2.Limit }

func (m *TLFileHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLFileHash) GetHash() []byte  { return m.Data2.Hash }

func NewTLFileHash() *TLFileHash {
	return &TLFileHash{Data2: &FileHash_Data{}}
}

func (m *TLFileHash) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileHash))

	x.Int(m.GetOffset())
	x.Int(m.GetLimit())
	x.StringBytes(m.GetHash())

	return x.buf
}

func (m *TLFileHash) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_fileHash))

	x.Int(m.GetOffset())
	x.Int(m.GetLimit())
	x.StringBytes(m.GetHash())

	return x.buf
}

func (m *TLFileHash) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLimit(dbuf.Int())
	m.SetHash(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPrivacyKey <--
//  + TL_InputPrivacyKeyStatusTimestamp
//  + TL_InputPrivacyKeyChatInvite
//  + TL_InputPrivacyKeyPhoneCall
//

func (m *InputPrivacyKey) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp:
		t := m.To_InputPrivacyKeyStatusTimestamp()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyKeyChatInvite:
		t := m.To_InputPrivacyKeyChatInvite()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyKeyPhoneCall:
		t := m.To_InputPrivacyKeyPhoneCall()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPrivacyKey) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp:
		t := m.To_InputPrivacyKeyStatusTimestamp()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyKeyChatInvite:
		t := m.To_InputPrivacyKeyChatInvite()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyKeyPhoneCall:
		t := m.To_InputPrivacyKeyPhoneCall()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPrivacyKey) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp:
		m2 := &TLInputPrivacyKeyStatusTimestamp{Data2: &InputPrivacyKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyKeyChatInvite:
		m2 := &TLInputPrivacyKeyChatInvite{Data2: &InputPrivacyKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyKeyPhoneCall:
		m2 := &TLInputPrivacyKeyPhoneCall{Data2: &InputPrivacyKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPrivacyKeyStatusTimestamp#4f96cb18 = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyStatusTimestamp() *TLInputPrivacyKeyStatusTimestamp {
	return &TLInputPrivacyKeyStatusTimestamp{
		Data2: m.Data2,
	}
}

// inputPrivacyKeyChatInvite#bdfb0426 = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyChatInvite() *TLInputPrivacyKeyChatInvite {
	return &TLInputPrivacyKeyChatInvite{
		Data2: m.Data2,
	}
}

// inputPrivacyKeyPhoneCall#fabadc5f = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneCall() *TLInputPrivacyKeyPhoneCall {
	return &TLInputPrivacyKeyPhoneCall{
		Data2: m.Data2,
	}
}

// inputPrivacyKeyStatusTimestamp#4f96cb18 = InputPrivacyKey;
func (m *TLInputPrivacyKeyStatusTimestamp) To_InputPrivacyKey() *InputPrivacyKey {
	return &InputPrivacyKey{
		Constructor: TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyKeyStatusTimestamp() *TLInputPrivacyKeyStatusTimestamp {
	return &TLInputPrivacyKeyStatusTimestamp{Data2: &InputPrivacyKey_Data{}}
}

func (m *TLInputPrivacyKeyStatusTimestamp) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp))

	return x.buf
}

func (m *TLInputPrivacyKeyStatusTimestamp) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp))

	return x.buf
}

func (m *TLInputPrivacyKeyStatusTimestamp) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPrivacyKeyChatInvite#bdfb0426 = InputPrivacyKey;
func (m *TLInputPrivacyKeyChatInvite) To_InputPrivacyKey() *InputPrivacyKey {
	return &InputPrivacyKey{
		Constructor: TLConstructor_CRC32_inputPrivacyKeyChatInvite,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyKeyChatInvite() *TLInputPrivacyKeyChatInvite {
	return &TLInputPrivacyKeyChatInvite{Data2: &InputPrivacyKey_Data{}}
}

func (m *TLInputPrivacyKeyChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyChatInvite))

	return x.buf
}

func (m *TLInputPrivacyKeyChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyChatInvite))

	return x.buf
}

func (m *TLInputPrivacyKeyChatInvite) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPrivacyKeyPhoneCall#fabadc5f = InputPrivacyKey;
func (m *TLInputPrivacyKeyPhoneCall) To_InputPrivacyKey() *InputPrivacyKey {
	return &InputPrivacyKey{
		Constructor: TLConstructor_CRC32_inputPrivacyKeyPhoneCall,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyKeyPhoneCall() *TLInputPrivacyKeyPhoneCall {
	return &TLInputPrivacyKeyPhoneCall{Data2: &InputPrivacyKey_Data{}}
}

func (m *TLInputPrivacyKeyPhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyPhoneCall))

	return x.buf
}

func (m *TLInputPrivacyKeyPhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyPhoneCall))

	return x.buf
}

func (m *TLInputPrivacyKeyPhoneCall) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MessageEntity <--
//  + TL_MessageEntityUnknown
//  + TL_MessageEntityMention
//  + TL_MessageEntityHashtag
//  + TL_MessageEntityBotCommand
//  + TL_MessageEntityUrl
//  + TL_MessageEntityEmail
//  + TL_MessageEntityBold
//  + TL_MessageEntityItalic
//  + TL_MessageEntityCode
//  + TL_MessageEntityPre
//  + TL_MessageEntityTextUrl
//  + TL_MessageEntityMentionName
//  + TL_InputMessageEntityMentionName
//  + TL_MessageEntityPhone
//  + TL_MessageEntityCashtag
//

func (m *MessageEntity) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messageEntityUnknown:
		t := m.To_MessageEntityUnknown()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityMention:
		t := m.To_MessageEntityMention()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityHashtag:
		t := m.To_MessageEntityHashtag()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityBotCommand:
		t := m.To_MessageEntityBotCommand()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityUrl:
		t := m.To_MessageEntityUrl()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityEmail:
		t := m.To_MessageEntityEmail()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityBold:
		t := m.To_MessageEntityBold()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityItalic:
		t := m.To_MessageEntityItalic()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityCode:
		t := m.To_MessageEntityCode()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityPre:
		t := m.To_MessageEntityPre()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityTextUrl:
		t := m.To_MessageEntityTextUrl()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityMentionName:
		t := m.To_MessageEntityMentionName()
		return t.Encode()
	case TLConstructor_CRC32_inputMessageEntityMentionName:
		t := m.To_InputMessageEntityMentionName()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityPhone:
		t := m.To_MessageEntityPhone()
		return t.Encode()
	case TLConstructor_CRC32_messageEntityCashtag:
		t := m.To_MessageEntityCashtag()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageEntity) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messageEntityUnknown:
		t := m.To_MessageEntityUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityMention:
		t := m.To_MessageEntityMention()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityHashtag:
		t := m.To_MessageEntityHashtag()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityBotCommand:
		t := m.To_MessageEntityBotCommand()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityUrl:
		t := m.To_MessageEntityUrl()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityEmail:
		t := m.To_MessageEntityEmail()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityBold:
		t := m.To_MessageEntityBold()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityItalic:
		t := m.To_MessageEntityItalic()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityCode:
		t := m.To_MessageEntityCode()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityPre:
		t := m.To_MessageEntityPre()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityTextUrl:
		t := m.To_MessageEntityTextUrl()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityMentionName:
		t := m.To_MessageEntityMentionName()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessageEntityMentionName:
		t := m.To_InputMessageEntityMentionName()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityPhone:
		t := m.To_MessageEntityPhone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageEntityCashtag:
		t := m.To_MessageEntityCashtag()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageEntity) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messageEntityUnknown:
		m2 := &TLMessageEntityUnknown{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityMention:
		m2 := &TLMessageEntityMention{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityHashtag:
		m2 := &TLMessageEntityHashtag{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityBotCommand:
		m2 := &TLMessageEntityBotCommand{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityUrl:
		m2 := &TLMessageEntityUrl{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityEmail:
		m2 := &TLMessageEntityEmail{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityBold:
		m2 := &TLMessageEntityBold{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityItalic:
		m2 := &TLMessageEntityItalic{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityCode:
		m2 := &TLMessageEntityCode{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityPre:
		m2 := &TLMessageEntityPre{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityTextUrl:
		m2 := &TLMessageEntityTextUrl{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityMentionName:
		m2 := &TLMessageEntityMentionName{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessageEntityMentionName:
		m2 := &TLInputMessageEntityMentionName{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityPhone:
		m2 := &TLMessageEntityPhone{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageEntityCashtag:
		m2 := &TLMessageEntityCashtag{Data2: &MessageEntity_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messageEntityUnknown#bb92ba95 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityUnknown() *TLMessageEntityUnknown {
	return &TLMessageEntityUnknown{
		Data2: m.Data2,
	}
}

// messageEntityMention#fa04579d offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityMention() *TLMessageEntityMention {
	return &TLMessageEntityMention{
		Data2: m.Data2,
	}
}

// messageEntityHashtag#6f635b0d offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityHashtag() *TLMessageEntityHashtag {
	return &TLMessageEntityHashtag{
		Data2: m.Data2,
	}
}

// messageEntityBotCommand#6cef8ac7 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityBotCommand() *TLMessageEntityBotCommand {
	return &TLMessageEntityBotCommand{
		Data2: m.Data2,
	}
}

// messageEntityUrl#6ed02538 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityUrl() *TLMessageEntityUrl {
	return &TLMessageEntityUrl{
		Data2: m.Data2,
	}
}

// messageEntityEmail#64e475c2 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityEmail() *TLMessageEntityEmail {
	return &TLMessageEntityEmail{
		Data2: m.Data2,
	}
}

// messageEntityBold#bd610bc9 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityBold() *TLMessageEntityBold {
	return &TLMessageEntityBold{
		Data2: m.Data2,
	}
}

// messageEntityItalic#826f8b60 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityItalic() *TLMessageEntityItalic {
	return &TLMessageEntityItalic{
		Data2: m.Data2,
	}
}

// messageEntityCode#28a20571 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityCode() *TLMessageEntityCode {
	return &TLMessageEntityCode{
		Data2: m.Data2,
	}
}

// messageEntityPre#73924be0 offset:int length:int language:string = MessageEntity;
func (m *MessageEntity) To_MessageEntityPre() *TLMessageEntityPre {
	return &TLMessageEntityPre{
		Data2: m.Data2,
	}
}

// messageEntityTextUrl#76a6d327 offset:int length:int url:string = MessageEntity;
func (m *MessageEntity) To_MessageEntityTextUrl() *TLMessageEntityTextUrl {
	return &TLMessageEntityTextUrl{
		Data2: m.Data2,
	}
}

// messageEntityMentionName#352dca58 offset:int length:int user_id:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityMentionName() *TLMessageEntityMentionName {
	return &TLMessageEntityMentionName{
		Data2: m.Data2,
	}
}

// inputMessageEntityMentionName#208e68c9 offset:int length:int user_id:InputUser = MessageEntity;
func (m *MessageEntity) To_InputMessageEntityMentionName() *TLInputMessageEntityMentionName {
	return &TLInputMessageEntityMentionName{
		Data2: m.Data2,
	}
}

// messageEntityPhone#9b69e34b offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityPhone() *TLMessageEntityPhone {
	return &TLMessageEntityPhone{
		Data2: m.Data2,
	}
}

// messageEntityCashtag#4c4e743f offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityCashtag() *TLMessageEntityCashtag {
	return &TLMessageEntityCashtag{
		Data2: m.Data2,
	}
}

// messageEntityUnknown#bb92ba95 offset:int length:int = MessageEntity;
func (m *TLMessageEntityUnknown) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityUnknown,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityUnknown) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUnknown) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityUnknown) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUnknown) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityUnknown() *TLMessageEntityUnknown {
	return &TLMessageEntityUnknown{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityUnknown))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityUnknown))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityUnknown) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityMention#fa04579d offset:int length:int = MessageEntity;
func (m *TLMessageEntityMention) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityMention,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityMention) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityMention) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityMention) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityMention) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityMention() *TLMessageEntityMention {
	return &TLMessageEntityMention{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityMention) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityMention))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityMention) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityMention))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityMention) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityHashtag#6f635b0d offset:int length:int = MessageEntity;
func (m *TLMessageEntityHashtag) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityHashtag,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityHashtag) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityHashtag) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityHashtag) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityHashtag) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityHashtag() *TLMessageEntityHashtag {
	return &TLMessageEntityHashtag{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityHashtag) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityHashtag))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityHashtag) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityHashtag))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityHashtag) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityBotCommand#6cef8ac7 offset:int length:int = MessageEntity;
func (m *TLMessageEntityBotCommand) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityBotCommand,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityBotCommand) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBotCommand) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityBotCommand) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBotCommand) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityBotCommand() *TLMessageEntityBotCommand {
	return &TLMessageEntityBotCommand{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityBotCommand) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityBotCommand))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityBotCommand) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityBotCommand))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityBotCommand) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityUrl#6ed02538 offset:int length:int = MessageEntity;
func (m *TLMessageEntityUrl) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityUrl,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityUrl) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUrl) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityUrl) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUrl) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityUrl() *TLMessageEntityUrl {
	return &TLMessageEntityUrl{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityUrl) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityUrl))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityUrl) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityUrl))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityUrl) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityEmail#64e475c2 offset:int length:int = MessageEntity;
func (m *TLMessageEntityEmail) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityEmail,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityEmail) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityEmail) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityEmail) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityEmail) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityEmail() *TLMessageEntityEmail {
	return &TLMessageEntityEmail{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityEmail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityEmail))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityEmail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityEmail))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityEmail) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityBold#bd610bc9 offset:int length:int = MessageEntity;
func (m *TLMessageEntityBold) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityBold,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityBold) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBold) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityBold) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBold) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityBold() *TLMessageEntityBold {
	return &TLMessageEntityBold{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityBold) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityBold))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityBold) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityBold))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityBold) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityItalic#826f8b60 offset:int length:int = MessageEntity;
func (m *TLMessageEntityItalic) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityItalic,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityItalic) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityItalic) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityItalic) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityItalic) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityItalic() *TLMessageEntityItalic {
	return &TLMessageEntityItalic{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityItalic) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityItalic))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityItalic) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityItalic))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityItalic) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityCode#28a20571 offset:int length:int = MessageEntity;
func (m *TLMessageEntityCode) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityCode,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityCode) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityCode) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityCode) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityCode) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityCode() *TLMessageEntityCode {
	return &TLMessageEntityCode{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityCode))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityCode))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityCode) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityPre#73924be0 offset:int length:int language:string = MessageEntity;
func (m *TLMessageEntityPre) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityPre,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityPre) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityPre) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityPre) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityPre) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityPre) SetLanguage(v string) { m.Data2.Language = v }
func (m *TLMessageEntityPre) GetLanguage() string  { return m.Data2.Language }

func NewTLMessageEntityPre() *TLMessageEntityPre {
	return &TLMessageEntityPre{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityPre) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityPre))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.String(m.GetLanguage())

	return x.buf
}

func (m *TLMessageEntityPre) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityPre))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.String(m.GetLanguage())

	return x.buf
}

func (m *TLMessageEntityPre) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())
	m.SetLanguage(dbuf.String())

	return dbuf.err
}

// messageEntityTextUrl#76a6d327 offset:int length:int url:string = MessageEntity;
func (m *TLMessageEntityTextUrl) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityTextUrl,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityTextUrl) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityTextUrl) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityTextUrl) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityTextUrl) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityTextUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLMessageEntityTextUrl) GetUrl() string  { return m.Data2.Url }

func NewTLMessageEntityTextUrl() *TLMessageEntityTextUrl {
	return &TLMessageEntityTextUrl{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityTextUrl) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityTextUrl))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.String(m.GetUrl())

	return x.buf
}

func (m *TLMessageEntityTextUrl) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityTextUrl))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.String(m.GetUrl())

	return x.buf
}

func (m *TLMessageEntityTextUrl) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())
	m.SetUrl(dbuf.String())

	return dbuf.err
}

// messageEntityMentionName#352dca58 offset:int length:int user_id:int = MessageEntity;
func (m *TLMessageEntityMentionName) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityMentionName,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityMentionName) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityMentionName) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityMentionName) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityMentionName) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityMentionName) SetUserId(v int32) { m.Data2.UserId_5 = v }
func (m *TLMessageEntityMentionName) GetUserId() int32  { return m.Data2.UserId_5 }

func NewTLMessageEntityMentionName() *TLMessageEntityMentionName {
	return &TLMessageEntityMentionName{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityMentionName) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityMentionName))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLMessageEntityMentionName) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityMentionName))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLMessageEntityMentionName) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// inputMessageEntityMentionName#208e68c9 offset:int length:int user_id:InputUser = MessageEntity;
func (m *TLInputMessageEntityMentionName) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_inputMessageEntityMentionName,
		Data2:       m.Data2,
	}
}

func (m *TLInputMessageEntityMentionName) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLInputMessageEntityMentionName) GetOffset() int32  { return m.Data2.Offset }

func (m *TLInputMessageEntityMentionName) SetLength(v int32) { m.Data2.Length = v }
func (m *TLInputMessageEntityMentionName) GetLength() int32  { return m.Data2.Length }

func (m *TLInputMessageEntityMentionName) SetUserId(v *InputUser) { m.Data2.UserId_6 = v }
func (m *TLInputMessageEntityMentionName) GetUserId() *InputUser  { return m.Data2.UserId_6 }

func NewTLInputMessageEntityMentionName() *TLInputMessageEntityMentionName {
	return &TLInputMessageEntityMentionName{Data2: &MessageEntity_Data{}}
}

func (m *TLInputMessageEntityMentionName) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessageEntityMentionName))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.Bytes(m.GetUserId().Encode())

	return x.buf
}

func (m *TLInputMessageEntityMentionName) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessageEntityMentionName))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())
	x.Bytes(m.GetUserId().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputMessageEntityMentionName) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())
	m3 := &InputUser{}
	m3.Decode(dbuf)
	m.SetUserId(m3)

	return dbuf.err
}

// messageEntityPhone#9b69e34b offset:int length:int = MessageEntity;
func (m *TLMessageEntityPhone) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityPhone,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityPhone) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityPhone) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityPhone) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityPhone) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityPhone() *TLMessageEntityPhone {
	return &TLMessageEntityPhone{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityPhone))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityPhone))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityPhone) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

// messageEntityCashtag#4c4e743f offset:int length:int = MessageEntity;
func (m *TLMessageEntityCashtag) To_MessageEntity() *MessageEntity {
	return &MessageEntity{
		Constructor: TLConstructor_CRC32_messageEntityCashtag,
		Data2:       m.Data2,
	}
}

func (m *TLMessageEntityCashtag) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityCashtag) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityCashtag) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityCashtag) GetLength() int32  { return m.Data2.Length }

func NewTLMessageEntityCashtag() *TLMessageEntityCashtag {
	return &TLMessageEntityCashtag{Data2: &MessageEntity_Data{}}
}

func (m *TLMessageEntityCashtag) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityCashtag))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityCashtag) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageEntityCashtag))

	x.Int(m.GetOffset())
	x.Int(m.GetLength())

	return x.buf
}

func (m *TLMessageEntityCashtag) Decode(dbuf *DecodeBuf) error {
	m.SetOffset(dbuf.Int())
	m.SetLength(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEvent <--
//  + TL_ChannelAdminLogEvent
//

func (m *ChannelAdminLogEvent) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelAdminLogEvent:
		t := m.To_ChannelAdminLogEvent()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminLogEvent) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelAdminLogEvent:
		t := m.To_ChannelAdminLogEvent()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelAdminLogEvent) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelAdminLogEvent:
		m2 := &TLChannelAdminLogEvent{Data2: &ChannelAdminLogEvent_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelAdminLogEvent#3b5a3e40 id:long date:int user_id:int action:ChannelAdminLogEventAction = ChannelAdminLogEvent;
func (m *ChannelAdminLogEvent) To_ChannelAdminLogEvent() *TLChannelAdminLogEvent {
	return &TLChannelAdminLogEvent{
		Data2: m.Data2,
	}
}

// channelAdminLogEvent#3b5a3e40 id:long date:int user_id:int action:ChannelAdminLogEventAction = ChannelAdminLogEvent;
func (m *TLChannelAdminLogEvent) To_ChannelAdminLogEvent() *ChannelAdminLogEvent {
	return &ChannelAdminLogEvent{
		Constructor: TLConstructor_CRC32_channelAdminLogEvent,
		Data2:       m.Data2,
	}
}

func (m *TLChannelAdminLogEvent) SetId(v int64) { m.Data2.Id = v }
func (m *TLChannelAdminLogEvent) GetId() int64  { return m.Data2.Id }

func (m *TLChannelAdminLogEvent) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelAdminLogEvent) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelAdminLogEvent) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelAdminLogEvent) GetUserId() int32  { return m.Data2.UserId }

func (m *TLChannelAdminLogEvent) SetAction(v *ChannelAdminLogEventAction) { m.Data2.Action = v }
func (m *TLChannelAdminLogEvent) GetAction() *ChannelAdminLogEventAction  { return m.Data2.Action }

func NewTLChannelAdminLogEvent() *TLChannelAdminLogEvent {
	return &TLChannelAdminLogEvent{Data2: &ChannelAdminLogEvent_Data{}}
}

func (m *TLChannelAdminLogEvent) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEvent))

	x.Long(m.GetId())
	x.Int(m.GetDate())
	x.Int(m.GetUserId())
	x.Bytes(m.GetAction().Encode())

	return x.buf
}

func (m *TLChannelAdminLogEvent) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelAdminLogEvent))

	x.Long(m.GetId())
	x.Int(m.GetDate())
	x.Int(m.GetUserId())
	x.Bytes(m.GetAction().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelAdminLogEvent) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m4 := &ChannelAdminLogEventAction{}
	m4.Decode(dbuf)
	m.SetAction(m4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputGeoPoint <--
//  + TL_InputGeoPointEmpty
//  + TL_InputGeoPoint
//

func (m *InputGeoPoint) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputGeoPointEmpty:
		t := m.To_InputGeoPointEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputGeoPoint:
		t := m.To_InputGeoPoint()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputGeoPoint) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputGeoPointEmpty:
		t := m.To_InputGeoPointEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputGeoPoint:
		t := m.To_InputGeoPoint()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputGeoPoint) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputGeoPointEmpty:
		m2 := &TLInputGeoPointEmpty{Data2: &InputGeoPoint_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputGeoPoint:
		m2 := &TLInputGeoPoint{Data2: &InputGeoPoint_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputGeoPointEmpty#e4c123d6 = InputGeoPoint;
func (m *InputGeoPoint) To_InputGeoPointEmpty() *TLInputGeoPointEmpty {
	return &TLInputGeoPointEmpty{
		Data2: m.Data2,
	}
}

// inputGeoPoint#f3b7acc9 lat:double long:double = InputGeoPoint;
func (m *InputGeoPoint) To_InputGeoPoint() *TLInputGeoPoint {
	return &TLInputGeoPoint{
		Data2: m.Data2,
	}
}

// inputGeoPointEmpty#e4c123d6 = InputGeoPoint;
func (m *TLInputGeoPointEmpty) To_InputGeoPoint() *InputGeoPoint {
	return &InputGeoPoint{
		Constructor: TLConstructor_CRC32_inputGeoPointEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputGeoPointEmpty() *TLInputGeoPointEmpty {
	return &TLInputGeoPointEmpty{Data2: &InputGeoPoint_Data{}}
}

func (m *TLInputGeoPointEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGeoPointEmpty))

	return x.buf
}

func (m *TLInputGeoPointEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGeoPointEmpty))

	return x.buf
}

func (m *TLInputGeoPointEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputGeoPoint#f3b7acc9 lat:double long:double = InputGeoPoint;
func (m *TLInputGeoPoint) To_InputGeoPoint() *InputGeoPoint {
	return &InputGeoPoint{
		Constructor: TLConstructor_CRC32_inputGeoPoint,
		Data2:       m.Data2,
	}
}

func (m *TLInputGeoPoint) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLInputGeoPoint) GetLat() float64  { return m.Data2.Lat }

func (m *TLInputGeoPoint) SetLong(v float64) { m.Data2.Long = v }
func (m *TLInputGeoPoint) GetLong() float64  { return m.Data2.Long }

func NewTLInputGeoPoint() *TLInputGeoPoint {
	return &TLInputGeoPoint{Data2: &InputGeoPoint_Data{}}
}

func (m *TLInputGeoPoint) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGeoPoint))

	x.Double(m.GetLat())
	x.Double(m.GetLong())

	return x.buf
}

func (m *TLInputGeoPoint) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputGeoPoint))

	x.Double(m.GetLat())
	x.Double(m.GetLong())

	return x.buf
}

func (m *TLInputGeoPoint) Decode(dbuf *DecodeBuf) error {
	m.SetLat(dbuf.Double())
	m.SetLong(dbuf.Double())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MessageMedia <--
//  + TL_MessageMediaEmpty
//  + TL_MessageMediaPhoto
//  + TL_MessageMediaGeo
//  + TL_MessageMediaContact
//  + TL_MessageMediaUnsupported
//  + TL_MessageMediaDocument
//  + TL_MessageMediaWebPage
//  + TL_MessageMediaVenue
//  + TL_MessageMediaGame
//  + TL_MessageMediaInvoice
//  + TL_MessageMediaGeoLive
//

func (m *MessageMedia) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messageMediaEmpty:
		t := m.To_MessageMediaEmpty()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaPhoto:
		t := m.To_MessageMediaPhoto()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaGeo:
		t := m.To_MessageMediaGeo()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaContact:
		t := m.To_MessageMediaContact()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaUnsupported:
		t := m.To_MessageMediaUnsupported()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaDocument:
		t := m.To_MessageMediaDocument()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaWebPage:
		t := m.To_MessageMediaWebPage()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaVenue:
		t := m.To_MessageMediaVenue()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaGame:
		t := m.To_MessageMediaGame()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaInvoice:
		t := m.To_MessageMediaInvoice()
		return t.Encode()
	case TLConstructor_CRC32_messageMediaGeoLive:
		t := m.To_MessageMediaGeoLive()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageMedia) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messageMediaEmpty:
		t := m.To_MessageMediaEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaPhoto:
		t := m.To_MessageMediaPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaGeo:
		t := m.To_MessageMediaGeo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaContact:
		t := m.To_MessageMediaContact()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaUnsupported:
		t := m.To_MessageMediaUnsupported()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaDocument:
		t := m.To_MessageMediaDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaWebPage:
		t := m.To_MessageMediaWebPage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaVenue:
		t := m.To_MessageMediaVenue()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaGame:
		t := m.To_MessageMediaGame()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaInvoice:
		t := m.To_MessageMediaInvoice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageMediaGeoLive:
		t := m.To_MessageMediaGeoLive()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageMedia) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messageMediaEmpty:
		m2 := &TLMessageMediaEmpty{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaPhoto:
		m2 := &TLMessageMediaPhoto{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaGeo:
		m2 := &TLMessageMediaGeo{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaContact:
		m2 := &TLMessageMediaContact{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaUnsupported:
		m2 := &TLMessageMediaUnsupported{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaDocument:
		m2 := &TLMessageMediaDocument{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaWebPage:
		m2 := &TLMessageMediaWebPage{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaVenue:
		m2 := &TLMessageMediaVenue{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaGame:
		m2 := &TLMessageMediaGame{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaInvoice:
		m2 := &TLMessageMediaInvoice{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageMediaGeoLive:
		m2 := &TLMessageMediaGeoLive{Data2: &MessageMedia_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messageMediaEmpty#3ded6320 = MessageMedia;
func (m *MessageMedia) To_MessageMediaEmpty() *TLMessageMediaEmpty {
	return &TLMessageMediaEmpty{
		Data2: m.Data2,
	}
}

// messageMediaPhoto#695150d7 flags:# photo:flags.0?Photo ttl_seconds:flags.2?int = MessageMedia;
func (m *MessageMedia) To_MessageMediaPhoto() *TLMessageMediaPhoto {
	return &TLMessageMediaPhoto{
		Data2: m.Data2,
	}
}

// messageMediaGeo#56e0d474 geo:GeoPoint = MessageMedia;
func (m *MessageMedia) To_MessageMediaGeo() *TLMessageMediaGeo {
	return &TLMessageMediaGeo{
		Data2: m.Data2,
	}
}

// messageMediaContact#cbf24940 phone_number:string first_name:string last_name:string vcard:string user_id:int = MessageMedia;
func (m *MessageMedia) To_MessageMediaContact() *TLMessageMediaContact {
	return &TLMessageMediaContact{
		Data2: m.Data2,
	}
}

// messageMediaUnsupported#9f84f49e = MessageMedia;
func (m *MessageMedia) To_MessageMediaUnsupported() *TLMessageMediaUnsupported {
	return &TLMessageMediaUnsupported{
		Data2: m.Data2,
	}
}

// messageMediaDocument#9cb070d7 flags:# document:flags.0?Document ttl_seconds:flags.2?int = MessageMedia;
func (m *MessageMedia) To_MessageMediaDocument() *TLMessageMediaDocument {
	return &TLMessageMediaDocument{
		Data2: m.Data2,
	}
}

// messageMediaWebPage#a32dd600 webpage:WebPage = MessageMedia;
func (m *MessageMedia) To_MessageMediaWebPage() *TLMessageMediaWebPage {
	return &TLMessageMediaWebPage{
		Data2: m.Data2,
	}
}

// messageMediaVenue#2ec0533f geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string = MessageMedia;
func (m *MessageMedia) To_MessageMediaVenue() *TLMessageMediaVenue {
	return &TLMessageMediaVenue{
		Data2: m.Data2,
	}
}

// messageMediaGame#fdb19008 game:Game = MessageMedia;
func (m *MessageMedia) To_MessageMediaGame() *TLMessageMediaGame {
	return &TLMessageMediaGame{
		Data2: m.Data2,
	}
}

// messageMediaInvoice#84551347 flags:# shipping_address_requested:flags.1?true test:flags.3?true title:string description:string photo:flags.0?WebDocument receipt_msg_id:flags.2?int currency:string total_amount:long start_param:string = MessageMedia;
func (m *MessageMedia) To_MessageMediaInvoice() *TLMessageMediaInvoice {
	return &TLMessageMediaInvoice{
		Data2: m.Data2,
	}
}

// messageMediaGeoLive#7c3c2609 geo:GeoPoint period:int = MessageMedia;
func (m *MessageMedia) To_MessageMediaGeoLive() *TLMessageMediaGeoLive {
	return &TLMessageMediaGeoLive{
		Data2: m.Data2,
	}
}

// messageMediaEmpty#3ded6320 = MessageMedia;
func (m *TLMessageMediaEmpty) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaEmpty,
		Data2:       m.Data2,
	}
}

func NewTLMessageMediaEmpty() *TLMessageMediaEmpty {
	return &TLMessageMediaEmpty{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaEmpty))

	return x.buf
}

func (m *TLMessageMediaEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaEmpty))

	return x.buf
}

func (m *TLMessageMediaEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageMediaPhoto#695150d7 flags:# photo:flags.0?Photo ttl_seconds:flags.2?int = MessageMedia;
func (m *TLMessageMediaPhoto) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaPhoto) SetPhoto(v *Photo) { m.Data2.Photo_1 = v }
func (m *TLMessageMediaPhoto) GetPhoto() *Photo  { return m.Data2.Photo_1 }

func (m *TLMessageMediaPhoto) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaPhoto) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLMessageMediaPhoto() *TLMessageMediaPhoto {
	return &TLMessageMediaPhoto{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaPhoto))

	// flags
	var flags uint32 = 0
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().Encode())
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLMessageMediaPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaPhoto))

	// flags
	var flags uint32 = 0
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLMessageMediaPhoto) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m2 := &Photo{}
		m2.Decode(dbuf)
		m.SetPhoto(m2)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// messageMediaGeo#56e0d474 geo:GeoPoint = MessageMedia;
func (m *TLMessageMediaGeo) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaGeo,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaGeo) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaGeo) GetGeo() *GeoPoint  { return m.Data2.Geo }

func NewTLMessageMediaGeo() *TLMessageMediaGeo {
	return &TLMessageMediaGeo{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaGeo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaGeo))

	x.Bytes(m.GetGeo().Encode())

	return x.buf
}

func (m *TLMessageMediaGeo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaGeo))

	x.Bytes(m.GetGeo().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageMediaGeo) Decode(dbuf *DecodeBuf) error {
	m1 := &GeoPoint{}
	m1.Decode(dbuf)
	m.SetGeo(m1)

	return dbuf.err
}

// messageMediaContact#cbf24940 phone_number:string first_name:string last_name:string vcard:string user_id:int = MessageMedia;
func (m *TLMessageMediaContact) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaContact,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLMessageMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLMessageMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLMessageMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLMessageMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLMessageMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLMessageMediaContact) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageMediaContact) GetUserId() int32  { return m.Data2.UserId }

func NewTLMessageMediaContact() *TLMessageMediaContact {
	return &TLMessageMediaContact{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaContact))

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())
	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLMessageMediaContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaContact))

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())
	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLMessageMediaContact) Decode(dbuf *DecodeBuf) error {
	m.SetPhoneNumber(dbuf.String())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())
	m.SetVcard(dbuf.String())
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// messageMediaUnsupported#9f84f49e = MessageMedia;
func (m *TLMessageMediaUnsupported) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaUnsupported,
		Data2:       m.Data2,
	}
}

func NewTLMessageMediaUnsupported() *TLMessageMediaUnsupported {
	return &TLMessageMediaUnsupported{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaUnsupported) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaUnsupported))

	return x.buf
}

func (m *TLMessageMediaUnsupported) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaUnsupported))

	return x.buf
}

func (m *TLMessageMediaUnsupported) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageMediaDocument#9cb070d7 flags:# document:flags.0?Document ttl_seconds:flags.2?int = MessageMedia;
func (m *TLMessageMediaDocument) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaDocument,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaDocument) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLMessageMediaDocument) GetDocument() *Document  { return m.Data2.Document }

func (m *TLMessageMediaDocument) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaDocument) GetTtlSeconds() int32  { return m.Data2.TtlSeconds }

func NewTLMessageMediaDocument() *TLMessageMediaDocument {
	return &TLMessageMediaDocument{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaDocument))

	// flags
	var flags uint32 = 0
	if m.GetDocument() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().Encode())
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLMessageMediaDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaDocument))

	// flags
	var flags uint32 = 0
	if m.GetDocument() != nil {
		flags |= 1 << 0
	}
	if m.GetTtlSeconds() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().EncodeToLayer(layer))
	}
	if m.GetTtlSeconds() != 0 {
		x.Int(m.GetTtlSeconds())
	}

	return x.buf
}

func (m *TLMessageMediaDocument) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m2 := &Document{}
		m2.Decode(dbuf)
		m.SetDocument(m2)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTtlSeconds(dbuf.Int())
	}

	return dbuf.err
}

// messageMediaWebPage#a32dd600 webpage:WebPage = MessageMedia;
func (m *TLMessageMediaWebPage) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaWebPage,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLMessageMediaWebPage) GetWebpage() *WebPage  { return m.Data2.Webpage }

func NewTLMessageMediaWebPage() *TLMessageMediaWebPage {
	return &TLMessageMediaWebPage{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaWebPage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaWebPage))

	x.Bytes(m.GetWebpage().Encode())

	return x.buf
}

func (m *TLMessageMediaWebPage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaWebPage))

	x.Bytes(m.GetWebpage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageMediaWebPage) Decode(dbuf *DecodeBuf) error {
	m1 := &WebPage{}
	m1.Decode(dbuf)
	m.SetWebpage(m1)

	return dbuf.err
}

// messageMediaVenue#2ec0533f geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string = MessageMedia;
func (m *TLMessageMediaVenue) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaVenue,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaVenue) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaVenue) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLMessageMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLMessageMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLMessageMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLMessageMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLMessageMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func NewTLMessageMediaVenue() *TLMessageMediaVenue {
	return &TLMessageMediaVenue{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaVenue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaVenue))

	x.Bytes(m.GetGeo().Encode())
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())

	return x.buf
}

func (m *TLMessageMediaVenue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaVenue))

	x.Bytes(m.GetGeo().EncodeToLayer(layer))
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())

	return x.buf
}

func (m *TLMessageMediaVenue) Decode(dbuf *DecodeBuf) error {
	m1 := &GeoPoint{}
	m1.Decode(dbuf)
	m.SetGeo(m1)
	m.SetTitle(dbuf.String())
	m.SetAddress(dbuf.String())
	m.SetProvider(dbuf.String())
	m.SetVenueId(dbuf.String())
	m.SetVenueType(dbuf.String())

	return dbuf.err
}

// messageMediaGame#fdb19008 game:Game = MessageMedia;
func (m *TLMessageMediaGame) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaGame,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaGame) SetGame(v *Game) { m.Data2.Game = v }
func (m *TLMessageMediaGame) GetGame() *Game  { return m.Data2.Game }

func NewTLMessageMediaGame() *TLMessageMediaGame {
	return &TLMessageMediaGame{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaGame) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaGame))

	x.Bytes(m.GetGame().Encode())

	return x.buf
}

func (m *TLMessageMediaGame) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaGame))

	x.Bytes(m.GetGame().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageMediaGame) Decode(dbuf *DecodeBuf) error {
	m1 := &Game{}
	m1.Decode(dbuf)
	m.SetGame(m1)

	return dbuf.err
}

// messageMediaInvoice#84551347 flags:# shipping_address_requested:flags.1?true test:flags.3?true title:string description:string photo:flags.0?WebDocument receipt_msg_id:flags.2?int currency:string total_amount:long start_param:string = MessageMedia;
func (m *TLMessageMediaInvoice) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaInvoice,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaInvoice) SetShippingAddressRequested(v bool) {
	m.Data2.ShippingAddressRequested = v
}
func (m *TLMessageMediaInvoice) GetShippingAddressRequested() bool {
	return m.Data2.ShippingAddressRequested
}

func (m *TLMessageMediaInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLMessageMediaInvoice) GetTest() bool  { return m.Data2.Test }

func (m *TLMessageMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaInvoice) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLMessageMediaInvoice) GetDescription() string  { return m.Data2.Description }

func (m *TLMessageMediaInvoice) SetPhoto(v *WebDocument) { m.Data2.Photo_20 = v }
func (m *TLMessageMediaInvoice) GetPhoto() *WebDocument  { return m.Data2.Photo_20 }

func (m *TLMessageMediaInvoice) SetReceiptMsgId(v int32) { m.Data2.ReceiptMsgId = v }
func (m *TLMessageMediaInvoice) GetReceiptMsgId() int32  { return m.Data2.ReceiptMsgId }

func (m *TLMessageMediaInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageMediaInvoice) GetCurrency() string  { return m.Data2.Currency }

func (m *TLMessageMediaInvoice) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageMediaInvoice) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLMessageMediaInvoice) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLMessageMediaInvoice) GetStartParam() string  { return m.Data2.StartParam }

func NewTLMessageMediaInvoice() *TLMessageMediaInvoice {
	return &TLMessageMediaInvoice{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaInvoice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaInvoice))

	// flags
	var flags uint32 = 0
	if m.GetShippingAddressRequested() == true {
		flags |= 1 << 1
	}
	if m.GetTest() == true {
		flags |= 1 << 3
	}
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	if m.GetReceiptMsgId() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetTitle())
	x.String(m.GetDescription())
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().Encode())
	}
	if m.GetReceiptMsgId() != 0 {
		x.Int(m.GetReceiptMsgId())
	}
	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())
	x.String(m.GetStartParam())

	return x.buf
}

func (m *TLMessageMediaInvoice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaInvoice))

	// flags
	var flags uint32 = 0
	if m.GetShippingAddressRequested() == true {
		flags |= 1 << 1
	}
	if m.GetTest() == true {
		flags |= 1 << 3
	}
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	if m.GetReceiptMsgId() != 0 {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetTitle())
	x.String(m.GetDescription())
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	}
	if m.GetReceiptMsgId() != 0 {
		x.Int(m.GetReceiptMsgId())
	}
	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())
	x.String(m.GetStartParam())

	return x.buf
}

func (m *TLMessageMediaInvoice) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetShippingAddressRequested(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetTest(true)
	}
	m.SetTitle(dbuf.String())
	m.SetDescription(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m6 := &WebDocument{}
		m6.Decode(dbuf)
		m.SetPhoto(m6)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetReceiptMsgId(dbuf.Int())
	}
	m.SetCurrency(dbuf.String())
	m.SetTotalAmount(dbuf.Long())
	m.SetStartParam(dbuf.String())

	return dbuf.err
}

// messageMediaGeoLive#7c3c2609 geo:GeoPoint period:int = MessageMedia;
func (m *TLMessageMediaGeoLive) To_MessageMedia() *MessageMedia {
	return &MessageMedia{
		Constructor: TLConstructor_CRC32_messageMediaGeoLive,
		Data2:       m.Data2,
	}
}

func (m *TLMessageMediaGeoLive) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaGeoLive) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLMessageMediaGeoLive) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLMessageMediaGeoLive) GetPeriod() int32  { return m.Data2.Period }

func NewTLMessageMediaGeoLive() *TLMessageMediaGeoLive {
	return &TLMessageMediaGeoLive{Data2: &MessageMedia_Data{}}
}

func (m *TLMessageMediaGeoLive) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaGeoLive))

	x.Bytes(m.GetGeo().Encode())
	x.Int(m.GetPeriod())

	return x.buf
}

func (m *TLMessageMediaGeoLive) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageMediaGeoLive))

	x.Bytes(m.GetGeo().EncodeToLayer(layer))
	x.Int(m.GetPeriod())

	return x.buf
}

func (m *TLMessageMediaGeoLive) Decode(dbuf *DecodeBuf) error {
	m1 := &GeoPoint{}
	m1.Decode(dbuf)
	m.SetGeo(m1)
	m.SetPeriod(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// KeyboardButton <--
//  + TL_KeyboardButton
//  + TL_KeyboardButtonUrl
//  + TL_KeyboardButtonCallback
//  + TL_KeyboardButtonRequestPhone
//  + TL_KeyboardButtonRequestGeoLocation
//  + TL_KeyboardButtonSwitchInline
//  + TL_KeyboardButtonGame
//  + TL_KeyboardButtonBuy
//

func (m *KeyboardButton) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_keyboardButton:
		t := m.To_KeyboardButton()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonUrl:
		t := m.To_KeyboardButtonUrl()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonCallback:
		t := m.To_KeyboardButtonCallback()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonRequestPhone:
		t := m.To_KeyboardButtonRequestPhone()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonRequestGeoLocation:
		t := m.To_KeyboardButtonRequestGeoLocation()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonSwitchInline:
		t := m.To_KeyboardButtonSwitchInline()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonGame:
		t := m.To_KeyboardButtonGame()
		return t.Encode()
	case TLConstructor_CRC32_keyboardButtonBuy:
		t := m.To_KeyboardButtonBuy()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *KeyboardButton) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_keyboardButton:
		t := m.To_KeyboardButton()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonUrl:
		t := m.To_KeyboardButtonUrl()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonCallback:
		t := m.To_KeyboardButtonCallback()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonRequestPhone:
		t := m.To_KeyboardButtonRequestPhone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonRequestGeoLocation:
		t := m.To_KeyboardButtonRequestGeoLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonSwitchInline:
		t := m.To_KeyboardButtonSwitchInline()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonGame:
		t := m.To_KeyboardButtonGame()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_keyboardButtonBuy:
		t := m.To_KeyboardButtonBuy()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *KeyboardButton) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_keyboardButton:
		m2 := &TLKeyboardButton{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonUrl:
		m2 := &TLKeyboardButtonUrl{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonCallback:
		m2 := &TLKeyboardButtonCallback{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonRequestPhone:
		m2 := &TLKeyboardButtonRequestPhone{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonRequestGeoLocation:
		m2 := &TLKeyboardButtonRequestGeoLocation{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonSwitchInline:
		m2 := &TLKeyboardButtonSwitchInline{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonGame:
		m2 := &TLKeyboardButtonGame{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_keyboardButtonBuy:
		m2 := &TLKeyboardButtonBuy{Data2: &KeyboardButton_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// keyboardButton#a2fa4880 text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButton() *TLKeyboardButton {
	return &TLKeyboardButton{
		Data2: m.Data2,
	}
}

// keyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonUrl() *TLKeyboardButtonUrl {
	return &TLKeyboardButtonUrl{
		Data2: m.Data2,
	}
}

// keyboardButtonCallback#683a5e46 text:string data:bytes = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonCallback() *TLKeyboardButtonCallback {
	return &TLKeyboardButtonCallback{
		Data2: m.Data2,
	}
}

// keyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonRequestPhone() *TLKeyboardButtonRequestPhone {
	return &TLKeyboardButtonRequestPhone{
		Data2: m.Data2,
	}
}

// keyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonRequestGeoLocation() *TLKeyboardButtonRequestGeoLocation {
	return &TLKeyboardButtonRequestGeoLocation{
		Data2: m.Data2,
	}
}

// keyboardButtonSwitchInline#568a748 flags:# same_peer:flags.0?true text:string query:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonSwitchInline() *TLKeyboardButtonSwitchInline {
	return &TLKeyboardButtonSwitchInline{
		Data2: m.Data2,
	}
}

// keyboardButtonGame#50f41ccf text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonGame() *TLKeyboardButtonGame {
	return &TLKeyboardButtonGame{
		Data2: m.Data2,
	}
}

// keyboardButtonBuy#afd93fbb text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonBuy() *TLKeyboardButtonBuy {
	return &TLKeyboardButtonBuy{
		Data2: m.Data2,
	}
}

// keyboardButton#a2fa4880 text:string = KeyboardButton;
func (m *TLKeyboardButton) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButton,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButton) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButton) GetText() string  { return m.Data2.Text }

func NewTLKeyboardButton() *TLKeyboardButton {
	return &TLKeyboardButton{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButton) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButton))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButton) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButton))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButton) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

// keyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;
func (m *TLKeyboardButtonUrl) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonUrl,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonUrl) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonUrl) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLKeyboardButtonUrl) GetUrl() string  { return m.Data2.Url }

func NewTLKeyboardButtonUrl() *TLKeyboardButtonUrl {
	return &TLKeyboardButtonUrl{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonUrl) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonUrl))

	x.String(m.GetText())
	x.String(m.GetUrl())

	return x.buf
}

func (m *TLKeyboardButtonUrl) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonUrl))

	x.String(m.GetText())
	x.String(m.GetUrl())

	return x.buf
}

func (m *TLKeyboardButtonUrl) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())
	m.SetUrl(dbuf.String())

	return dbuf.err
}

// keyboardButtonCallback#683a5e46 text:string data:bytes = KeyboardButton;
func (m *TLKeyboardButtonCallback) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonCallback,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonCallback) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonCallback) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonCallback) SetData(v []byte) { m.Data2.Data = v }
func (m *TLKeyboardButtonCallback) GetData() []byte  { return m.Data2.Data }

func NewTLKeyboardButtonCallback() *TLKeyboardButtonCallback {
	return &TLKeyboardButtonCallback{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonCallback) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonCallback))

	x.String(m.GetText())
	x.StringBytes(m.GetData())

	return x.buf
}

func (m *TLKeyboardButtonCallback) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonCallback))

	x.String(m.GetText())
	x.StringBytes(m.GetData())

	return x.buf
}

func (m *TLKeyboardButtonCallback) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())
	m.SetData(dbuf.StringBytes())

	return dbuf.err
}

// keyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;
func (m *TLKeyboardButtonRequestPhone) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonRequestPhone,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonRequestPhone) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestPhone) GetText() string  { return m.Data2.Text }

func NewTLKeyboardButtonRequestPhone() *TLKeyboardButtonRequestPhone {
	return &TLKeyboardButtonRequestPhone{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonRequestPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestPhone))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonRequestPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestPhone))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonRequestPhone) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

// keyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;
func (m *TLKeyboardButtonRequestGeoLocation) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonRequestGeoLocation,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonRequestGeoLocation) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestGeoLocation) GetText() string  { return m.Data2.Text }

func NewTLKeyboardButtonRequestGeoLocation() *TLKeyboardButtonRequestGeoLocation {
	return &TLKeyboardButtonRequestGeoLocation{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonRequestGeoLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestGeoLocation))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonRequestGeoLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestGeoLocation))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonRequestGeoLocation) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

// keyboardButtonSwitchInline#568a748 flags:# same_peer:flags.0?true text:string query:string = KeyboardButton;
func (m *TLKeyboardButtonSwitchInline) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonSwitchInline,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonSwitchInline) SetSamePeer(v bool) { m.Data2.SamePeer = v }
func (m *TLKeyboardButtonSwitchInline) GetSamePeer() bool  { return m.Data2.SamePeer }

func (m *TLKeyboardButtonSwitchInline) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonSwitchInline) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonSwitchInline) SetQuery(v string) { m.Data2.Query = v }
func (m *TLKeyboardButtonSwitchInline) GetQuery() string  { return m.Data2.Query }

func NewTLKeyboardButtonSwitchInline() *TLKeyboardButtonSwitchInline {
	return &TLKeyboardButtonSwitchInline{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonSwitchInline) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonSwitchInline))

	// flags
	var flags uint32 = 0
	if m.GetSamePeer() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetText())
	x.String(m.GetQuery())

	return x.buf
}

func (m *TLKeyboardButtonSwitchInline) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonSwitchInline))

	// flags
	var flags uint32 = 0
	if m.GetSamePeer() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetText())
	x.String(m.GetQuery())

	return x.buf
}

func (m *TLKeyboardButtonSwitchInline) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetSamePeer(true)
	}
	m.SetText(dbuf.String())
	m.SetQuery(dbuf.String())

	return dbuf.err
}

// keyboardButtonGame#50f41ccf text:string = KeyboardButton;
func (m *TLKeyboardButtonGame) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonGame,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonGame) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonGame) GetText() string  { return m.Data2.Text }

func NewTLKeyboardButtonGame() *TLKeyboardButtonGame {
	return &TLKeyboardButtonGame{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonGame) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonGame))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonGame) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonGame))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonGame) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

// keyboardButtonBuy#afd93fbb text:string = KeyboardButton;
func (m *TLKeyboardButtonBuy) To_KeyboardButton() *KeyboardButton {
	return &KeyboardButton{
		Constructor: TLConstructor_CRC32_keyboardButtonBuy,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonBuy) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonBuy) GetText() string  { return m.Data2.Text }

func NewTLKeyboardButtonBuy() *TLKeyboardButtonBuy {
	return &TLKeyboardButtonBuy{Data2: &KeyboardButton_Data{}}
}

func (m *TLKeyboardButtonBuy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonBuy))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonBuy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonBuy))

	x.String(m.GetText())

	return x.buf
}

func (m *TLKeyboardButtonBuy) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelBannedRights <--
//  + TL_ChannelBannedRights
//

func (m *ChannelBannedRights) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelBannedRights:
		t := m.To_ChannelBannedRights()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelBannedRights) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelBannedRights:
		t := m.To_ChannelBannedRights()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelBannedRights) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelBannedRights:
		m2 := &TLChannelBannedRights{Data2: &ChannelBannedRights_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelBannedRights#58cf4249 flags:# view_messages:flags.0?true send_messages:flags.1?true send_media:flags.2?true send_stickers:flags.3?true send_gifs:flags.4?true send_games:flags.5?true send_inline:flags.6?true embed_links:flags.7?true until_date:int = ChannelBannedRights;
func (m *ChannelBannedRights) To_ChannelBannedRights() *TLChannelBannedRights {
	return &TLChannelBannedRights{
		Data2: m.Data2,
	}
}

// channelBannedRights#58cf4249 flags:# view_messages:flags.0?true send_messages:flags.1?true send_media:flags.2?true send_stickers:flags.3?true send_gifs:flags.4?true send_games:flags.5?true send_inline:flags.6?true embed_links:flags.7?true until_date:int = ChannelBannedRights;
func (m *TLChannelBannedRights) To_ChannelBannedRights() *ChannelBannedRights {
	return &ChannelBannedRights{
		Constructor: TLConstructor_CRC32_channelBannedRights,
		Data2:       m.Data2,
	}
}

func (m *TLChannelBannedRights) SetViewMessages(v bool) { m.Data2.ViewMessages = v }
func (m *TLChannelBannedRights) GetViewMessages() bool  { return m.Data2.ViewMessages }

func (m *TLChannelBannedRights) SetSendMessages(v bool) { m.Data2.SendMessages = v }
func (m *TLChannelBannedRights) GetSendMessages() bool  { return m.Data2.SendMessages }

func (m *TLChannelBannedRights) SetSendMedia(v bool) { m.Data2.SendMedia = v }
func (m *TLChannelBannedRights) GetSendMedia() bool  { return m.Data2.SendMedia }

func (m *TLChannelBannedRights) SetSendStickers(v bool) { m.Data2.SendStickers = v }
func (m *TLChannelBannedRights) GetSendStickers() bool  { return m.Data2.SendStickers }

func (m *TLChannelBannedRights) SetSendGifs(v bool) { m.Data2.SendGifs = v }
func (m *TLChannelBannedRights) GetSendGifs() bool  { return m.Data2.SendGifs }

func (m *TLChannelBannedRights) SetSendGames(v bool) { m.Data2.SendGames = v }
func (m *TLChannelBannedRights) GetSendGames() bool  { return m.Data2.SendGames }

func (m *TLChannelBannedRights) SetSendInline(v bool) { m.Data2.SendInline = v }
func (m *TLChannelBannedRights) GetSendInline() bool  { return m.Data2.SendInline }

func (m *TLChannelBannedRights) SetEmbedLinks(v bool) { m.Data2.EmbedLinks = v }
func (m *TLChannelBannedRights) GetEmbedLinks() bool  { return m.Data2.EmbedLinks }

func (m *TLChannelBannedRights) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLChannelBannedRights) GetUntilDate() int32  { return m.Data2.UntilDate }

func NewTLChannelBannedRights() *TLChannelBannedRights {
	return &TLChannelBannedRights{Data2: &ChannelBannedRights_Data{}}
}

func (m *TLChannelBannedRights) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelBannedRights))

	// flags
	var flags uint32 = 0
	if m.GetViewMessages() == true {
		flags |= 1 << 0
	}
	if m.GetSendMessages() == true {
		flags |= 1 << 1
	}
	if m.GetSendMedia() == true {
		flags |= 1 << 2
	}
	if m.GetSendStickers() == true {
		flags |= 1 << 3
	}
	if m.GetSendGifs() == true {
		flags |= 1 << 4
	}
	if m.GetSendGames() == true {
		flags |= 1 << 5
	}
	if m.GetSendInline() == true {
		flags |= 1 << 6
	}
	if m.GetEmbedLinks() == true {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetUntilDate())

	return x.buf
}

func (m *TLChannelBannedRights) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelBannedRights))

	// flags
	var flags uint32 = 0
	if m.GetViewMessages() == true {
		flags |= 1 << 0
	}
	if m.GetSendMessages() == true {
		flags |= 1 << 1
	}
	if m.GetSendMedia() == true {
		flags |= 1 << 2
	}
	if m.GetSendStickers() == true {
		flags |= 1 << 3
	}
	if m.GetSendGifs() == true {
		flags |= 1 << 4
	}
	if m.GetSendGames() == true {
		flags |= 1 << 5
	}
	if m.GetSendInline() == true {
		flags |= 1 << 6
	}
	if m.GetEmbedLinks() == true {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.Int(m.GetUntilDate())

	return x.buf
}

func (m *TLChannelBannedRights) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetViewMessages(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetSendMessages(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetSendMedia(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetSendStickers(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetSendGifs(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetSendGames(true)
	}
	if (flags & (1 << 6)) != 0 {
		m.SetSendInline(true)
	}
	if (flags & (1 << 7)) != 0 {
		m.SetEmbedLinks(true)
	}
	m.SetUntilDate(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureValue <--
//  + TL_SecureValue
//

func (m *SecureValue) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureValue:
		t := m.To_SecureValue()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValue) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureValue:
		t := m.To_SecureValue()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValue) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureValue:
		m2 := &TLSecureValue{Data2: &SecureValue_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureValue#187fa0ca flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?SecureFile reverse_side:flags.2?SecureFile selfie:flags.3?SecureFile translation:flags.6?Vector<SecureFile> files:flags.4?Vector<SecureFile> plain_data:flags.5?SecurePlainData hash:bytes = SecureValue;
func (m *SecureValue) To_SecureValue() *TLSecureValue {
	return &TLSecureValue{
		Data2: m.Data2,
	}
}

// secureValue#187fa0ca flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?SecureFile reverse_side:flags.2?SecureFile selfie:flags.3?SecureFile translation:flags.6?Vector<SecureFile> files:flags.4?Vector<SecureFile> plain_data:flags.5?SecurePlainData hash:bytes = SecureValue;
func (m *TLSecureValue) To_SecureValue() *SecureValue {
	return &SecureValue{
		Constructor: TLConstructor_CRC32_secureValue,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValue) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValue) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValue) SetData(v *SecureData) { m.Data2.Data = v }
func (m *TLSecureValue) GetData() *SecureData  { return m.Data2.Data }

func (m *TLSecureValue) SetFrontSide(v *SecureFile) { m.Data2.FrontSide = v }
func (m *TLSecureValue) GetFrontSide() *SecureFile  { return m.Data2.FrontSide }

func (m *TLSecureValue) SetReverseSide(v *SecureFile) { m.Data2.ReverseSide = v }
func (m *TLSecureValue) GetReverseSide() *SecureFile  { return m.Data2.ReverseSide }

func (m *TLSecureValue) SetSelfie(v *SecureFile) { m.Data2.Selfie = v }
func (m *TLSecureValue) GetSelfie() *SecureFile  { return m.Data2.Selfie }

func (m *TLSecureValue) SetTranslation(v []*SecureFile) { m.Data2.Translation = v }
func (m *TLSecureValue) GetTranslation() []*SecureFile  { return m.Data2.Translation }

func (m *TLSecureValue) SetFiles(v []*SecureFile) { m.Data2.Files = v }
func (m *TLSecureValue) GetFiles() []*SecureFile  { return m.Data2.Files }

func (m *TLSecureValue) SetPlainData(v *SecurePlainData) { m.Data2.PlainData = v }
func (m *TLSecureValue) GetPlainData() *SecurePlainData  { return m.Data2.PlainData }

func (m *TLSecureValue) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValue) GetHash() []byte  { return m.Data2.Hash }

func NewTLSecureValue() *TLSecureValue {
	return &TLSecureValue{Data2: &SecureValue_Data{}}
}

func (m *TLSecureValue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValue))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetFrontSide() != nil {
		flags |= 1 << 1
	}
	if m.GetReverseSide() != nil {
		flags |= 1 << 2
	}
	if m.GetSelfie() != nil {
		flags |= 1 << 3
	}
	if m.GetTranslation() != nil {
		flags |= 1 << 6
	}
	if m.GetFiles() != nil {
		flags |= 1 << 4
	}
	if m.GetPlainData() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.Bytes(m.GetType().Encode())
	if m.GetData() != nil {
		x.Bytes(m.GetData().Encode())
	}
	if m.GetFrontSide() != nil {
		x.Bytes(m.GetFrontSide().Encode())
	}
	if m.GetReverseSide() != nil {
		x.Bytes(m.GetReverseSide().Encode())
	}
	if m.GetSelfie() != nil {
		x.Bytes(m.GetSelfie().Encode())
	}
	if m.GetTranslation() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetTranslation())))
		for _, v := range m.GetTranslation() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetFiles() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetFiles())))
		for _, v := range m.GetFiles() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetPlainData() != nil {
		x.Bytes(m.GetPlainData().Encode())
	}
	x.StringBytes(m.GetHash())

	return x.buf
}

func (m *TLSecureValue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValue))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetFrontSide() != nil {
		flags |= 1 << 1
	}
	if m.GetReverseSide() != nil {
		flags |= 1 << 2
	}
	if m.GetSelfie() != nil {
		flags |= 1 << 3
	}
	if m.GetTranslation() != nil {
		flags |= 1 << 6
	}
	if m.GetFiles() != nil {
		flags |= 1 << 4
	}
	if m.GetPlainData() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.Bytes(m.GetType().EncodeToLayer(layer))
	if m.GetData() != nil {
		x.Bytes(m.GetData().EncodeToLayer(layer))
	}
	if m.GetFrontSide() != nil {
		x.Bytes(m.GetFrontSide().EncodeToLayer(layer))
	}
	if m.GetReverseSide() != nil {
		x.Bytes(m.GetReverseSide().EncodeToLayer(layer))
	}
	if m.GetSelfie() != nil {
		x.Bytes(m.GetSelfie().EncodeToLayer(layer))
	}
	if m.GetTranslation() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetTranslation())))
		for _, v := range m.GetTranslation() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetFiles() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetFiles())))
		for _, v := range m.GetFiles() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetPlainData() != nil {
		x.Bytes(m.GetPlainData().EncodeToLayer(layer))
	}
	x.StringBytes(m.GetHash())

	return x.buf
}

func (m *TLSecureValue) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &SecureValueType{}
	m2.Decode(dbuf)
	m.SetType(m2)
	if (flags & (1 << 0)) != 0 {
		m3 := &SecureData{}
		m3.Decode(dbuf)
		m.SetData(m3)
	}
	if (flags & (1 << 1)) != 0 {
		m4 := &SecureFile{}
		m4.Decode(dbuf)
		m.SetFrontSide(m4)
	}
	if (flags & (1 << 2)) != 0 {
		m5 := &SecureFile{}
		m5.Decode(dbuf)
		m.SetReverseSide(m5)
	}
	if (flags & (1 << 3)) != 0 {
		m6 := &SecureFile{}
		m6.Decode(dbuf)
		m.SetSelfie(m6)
	}
	if (flags & (1 << 6)) != 0 {
		c7 := dbuf.Int()
		if c7 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
			return dbuf.err
		}
		l7 := dbuf.Int()
		v7 := make([]*SecureFile, l7)
		for i := int32(0); i < l7; i++ {
			v7[i] = &SecureFile{}
			v7[i].Decode(dbuf)
		}
		m.SetTranslation(v7)

	}
	if (flags & (1 << 4)) != 0 {
		c8 := dbuf.Int()
		if c8 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
			return dbuf.err
		}
		l8 := dbuf.Int()
		v8 := make([]*SecureFile, l8)
		for i := int32(0); i < l8; i++ {
			v8[i] = &SecureFile{}
			v8[i].Decode(dbuf)
		}
		m.SetFiles(v8)

	}
	if (flags & (1 << 5)) != 0 {
		m9 := &SecurePlainData{}
		m9.Decode(dbuf)
		m.SetPlainData(m9)
	}
	m.SetHash(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputFileLocation <--
//  + TL_InputDocumentFileLocationLayer11
//  + TL_InputFileLocation
//  + TL_InputEncryptedFileLocation
//  + TL_InputDocumentFileLocation
//  + TL_InputSecureFileLocation
//  + TL_InputTakeoutFileLocation
//  + TL_InputFileLocationLayer86
//  + TL_InputDocumentFileLocationLayer86
//

func (m *InputFileLocation) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputDocumentFileLocationLayer11:
		t := m.To_InputDocumentFileLocationLayer11()
		return t.Encode()
	case TLConstructor_CRC32_inputFileLocation:
		t := m.To_InputFileLocation()
		return t.Encode()
	case TLConstructor_CRC32_inputEncryptedFileLocation:
		t := m.To_InputEncryptedFileLocation()
		return t.Encode()
	case TLConstructor_CRC32_inputDocumentFileLocation:
		t := m.To_InputDocumentFileLocation()
		return t.Encode()
	case TLConstructor_CRC32_inputSecureFileLocation:
		t := m.To_InputSecureFileLocation()
		return t.Encode()
	case TLConstructor_CRC32_inputTakeoutFileLocation:
		t := m.To_InputTakeoutFileLocation()
		return t.Encode()
	case TLConstructor_CRC32_inputFileLocationLayer86:
		t := m.To_InputFileLocationLayer86()
		return t.Encode()
	case TLConstructor_CRC32_inputDocumentFileLocationLayer86:
		t := m.To_InputDocumentFileLocationLayer86()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputFileLocation) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputDocumentFileLocationLayer11:
		t := m.To_InputDocumentFileLocationLayer11()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputFileLocation:
		t := m.To_InputFileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputEncryptedFileLocation:
		t := m.To_InputEncryptedFileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputDocumentFileLocation:
		t := m.To_InputDocumentFileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputSecureFileLocation:
		t := m.To_InputSecureFileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputTakeoutFileLocation:
		t := m.To_InputTakeoutFileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputFileLocationLayer86:
		t := m.To_InputFileLocationLayer86()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputDocumentFileLocationLayer86:
		t := m.To_InputDocumentFileLocationLayer86()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputFileLocation) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputDocumentFileLocationLayer11:
		m2 := &TLInputDocumentFileLocationLayer11{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputFileLocation:
		m2 := &TLInputFileLocation{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputEncryptedFileLocation:
		m2 := &TLInputEncryptedFileLocation{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputDocumentFileLocation:
		m2 := &TLInputDocumentFileLocation{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputSecureFileLocation:
		m2 := &TLInputSecureFileLocation{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputTakeoutFileLocation:
		m2 := &TLInputTakeoutFileLocation{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputFileLocationLayer86:
		m2 := &TLInputFileLocationLayer86{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputDocumentFileLocationLayer86:
		m2 := &TLInputDocumentFileLocationLayer86{Data2: &InputFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputDocumentFileLocation#4e45abe9 id:long access_hash:long = InputFileLocation;
func (m *InputFileLocation) To_InputDocumentFileLocationLayer11() *TLInputDocumentFileLocationLayer11 {
	return &TLInputDocumentFileLocationLayer11{
		Data2: m.Data2,
	}
}

// inputFileLocation#14637196 volume_id:long local_id:int secret:long = InputFileLocation;
func (m *InputFileLocation) To_InputFileLocation() *TLInputFileLocation {
	return &TLInputFileLocation{
		Data2: m.Data2,
	}
}

// inputEncryptedFileLocation#f5235d55 id:long access_hash:long = InputFileLocation;
func (m *InputFileLocation) To_InputEncryptedFileLocation() *TLInputEncryptedFileLocation {
	return &TLInputEncryptedFileLocation{
		Data2: m.Data2,
	}
}

// inputDocumentFileLocation#430f0724 id:long access_hash:long version:int = InputFileLocation;
func (m *InputFileLocation) To_InputDocumentFileLocation() *TLInputDocumentFileLocation {
	return &TLInputDocumentFileLocation{
		Data2: m.Data2,
	}
}

// inputSecureFileLocation#cbc7ee28 id:long access_hash:long = InputFileLocation;
func (m *InputFileLocation) To_InputSecureFileLocation() *TLInputSecureFileLocation {
	return &TLInputSecureFileLocation{
		Data2: m.Data2,
	}
}

// inputTakeoutFileLocation#29be5899 = InputFileLocation;
func (m *InputFileLocation) To_InputTakeoutFileLocation() *TLInputTakeoutFileLocation {
	return &TLInputTakeoutFileLocation{
		Data2: m.Data2,
	}
}

// inputFileLocation#dfdaabe1 volume_id:long local_id:int secret:long file_reference:bytes = InputFileLocation;
func (m *InputFileLocation) To_InputFileLocationLayer86() *TLInputFileLocationLayer86 {
	return &TLInputFileLocationLayer86{
		Data2: m.Data2,
	}
}

// inputDocumentFileLocation#196683d9 id:long access_hash:long file_reference:bytes = InputFileLocation;
func (m *InputFileLocation) To_InputDocumentFileLocationLayer86() *TLInputDocumentFileLocationLayer86 {
	return &TLInputDocumentFileLocationLayer86{
		Data2: m.Data2,
	}
}

// inputDocumentFileLocation#4e45abe9 id:long access_hash:long = InputFileLocation;
func (m *TLInputDocumentFileLocationLayer11) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputDocumentFileLocationLayer11,
		Data2:       m.Data2,
	}
}

func (m *TLInputDocumentFileLocationLayer11) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocationLayer11) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocumentFileLocationLayer11) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocationLayer11) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputDocumentFileLocationLayer11() *TLInputDocumentFileLocationLayer11 {
	return &TLInputDocumentFileLocationLayer11{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputDocumentFileLocationLayer11) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocationLayer11))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputDocumentFileLocationLayer11) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocationLayer11))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputDocumentFileLocationLayer11) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputFileLocation#14637196 volume_id:long local_id:int secret:long = InputFileLocation;
func (m *TLInputFileLocation) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputFileLocation,
		Data2:       m.Data2,
	}
}

func (m *TLInputFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputFileLocation) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLInputFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputFileLocation) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLInputFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputFileLocation) GetSecret() int64  { return m.Data2.Secret }

func NewTLInputFileLocation() *TLInputFileLocation {
	return &TLInputFileLocation{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFileLocation))

	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())

	return x.buf
}

func (m *TLInputFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFileLocation))

	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())

	return x.buf
}

func (m *TLInputFileLocation) Decode(dbuf *DecodeBuf) error {
	m.SetVolumeId(dbuf.Long())
	m.SetLocalId(dbuf.Int())
	m.SetSecret(dbuf.Long())

	return dbuf.err
}

// inputEncryptedFileLocation#f5235d55 id:long access_hash:long = InputFileLocation;
func (m *TLInputEncryptedFileLocation) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputEncryptedFileLocation,
		Data2:       m.Data2,
	}
}

func (m *TLInputEncryptedFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputEncryptedFileLocation() *TLInputEncryptedFileLocation {
	return &TLInputEncryptedFileLocation{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputEncryptedFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileLocation))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputEncryptedFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileLocation))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputEncryptedFileLocation) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputDocumentFileLocation#430f0724 id:long access_hash:long version:int = InputFileLocation;
func (m *TLInputDocumentFileLocation) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputDocumentFileLocation,
		Data2:       m.Data2,
	}
}

func (m *TLInputDocumentFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocumentFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputDocumentFileLocation) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLInputDocumentFileLocation) GetVersion() int32  { return m.Data2.Version }

func NewTLInputDocumentFileLocation() *TLInputDocumentFileLocation {
	return &TLInputDocumentFileLocation{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputDocumentFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocation))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLInputDocumentFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocation))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLInputDocumentFileLocation) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetVersion(dbuf.Int())

	return dbuf.err
}

// inputSecureFileLocation#cbc7ee28 id:long access_hash:long = InputFileLocation;
func (m *TLInputSecureFileLocation) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputSecureFileLocation,
		Data2:       m.Data2,
	}
}

func (m *TLInputSecureFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputSecureFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputSecureFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputSecureFileLocation() *TLInputSecureFileLocation {
	return &TLInputSecureFileLocation{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputSecureFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureFileLocation))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputSecureFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureFileLocation))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputSecureFileLocation) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputTakeoutFileLocation#29be5899 = InputFileLocation;
func (m *TLInputTakeoutFileLocation) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputTakeoutFileLocation,
		Data2:       m.Data2,
	}
}

func NewTLInputTakeoutFileLocation() *TLInputTakeoutFileLocation {
	return &TLInputTakeoutFileLocation{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputTakeoutFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputTakeoutFileLocation))

	return x.buf
}

func (m *TLInputTakeoutFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputTakeoutFileLocation))

	return x.buf
}

func (m *TLInputTakeoutFileLocation) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputFileLocation#dfdaabe1 volume_id:long local_id:int secret:long file_reference:bytes = InputFileLocation;
func (m *TLInputFileLocationLayer86) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputFileLocationLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLInputFileLocationLayer86) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputFileLocationLayer86) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLInputFileLocationLayer86) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputFileLocationLayer86) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLInputFileLocationLayer86) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputFileLocationLayer86) GetSecret() int64  { return m.Data2.Secret }

func (m *TLInputFileLocationLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputFileLocationLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func NewTLInputFileLocationLayer86() *TLInputFileLocationLayer86 {
	return &TLInputFileLocationLayer86{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputFileLocationLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFileLocationLayer86))

	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputFileLocationLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputFileLocationLayer86))

	x.Long(m.GetVolumeId())
	x.Int(m.GetLocalId())
	x.Long(m.GetSecret())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputFileLocationLayer86) Decode(dbuf *DecodeBuf) error {
	m.SetVolumeId(dbuf.Long())
	m.SetLocalId(dbuf.Int())
	m.SetSecret(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())

	return dbuf.err
}

// inputDocumentFileLocation#196683d9 id:long access_hash:long file_reference:bytes = InputFileLocation;
func (m *TLInputDocumentFileLocationLayer86) To_InputFileLocation() *InputFileLocation {
	return &InputFileLocation{
		Constructor: TLConstructor_CRC32_inputDocumentFileLocationLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLInputDocumentFileLocationLayer86) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocationLayer86) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocumentFileLocationLayer86) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocationLayer86) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputDocumentFileLocationLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputDocumentFileLocationLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func NewTLInputDocumentFileLocationLayer86() *TLInputDocumentFileLocationLayer86 {
	return &TLInputDocumentFileLocationLayer86{Data2: &InputFileLocation_Data{}}
}

func (m *TLInputDocumentFileLocationLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocationLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputDocumentFileLocationLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocationLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputDocumentFileLocationLayer86) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Storage_FileType <--
//  + TL_StorageFileUnknown
//  + TL_StorageFilePartial
//  + TL_StorageFileJpeg
//  + TL_StorageFileGif
//  + TL_StorageFilePng
//  + TL_StorageFilePdf
//  + TL_StorageFileMp3
//  + TL_StorageFileMov
//  + TL_StorageFileMp4
//  + TL_StorageFileWebp
//

func (m *Storage_FileType) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_storage_fileUnknown:
		t := m.To_StorageFileUnknown()
		return t.Encode()
	case TLConstructor_CRC32_storage_filePartial:
		t := m.To_StorageFilePartial()
		return t.Encode()
	case TLConstructor_CRC32_storage_fileJpeg:
		t := m.To_StorageFileJpeg()
		return t.Encode()
	case TLConstructor_CRC32_storage_fileGif:
		t := m.To_StorageFileGif()
		return t.Encode()
	case TLConstructor_CRC32_storage_filePng:
		t := m.To_StorageFilePng()
		return t.Encode()
	case TLConstructor_CRC32_storage_filePdf:
		t := m.To_StorageFilePdf()
		return t.Encode()
	case TLConstructor_CRC32_storage_fileMp3:
		t := m.To_StorageFileMp3()
		return t.Encode()
	case TLConstructor_CRC32_storage_fileMov:
		t := m.To_StorageFileMov()
		return t.Encode()
	case TLConstructor_CRC32_storage_fileMp4:
		t := m.To_StorageFileMp4()
		return t.Encode()
	case TLConstructor_CRC32_storage_fileWebp:
		t := m.To_StorageFileWebp()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Storage_FileType) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_storage_fileUnknown:
		t := m.To_StorageFileUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_filePartial:
		t := m.To_StorageFilePartial()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_fileJpeg:
		t := m.To_StorageFileJpeg()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_fileGif:
		t := m.To_StorageFileGif()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_filePng:
		t := m.To_StorageFilePng()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_filePdf:
		t := m.To_StorageFilePdf()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_fileMp3:
		t := m.To_StorageFileMp3()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_fileMov:
		t := m.To_StorageFileMov()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_fileMp4:
		t := m.To_StorageFileMp4()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_storage_fileWebp:
		t := m.To_StorageFileWebp()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Storage_FileType) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_storage_fileUnknown:
		m2 := &TLStorageFileUnknown{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_filePartial:
		m2 := &TLStorageFilePartial{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_fileJpeg:
		m2 := &TLStorageFileJpeg{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_fileGif:
		m2 := &TLStorageFileGif{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_filePng:
		m2 := &TLStorageFilePng{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_filePdf:
		m2 := &TLStorageFilePdf{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_fileMp3:
		m2 := &TLStorageFileMp3{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_fileMov:
		m2 := &TLStorageFileMov{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_fileMp4:
		m2 := &TLStorageFileMp4{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_storage_fileWebp:
		m2 := &TLStorageFileWebp{Data2: &Storage_FileType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// storage.fileUnknown#aa963b05 = storage.FileType;
func (m *Storage_FileType) To_StorageFileUnknown() *TLStorageFileUnknown {
	return &TLStorageFileUnknown{
		Data2: m.Data2,
	}
}

// storage.filePartial#40bc6f52 = storage.FileType;
func (m *Storage_FileType) To_StorageFilePartial() *TLStorageFilePartial {
	return &TLStorageFilePartial{
		Data2: m.Data2,
	}
}

// storage.fileJpeg#7efe0e = storage.FileType;
func (m *Storage_FileType) To_StorageFileJpeg() *TLStorageFileJpeg {
	return &TLStorageFileJpeg{
		Data2: m.Data2,
	}
}

// storage.fileGif#cae1aadf = storage.FileType;
func (m *Storage_FileType) To_StorageFileGif() *TLStorageFileGif {
	return &TLStorageFileGif{
		Data2: m.Data2,
	}
}

// storage.filePng#a4f63c0 = storage.FileType;
func (m *Storage_FileType) To_StorageFilePng() *TLStorageFilePng {
	return &TLStorageFilePng{
		Data2: m.Data2,
	}
}

// storage.filePdf#ae1e508d = storage.FileType;
func (m *Storage_FileType) To_StorageFilePdf() *TLStorageFilePdf {
	return &TLStorageFilePdf{
		Data2: m.Data2,
	}
}

// storage.fileMp3#528a0677 = storage.FileType;
func (m *Storage_FileType) To_StorageFileMp3() *TLStorageFileMp3 {
	return &TLStorageFileMp3{
		Data2: m.Data2,
	}
}

// storage.fileMov#4b09ebbc = storage.FileType;
func (m *Storage_FileType) To_StorageFileMov() *TLStorageFileMov {
	return &TLStorageFileMov{
		Data2: m.Data2,
	}
}

// storage.fileMp4#b3cea0e4 = storage.FileType;
func (m *Storage_FileType) To_StorageFileMp4() *TLStorageFileMp4 {
	return &TLStorageFileMp4{
		Data2: m.Data2,
	}
}

// storage.fileWebp#1081464c = storage.FileType;
func (m *Storage_FileType) To_StorageFileWebp() *TLStorageFileWebp {
	return &TLStorageFileWebp{
		Data2: m.Data2,
	}
}

// storage.fileUnknown#aa963b05 = storage.FileType;
func (m *TLStorageFileUnknown) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileUnknown,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileUnknown() *TLStorageFileUnknown {
	return &TLStorageFileUnknown{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileUnknown))

	return x.buf
}

func (m *TLStorageFileUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileUnknown))

	return x.buf
}

func (m *TLStorageFileUnknown) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.filePartial#40bc6f52 = storage.FileType;
func (m *TLStorageFilePartial) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_filePartial,
		Data2:       m.Data2,
	}
}

func NewTLStorageFilePartial() *TLStorageFilePartial {
	return &TLStorageFilePartial{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFilePartial) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_filePartial))

	return x.buf
}

func (m *TLStorageFilePartial) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_filePartial))

	return x.buf
}

func (m *TLStorageFilePartial) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.fileJpeg#7efe0e = storage.FileType;
func (m *TLStorageFileJpeg) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileJpeg,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileJpeg() *TLStorageFileJpeg {
	return &TLStorageFileJpeg{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileJpeg) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileJpeg))

	return x.buf
}

func (m *TLStorageFileJpeg) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileJpeg))

	return x.buf
}

func (m *TLStorageFileJpeg) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.fileGif#cae1aadf = storage.FileType;
func (m *TLStorageFileGif) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileGif,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileGif() *TLStorageFileGif {
	return &TLStorageFileGif{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileGif) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileGif))

	return x.buf
}

func (m *TLStorageFileGif) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileGif))

	return x.buf
}

func (m *TLStorageFileGif) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.filePng#a4f63c0 = storage.FileType;
func (m *TLStorageFilePng) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_filePng,
		Data2:       m.Data2,
	}
}

func NewTLStorageFilePng() *TLStorageFilePng {
	return &TLStorageFilePng{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFilePng) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_filePng))

	return x.buf
}

func (m *TLStorageFilePng) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_filePng))

	return x.buf
}

func (m *TLStorageFilePng) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.filePdf#ae1e508d = storage.FileType;
func (m *TLStorageFilePdf) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_filePdf,
		Data2:       m.Data2,
	}
}

func NewTLStorageFilePdf() *TLStorageFilePdf {
	return &TLStorageFilePdf{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFilePdf) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_filePdf))

	return x.buf
}

func (m *TLStorageFilePdf) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_filePdf))

	return x.buf
}

func (m *TLStorageFilePdf) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.fileMp3#528a0677 = storage.FileType;
func (m *TLStorageFileMp3) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileMp3,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileMp3() *TLStorageFileMp3 {
	return &TLStorageFileMp3{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileMp3) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileMp3))

	return x.buf
}

func (m *TLStorageFileMp3) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileMp3))

	return x.buf
}

func (m *TLStorageFileMp3) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.fileMov#4b09ebbc = storage.FileType;
func (m *TLStorageFileMov) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileMov,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileMov() *TLStorageFileMov {
	return &TLStorageFileMov{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileMov) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileMov))

	return x.buf
}

func (m *TLStorageFileMov) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileMov))

	return x.buf
}

func (m *TLStorageFileMov) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.fileMp4#b3cea0e4 = storage.FileType;
func (m *TLStorageFileMp4) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileMp4,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileMp4() *TLStorageFileMp4 {
	return &TLStorageFileMp4{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileMp4) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileMp4))

	return x.buf
}

func (m *TLStorageFileMp4) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileMp4))

	return x.buf
}

func (m *TLStorageFileMp4) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// storage.fileWebp#1081464c = storage.FileType;
func (m *TLStorageFileWebp) To_Storage_FileType() *Storage_FileType {
	return &Storage_FileType{
		Constructor: TLConstructor_CRC32_storage_fileWebp,
		Data2:       m.Data2,
	}
}

func NewTLStorageFileWebp() *TLStorageFileWebp {
	return &TLStorageFileWebp{Data2: &Storage_FileType_Data{}}
}

func (m *TLStorageFileWebp) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileWebp))

	return x.buf
}

func (m *TLStorageFileWebp) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_storage_fileWebp))

	return x.buf
}

func (m *TLStorageFileWebp) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputBotInlineMessage <--
//  + TL_InputBotInlineMessageMediaAuto
//  + TL_InputBotInlineMessageText
//  + TL_InputBotInlineMessageMediaGeo
//  + TL_InputBotInlineMessageMediaVenue
//  + TL_InputBotInlineMessageMediaContact
//  + TL_InputBotInlineMessageGame
//

func (m *InputBotInlineMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputBotInlineMessageMediaAuto:
		t := m.To_InputBotInlineMessageMediaAuto()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineMessageText:
		t := m.To_InputBotInlineMessageText()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineMessageMediaGeo:
		t := m.To_InputBotInlineMessageMediaGeo()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineMessageMediaVenue:
		t := m.To_InputBotInlineMessageMediaVenue()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineMessageMediaContact:
		t := m.To_InputBotInlineMessageMediaContact()
		return t.Encode()
	case TLConstructor_CRC32_inputBotInlineMessageGame:
		t := m.To_InputBotInlineMessageGame()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputBotInlineMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputBotInlineMessageMediaAuto:
		t := m.To_InputBotInlineMessageMediaAuto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineMessageText:
		t := m.To_InputBotInlineMessageText()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineMessageMediaGeo:
		t := m.To_InputBotInlineMessageMediaGeo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineMessageMediaVenue:
		t := m.To_InputBotInlineMessageMediaVenue()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineMessageMediaContact:
		t := m.To_InputBotInlineMessageMediaContact()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputBotInlineMessageGame:
		t := m.To_InputBotInlineMessageGame()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputBotInlineMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputBotInlineMessageMediaAuto:
		m2 := &TLInputBotInlineMessageMediaAuto{Data2: &InputBotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineMessageText:
		m2 := &TLInputBotInlineMessageText{Data2: &InputBotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineMessageMediaGeo:
		m2 := &TLInputBotInlineMessageMediaGeo{Data2: &InputBotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineMessageMediaVenue:
		m2 := &TLInputBotInlineMessageMediaVenue{Data2: &InputBotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineMessageMediaContact:
		m2 := &TLInputBotInlineMessageMediaContact{Data2: &InputBotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputBotInlineMessageGame:
		m2 := &TLInputBotInlineMessageGame{Data2: &InputBotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputBotInlineMessageMediaAuto#3380c786 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaAuto() *TLInputBotInlineMessageMediaAuto {
	return &TLInputBotInlineMessageMediaAuto{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageText#3dcd7a87 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageText() *TLInputBotInlineMessageText {
	return &TLInputBotInlineMessageText{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageMediaGeo#c1b15d65 flags:# geo_point:InputGeoPoint period:int reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaGeo() *TLInputBotInlineMessageMediaGeo {
	return &TLInputBotInlineMessageMediaGeo{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageMediaVenue#417bbf11 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaVenue() *TLInputBotInlineMessageMediaVenue {
	return &TLInputBotInlineMessageMediaVenue{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageMediaContact#a6edbffd flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaContact() *TLInputBotInlineMessageMediaContact {
	return &TLInputBotInlineMessageMediaContact{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageGame#4b425864 flags:# reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageGame() *TLInputBotInlineMessageGame {
	return &TLInputBotInlineMessageGame{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageMediaAuto#3380c786 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaAuto) To_InputBotInlineMessage() *InputBotInlineMessage {
	return &InputBotInlineMessage{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaAuto,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageMediaAuto) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputBotInlineMessageMediaAuto) GetMessage() string  { return m.Data2.Message }

func (m *TLInputBotInlineMessageMediaAuto) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputBotInlineMessageMediaAuto) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLInputBotInlineMessageMediaAuto) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaAuto) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLInputBotInlineMessageMediaAuto() *TLInputBotInlineMessageMediaAuto {
	return &TLInputBotInlineMessageMediaAuto{Data2: &InputBotInlineMessage_Data{}}
}

func (m *TLInputBotInlineMessageMediaAuto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto))

	// flags
	var flags uint32 = 0
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaAuto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto))

	// flags
	var flags uint32 = 0
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaAuto) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetMessage(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		c3 := dbuf.Int()
		if c3 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
			return dbuf.err
		}
		l3 := dbuf.Int()
		v3 := make([]*MessageEntity, l3)
		for i := int32(0); i < l3; i++ {
			v3[i] = &MessageEntity{}
			v3[i].Decode(dbuf)
		}
		m.SetEntities(v3)

	}
	if (flags & (1 << 2)) != 0 {
		m4 := &ReplyMarkup{}
		m4.Decode(dbuf)
		m.SetReplyMarkup(m4)
	}

	return dbuf.err
}

// inputBotInlineMessageText#3dcd7a87 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageText) To_InputBotInlineMessage() *InputBotInlineMessage {
	return &InputBotInlineMessage{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageText,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageText) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLInputBotInlineMessageText) GetNoWebpage() bool  { return m.Data2.NoWebpage }

func (m *TLInputBotInlineMessageText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputBotInlineMessageText) GetMessage() string  { return m.Data2.Message }

func (m *TLInputBotInlineMessageText) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputBotInlineMessageText) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLInputBotInlineMessageText) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageText) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLInputBotInlineMessageText() *TLInputBotInlineMessageText {
	return &TLInputBotInlineMessageText{Data2: &InputBotInlineMessage_Data{}}
}

func (m *TLInputBotInlineMessageText) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageText))

	// flags
	var flags uint32 = 0
	if m.GetNoWebpage() == true {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLInputBotInlineMessageText) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageText))

	// flags
	var flags uint32 = 0
	if m.GetNoWebpage() == true {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputBotInlineMessageText) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetNoWebpage(true)
	}
	m.SetMessage(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		c4 := dbuf.Int()
		if c4 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
			return dbuf.err
		}
		l4 := dbuf.Int()
		v4 := make([]*MessageEntity, l4)
		for i := int32(0); i < l4; i++ {
			v4[i] = &MessageEntity{}
			v4[i].Decode(dbuf)
		}
		m.SetEntities(v4)

	}
	if (flags & (1 << 2)) != 0 {
		m5 := &ReplyMarkup{}
		m5.Decode(dbuf)
		m.SetReplyMarkup(m5)
	}

	return dbuf.err
}

// inputBotInlineMessageMediaGeo#c1b15d65 flags:# geo_point:InputGeoPoint period:int reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaGeo) To_InputBotInlineMessage() *InputBotInlineMessage {
	return &InputBotInlineMessage{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaGeo,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageMediaGeo) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaGeo) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaGeo) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLInputBotInlineMessageMediaGeo) GetPeriod() int32  { return m.Data2.Period }

func (m *TLInputBotInlineMessageMediaGeo) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaGeo) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLInputBotInlineMessageMediaGeo() *TLInputBotInlineMessageMediaGeo {
	return &TLInputBotInlineMessageMediaGeo{Data2: &InputBotInlineMessage_Data{}}
}

func (m *TLInputBotInlineMessageMediaGeo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeoPoint().Encode())
	x.Int(m.GetPeriod())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaGeo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeoPoint().EncodeToLayer(layer))
	x.Int(m.GetPeriod())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaGeo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputGeoPoint{}
	m2.Decode(dbuf)
	m.SetGeoPoint(m2)
	m.SetPeriod(dbuf.Int())
	if (flags & (1 << 2)) != 0 {
		m4 := &ReplyMarkup{}
		m4.Decode(dbuf)
		m.SetReplyMarkup(m4)
	}

	return dbuf.err
}

// inputBotInlineMessageMediaVenue#417bbf11 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaVenue) To_InputBotInlineMessage() *InputBotInlineMessage {
	return &InputBotInlineMessage{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaVenue,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageMediaVenue) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaVenue) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineMessageMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLInputBotInlineMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputBotInlineMessageMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLInputBotInlineMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputBotInlineMessageMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputBotInlineMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputBotInlineMessageMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLInputBotInlineMessageMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLInputBotInlineMessageMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func (m *TLInputBotInlineMessageMediaVenue) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaVenue) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLInputBotInlineMessageMediaVenue() *TLInputBotInlineMessageMediaVenue {
	return &TLInputBotInlineMessageMediaVenue{Data2: &InputBotInlineMessage_Data{}}
}

func (m *TLInputBotInlineMessageMediaVenue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeoPoint().Encode())
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaVenue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeoPoint().EncodeToLayer(layer))
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaVenue) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputGeoPoint{}
	m2.Decode(dbuf)
	m.SetGeoPoint(m2)
	m.SetTitle(dbuf.String())
	m.SetAddress(dbuf.String())
	m.SetProvider(dbuf.String())
	m.SetVenueId(dbuf.String())
	m.SetVenueType(dbuf.String())
	if (flags & (1 << 2)) != 0 {
		m8 := &ReplyMarkup{}
		m8.Decode(dbuf)
		m.SetReplyMarkup(m8)
	}

	return dbuf.err
}

// inputBotInlineMessageMediaContact#a6edbffd flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaContact) To_InputBotInlineMessage() *InputBotInlineMessage {
	return &InputBotInlineMessage{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaContact,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputBotInlineMessageMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLInputBotInlineMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputBotInlineMessageMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLInputBotInlineMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputBotInlineMessageMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLInputBotInlineMessageMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLInputBotInlineMessageMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLInputBotInlineMessageMediaContact) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaContact) GetReplyMarkup() *ReplyMarkup {
	return m.Data2.ReplyMarkup
}

func NewTLInputBotInlineMessageMediaContact() *TLInputBotInlineMessageMediaContact {
	return &TLInputBotInlineMessageMediaContact{Data2: &InputBotInlineMessage_Data{}}
}

func (m *TLInputBotInlineMessageMediaContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputBotInlineMessageMediaContact) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetPhoneNumber(dbuf.String())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())
	m.SetVcard(dbuf.String())
	if (flags & (1 << 2)) != 0 {
		m6 := &ReplyMarkup{}
		m6.Decode(dbuf)
		m.SetReplyMarkup(m6)
	}

	return dbuf.err
}

// inputBotInlineMessageGame#4b425864 flags:# reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageGame) To_InputBotInlineMessage() *InputBotInlineMessage {
	return &InputBotInlineMessage{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageGame,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageGame) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageGame) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLInputBotInlineMessageGame() *TLInputBotInlineMessageGame {
	return &TLInputBotInlineMessageGame{Data2: &InputBotInlineMessage_Data{}}
}

func (m *TLInputBotInlineMessageGame) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageGame))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLInputBotInlineMessageGame) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageGame))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputBotInlineMessageGame) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 2)) != 0 {
		m2 := &ReplyMarkup{}
		m2.Decode(dbuf)
		m.SetReplyMarkup(m2)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// TopPeerCategoryPeers <--
//  + TL_TopPeerCategoryPeers
//

func (m *TopPeerCategoryPeers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_topPeerCategoryPeers:
		t := m.To_TopPeerCategoryPeers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *TopPeerCategoryPeers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_topPeerCategoryPeers:
		t := m.To_TopPeerCategoryPeers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *TopPeerCategoryPeers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_topPeerCategoryPeers:
		m2 := &TLTopPeerCategoryPeers{Data2: &TopPeerCategoryPeers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// topPeerCategoryPeers#fb834291 category:TopPeerCategory count:int peers:Vector<TopPeer> = TopPeerCategoryPeers;
func (m *TopPeerCategoryPeers) To_TopPeerCategoryPeers() *TLTopPeerCategoryPeers {
	return &TLTopPeerCategoryPeers{
		Data2: m.Data2,
	}
}

// topPeerCategoryPeers#fb834291 category:TopPeerCategory count:int peers:Vector<TopPeer> = TopPeerCategoryPeers;
func (m *TLTopPeerCategoryPeers) To_TopPeerCategoryPeers() *TopPeerCategoryPeers {
	return &TopPeerCategoryPeers{
		Constructor: TLConstructor_CRC32_topPeerCategoryPeers,
		Data2:       m.Data2,
	}
}

func (m *TLTopPeerCategoryPeers) SetCategory(v *TopPeerCategory) { m.Data2.Category = v }
func (m *TLTopPeerCategoryPeers) GetCategory() *TopPeerCategory  { return m.Data2.Category }

func (m *TLTopPeerCategoryPeers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLTopPeerCategoryPeers) GetCount() int32  { return m.Data2.Count }

func (m *TLTopPeerCategoryPeers) SetPeers(v []*TopPeer) { m.Data2.Peers = v }
func (m *TLTopPeerCategoryPeers) GetPeers() []*TopPeer  { return m.Data2.Peers }

func NewTLTopPeerCategoryPeers() *TLTopPeerCategoryPeers {
	return &TLTopPeerCategoryPeers{Data2: &TopPeerCategoryPeers_Data{}}
}

func (m *TLTopPeerCategoryPeers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryPeers))

	x.Bytes(m.GetCategory().Encode())
	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPeers())))
	for _, v := range m.GetPeers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLTopPeerCategoryPeers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryPeers))

	x.Bytes(m.GetCategory().EncodeToLayer(layer))
	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPeers())))
	for _, v := range m.GetPeers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLTopPeerCategoryPeers) Decode(dbuf *DecodeBuf) error {
	m1 := &TopPeerCategory{}
	m1.Decode(dbuf)
	m.SetCategory(m1)
	m.SetCount(dbuf.Int())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*TopPeer, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &TopPeer{}
		v3[i].Decode(dbuf)
	}
	m.SetPeers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureSecretSettings <--
//  + TL_SecureSecretSettings
//

func (m *SecureSecretSettings) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureSecretSettings:
		t := m.To_SecureSecretSettings()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureSecretSettings) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureSecretSettings:
		t := m.To_SecureSecretSettings()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureSecretSettings) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureSecretSettings:
		m2 := &TLSecureSecretSettings{Data2: &SecureSecretSettings_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureSecretSettings#1527bcac secure_algo:SecurePasswordKdfAlgo secure_secret:bytes secure_secret_id:long = SecureSecretSettings;
func (m *SecureSecretSettings) To_SecureSecretSettings() *TLSecureSecretSettings {
	return &TLSecureSecretSettings{
		Data2: m.Data2,
	}
}

// secureSecretSettings#1527bcac secure_algo:SecurePasswordKdfAlgo secure_secret:bytes secure_secret_id:long = SecureSecretSettings;
func (m *TLSecureSecretSettings) To_SecureSecretSettings() *SecureSecretSettings {
	return &SecureSecretSettings{
		Constructor: TLConstructor_CRC32_secureSecretSettings,
		Data2:       m.Data2,
	}
}

func (m *TLSecureSecretSettings) SetSecureAlgo(v *SecurePasswordKdfAlgo) { m.Data2.SecureAlgo = v }
func (m *TLSecureSecretSettings) GetSecureAlgo() *SecurePasswordKdfAlgo  { return m.Data2.SecureAlgo }

func (m *TLSecureSecretSettings) SetSecureSecret(v []byte) { m.Data2.SecureSecret = v }
func (m *TLSecureSecretSettings) GetSecureSecret() []byte  { return m.Data2.SecureSecret }

func (m *TLSecureSecretSettings) SetSecureSecretId(v int64) { m.Data2.SecureSecretId = v }
func (m *TLSecureSecretSettings) GetSecureSecretId() int64  { return m.Data2.SecureSecretId }

func NewTLSecureSecretSettings() *TLSecureSecretSettings {
	return &TLSecureSecretSettings{Data2: &SecureSecretSettings_Data{}}
}

func (m *TLSecureSecretSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureSecretSettings))

	x.Bytes(m.GetSecureAlgo().Encode())
	x.StringBytes(m.GetSecureSecret())
	x.Long(m.GetSecureSecretId())

	return x.buf
}

func (m *TLSecureSecretSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureSecretSettings))

	x.Bytes(m.GetSecureAlgo().EncodeToLayer(layer))
	x.StringBytes(m.GetSecureSecret())
	x.Long(m.GetSecureSecretId())

	return x.buf
}

func (m *TLSecureSecretSettings) Decode(dbuf *DecodeBuf) error {
	m1 := &SecurePasswordKdfAlgo{}
	m1.Decode(dbuf)
	m.SetSecureAlgo(m1)
	m.SetSecureSecret(dbuf.StringBytes())
	m.SetSecureSecretId(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPeer <--
//  + TL_InputPeerEmpty
//  + TL_InputPeerSelf
//  + TL_InputPeerChat
//  + TL_InputPeerUser
//  + TL_InputPeerChannel
//

func (m *InputPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPeerEmpty:
		t := m.To_InputPeerEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputPeerSelf:
		t := m.To_InputPeerSelf()
		return t.Encode()
	case TLConstructor_CRC32_inputPeerChat:
		t := m.To_InputPeerChat()
		return t.Encode()
	case TLConstructor_CRC32_inputPeerUser:
		t := m.To_InputPeerUser()
		return t.Encode()
	case TLConstructor_CRC32_inputPeerChannel:
		t := m.To_InputPeerChannel()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPeerEmpty:
		t := m.To_InputPeerEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPeerSelf:
		t := m.To_InputPeerSelf()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPeerChat:
		t := m.To_InputPeerChat()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPeerUser:
		t := m.To_InputPeerUser()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPeerChannel:
		t := m.To_InputPeerChannel()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPeerEmpty:
		m2 := &TLInputPeerEmpty{Data2: &InputPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPeerSelf:
		m2 := &TLInputPeerSelf{Data2: &InputPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPeerChat:
		m2 := &TLInputPeerChat{Data2: &InputPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPeerUser:
		m2 := &TLInputPeerUser{Data2: &InputPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPeerChannel:
		m2 := &TLInputPeerChannel{Data2: &InputPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPeerEmpty#7f3b18ea = InputPeer;
func (m *InputPeer) To_InputPeerEmpty() *TLInputPeerEmpty {
	return &TLInputPeerEmpty{
		Data2: m.Data2,
	}
}

// inputPeerSelf#7da07ec9 = InputPeer;
func (m *InputPeer) To_InputPeerSelf() *TLInputPeerSelf {
	return &TLInputPeerSelf{
		Data2: m.Data2,
	}
}

// inputPeerChat#179be863 chat_id:int = InputPeer;
func (m *InputPeer) To_InputPeerChat() *TLInputPeerChat {
	return &TLInputPeerChat{
		Data2: m.Data2,
	}
}

// inputPeerUser#7b8e7de6 user_id:int access_hash:long = InputPeer;
func (m *InputPeer) To_InputPeerUser() *TLInputPeerUser {
	return &TLInputPeerUser{
		Data2: m.Data2,
	}
}

// inputPeerChannel#20adaef8 channel_id:int access_hash:long = InputPeer;
func (m *InputPeer) To_InputPeerChannel() *TLInputPeerChannel {
	return &TLInputPeerChannel{
		Data2: m.Data2,
	}
}

// inputPeerEmpty#7f3b18ea = InputPeer;
func (m *TLInputPeerEmpty) To_InputPeer() *InputPeer {
	return &InputPeer{
		Constructor: TLConstructor_CRC32_inputPeerEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputPeerEmpty() *TLInputPeerEmpty {
	return &TLInputPeerEmpty{Data2: &InputPeer_Data{}}
}

func (m *TLInputPeerEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerEmpty))

	return x.buf
}

func (m *TLInputPeerEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerEmpty))

	return x.buf
}

func (m *TLInputPeerEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPeerSelf#7da07ec9 = InputPeer;
func (m *TLInputPeerSelf) To_InputPeer() *InputPeer {
	return &InputPeer{
		Constructor: TLConstructor_CRC32_inputPeerSelf,
		Data2:       m.Data2,
	}
}

func NewTLInputPeerSelf() *TLInputPeerSelf {
	return &TLInputPeerSelf{Data2: &InputPeer_Data{}}
}

func (m *TLInputPeerSelf) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerSelf))

	return x.buf
}

func (m *TLInputPeerSelf) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerSelf))

	return x.buf
}

func (m *TLInputPeerSelf) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPeerChat#179be863 chat_id:int = InputPeer;
func (m *TLInputPeerChat) To_InputPeer() *InputPeer {
	return &InputPeer{
		Constructor: TLConstructor_CRC32_inputPeerChat,
		Data2:       m.Data2,
	}
}

func (m *TLInputPeerChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLInputPeerChat) GetChatId() int32  { return m.Data2.ChatId }

func NewTLInputPeerChat() *TLInputPeerChat {
	return &TLInputPeerChat{Data2: &InputPeer_Data{}}
}

func (m *TLInputPeerChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerChat))

	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLInputPeerChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerChat))

	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLInputPeerChat) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())

	return dbuf.err
}

// inputPeerUser#7b8e7de6 user_id:int access_hash:long = InputPeer;
func (m *TLInputPeerUser) To_InputPeer() *InputPeer {
	return &InputPeer{
		Constructor: TLConstructor_CRC32_inputPeerUser,
		Data2:       m.Data2,
	}
}

func (m *TLInputPeerUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLInputPeerUser) GetUserId() int32  { return m.Data2.UserId }

func (m *TLInputPeerUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPeerUser) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputPeerUser() *TLInputPeerUser {
	return &TLInputPeerUser{Data2: &InputPeer_Data{}}
}

func (m *TLInputPeerUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerUser))

	x.Int(m.GetUserId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPeerUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerUser))

	x.Int(m.GetUserId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPeerUser) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputPeerChannel#20adaef8 channel_id:int access_hash:long = InputPeer;
func (m *TLInputPeerChannel) To_InputPeer() *InputPeer {
	return &InputPeer{
		Constructor: TLConstructor_CRC32_inputPeerChannel,
		Data2:       m.Data2,
	}
}

func (m *TLInputPeerChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLInputPeerChannel) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLInputPeerChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPeerChannel) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputPeerChannel() *TLInputPeerChannel {
	return &TLInputPeerChannel{Data2: &InputPeer_Data{}}
}

func (m *TLInputPeerChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerChannel))

	x.Int(m.GetChannelId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPeerChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPeerChannel))

	x.Int(m.GetChannelId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPeerChannel) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// User <--
//  + TL_UserEmpty
//  + TL_User
//

func (m *User) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_userEmpty:
		t := m.To_UserEmpty()
		return t.Encode()
	case TLConstructor_CRC32_user:
		t := m.To_User()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *User) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_userEmpty:
		t := m.To_UserEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_user:
		t := m.To_User()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *User) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_userEmpty:
		m2 := &TLUserEmpty{Data2: &User_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_user:
		m2 := &TLUser{Data2: &User_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// userEmpty#200250ba id:int = User;
func (m *User) To_UserEmpty() *TLUserEmpty {
	return &TLUserEmpty{
		Data2: m.Data2,
	}
}

// user#2e13f4c3 flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true id:int access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?string bot_inline_placeholder:flags.19?string lang_code:flags.22?string = User;
func (m *User) To_User() *TLUser {
	return &TLUser{
		Data2: m.Data2,
	}
}

// userEmpty#200250ba id:int = User;
func (m *TLUserEmpty) To_User() *User {
	return &User{
		Constructor: TLConstructor_CRC32_userEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLUserEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLUserEmpty) GetId() int32  { return m.Data2.Id }

func NewTLUserEmpty() *TLUserEmpty {
	return &TLUserEmpty{Data2: &User_Data{}}
}

func (m *TLUserEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLUserEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLUserEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

// user#2e13f4c3 flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true id:int access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?string bot_inline_placeholder:flags.19?string lang_code:flags.22?string = User;
func (m *TLUser) To_User() *User {
	return &User{
		Constructor: TLConstructor_CRC32_user,
		Data2:       m.Data2,
	}
}

func (m *TLUser) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLUser) GetSelf() bool  { return m.Data2.Self }

func (m *TLUser) SetContact(v bool) { m.Data2.Contact = v }
func (m *TLUser) GetContact() bool  { return m.Data2.Contact }

func (m *TLUser) SetMutualContact(v bool) { m.Data2.MutualContact = v }
func (m *TLUser) GetMutualContact() bool  { return m.Data2.MutualContact }

func (m *TLUser) SetDeleted(v bool) { m.Data2.Deleted = v }
func (m *TLUser) GetDeleted() bool  { return m.Data2.Deleted }

func (m *TLUser) SetBot(v bool) { m.Data2.Bot = v }
func (m *TLUser) GetBot() bool  { return m.Data2.Bot }

func (m *TLUser) SetBotChatHistory(v bool) { m.Data2.BotChatHistory = v }
func (m *TLUser) GetBotChatHistory() bool  { return m.Data2.BotChatHistory }

func (m *TLUser) SetBotNochats(v bool) { m.Data2.BotNochats = v }
func (m *TLUser) GetBotNochats() bool  { return m.Data2.BotNochats }

func (m *TLUser) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLUser) GetVerified() bool  { return m.Data2.Verified }

func (m *TLUser) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLUser) GetRestricted() bool  { return m.Data2.Restricted }

func (m *TLUser) SetMin(v bool) { m.Data2.Min = v }
func (m *TLUser) GetMin() bool  { return m.Data2.Min }

func (m *TLUser) SetBotInlineGeo(v bool) { m.Data2.BotInlineGeo = v }
func (m *TLUser) GetBotInlineGeo() bool  { return m.Data2.BotInlineGeo }

func (m *TLUser) SetId(v int32) { m.Data2.Id = v }
func (m *TLUser) GetId() int32  { return m.Data2.Id }

func (m *TLUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLUser) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLUser) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLUser) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLUser) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLUser) GetLastName() string  { return m.Data2.LastName }

func (m *TLUser) SetUsername(v string) { m.Data2.Username = v }
func (m *TLUser) GetUsername() string  { return m.Data2.Username }

func (m *TLUser) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLUser) GetPhone() string  { return m.Data2.Phone }

func (m *TLUser) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUser) GetPhoto() *UserProfilePhoto  { return m.Data2.Photo }

func (m *TLUser) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUser) GetStatus() *UserStatus  { return m.Data2.Status }

func (m *TLUser) SetBotInfoVersion(v int32) { m.Data2.BotInfoVersion = v }
func (m *TLUser) GetBotInfoVersion() int32  { return m.Data2.BotInfoVersion }

func (m *TLUser) SetRestrictionReason(v string) { m.Data2.RestrictionReason = v }
func (m *TLUser) GetRestrictionReason() string  { return m.Data2.RestrictionReason }

func (m *TLUser) SetBotInlinePlaceholder(v string) { m.Data2.BotInlinePlaceholder = v }
func (m *TLUser) GetBotInlinePlaceholder() string  { return m.Data2.BotInlinePlaceholder }

func (m *TLUser) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLUser) GetLangCode() string  { return m.Data2.LangCode }

func NewTLUser() *TLUser {
	return &TLUser{Data2: &User_Data{}}
}

func (m *TLUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_user))

	// flags
	var flags uint32 = 0
	if m.GetSelf() == true {
		flags |= 1 << 10
	}
	if m.GetContact() == true {
		flags |= 1 << 11
	}
	if m.GetMutualContact() == true {
		flags |= 1 << 12
	}
	if m.GetDeleted() == true {
		flags |= 1 << 13
	}
	if m.GetBot() == true {
		flags |= 1 << 14
	}
	if m.GetBotChatHistory() == true {
		flags |= 1 << 15
	}
	if m.GetBotNochats() == true {
		flags |= 1 << 16
	}
	if m.GetVerified() == true {
		flags |= 1 << 17
	}
	if m.GetRestricted() == true {
		flags |= 1 << 18
	}
	if m.GetMin() == true {
		flags |= 1 << 20
	}
	if m.GetBotInlineGeo() == true {
		flags |= 1 << 21
	}
	if m.GetAccessHash() != 0 {
		flags |= 1 << 0
	}
	if m.GetFirstName() != "" {
		flags |= 1 << 1
	}
	if m.GetLastName() != "" {
		flags |= 1 << 2
	}
	if m.GetUsername() != "" {
		flags |= 1 << 3
	}
	if m.GetPhone() != "" {
		flags |= 1 << 4
	}
	if m.GetPhoto() != nil {
		flags |= 1 << 5
	}
	if m.GetStatus() != nil {
		flags |= 1 << 6
	}
	if m.GetBotInfoVersion() != 0 {
		flags |= 1 << 14
	}
	if m.GetRestrictionReason() != "" {
		flags |= 1 << 18
	}
	if m.GetBotInlinePlaceholder() != "" {
		flags |= 1 << 19
	}
	if m.GetLangCode() != "" {
		flags |= 1 << 22
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetAccessHash() != 0 {
		x.Long(m.GetAccessHash())
	}
	if m.GetFirstName() != "" {
		x.String(m.GetFirstName())
	}
	if m.GetLastName() != "" {
		x.String(m.GetLastName())
	}
	if m.GetUsername() != "" {
		x.String(m.GetUsername())
	}
	if m.GetPhone() != "" {
		x.String(m.GetPhone())
	}
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().Encode())
	}
	if m.GetStatus() != nil {
		x.Bytes(m.GetStatus().Encode())
	}
	if m.GetBotInfoVersion() != 0 {
		x.Int(m.GetBotInfoVersion())
	}
	if m.GetRestrictionReason() != "" {
		x.String(m.GetRestrictionReason())
	}
	if m.GetBotInlinePlaceholder() != "" {
		x.String(m.GetBotInlinePlaceholder())
	}
	if m.GetLangCode() != "" {
		x.String(m.GetLangCode())
	}

	return x.buf
}

func (m *TLUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_user))

	// flags
	var flags uint32 = 0
	if m.GetSelf() == true {
		flags |= 1 << 10
	}
	if m.GetContact() == true {
		flags |= 1 << 11
	}
	if m.GetMutualContact() == true {
		flags |= 1 << 12
	}
	if m.GetDeleted() == true {
		flags |= 1 << 13
	}
	if m.GetBot() == true {
		flags |= 1 << 14
	}
	if m.GetBotChatHistory() == true {
		flags |= 1 << 15
	}
	if m.GetBotNochats() == true {
		flags |= 1 << 16
	}
	if m.GetVerified() == true {
		flags |= 1 << 17
	}
	if m.GetRestricted() == true {
		flags |= 1 << 18
	}
	if m.GetMin() == true {
		flags |= 1 << 20
	}
	if m.GetBotInlineGeo() == true {
		flags |= 1 << 21
	}
	if m.GetAccessHash() != 0 {
		flags |= 1 << 0
	}
	if m.GetFirstName() != "" {
		flags |= 1 << 1
	}
	if m.GetLastName() != "" {
		flags |= 1 << 2
	}
	if m.GetUsername() != "" {
		flags |= 1 << 3
	}
	if m.GetPhone() != "" {
		flags |= 1 << 4
	}
	if m.GetPhoto() != nil {
		flags |= 1 << 5
	}
	if m.GetStatus() != nil {
		flags |= 1 << 6
	}
	if m.GetBotInfoVersion() != 0 {
		flags |= 1 << 14
	}
	if m.GetRestrictionReason() != "" {
		flags |= 1 << 18
	}
	if m.GetBotInlinePlaceholder() != "" {
		flags |= 1 << 19
	}
	if m.GetLangCode() != "" {
		flags |= 1 << 22
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetAccessHash() != 0 {
		x.Long(m.GetAccessHash())
	}
	if m.GetFirstName() != "" {
		x.String(m.GetFirstName())
	}
	if m.GetLastName() != "" {
		x.String(m.GetLastName())
	}
	if m.GetUsername() != "" {
		x.String(m.GetUsername())
	}
	if m.GetPhone() != "" {
		x.String(m.GetPhone())
	}
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	}
	if m.GetStatus() != nil {
		x.Bytes(m.GetStatus().EncodeToLayer(layer))
	}
	if m.GetBotInfoVersion() != 0 {
		x.Int(m.GetBotInfoVersion())
	}
	if m.GetRestrictionReason() != "" {
		x.String(m.GetRestrictionReason())
	}
	if m.GetBotInlinePlaceholder() != "" {
		x.String(m.GetBotInlinePlaceholder())
	}
	if m.GetLangCode() != "" {
		x.String(m.GetLangCode())
	}

	return x.buf
}

func (m *TLUser) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 10)) != 0 {
		m.SetSelf(true)
	}
	if (flags & (1 << 11)) != 0 {
		m.SetContact(true)
	}
	if (flags & (1 << 12)) != 0 {
		m.SetMutualContact(true)
	}
	if (flags & (1 << 13)) != 0 {
		m.SetDeleted(true)
	}
	if (flags & (1 << 14)) != 0 {
		m.SetBot(true)
	}
	if (flags & (1 << 15)) != 0 {
		m.SetBotChatHistory(true)
	}
	if (flags & (1 << 16)) != 0 {
		m.SetBotNochats(true)
	}
	if (flags & (1 << 17)) != 0 {
		m.SetVerified(true)
	}
	if (flags & (1 << 18)) != 0 {
		m.SetRestricted(true)
	}
	if (flags & (1 << 20)) != 0 {
		m.SetMin(true)
	}
	if (flags & (1 << 21)) != 0 {
		m.SetBotInlineGeo(true)
	}
	m.SetId(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m.SetAccessHash(dbuf.Long())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetFirstName(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetLastName(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetUsername(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m.SetPhone(dbuf.String())
	}
	if (flags & (1 << 5)) != 0 {
		m19 := &UserProfilePhoto{}
		m19.Decode(dbuf)
		m.SetPhoto(m19)
	}
	if (flags & (1 << 6)) != 0 {
		m20 := &UserStatus{}
		m20.Decode(dbuf)
		m.SetStatus(m20)
	}
	if (flags & (1 << 14)) != 0 {
		m.SetBotInfoVersion(dbuf.Int())
	}
	if (flags & (1 << 18)) != 0 {
		m.SetRestrictionReason(dbuf.String())
	}
	if (flags & (1 << 19)) != 0 {
		m.SetBotInlinePlaceholder(dbuf.String())
	}
	if (flags & (1 << 22)) != 0 {
		m.SetLangCode(dbuf.String())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Photos_Photos <--
//  + TL_PhotosPhotos
//  + TL_PhotosPhotosSlice
//

func (m *Photos_Photos) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_photos_photos:
		t := m.To_PhotosPhotos()
		return t.Encode()
	case TLConstructor_CRC32_photos_photosSlice:
		t := m.To_PhotosPhotosSlice()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Photos_Photos) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_photos_photos:
		t := m.To_PhotosPhotos()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_photos_photosSlice:
		t := m.To_PhotosPhotosSlice()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Photos_Photos) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_photos_photos:
		m2 := &TLPhotosPhotos{Data2: &Photos_Photos_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_photos_photosSlice:
		m2 := &TLPhotosPhotosSlice{Data2: &Photos_Photos_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// photos.photos#8dca6aa5 photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *Photos_Photos) To_PhotosPhotos() *TLPhotosPhotos {
	return &TLPhotosPhotos{
		Data2: m.Data2,
	}
}

// photos.photosSlice#15051f54 count:int photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *Photos_Photos) To_PhotosPhotosSlice() *TLPhotosPhotosSlice {
	return &TLPhotosPhotosSlice{
		Data2: m.Data2,
	}
}

// photos.photos#8dca6aa5 photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *TLPhotosPhotos) To_Photos_Photos() *Photos_Photos {
	return &Photos_Photos{
		Constructor: TLConstructor_CRC32_photos_photos,
		Data2:       m.Data2,
	}
}

func (m *TLPhotosPhotos) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPhotosPhotos) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPhotosPhotos) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhotos) GetUsers() []*User  { return m.Data2.Users }

func NewTLPhotosPhotos() *TLPhotosPhotos {
	return &TLPhotosPhotos{Data2: &Photos_Photos_Data{}}
}

func (m *TLPhotosPhotos) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_photos))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhotosPhotos) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_photos))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhotosPhotos) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Photo, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Photo{}
		v1[i].Decode(dbuf)
	}
	m.SetPhotos(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

// photos.photosSlice#15051f54 count:int photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *TLPhotosPhotosSlice) To_Photos_Photos() *Photos_Photos {
	return &Photos_Photos{
		Constructor: TLConstructor_CRC32_photos_photosSlice,
		Data2:       m.Data2,
	}
}

func (m *TLPhotosPhotosSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLPhotosPhotosSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLPhotosPhotosSlice) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPhotosPhotosSlice) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPhotosPhotosSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhotosSlice) GetUsers() []*User  { return m.Data2.Users }

func NewTLPhotosPhotosSlice() *TLPhotosPhotosSlice {
	return &TLPhotosPhotosSlice{Data2: &Photos_Photos_Data{}}
}

func (m *TLPhotosPhotosSlice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_photosSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhotosPhotosSlice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_photosSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhotosPhotosSlice) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Photo, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Photo{}
		v2[i].Decode(dbuf)
	}
	m.SetPhotos(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// NotifyPeer <--
//  + TL_NotifyPeer
//  + TL_NotifyUsers
//  + TL_NotifyChats
//

func (m *NotifyPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_notifyPeer:
		t := m.To_NotifyPeer()
		return t.Encode()
	case TLConstructor_CRC32_notifyUsers:
		t := m.To_NotifyUsers()
		return t.Encode()
	case TLConstructor_CRC32_notifyChats:
		t := m.To_NotifyChats()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *NotifyPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_notifyPeer:
		t := m.To_NotifyPeer()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_notifyUsers:
		t := m.To_NotifyUsers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_notifyChats:
		t := m.To_NotifyChats()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *NotifyPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_notifyPeer:
		m2 := &TLNotifyPeer{Data2: &NotifyPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_notifyUsers:
		m2 := &TLNotifyUsers{Data2: &NotifyPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_notifyChats:
		m2 := &TLNotifyChats{Data2: &NotifyPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// notifyPeer#9fd40bd8 peer:Peer = NotifyPeer;
func (m *NotifyPeer) To_NotifyPeer() *TLNotifyPeer {
	return &TLNotifyPeer{
		Data2: m.Data2,
	}
}

// notifyUsers#b4c83b4c = NotifyPeer;
func (m *NotifyPeer) To_NotifyUsers() *TLNotifyUsers {
	return &TLNotifyUsers{
		Data2: m.Data2,
	}
}

// notifyChats#c007cec3 = NotifyPeer;
func (m *NotifyPeer) To_NotifyChats() *TLNotifyChats {
	return &TLNotifyChats{
		Data2: m.Data2,
	}
}

// notifyPeer#9fd40bd8 peer:Peer = NotifyPeer;
func (m *TLNotifyPeer) To_NotifyPeer() *NotifyPeer {
	return &NotifyPeer{
		Constructor: TLConstructor_CRC32_notifyPeer,
		Data2:       m.Data2,
	}
}

func (m *TLNotifyPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLNotifyPeer) GetPeer() *Peer  { return m.Data2.Peer }

func NewTLNotifyPeer() *TLNotifyPeer {
	return &TLNotifyPeer{Data2: &NotifyPeer_Data{}}
}

func (m *TLNotifyPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_notifyPeer))

	x.Bytes(m.GetPeer().Encode())

	return x.buf
}

func (m *TLNotifyPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_notifyPeer))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))

	return x.buf
}

func (m *TLNotifyPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &Peer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)

	return dbuf.err
}

// notifyUsers#b4c83b4c = NotifyPeer;
func (m *TLNotifyUsers) To_NotifyPeer() *NotifyPeer {
	return &NotifyPeer{
		Constructor: TLConstructor_CRC32_notifyUsers,
		Data2:       m.Data2,
	}
}

func NewTLNotifyUsers() *TLNotifyUsers {
	return &TLNotifyUsers{Data2: &NotifyPeer_Data{}}
}

func (m *TLNotifyUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_notifyUsers))

	return x.buf
}

func (m *TLNotifyUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_notifyUsers))

	return x.buf
}

func (m *TLNotifyUsers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// notifyChats#c007cec3 = NotifyPeer;
func (m *TLNotifyChats) To_NotifyPeer() *NotifyPeer {
	return &NotifyPeer{
		Constructor: TLConstructor_CRC32_notifyChats,
		Data2:       m.Data2,
	}
}

func NewTLNotifyChats() *TLNotifyChats {
	return &TLNotifyChats{Data2: &NotifyPeer_Data{}}
}

func (m *TLNotifyChats) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_notifyChats))

	return x.buf
}

func (m *TLNotifyChats) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_notifyChats))

	return x.buf
}

func (m *TLNotifyChats) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PrivacyRule <--
//  + TL_PrivacyValueAllowContacts
//  + TL_PrivacyValueAllowAll
//  + TL_PrivacyValueAllowUsers
//  + TL_PrivacyValueDisallowContacts
//  + TL_PrivacyValueDisallowAll
//  + TL_PrivacyValueDisallowUsers
//

func (m *PrivacyRule) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_privacyValueAllowContacts:
		t := m.To_PrivacyValueAllowContacts()
		return t.Encode()
	case TLConstructor_CRC32_privacyValueAllowAll:
		t := m.To_PrivacyValueAllowAll()
		return t.Encode()
	case TLConstructor_CRC32_privacyValueAllowUsers:
		t := m.To_PrivacyValueAllowUsers()
		return t.Encode()
	case TLConstructor_CRC32_privacyValueDisallowContacts:
		t := m.To_PrivacyValueDisallowContacts()
		return t.Encode()
	case TLConstructor_CRC32_privacyValueDisallowAll:
		t := m.To_PrivacyValueDisallowAll()
		return t.Encode()
	case TLConstructor_CRC32_privacyValueDisallowUsers:
		t := m.To_PrivacyValueDisallowUsers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PrivacyRule) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_privacyValueAllowContacts:
		t := m.To_PrivacyValueAllowContacts()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyValueAllowAll:
		t := m.To_PrivacyValueAllowAll()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyValueAllowUsers:
		t := m.To_PrivacyValueAllowUsers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyValueDisallowContacts:
		t := m.To_PrivacyValueDisallowContacts()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyValueDisallowAll:
		t := m.To_PrivacyValueDisallowAll()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyValueDisallowUsers:
		t := m.To_PrivacyValueDisallowUsers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PrivacyRule) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_privacyValueAllowContacts:
		m2 := &TLPrivacyValueAllowContacts{Data2: &PrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyValueAllowAll:
		m2 := &TLPrivacyValueAllowAll{Data2: &PrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyValueAllowUsers:
		m2 := &TLPrivacyValueAllowUsers{Data2: &PrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyValueDisallowContacts:
		m2 := &TLPrivacyValueDisallowContacts{Data2: &PrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyValueDisallowAll:
		m2 := &TLPrivacyValueDisallowAll{Data2: &PrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyValueDisallowUsers:
		m2 := &TLPrivacyValueDisallowUsers{Data2: &PrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// privacyValueAllowContacts#fffe1bac = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowContacts() *TLPrivacyValueAllowContacts {
	return &TLPrivacyValueAllowContacts{
		Data2: m.Data2,
	}
}

// privacyValueAllowAll#65427b82 = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowAll() *TLPrivacyValueAllowAll {
	return &TLPrivacyValueAllowAll{
		Data2: m.Data2,
	}
}

// privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowUsers() *TLPrivacyValueAllowUsers {
	return &TLPrivacyValueAllowUsers{
		Data2: m.Data2,
	}
}

// privacyValueDisallowContacts#f888fa1a = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowContacts() *TLPrivacyValueDisallowContacts {
	return &TLPrivacyValueDisallowContacts{
		Data2: m.Data2,
	}
}

// privacyValueDisallowAll#8b73e763 = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowAll() *TLPrivacyValueDisallowAll {
	return &TLPrivacyValueDisallowAll{
		Data2: m.Data2,
	}
}

// privacyValueDisallowUsers#c7f49b7 users:Vector<int> = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowUsers() *TLPrivacyValueDisallowUsers {
	return &TLPrivacyValueDisallowUsers{
		Data2: m.Data2,
	}
}

// privacyValueAllowContacts#fffe1bac = PrivacyRule;
func (m *TLPrivacyValueAllowContacts) To_PrivacyRule() *PrivacyRule {
	return &PrivacyRule{
		Constructor: TLConstructor_CRC32_privacyValueAllowContacts,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyValueAllowContacts() *TLPrivacyValueAllowContacts {
	return &TLPrivacyValueAllowContacts{Data2: &PrivacyRule_Data{}}
}

func (m *TLPrivacyValueAllowContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueAllowContacts))

	return x.buf
}

func (m *TLPrivacyValueAllowContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueAllowContacts))

	return x.buf
}

func (m *TLPrivacyValueAllowContacts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// privacyValueAllowAll#65427b82 = PrivacyRule;
func (m *TLPrivacyValueAllowAll) To_PrivacyRule() *PrivacyRule {
	return &PrivacyRule{
		Constructor: TLConstructor_CRC32_privacyValueAllowAll,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyValueAllowAll() *TLPrivacyValueAllowAll {
	return &TLPrivacyValueAllowAll{Data2: &PrivacyRule_Data{}}
}

func (m *TLPrivacyValueAllowAll) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueAllowAll))

	return x.buf
}

func (m *TLPrivacyValueAllowAll) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueAllowAll))

	return x.buf
}

func (m *TLPrivacyValueAllowAll) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule;
func (m *TLPrivacyValueAllowUsers) To_PrivacyRule() *PrivacyRule {
	return &PrivacyRule{
		Constructor: TLConstructor_CRC32_privacyValueAllowUsers,
		Data2:       m.Data2,
	}
}

func (m *TLPrivacyValueAllowUsers) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLPrivacyValueAllowUsers) GetUsers() []int32  { return m.Data2.Users }

func NewTLPrivacyValueAllowUsers() *TLPrivacyValueAllowUsers {
	return &TLPrivacyValueAllowUsers{Data2: &PrivacyRule_Data{}}
}

func (m *TLPrivacyValueAllowUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueAllowUsers))

	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLPrivacyValueAllowUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueAllowUsers))

	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLPrivacyValueAllowUsers) Decode(dbuf *DecodeBuf) error {
	m.SetUsers(dbuf.VectorInt())

	return dbuf.err
}

// privacyValueDisallowContacts#f888fa1a = PrivacyRule;
func (m *TLPrivacyValueDisallowContacts) To_PrivacyRule() *PrivacyRule {
	return &PrivacyRule{
		Constructor: TLConstructor_CRC32_privacyValueDisallowContacts,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyValueDisallowContacts() *TLPrivacyValueDisallowContacts {
	return &TLPrivacyValueDisallowContacts{Data2: &PrivacyRule_Data{}}
}

func (m *TLPrivacyValueDisallowContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueDisallowContacts))

	return x.buf
}

func (m *TLPrivacyValueDisallowContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueDisallowContacts))

	return x.buf
}

func (m *TLPrivacyValueDisallowContacts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// privacyValueDisallowAll#8b73e763 = PrivacyRule;
func (m *TLPrivacyValueDisallowAll) To_PrivacyRule() *PrivacyRule {
	return &PrivacyRule{
		Constructor: TLConstructor_CRC32_privacyValueDisallowAll,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyValueDisallowAll() *TLPrivacyValueDisallowAll {
	return &TLPrivacyValueDisallowAll{Data2: &PrivacyRule_Data{}}
}

func (m *TLPrivacyValueDisallowAll) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueDisallowAll))

	return x.buf
}

func (m *TLPrivacyValueDisallowAll) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueDisallowAll))

	return x.buf
}

func (m *TLPrivacyValueDisallowAll) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// privacyValueDisallowUsers#c7f49b7 users:Vector<int> = PrivacyRule;
func (m *TLPrivacyValueDisallowUsers) To_PrivacyRule() *PrivacyRule {
	return &PrivacyRule{
		Constructor: TLConstructor_CRC32_privacyValueDisallowUsers,
		Data2:       m.Data2,
	}
}

func (m *TLPrivacyValueDisallowUsers) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLPrivacyValueDisallowUsers) GetUsers() []int32  { return m.Data2.Users }

func NewTLPrivacyValueDisallowUsers() *TLPrivacyValueDisallowUsers {
	return &TLPrivacyValueDisallowUsers{Data2: &PrivacyRule_Data{}}
}

func (m *TLPrivacyValueDisallowUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueDisallowUsers))

	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLPrivacyValueDisallowUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyValueDisallowUsers))

	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLPrivacyValueDisallowUsers) Decode(dbuf *DecodeBuf) error {
	m.SetUsers(dbuf.VectorInt())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Authorization <--
//  + TL_Authorization
//

func (m *Authorization) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_authorization:
		t := m.To_Authorization()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Authorization) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_authorization:
		t := m.To_Authorization()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Authorization) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_authorization:
		m2 := &TLAuthorization{Data2: &Authorization_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// authorization#7bf2e6f6 hash:long flags:int device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;
func (m *Authorization) To_Authorization() *TLAuthorization {
	return &TLAuthorization{
		Data2: m.Data2,
	}
}

// authorization#7bf2e6f6 hash:long flags:int device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;
func (m *TLAuthorization) To_Authorization() *Authorization {
	return &Authorization{
		Constructor: TLConstructor_CRC32_authorization,
		Data2:       m.Data2,
	}
}

func (m *TLAuthorization) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLAuthorization) GetHash() int64  { return m.Data2.Hash }

func (m *TLAuthorization) SetFlags(v int32) { m.Data2.Flags = v }
func (m *TLAuthorization) GetFlags() int32  { return m.Data2.Flags }

func (m *TLAuthorization) SetDeviceModel(v string) { m.Data2.DeviceModel = v }
func (m *TLAuthorization) GetDeviceModel() string  { return m.Data2.DeviceModel }

func (m *TLAuthorization) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLAuthorization) GetPlatform() string  { return m.Data2.Platform }

func (m *TLAuthorization) SetSystemVersion(v string) { m.Data2.SystemVersion = v }
func (m *TLAuthorization) GetSystemVersion() string  { return m.Data2.SystemVersion }

func (m *TLAuthorization) SetApiId(v int32) { m.Data2.ApiId = v }
func (m *TLAuthorization) GetApiId() int32  { return m.Data2.ApiId }

func (m *TLAuthorization) SetAppName(v string) { m.Data2.AppName = v }
func (m *TLAuthorization) GetAppName() string  { return m.Data2.AppName }

func (m *TLAuthorization) SetAppVersion(v string) { m.Data2.AppVersion = v }
func (m *TLAuthorization) GetAppVersion() string  { return m.Data2.AppVersion }

func (m *TLAuthorization) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLAuthorization) GetDateCreated() int32  { return m.Data2.DateCreated }

func (m *TLAuthorization) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLAuthorization) GetDateActive() int32  { return m.Data2.DateActive }

func (m *TLAuthorization) SetIp(v string) { m.Data2.Ip = v }
func (m *TLAuthorization) GetIp() string  { return m.Data2.Ip }

func (m *TLAuthorization) SetCountry(v string) { m.Data2.Country = v }
func (m *TLAuthorization) GetCountry() string  { return m.Data2.Country }

func (m *TLAuthorization) SetRegion(v string) { m.Data2.Region = v }
func (m *TLAuthorization) GetRegion() string  { return m.Data2.Region }

func NewTLAuthorization() *TLAuthorization {
	return &TLAuthorization{Data2: &Authorization_Data{}}
}

func (m *TLAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_authorization))

	x.Long(m.GetHash())
	x.Int(m.GetFlags())
	x.String(m.GetDeviceModel())
	x.String(m.GetPlatform())
	x.String(m.GetSystemVersion())
	x.Int(m.GetApiId())
	x.String(m.GetAppName())
	x.String(m.GetAppVersion())
	x.Int(m.GetDateCreated())
	x.Int(m.GetDateActive())
	x.String(m.GetIp())
	x.String(m.GetCountry())
	x.String(m.GetRegion())

	return x.buf
}

func (m *TLAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_authorization))

	x.Long(m.GetHash())
	x.Int(m.GetFlags())
	x.String(m.GetDeviceModel())
	x.String(m.GetPlatform())
	x.String(m.GetSystemVersion())
	x.Int(m.GetApiId())
	x.String(m.GetAppName())
	x.String(m.GetAppVersion())
	x.Int(m.GetDateCreated())
	x.Int(m.GetDateActive())
	x.String(m.GetIp())
	x.String(m.GetCountry())
	x.String(m.GetRegion())

	return x.buf
}

func (m *TLAuthorization) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Long())
	m.SetFlags(dbuf.Int())
	m.SetDeviceModel(dbuf.String())
	m.SetPlatform(dbuf.String())
	m.SetSystemVersion(dbuf.String())
	m.SetApiId(dbuf.Int())
	m.SetAppName(dbuf.String())
	m.SetAppVersion(dbuf.String())
	m.SetDateCreated(dbuf.Int())
	m.SetDateActive(dbuf.Int())
	m.SetIp(dbuf.String())
	m.SetCountry(dbuf.String())
	m.SetRegion(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_BotResults <--
//  + TL_MessagesBotResults
//

func (m *Messages_BotResults) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_botResults:
		t := m.To_MessagesBotResults()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_BotResults) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_botResults:
		t := m.To_MessagesBotResults()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_BotResults) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_botResults:
		m2 := &TLMessagesBotResults{Data2: &Messages_BotResults_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.botResults#947ca848 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;
func (m *Messages_BotResults) To_MessagesBotResults() *TLMessagesBotResults {
	return &TLMessagesBotResults{
		Data2: m.Data2,
	}
}

// messages.botResults#947ca848 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;
func (m *TLMessagesBotResults) To_Messages_BotResults() *Messages_BotResults {
	return &Messages_BotResults{
		Constructor: TLConstructor_CRC32_messages_botResults,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesBotResults) SetGallery(v bool) { m.Data2.Gallery = v }
func (m *TLMessagesBotResults) GetGallery() bool  { return m.Data2.Gallery }

func (m *TLMessagesBotResults) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLMessagesBotResults) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLMessagesBotResults) SetNextOffset(v string) { m.Data2.NextOffset = v }
func (m *TLMessagesBotResults) GetNextOffset() string  { return m.Data2.NextOffset }

func (m *TLMessagesBotResults) SetSwitchPm(v *InlineBotSwitchPM) { m.Data2.SwitchPm = v }
func (m *TLMessagesBotResults) GetSwitchPm() *InlineBotSwitchPM  { return m.Data2.SwitchPm }

func (m *TLMessagesBotResults) SetResults(v []*BotInlineResult) { m.Data2.Results = v }
func (m *TLMessagesBotResults) GetResults() []*BotInlineResult  { return m.Data2.Results }

func (m *TLMessagesBotResults) SetCacheTime(v int32) { m.Data2.CacheTime = v }
func (m *TLMessagesBotResults) GetCacheTime() int32  { return m.Data2.CacheTime }

func (m *TLMessagesBotResults) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesBotResults) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesBotResults() *TLMessagesBotResults {
	return &TLMessagesBotResults{Data2: &Messages_BotResults_Data{}}
}

func (m *TLMessagesBotResults) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_botResults))

	// flags
	var flags uint32 = 0
	if m.GetGallery() == true {
		flags |= 1 << 0
	}
	if m.GetNextOffset() != "" {
		flags |= 1 << 1
	}
	if m.GetSwitchPm() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	if m.GetNextOffset() != "" {
		x.String(m.GetNextOffset())
	}
	if m.GetSwitchPm() != nil {
		x.Bytes(m.GetSwitchPm().Encode())
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetResults())))
	for _, v := range m.GetResults() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetCacheTime())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesBotResults) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_botResults))

	// flags
	var flags uint32 = 0
	if m.GetGallery() == true {
		flags |= 1 << 0
	}
	if m.GetNextOffset() != "" {
		flags |= 1 << 1
	}
	if m.GetSwitchPm() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Long(m.GetQueryId())
	if m.GetNextOffset() != "" {
		x.String(m.GetNextOffset())
	}
	if m.GetSwitchPm() != nil {
		x.Bytes(m.GetSwitchPm().EncodeToLayer(layer))
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetResults())))
	for _, v := range m.GetResults() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetCacheTime())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesBotResults) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetGallery(true)
	}
	m.SetQueryId(dbuf.Long())
	if (flags & (1 << 1)) != 0 {
		m.SetNextOffset(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m5 := &InlineBotSwitchPM{}
		m5.Decode(dbuf)
		m.SetSwitchPm(m5)
	}
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*BotInlineResult, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &BotInlineResult{}
		v6[i].Decode(dbuf)
	}
	m.SetResults(v6)

	m.SetCacheTime(dbuf.Int())
	c8 := dbuf.Int()
	if c8 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
		return dbuf.err
	}
	l8 := dbuf.Int()
	v8 := make([]*User, l8)
	for i := int32(0); i < l8; i++ {
		v8[i] = &User{}
		v8[i].Decode(dbuf)
	}
	m.SetUsers(v8)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputStickerSetItem <--
//  + TL_InputStickerSetItem
//

func (m *InputStickerSetItem) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputStickerSetItem:
		t := m.To_InputStickerSetItem()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputStickerSetItem) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputStickerSetItem:
		t := m.To_InputStickerSetItem()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputStickerSetItem) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputStickerSetItem:
		m2 := &TLInputStickerSetItem{Data2: &InputStickerSetItem_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputStickerSetItem#ffa0a496 flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords = InputStickerSetItem;
func (m *InputStickerSetItem) To_InputStickerSetItem() *TLInputStickerSetItem {
	return &TLInputStickerSetItem{
		Data2: m.Data2,
	}
}

// inputStickerSetItem#ffa0a496 flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords = InputStickerSetItem;
func (m *TLInputStickerSetItem) To_InputStickerSetItem() *InputStickerSetItem {
	return &InputStickerSetItem{
		Constructor: TLConstructor_CRC32_inputStickerSetItem,
		Data2:       m.Data2,
	}
}

func (m *TLInputStickerSetItem) SetDocument(v *InputDocument) { m.Data2.Document = v }
func (m *TLInputStickerSetItem) GetDocument() *InputDocument  { return m.Data2.Document }

func (m *TLInputStickerSetItem) SetEmoji(v string) { m.Data2.Emoji = v }
func (m *TLInputStickerSetItem) GetEmoji() string  { return m.Data2.Emoji }

func (m *TLInputStickerSetItem) SetMaskCoords(v *MaskCoords) { m.Data2.MaskCoords = v }
func (m *TLInputStickerSetItem) GetMaskCoords() *MaskCoords  { return m.Data2.MaskCoords }

func NewTLInputStickerSetItem() *TLInputStickerSetItem {
	return &TLInputStickerSetItem{Data2: &InputStickerSetItem_Data{}}
}

func (m *TLInputStickerSetItem) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetItem))

	// flags
	var flags uint32 = 0
	if m.GetMaskCoords() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetDocument().Encode())
	x.String(m.GetEmoji())
	if m.GetMaskCoords() != nil {
		x.Bytes(m.GetMaskCoords().Encode())
	}

	return x.buf
}

func (m *TLInputStickerSetItem) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputStickerSetItem))

	// flags
	var flags uint32 = 0
	if m.GetMaskCoords() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetDocument().EncodeToLayer(layer))
	x.String(m.GetEmoji())
	if m.GetMaskCoords() != nil {
		x.Bytes(m.GetMaskCoords().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputStickerSetItem) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputDocument{}
	m2.Decode(dbuf)
	m.SetDocument(m2)
	m.SetEmoji(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m4 := &MaskCoords{}
		m4.Decode(dbuf)
		m.SetMaskCoords(m4)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// UserStatus <--
//  + TL_UserStatusEmpty
//  + TL_UserStatusOnline
//  + TL_UserStatusOffline
//  + TL_UserStatusRecently
//  + TL_UserStatusLastWeek
//  + TL_UserStatusLastMonth
//

func (m *UserStatus) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_userStatusEmpty:
		t := m.To_UserStatusEmpty()
		return t.Encode()
	case TLConstructor_CRC32_userStatusOnline:
		t := m.To_UserStatusOnline()
		return t.Encode()
	case TLConstructor_CRC32_userStatusOffline:
		t := m.To_UserStatusOffline()
		return t.Encode()
	case TLConstructor_CRC32_userStatusRecently:
		t := m.To_UserStatusRecently()
		return t.Encode()
	case TLConstructor_CRC32_userStatusLastWeek:
		t := m.To_UserStatusLastWeek()
		return t.Encode()
	case TLConstructor_CRC32_userStatusLastMonth:
		t := m.To_UserStatusLastMonth()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *UserStatus) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_userStatusEmpty:
		t := m.To_UserStatusEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_userStatusOnline:
		t := m.To_UserStatusOnline()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_userStatusOffline:
		t := m.To_UserStatusOffline()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_userStatusRecently:
		t := m.To_UserStatusRecently()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_userStatusLastWeek:
		t := m.To_UserStatusLastWeek()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_userStatusLastMonth:
		t := m.To_UserStatusLastMonth()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *UserStatus) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_userStatusEmpty:
		m2 := &TLUserStatusEmpty{Data2: &UserStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_userStatusOnline:
		m2 := &TLUserStatusOnline{Data2: &UserStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_userStatusOffline:
		m2 := &TLUserStatusOffline{Data2: &UserStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_userStatusRecently:
		m2 := &TLUserStatusRecently{Data2: &UserStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_userStatusLastWeek:
		m2 := &TLUserStatusLastWeek{Data2: &UserStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_userStatusLastMonth:
		m2 := &TLUserStatusLastMonth{Data2: &UserStatus_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// userStatusEmpty#9d05049 = UserStatus;
func (m *UserStatus) To_UserStatusEmpty() *TLUserStatusEmpty {
	return &TLUserStatusEmpty{
		Data2: m.Data2,
	}
}

// userStatusOnline#edb93949 expires:int = UserStatus;
func (m *UserStatus) To_UserStatusOnline() *TLUserStatusOnline {
	return &TLUserStatusOnline{
		Data2: m.Data2,
	}
}

// userStatusOffline#8c703f was_online:int = UserStatus;
func (m *UserStatus) To_UserStatusOffline() *TLUserStatusOffline {
	return &TLUserStatusOffline{
		Data2: m.Data2,
	}
}

// userStatusRecently#e26f42f1 = UserStatus;
func (m *UserStatus) To_UserStatusRecently() *TLUserStatusRecently {
	return &TLUserStatusRecently{
		Data2: m.Data2,
	}
}

// userStatusLastWeek#7bf09fc = UserStatus;
func (m *UserStatus) To_UserStatusLastWeek() *TLUserStatusLastWeek {
	return &TLUserStatusLastWeek{
		Data2: m.Data2,
	}
}

// userStatusLastMonth#77ebc742 = UserStatus;
func (m *UserStatus) To_UserStatusLastMonth() *TLUserStatusLastMonth {
	return &TLUserStatusLastMonth{
		Data2: m.Data2,
	}
}

// userStatusEmpty#9d05049 = UserStatus;
func (m *TLUserStatusEmpty) To_UserStatus() *UserStatus {
	return &UserStatus{
		Constructor: TLConstructor_CRC32_userStatusEmpty,
		Data2:       m.Data2,
	}
}

func NewTLUserStatusEmpty() *TLUserStatusEmpty {
	return &TLUserStatusEmpty{Data2: &UserStatus_Data{}}
}

func (m *TLUserStatusEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusEmpty))

	return x.buf
}

func (m *TLUserStatusEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusEmpty))

	return x.buf
}

func (m *TLUserStatusEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// userStatusOnline#edb93949 expires:int = UserStatus;
func (m *TLUserStatusOnline) To_UserStatus() *UserStatus {
	return &UserStatus{
		Constructor: TLConstructor_CRC32_userStatusOnline,
		Data2:       m.Data2,
	}
}

func (m *TLUserStatusOnline) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLUserStatusOnline) GetExpires() int32  { return m.Data2.Expires }

func NewTLUserStatusOnline() *TLUserStatusOnline {
	return &TLUserStatusOnline{Data2: &UserStatus_Data{}}
}

func (m *TLUserStatusOnline) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusOnline))

	x.Int(m.GetExpires())

	return x.buf
}

func (m *TLUserStatusOnline) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusOnline))

	x.Int(m.GetExpires())

	return x.buf
}

func (m *TLUserStatusOnline) Decode(dbuf *DecodeBuf) error {
	m.SetExpires(dbuf.Int())

	return dbuf.err
}

// userStatusOffline#8c703f was_online:int = UserStatus;
func (m *TLUserStatusOffline) To_UserStatus() *UserStatus {
	return &UserStatus{
		Constructor: TLConstructor_CRC32_userStatusOffline,
		Data2:       m.Data2,
	}
}

func (m *TLUserStatusOffline) SetWasOnline(v int32) { m.Data2.WasOnline = v }
func (m *TLUserStatusOffline) GetWasOnline() int32  { return m.Data2.WasOnline }

func NewTLUserStatusOffline() *TLUserStatusOffline {
	return &TLUserStatusOffline{Data2: &UserStatus_Data{}}
}

func (m *TLUserStatusOffline) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusOffline))

	x.Int(m.GetWasOnline())

	return x.buf
}

func (m *TLUserStatusOffline) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusOffline))

	x.Int(m.GetWasOnline())

	return x.buf
}

func (m *TLUserStatusOffline) Decode(dbuf *DecodeBuf) error {
	m.SetWasOnline(dbuf.Int())

	return dbuf.err
}

// userStatusRecently#e26f42f1 = UserStatus;
func (m *TLUserStatusRecently) To_UserStatus() *UserStatus {
	return &UserStatus{
		Constructor: TLConstructor_CRC32_userStatusRecently,
		Data2:       m.Data2,
	}
}

func NewTLUserStatusRecently() *TLUserStatusRecently {
	return &TLUserStatusRecently{Data2: &UserStatus_Data{}}
}

func (m *TLUserStatusRecently) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusRecently))

	return x.buf
}

func (m *TLUserStatusRecently) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusRecently))

	return x.buf
}

func (m *TLUserStatusRecently) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// userStatusLastWeek#7bf09fc = UserStatus;
func (m *TLUserStatusLastWeek) To_UserStatus() *UserStatus {
	return &UserStatus{
		Constructor: TLConstructor_CRC32_userStatusLastWeek,
		Data2:       m.Data2,
	}
}

func NewTLUserStatusLastWeek() *TLUserStatusLastWeek {
	return &TLUserStatusLastWeek{Data2: &UserStatus_Data{}}
}

func (m *TLUserStatusLastWeek) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusLastWeek))

	return x.buf
}

func (m *TLUserStatusLastWeek) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusLastWeek))

	return x.buf
}

func (m *TLUserStatusLastWeek) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// userStatusLastMonth#77ebc742 = UserStatus;
func (m *TLUserStatusLastMonth) To_UserStatus() *UserStatus {
	return &UserStatus{
		Constructor: TLConstructor_CRC32_userStatusLastMonth,
		Data2:       m.Data2,
	}
}

func NewTLUserStatusLastMonth() *TLUserStatusLastMonth {
	return &TLUserStatusLastMonth{Data2: &UserStatus_Data{}}
}

func (m *TLUserStatusLastMonth) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusLastMonth))

	return x.buf
}

func (m *TLUserStatusLastMonth) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_userStatusLastMonth))

	return x.buf
}

func (m *TLUserStatusLastMonth) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChatFull <--
//  + TL_ChatFull
//  + TL_ChannelFull
//

func (m *ChatFull) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatFull:
		t := m.To_ChatFull()
		return t.Encode()
	case TLConstructor_CRC32_channelFull:
		t := m.To_ChannelFull()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatFull) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatFull:
		t := m.To_ChatFull()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelFull:
		t := m.To_ChannelFull()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatFull) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatFull:
		m2 := &TLChatFull{Data2: &ChatFull_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelFull:
		m2 := &TLChannelFull{Data2: &ChatFull_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull;
func (m *ChatFull) To_ChatFull() *TLChatFull {
	return &TLChatFull{
		Data2: m.Data2,
	}
}

// channelFull#76af5481 flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true id:int about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?int migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int = ChatFull;
func (m *ChatFull) To_ChannelFull() *TLChannelFull {
	return &TLChannelFull{
		Data2: m.Data2,
	}
}

// chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull;
func (m *TLChatFull) To_ChatFull() *ChatFull {
	return &ChatFull{
		Constructor: TLConstructor_CRC32_chatFull,
		Data2:       m.Data2,
	}
}

func (m *TLChatFull) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatFull) GetId() int32  { return m.Data2.Id }

func (m *TLChatFull) SetParticipants(v *ChatParticipants) { m.Data2.Participants = v }
func (m *TLChatFull) GetParticipants() *ChatParticipants  { return m.Data2.Participants }

func (m *TLChatFull) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChatFull) GetChatPhoto() *Photo  { return m.Data2.ChatPhoto }

func (m *TLChatFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChatFull) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLChatFull) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChatFull) GetExportedInvite() *ExportedChatInvite  { return m.Data2.ExportedInvite }

func (m *TLChatFull) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChatFull) GetBotInfo() []*BotInfo  { return m.Data2.BotInfo }

func NewTLChatFull() *TLChatFull {
	return &TLChatFull{Data2: &ChatFull_Data{}}
}

func (m *TLChatFull) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatFull))

	x.Int(m.GetId())
	x.Bytes(m.GetParticipants().Encode())
	x.Bytes(m.GetChatPhoto().Encode())
	x.Bytes(m.GetNotifySettings().Encode())
	x.Bytes(m.GetExportedInvite().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBotInfo())))
	for _, v := range m.GetBotInfo() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChatFull) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatFull))

	x.Int(m.GetId())
	x.Bytes(m.GetParticipants().EncodeToLayer(layer))
	x.Bytes(m.GetChatPhoto().EncodeToLayer(layer))
	x.Bytes(m.GetNotifySettings().EncodeToLayer(layer))
	x.Bytes(m.GetExportedInvite().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBotInfo())))
	for _, v := range m.GetBotInfo() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChatFull) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m2 := &ChatParticipants{}
	m2.Decode(dbuf)
	m.SetParticipants(m2)
	m3 := &Photo{}
	m3.Decode(dbuf)
	m.SetChatPhoto(m3)
	m4 := &PeerNotifySettings{}
	m4.Decode(dbuf)
	m.SetNotifySettings(m4)
	m5 := &ExportedChatInvite{}
	m5.Decode(dbuf)
	m.SetExportedInvite(m5)
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*BotInfo, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &BotInfo{}
		v6[i].Decode(dbuf)
	}
	m.SetBotInfo(v6)

	return dbuf.err
}

// channelFull#76af5481 flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true id:int about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?int migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int = ChatFull;
func (m *TLChannelFull) To_ChatFull() *ChatFull {
	return &ChatFull{
		Constructor: TLConstructor_CRC32_channelFull,
		Data2:       m.Data2,
	}
}

func (m *TLChannelFull) SetCanViewParticipants(v bool) { m.Data2.CanViewParticipants = v }
func (m *TLChannelFull) GetCanViewParticipants() bool  { return m.Data2.CanViewParticipants }

func (m *TLChannelFull) SetCanSetUsername(v bool) { m.Data2.CanSetUsername = v }
func (m *TLChannelFull) GetCanSetUsername() bool  { return m.Data2.CanSetUsername }

func (m *TLChannelFull) SetCanSetStickers(v bool) { m.Data2.CanSetStickers = v }
func (m *TLChannelFull) GetCanSetStickers() bool  { return m.Data2.CanSetStickers }

func (m *TLChannelFull) SetHiddenPrehistory(v bool) { m.Data2.HiddenPrehistory = v }
func (m *TLChannelFull) GetHiddenPrehistory() bool  { return m.Data2.HiddenPrehistory }

func (m *TLChannelFull) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannelFull) GetId() int32  { return m.Data2.Id }

func (m *TLChannelFull) SetAbout(v string) { m.Data2.About = v }
func (m *TLChannelFull) GetAbout() string  { return m.Data2.About }

func (m *TLChannelFull) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChannelFull) GetParticipantsCount() int32  { return m.Data2.ParticipantsCount }

func (m *TLChannelFull) SetAdminsCount(v int32) { m.Data2.AdminsCount = v }
func (m *TLChannelFull) GetAdminsCount() int32  { return m.Data2.AdminsCount }

func (m *TLChannelFull) SetKickedCount(v int32) { m.Data2.KickedCount = v }
func (m *TLChannelFull) GetKickedCount() int32  { return m.Data2.KickedCount }

func (m *TLChannelFull) SetBannedCount(v int32) { m.Data2.BannedCount = v }
func (m *TLChannelFull) GetBannedCount() int32  { return m.Data2.BannedCount }

func (m *TLChannelFull) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLChannelFull) GetReadInboxMaxId() int32  { return m.Data2.ReadInboxMaxId }

func (m *TLChannelFull) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLChannelFull) GetReadOutboxMaxId() int32  { return m.Data2.ReadOutboxMaxId }

func (m *TLChannelFull) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLChannelFull) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLChannelFull) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChannelFull) GetChatPhoto() *Photo  { return m.Data2.ChatPhoto }

func (m *TLChannelFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChannelFull) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLChannelFull) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChannelFull) GetExportedInvite() *ExportedChatInvite  { return m.Data2.ExportedInvite }

func (m *TLChannelFull) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChannelFull) GetBotInfo() []*BotInfo  { return m.Data2.BotInfo }

func (m *TLChannelFull) SetMigratedFromChatId(v int32) { m.Data2.MigratedFromChatId = v }
func (m *TLChannelFull) GetMigratedFromChatId() int32  { return m.Data2.MigratedFromChatId }

func (m *TLChannelFull) SetMigratedFromMaxId(v int32) { m.Data2.MigratedFromMaxId = v }
func (m *TLChannelFull) GetMigratedFromMaxId() int32  { return m.Data2.MigratedFromMaxId }

func (m *TLChannelFull) SetPinnedMsgId(v int32) { m.Data2.PinnedMsgId = v }
func (m *TLChannelFull) GetPinnedMsgId() int32  { return m.Data2.PinnedMsgId }

func (m *TLChannelFull) SetStickerset(v *StickerSet) { m.Data2.Stickerset = v }
func (m *TLChannelFull) GetStickerset() *StickerSet  { return m.Data2.Stickerset }

func (m *TLChannelFull) SetAvailableMinId(v int32) { m.Data2.AvailableMinId = v }
func (m *TLChannelFull) GetAvailableMinId() int32  { return m.Data2.AvailableMinId }

func NewTLChannelFull() *TLChannelFull {
	return &TLChannelFull{Data2: &ChatFull_Data{}}
}

func (m *TLChannelFull) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelFull))

	// flags
	var flags uint32 = 0
	if m.GetCanViewParticipants() == true {
		flags |= 1 << 3
	}
	if m.GetCanSetUsername() == true {
		flags |= 1 << 6
	}
	if m.GetCanSetStickers() == true {
		flags |= 1 << 7
	}
	if m.GetHiddenPrehistory() == true {
		flags |= 1 << 10
	}
	if m.GetParticipantsCount() != 0 {
		flags |= 1 << 0
	}
	if m.GetAdminsCount() != 0 {
		flags |= 1 << 1
	}
	if m.GetKickedCount() != 0 {
		flags |= 1 << 2
	}
	if m.GetBannedCount() != 0 {
		flags |= 1 << 2
	}
	if m.GetMigratedFromChatId() != 0 {
		flags |= 1 << 4
	}
	if m.GetMigratedFromMaxId() != 0 {
		flags |= 1 << 4
	}
	if m.GetPinnedMsgId() != 0 {
		flags |= 1 << 5
	}
	if m.GetStickerset() != nil {
		flags |= 1 << 8
	}
	if m.GetAvailableMinId() != 0 {
		flags |= 1 << 9
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetAbout())
	if m.GetParticipantsCount() != 0 {
		x.Int(m.GetParticipantsCount())
	}
	if m.GetAdminsCount() != 0 {
		x.Int(m.GetAdminsCount())
	}
	if m.GetKickedCount() != 0 {
		x.Int(m.GetKickedCount())
	}
	if m.GetBannedCount() != 0 {
		x.Int(m.GetBannedCount())
	}
	x.Int(m.GetReadInboxMaxId())
	x.Int(m.GetReadOutboxMaxId())
	x.Int(m.GetUnreadCount())
	x.Bytes(m.GetChatPhoto().Encode())
	x.Bytes(m.GetNotifySettings().Encode())
	x.Bytes(m.GetExportedInvite().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBotInfo())))
	for _, v := range m.GetBotInfo() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	if m.GetMigratedFromChatId() != 0 {
		x.Int(m.GetMigratedFromChatId())
	}
	if m.GetMigratedFromMaxId() != 0 {
		x.Int(m.GetMigratedFromMaxId())
	}
	if m.GetPinnedMsgId() != 0 {
		x.Int(m.GetPinnedMsgId())
	}
	if m.GetStickerset() != nil {
		x.Bytes(m.GetStickerset().Encode())
	}
	if m.GetAvailableMinId() != 0 {
		x.Int(m.GetAvailableMinId())
	}

	return x.buf
}

func (m *TLChannelFull) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelFull))

	// flags
	var flags uint32 = 0
	if m.GetCanViewParticipants() == true {
		flags |= 1 << 3
	}
	if m.GetCanSetUsername() == true {
		flags |= 1 << 6
	}
	if m.GetCanSetStickers() == true {
		flags |= 1 << 7
	}
	if m.GetHiddenPrehistory() == true {
		flags |= 1 << 10
	}
	if m.GetParticipantsCount() != 0 {
		flags |= 1 << 0
	}
	if m.GetAdminsCount() != 0 {
		flags |= 1 << 1
	}
	if m.GetKickedCount() != 0 {
		flags |= 1 << 2
	}
	if m.GetBannedCount() != 0 {
		flags |= 1 << 2
	}
	if m.GetMigratedFromChatId() != 0 {
		flags |= 1 << 4
	}
	if m.GetMigratedFromMaxId() != 0 {
		flags |= 1 << 4
	}
	if m.GetPinnedMsgId() != 0 {
		flags |= 1 << 5
	}
	if m.GetStickerset() != nil {
		flags |= 1 << 8
	}
	if m.GetAvailableMinId() != 0 {
		flags |= 1 << 9
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetAbout())
	if m.GetParticipantsCount() != 0 {
		x.Int(m.GetParticipantsCount())
	}
	if m.GetAdminsCount() != 0 {
		x.Int(m.GetAdminsCount())
	}
	if m.GetKickedCount() != 0 {
		x.Int(m.GetKickedCount())
	}
	if m.GetBannedCount() != 0 {
		x.Int(m.GetBannedCount())
	}
	x.Int(m.GetReadInboxMaxId())
	x.Int(m.GetReadOutboxMaxId())
	x.Int(m.GetUnreadCount())
	x.Bytes(m.GetChatPhoto().EncodeToLayer(layer))
	x.Bytes(m.GetNotifySettings().EncodeToLayer(layer))
	x.Bytes(m.GetExportedInvite().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBotInfo())))
	for _, v := range m.GetBotInfo() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	if m.GetMigratedFromChatId() != 0 {
		x.Int(m.GetMigratedFromChatId())
	}
	if m.GetMigratedFromMaxId() != 0 {
		x.Int(m.GetMigratedFromMaxId())
	}
	if m.GetPinnedMsgId() != 0 {
		x.Int(m.GetPinnedMsgId())
	}
	if m.GetStickerset() != nil {
		x.Bytes(m.GetStickerset().EncodeToLayer(layer))
	}
	if m.GetAvailableMinId() != 0 {
		x.Int(m.GetAvailableMinId())
	}

	return x.buf
}

func (m *TLChannelFull) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 3)) != 0 {
		m.SetCanViewParticipants(true)
	}
	if (flags & (1 << 6)) != 0 {
		m.SetCanSetUsername(true)
	}
	if (flags & (1 << 7)) != 0 {
		m.SetCanSetStickers(true)
	}
	if (flags & (1 << 10)) != 0 {
		m.SetHiddenPrehistory(true)
	}
	m.SetId(dbuf.Int())
	m.SetAbout(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m.SetParticipantsCount(dbuf.Int())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetAdminsCount(dbuf.Int())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetKickedCount(dbuf.Int())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetBannedCount(dbuf.Int())
	}
	m.SetReadInboxMaxId(dbuf.Int())
	m.SetReadOutboxMaxId(dbuf.Int())
	m.SetUnreadCount(dbuf.Int())
	m15 := &Photo{}
	m15.Decode(dbuf)
	m.SetChatPhoto(m15)
	m16 := &PeerNotifySettings{}
	m16.Decode(dbuf)
	m.SetNotifySettings(m16)
	m17 := &ExportedChatInvite{}
	m17.Decode(dbuf)
	m.SetExportedInvite(m17)
	c18 := dbuf.Int()
	if c18 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 18, c18)
		return dbuf.err
	}
	l18 := dbuf.Int()
	v18 := make([]*BotInfo, l18)
	for i := int32(0); i < l18; i++ {
		v18[i] = &BotInfo{}
		v18[i].Decode(dbuf)
	}
	m.SetBotInfo(v18)

	if (flags & (1 << 4)) != 0 {
		m.SetMigratedFromChatId(dbuf.Int())
	}
	if (flags & (1 << 4)) != 0 {
		m.SetMigratedFromMaxId(dbuf.Int())
	}
	if (flags & (1 << 5)) != 0 {
		m.SetPinnedMsgId(dbuf.Int())
	}
	if (flags & (1 << 8)) != 0 {
		m22 := &StickerSet{}
		m22.Decode(dbuf)
		m.SetStickerset(m22)
	}
	if (flags & (1 << 9)) != 0 {
		m.SetAvailableMinId(dbuf.Int())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PrivacyKey <--
//  + TL_PrivacyKeyStatusTimestamp
//  + TL_PrivacyKeyChatInvite
//  + TL_PrivacyKeyPhoneCall
//

func (m *PrivacyKey) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_privacyKeyStatusTimestamp:
		t := m.To_PrivacyKeyStatusTimestamp()
		return t.Encode()
	case TLConstructor_CRC32_privacyKeyChatInvite:
		t := m.To_PrivacyKeyChatInvite()
		return t.Encode()
	case TLConstructor_CRC32_privacyKeyPhoneCall:
		t := m.To_PrivacyKeyPhoneCall()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PrivacyKey) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_privacyKeyStatusTimestamp:
		t := m.To_PrivacyKeyStatusTimestamp()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyKeyChatInvite:
		t := m.To_PrivacyKeyChatInvite()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_privacyKeyPhoneCall:
		t := m.To_PrivacyKeyPhoneCall()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PrivacyKey) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_privacyKeyStatusTimestamp:
		m2 := &TLPrivacyKeyStatusTimestamp{Data2: &PrivacyKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyKeyChatInvite:
		m2 := &TLPrivacyKeyChatInvite{Data2: &PrivacyKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_privacyKeyPhoneCall:
		m2 := &TLPrivacyKeyPhoneCall{Data2: &PrivacyKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// privacyKeyStatusTimestamp#bc2eab30 = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyStatusTimestamp() *TLPrivacyKeyStatusTimestamp {
	return &TLPrivacyKeyStatusTimestamp{
		Data2: m.Data2,
	}
}

// privacyKeyChatInvite#500e6dfa = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyChatInvite() *TLPrivacyKeyChatInvite {
	return &TLPrivacyKeyChatInvite{
		Data2: m.Data2,
	}
}

// privacyKeyPhoneCall#3d662b7b = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyPhoneCall() *TLPrivacyKeyPhoneCall {
	return &TLPrivacyKeyPhoneCall{
		Data2: m.Data2,
	}
}

// privacyKeyStatusTimestamp#bc2eab30 = PrivacyKey;
func (m *TLPrivacyKeyStatusTimestamp) To_PrivacyKey() *PrivacyKey {
	return &PrivacyKey{
		Constructor: TLConstructor_CRC32_privacyKeyStatusTimestamp,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyKeyStatusTimestamp() *TLPrivacyKeyStatusTimestamp {
	return &TLPrivacyKeyStatusTimestamp{Data2: &PrivacyKey_Data{}}
}

func (m *TLPrivacyKeyStatusTimestamp) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyKeyStatusTimestamp))

	return x.buf
}

func (m *TLPrivacyKeyStatusTimestamp) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyKeyStatusTimestamp))

	return x.buf
}

func (m *TLPrivacyKeyStatusTimestamp) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// privacyKeyChatInvite#500e6dfa = PrivacyKey;
func (m *TLPrivacyKeyChatInvite) To_PrivacyKey() *PrivacyKey {
	return &PrivacyKey{
		Constructor: TLConstructor_CRC32_privacyKeyChatInvite,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyKeyChatInvite() *TLPrivacyKeyChatInvite {
	return &TLPrivacyKeyChatInvite{Data2: &PrivacyKey_Data{}}
}

func (m *TLPrivacyKeyChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyKeyChatInvite))

	return x.buf
}

func (m *TLPrivacyKeyChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyKeyChatInvite))

	return x.buf
}

func (m *TLPrivacyKeyChatInvite) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// privacyKeyPhoneCall#3d662b7b = PrivacyKey;
func (m *TLPrivacyKeyPhoneCall) To_PrivacyKey() *PrivacyKey {
	return &PrivacyKey{
		Constructor: TLConstructor_CRC32_privacyKeyPhoneCall,
		Data2:       m.Data2,
	}
}

func NewTLPrivacyKeyPhoneCall() *TLPrivacyKeyPhoneCall {
	return &TLPrivacyKeyPhoneCall{Data2: &PrivacyKey_Data{}}
}

func (m *TLPrivacyKeyPhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyKeyPhoneCall))

	return x.buf
}

func (m *TLPrivacyKeyPhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_privacyKeyPhoneCall))

	return x.buf
}

func (m *TLPrivacyKeyPhoneCall) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// BotInfo <--
//  + TL_BotInfo
//

func (m *BotInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_botInfo:
		t := m.To_BotInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_botInfo:
		t := m.To_BotInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_botInfo:
		m2 := &TLBotInfo{Data2: &BotInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo;
func (m *BotInfo) To_BotInfo() *TLBotInfo {
	return &TLBotInfo{
		Data2: m.Data2,
	}
}

// botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo;
func (m *TLBotInfo) To_BotInfo() *BotInfo {
	return &BotInfo{
		Constructor: TLConstructor_CRC32_botInfo,
		Data2:       m.Data2,
	}
}

func (m *TLBotInfo) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLBotInfo) GetUserId() int32  { return m.Data2.UserId }

func (m *TLBotInfo) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInfo) GetDescription() string  { return m.Data2.Description }

func (m *TLBotInfo) SetCommands(v []*BotCommand) { m.Data2.Commands = v }
func (m *TLBotInfo) GetCommands() []*BotCommand  { return m.Data2.Commands }

func NewTLBotInfo() *TLBotInfo {
	return &TLBotInfo{Data2: &BotInfo_Data{}}
}

func (m *TLBotInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInfo))

	x.Int(m.GetUserId())
	x.String(m.GetDescription())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetCommands())))
	for _, v := range m.GetCommands() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLBotInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInfo))

	x.Int(m.GetUserId())
	x.String(m.GetDescription())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetCommands())))
	for _, v := range m.GetCommands() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLBotInfo) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())
	m.SetDescription(dbuf.String())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*BotCommand, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &BotCommand{}
		v3[i].Decode(dbuf)
	}
	m.SetCommands(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Contacts <--
//  + TL_ContactsContactsNotModified
//  + TL_ContactsContacts
//

func (m *Contacts_Contacts) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_contactsNotModified:
		t := m.To_ContactsContactsNotModified()
		return t.Encode()
	case TLConstructor_CRC32_contacts_contacts:
		t := m.To_ContactsContacts()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Contacts) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_contactsNotModified:
		t := m.To_ContactsContactsNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contacts_contacts:
		t := m.To_ContactsContacts()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Contacts) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_contactsNotModified:
		m2 := &TLContactsContactsNotModified{Data2: &Contacts_Contacts_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contacts_contacts:
		m2 := &TLContactsContacts{Data2: &Contacts_Contacts_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.contactsNotModified#b74ba9d2 = contacts.Contacts;
func (m *Contacts_Contacts) To_ContactsContactsNotModified() *TLContactsContactsNotModified {
	return &TLContactsContactsNotModified{
		Data2: m.Data2,
	}
}

// contacts.contacts#eae87e42 contacts:Vector<Contact> saved_count:int users:Vector<User> = contacts.Contacts;
func (m *Contacts_Contacts) To_ContactsContacts() *TLContactsContacts {
	return &TLContactsContacts{
		Data2: m.Data2,
	}
}

// contacts.contactsNotModified#b74ba9d2 = contacts.Contacts;
func (m *TLContactsContactsNotModified) To_Contacts_Contacts() *Contacts_Contacts {
	return &Contacts_Contacts{
		Constructor: TLConstructor_CRC32_contacts_contactsNotModified,
		Data2:       m.Data2,
	}
}

func NewTLContactsContactsNotModified() *TLContactsContactsNotModified {
	return &TLContactsContactsNotModified{Data2: &Contacts_Contacts_Data{}}
}

func (m *TLContactsContactsNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_contactsNotModified))

	return x.buf
}

func (m *TLContactsContactsNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_contactsNotModified))

	return x.buf
}

func (m *TLContactsContactsNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// contacts.contacts#eae87e42 contacts:Vector<Contact> saved_count:int users:Vector<User> = contacts.Contacts;
func (m *TLContactsContacts) To_Contacts_Contacts() *Contacts_Contacts {
	return &Contacts_Contacts{
		Constructor: TLConstructor_CRC32_contacts_contacts,
		Data2:       m.Data2,
	}
}

func (m *TLContactsContacts) SetContacts(v []*Contact) { m.Data2.Contacts = v }
func (m *TLContactsContacts) GetContacts() []*Contact  { return m.Data2.Contacts }

func (m *TLContactsContacts) SetSavedCount(v int32) { m.Data2.SavedCount = v }
func (m *TLContactsContacts) GetSavedCount() int32  { return m.Data2.SavedCount }

func (m *TLContactsContacts) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsContacts) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsContacts() *TLContactsContacts {
	return &TLContactsContacts{Data2: &Contacts_Contacts_Data{}}
}

func (m *TLContactsContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_contacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetContacts())))
	for _, v := range m.GetContacts() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetSavedCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_contacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetContacts())))
	for _, v := range m.GetContacts() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetSavedCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsContacts) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Contact, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Contact{}
		v1[i].Decode(dbuf)
	}
	m.SetContacts(v1)

	m.SetSavedCount(dbuf.Int())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Photos_Photo <--
//  + TL_PhotosPhoto
//

func (m *Photos_Photo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_photos_photo:
		t := m.To_PhotosPhoto()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Photos_Photo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_photos_photo:
		t := m.To_PhotosPhoto()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Photos_Photo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_photos_photo:
		m2 := &TLPhotosPhoto{Data2: &Photos_Photo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// photos.photo#20212ca8 photo:Photo users:Vector<User> = photos.Photo;
func (m *Photos_Photo) To_PhotosPhoto() *TLPhotosPhoto {
	return &TLPhotosPhoto{
		Data2: m.Data2,
	}
}

// photos.photo#20212ca8 photo:Photo users:Vector<User> = photos.Photo;
func (m *TLPhotosPhoto) To_Photos_Photo() *Photos_Photo {
	return &Photos_Photo{
		Constructor: TLConstructor_CRC32_photos_photo,
		Data2:       m.Data2,
	}
}

func (m *TLPhotosPhoto) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLPhotosPhoto) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLPhotosPhoto) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhoto) GetUsers() []*User  { return m.Data2.Users }

func NewTLPhotosPhoto() *TLPhotosPhoto {
	return &TLPhotosPhoto{Data2: &Photos_Photo_Data{}}
}

func (m *TLPhotosPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_photo))

	x.Bytes(m.GetPhoto().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhotosPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_photo))

	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhotosPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &Photo{}
	m1.Decode(dbuf)
	m.SetPhoto(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_ProxyData <--
//  + TL_HelpProxyDataEmpty
//  + TL_HelpProxyDataPromo
//

func (m *Help_ProxyData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_proxyDataEmpty:
		t := m.To_HelpProxyDataEmpty()
		return t.Encode()
	case TLConstructor_CRC32_help_proxyDataPromo:
		t := m.To_HelpProxyDataPromo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_ProxyData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_proxyDataEmpty:
		t := m.To_HelpProxyDataEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_help_proxyDataPromo:
		t := m.To_HelpProxyDataPromo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_ProxyData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_proxyDataEmpty:
		m2 := &TLHelpProxyDataEmpty{Data2: &Help_ProxyData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_help_proxyDataPromo:
		m2 := &TLHelpProxyDataPromo{Data2: &Help_ProxyData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.proxyDataEmpty#e09e1fb8 expires:int = help.ProxyData;
func (m *Help_ProxyData) To_HelpProxyDataEmpty() *TLHelpProxyDataEmpty {
	return &TLHelpProxyDataEmpty{
		Data2: m.Data2,
	}
}

// help.proxyDataPromo#2bf7ee23 expires:int peer:Peer chats:Vector<Chat> users:Vector<User> = help.ProxyData;
func (m *Help_ProxyData) To_HelpProxyDataPromo() *TLHelpProxyDataPromo {
	return &TLHelpProxyDataPromo{
		Data2: m.Data2,
	}
}

// help.proxyDataEmpty#e09e1fb8 expires:int = help.ProxyData;
func (m *TLHelpProxyDataEmpty) To_Help_ProxyData() *Help_ProxyData {
	return &Help_ProxyData{
		Constructor: TLConstructor_CRC32_help_proxyDataEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLHelpProxyDataEmpty) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpProxyDataEmpty) GetExpires() int32  { return m.Data2.Expires }

func NewTLHelpProxyDataEmpty() *TLHelpProxyDataEmpty {
	return &TLHelpProxyDataEmpty{Data2: &Help_ProxyData_Data{}}
}

func (m *TLHelpProxyDataEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_proxyDataEmpty))

	x.Int(m.GetExpires())

	return x.buf
}

func (m *TLHelpProxyDataEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_proxyDataEmpty))

	x.Int(m.GetExpires())

	return x.buf
}

func (m *TLHelpProxyDataEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetExpires(dbuf.Int())

	return dbuf.err
}

// help.proxyDataPromo#2bf7ee23 expires:int peer:Peer chats:Vector<Chat> users:Vector<User> = help.ProxyData;
func (m *TLHelpProxyDataPromo) To_Help_ProxyData() *Help_ProxyData {
	return &Help_ProxyData{
		Constructor: TLConstructor_CRC32_help_proxyDataPromo,
		Data2:       m.Data2,
	}
}

func (m *TLHelpProxyDataPromo) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpProxyDataPromo) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpProxyDataPromo) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLHelpProxyDataPromo) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLHelpProxyDataPromo) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLHelpProxyDataPromo) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLHelpProxyDataPromo) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLHelpProxyDataPromo) GetUsers() []*User  { return m.Data2.Users }

func NewTLHelpProxyDataPromo() *TLHelpProxyDataPromo {
	return &TLHelpProxyDataPromo{Data2: &Help_ProxyData_Data{}}
}

func (m *TLHelpProxyDataPromo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_proxyDataPromo))

	x.Int(m.GetExpires())
	x.Bytes(m.GetPeer().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLHelpProxyDataPromo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_proxyDataPromo))

	x.Int(m.GetExpires())
	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLHelpProxyDataPromo) Decode(dbuf *DecodeBuf) error {
	m.SetExpires(dbuf.Int())
	m2 := &Peer{}
	m2.Decode(dbuf)
	m.SetPeer(m2)
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*User, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &User{}
		v4[i].Decode(dbuf)
	}
	m.SetUsers(v4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputSecureValue <--
//  + TL_InputSecureValue
//

func (m *InputSecureValue) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputSecureValue:
		t := m.To_InputSecureValue()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputSecureValue) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputSecureValue:
		t := m.To_InputSecureValue()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputSecureValue) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputSecureValue:
		m2 := &TLInputSecureValue{Data2: &InputSecureValue_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputSecureValue#db21d0a7 flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?InputSecureFile reverse_side:flags.2?InputSecureFile selfie:flags.3?InputSecureFile translation:flags.6?Vector<InputSecureFile> files:flags.4?Vector<InputSecureFile> plain_data:flags.5?SecurePlainData = InputSecureValue;
func (m *InputSecureValue) To_InputSecureValue() *TLInputSecureValue {
	return &TLInputSecureValue{
		Data2: m.Data2,
	}
}

// inputSecureValue#db21d0a7 flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?InputSecureFile reverse_side:flags.2?InputSecureFile selfie:flags.3?InputSecureFile translation:flags.6?Vector<InputSecureFile> files:flags.4?Vector<InputSecureFile> plain_data:flags.5?SecurePlainData = InputSecureValue;
func (m *TLInputSecureValue) To_InputSecureValue() *InputSecureValue {
	return &InputSecureValue{
		Constructor: TLConstructor_CRC32_inputSecureValue,
		Data2:       m.Data2,
	}
}

func (m *TLInputSecureValue) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLInputSecureValue) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLInputSecureValue) SetData(v *SecureData) { m.Data2.Data = v }
func (m *TLInputSecureValue) GetData() *SecureData  { return m.Data2.Data }

func (m *TLInputSecureValue) SetFrontSide(v *InputSecureFile) { m.Data2.FrontSide = v }
func (m *TLInputSecureValue) GetFrontSide() *InputSecureFile  { return m.Data2.FrontSide }

func (m *TLInputSecureValue) SetReverseSide(v *InputSecureFile) { m.Data2.ReverseSide = v }
func (m *TLInputSecureValue) GetReverseSide() *InputSecureFile  { return m.Data2.ReverseSide }

func (m *TLInputSecureValue) SetSelfie(v *InputSecureFile) { m.Data2.Selfie = v }
func (m *TLInputSecureValue) GetSelfie() *InputSecureFile  { return m.Data2.Selfie }

func (m *TLInputSecureValue) SetTranslation(v []*InputSecureFile) { m.Data2.Translation = v }
func (m *TLInputSecureValue) GetTranslation() []*InputSecureFile  { return m.Data2.Translation }

func (m *TLInputSecureValue) SetFiles(v []*InputSecureFile) { m.Data2.Files = v }
func (m *TLInputSecureValue) GetFiles() []*InputSecureFile  { return m.Data2.Files }

func (m *TLInputSecureValue) SetPlainData(v *SecurePlainData) { m.Data2.PlainData = v }
func (m *TLInputSecureValue) GetPlainData() *SecurePlainData  { return m.Data2.PlainData }

func NewTLInputSecureValue() *TLInputSecureValue {
	return &TLInputSecureValue{Data2: &InputSecureValue_Data{}}
}

func (m *TLInputSecureValue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureValue))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetFrontSide() != nil {
		flags |= 1 << 1
	}
	if m.GetReverseSide() != nil {
		flags |= 1 << 2
	}
	if m.GetSelfie() != nil {
		flags |= 1 << 3
	}
	if m.GetTranslation() != nil {
		flags |= 1 << 6
	}
	if m.GetFiles() != nil {
		flags |= 1 << 4
	}
	if m.GetPlainData() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.Bytes(m.GetType().Encode())
	if m.GetData() != nil {
		x.Bytes(m.GetData().Encode())
	}
	if m.GetFrontSide() != nil {
		x.Bytes(m.GetFrontSide().Encode())
	}
	if m.GetReverseSide() != nil {
		x.Bytes(m.GetReverseSide().Encode())
	}
	if m.GetSelfie() != nil {
		x.Bytes(m.GetSelfie().Encode())
	}
	if m.GetTranslation() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetTranslation())))
		for _, v := range m.GetTranslation() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetFiles() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetFiles())))
		for _, v := range m.GetFiles() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetPlainData() != nil {
		x.Bytes(m.GetPlainData().Encode())
	}

	return x.buf
}

func (m *TLInputSecureValue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureValue))

	// flags
	var flags uint32 = 0
	if m.GetData() != nil {
		flags |= 1 << 0
	}
	if m.GetFrontSide() != nil {
		flags |= 1 << 1
	}
	if m.GetReverseSide() != nil {
		flags |= 1 << 2
	}
	if m.GetSelfie() != nil {
		flags |= 1 << 3
	}
	if m.GetTranslation() != nil {
		flags |= 1 << 6
	}
	if m.GetFiles() != nil {
		flags |= 1 << 4
	}
	if m.GetPlainData() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.Bytes(m.GetType().EncodeToLayer(layer))
	if m.GetData() != nil {
		x.Bytes(m.GetData().EncodeToLayer(layer))
	}
	if m.GetFrontSide() != nil {
		x.Bytes(m.GetFrontSide().EncodeToLayer(layer))
	}
	if m.GetReverseSide() != nil {
		x.Bytes(m.GetReverseSide().EncodeToLayer(layer))
	}
	if m.GetSelfie() != nil {
		x.Bytes(m.GetSelfie().EncodeToLayer(layer))
	}
	if m.GetTranslation() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetTranslation())))
		for _, v := range m.GetTranslation() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetFiles() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetFiles())))
		for _, v := range m.GetFiles() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetPlainData() != nil {
		x.Bytes(m.GetPlainData().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLInputSecureValue) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &SecureValueType{}
	m2.Decode(dbuf)
	m.SetType(m2)
	if (flags & (1 << 0)) != 0 {
		m3 := &SecureData{}
		m3.Decode(dbuf)
		m.SetData(m3)
	}
	if (flags & (1 << 1)) != 0 {
		m4 := &InputSecureFile{}
		m4.Decode(dbuf)
		m.SetFrontSide(m4)
	}
	if (flags & (1 << 2)) != 0 {
		m5 := &InputSecureFile{}
		m5.Decode(dbuf)
		m.SetReverseSide(m5)
	}
	if (flags & (1 << 3)) != 0 {
		m6 := &InputSecureFile{}
		m6.Decode(dbuf)
		m.SetSelfie(m6)
	}
	if (flags & (1 << 6)) != 0 {
		c7 := dbuf.Int()
		if c7 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
			return dbuf.err
		}
		l7 := dbuf.Int()
		v7 := make([]*InputSecureFile, l7)
		for i := int32(0); i < l7; i++ {
			v7[i] = &InputSecureFile{}
			v7[i].Decode(dbuf)
		}
		m.SetTranslation(v7)

	}
	if (flags & (1 << 4)) != 0 {
		c8 := dbuf.Int()
		if c8 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
			return dbuf.err
		}
		l8 := dbuf.Int()
		v8 := make([]*InputSecureFile, l8)
		for i := int32(0); i < l8; i++ {
			v8[i] = &InputSecureFile{}
			v8[i].Decode(dbuf)
		}
		m.SetFiles(v8)

	}
	if (flags & (1 << 5)) != 0 {
		m9 := &SecurePlainData{}
		m9.Decode(dbuf)
		m.SetPlainData(m9)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_CheckedPhone <--
//  + TL_AuthCheckedPhone
//

func (m *Auth_CheckedPhone) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_checkedPhone:
		t := m.To_AuthCheckedPhone()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_CheckedPhone) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_checkedPhone:
		t := m.To_AuthCheckedPhone()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_CheckedPhone) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_checkedPhone:
		m2 := &TLAuthCheckedPhone{Data2: &Auth_CheckedPhone_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.checkedPhone#811ea28e phone_registered:Bool = auth.CheckedPhone;
func (m *Auth_CheckedPhone) To_AuthCheckedPhone() *TLAuthCheckedPhone {
	return &TLAuthCheckedPhone{
		Data2: m.Data2,
	}
}

// auth.checkedPhone#811ea28e phone_registered:Bool = auth.CheckedPhone;
func (m *TLAuthCheckedPhone) To_Auth_CheckedPhone() *Auth_CheckedPhone {
	return &Auth_CheckedPhone{
		Constructor: TLConstructor_CRC32_auth_checkedPhone,
		Data2:       m.Data2,
	}
}

func (m *TLAuthCheckedPhone) SetPhoneRegistered(v *Bool) { m.Data2.PhoneRegistered = v }
func (m *TLAuthCheckedPhone) GetPhoneRegistered() *Bool  { return m.Data2.PhoneRegistered }

func NewTLAuthCheckedPhone() *TLAuthCheckedPhone {
	return &TLAuthCheckedPhone{Data2: &Auth_CheckedPhone_Data{}}
}

func (m *TLAuthCheckedPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_checkedPhone))

	x.Bytes(m.GetPhoneRegistered().Encode())

	return x.buf
}

func (m *TLAuthCheckedPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_checkedPhone))

	x.Bytes(m.GetPhoneRegistered().EncodeToLayer(layer))

	return x.buf
}

func (m *TLAuthCheckedPhone) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.SetPhoneRegistered(m1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Found <--
//  + TL_ContactsFound
//

func (m *Contacts_Found) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_found:
		t := m.To_ContactsFound()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Found) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_found:
		t := m.To_ContactsFound()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_Found) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_found:
		m2 := &TLContactsFound{Data2: &Contacts_Found_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.found#b3134d9d my_results:Vector<Peer> results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;
func (m *Contacts_Found) To_ContactsFound() *TLContactsFound {
	return &TLContactsFound{
		Data2: m.Data2,
	}
}

// contacts.found#b3134d9d my_results:Vector<Peer> results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;
func (m *TLContactsFound) To_Contacts_Found() *Contacts_Found {
	return &Contacts_Found{
		Constructor: TLConstructor_CRC32_contacts_found,
		Data2:       m.Data2,
	}
}

func (m *TLContactsFound) SetMyResults(v []*Peer) { m.Data2.MyResults = v }
func (m *TLContactsFound) GetMyResults() []*Peer  { return m.Data2.MyResults }

func (m *TLContactsFound) SetResults(v []*Peer) { m.Data2.Results = v }
func (m *TLContactsFound) GetResults() []*Peer  { return m.Data2.Results }

func (m *TLContactsFound) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsFound) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsFound) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsFound) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsFound() *TLContactsFound {
	return &TLContactsFound{Data2: &Contacts_Found_Data{}}
}

func (m *TLContactsFound) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_found))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMyResults())))
	for _, v := range m.GetMyResults() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetResults())))
	for _, v := range m.GetResults() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsFound) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_found))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMyResults())))
	for _, v := range m.GetMyResults() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetResults())))
	for _, v := range m.GetResults() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsFound) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Peer, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Peer{}
		v1[i].Decode(dbuf)
	}
	m.SetMyResults(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Peer, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Peer{}
		v2[i].Decode(dbuf)
	}
	m.SetResults(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Chat, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Chat{}
		v3[i].Decode(dbuf)
	}
	m.SetChats(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*User, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &User{}
		v4[i].Decode(dbuf)
	}
	m.SetUsers(v4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// KeyboardButtonRow <--
//  + TL_KeyboardButtonRow
//

func (m *KeyboardButtonRow) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_keyboardButtonRow:
		t := m.To_KeyboardButtonRow()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *KeyboardButtonRow) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_keyboardButtonRow:
		t := m.To_KeyboardButtonRow()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *KeyboardButtonRow) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_keyboardButtonRow:
		m2 := &TLKeyboardButtonRow{Data2: &KeyboardButtonRow_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// keyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;
func (m *KeyboardButtonRow) To_KeyboardButtonRow() *TLKeyboardButtonRow {
	return &TLKeyboardButtonRow{
		Data2: m.Data2,
	}
}

// keyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;
func (m *TLKeyboardButtonRow) To_KeyboardButtonRow() *KeyboardButtonRow {
	return &KeyboardButtonRow{
		Constructor: TLConstructor_CRC32_keyboardButtonRow,
		Data2:       m.Data2,
	}
}

func (m *TLKeyboardButtonRow) SetButtons(v []*KeyboardButton) { m.Data2.Buttons = v }
func (m *TLKeyboardButtonRow) GetButtons() []*KeyboardButton  { return m.Data2.Buttons }

func NewTLKeyboardButtonRow() *TLKeyboardButtonRow {
	return &TLKeyboardButtonRow{Data2: &KeyboardButtonRow_Data{}}
}

func (m *TLKeyboardButtonRow) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonRow))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetButtons())))
	for _, v := range m.GetButtons() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLKeyboardButtonRow) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_keyboardButtonRow))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetButtons())))
	for _, v := range m.GetButtons() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLKeyboardButtonRow) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*KeyboardButton, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &KeyboardButton{}
		v1[i].Decode(dbuf)
	}
	m.SetButtons(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_StickerSetInstallResult <--
//  + TL_MessagesStickerSetInstallResultSuccess
//  + TL_MessagesStickerSetInstallResultArchive
//

func (m *Messages_StickerSetInstallResult) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_stickerSetInstallResultSuccess:
		t := m.To_MessagesStickerSetInstallResultSuccess()
		return t.Encode()
	case TLConstructor_CRC32_messages_stickerSetInstallResultArchive:
		t := m.To_MessagesStickerSetInstallResultArchive()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_StickerSetInstallResult) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_stickerSetInstallResultSuccess:
		t := m.To_MessagesStickerSetInstallResultSuccess()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_stickerSetInstallResultArchive:
		t := m.To_MessagesStickerSetInstallResultArchive()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_StickerSetInstallResult) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_stickerSetInstallResultSuccess:
		m2 := &TLMessagesStickerSetInstallResultSuccess{Data2: &Messages_StickerSetInstallResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_stickerSetInstallResultArchive:
		m2 := &TLMessagesStickerSetInstallResultArchive{Data2: &Messages_StickerSetInstallResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.stickerSetInstallResultSuccess#38641628 = messages.StickerSetInstallResult;
func (m *Messages_StickerSetInstallResult) To_MessagesStickerSetInstallResultSuccess() *TLMessagesStickerSetInstallResultSuccess {
	return &TLMessagesStickerSetInstallResultSuccess{
		Data2: m.Data2,
	}
}

// messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult;
func (m *Messages_StickerSetInstallResult) To_MessagesStickerSetInstallResultArchive() *TLMessagesStickerSetInstallResultArchive {
	return &TLMessagesStickerSetInstallResultArchive{
		Data2: m.Data2,
	}
}

// messages.stickerSetInstallResultSuccess#38641628 = messages.StickerSetInstallResult;
func (m *TLMessagesStickerSetInstallResultSuccess) To_Messages_StickerSetInstallResult() *Messages_StickerSetInstallResult {
	return &Messages_StickerSetInstallResult{
		Constructor: TLConstructor_CRC32_messages_stickerSetInstallResultSuccess,
		Data2:       m.Data2,
	}
}

func NewTLMessagesStickerSetInstallResultSuccess() *TLMessagesStickerSetInstallResultSuccess {
	return &TLMessagesStickerSetInstallResultSuccess{Data2: &Messages_StickerSetInstallResult_Data{}}
}

func (m *TLMessagesStickerSetInstallResultSuccess) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickerSetInstallResultSuccess))

	return x.buf
}

func (m *TLMessagesStickerSetInstallResultSuccess) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickerSetInstallResultSuccess))

	return x.buf
}

func (m *TLMessagesStickerSetInstallResultSuccess) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult;
func (m *TLMessagesStickerSetInstallResultArchive) To_Messages_StickerSetInstallResult() *Messages_StickerSetInstallResult {
	return &Messages_StickerSetInstallResult{
		Constructor: TLConstructor_CRC32_messages_stickerSetInstallResultArchive,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesStickerSetInstallResultArchive) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesStickerSetInstallResultArchive) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func NewTLMessagesStickerSetInstallResultArchive() *TLMessagesStickerSetInstallResultArchive {
	return &TLMessagesStickerSetInstallResultArchive{Data2: &Messages_StickerSetInstallResult_Data{}}
}

func (m *TLMessagesStickerSetInstallResultArchive) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickerSetInstallResultArchive))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesStickerSetInstallResultArchive) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_stickerSetInstallResultArchive))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesStickerSetInstallResultArchive) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*StickerSetCovered, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &StickerSetCovered{}
		v1[i].Decode(dbuf)
	}
	m.SetSets(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputDialogPeer <--
//  + TL_InputDialogPeer
//

func (m *InputDialogPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputDialogPeer:
		t := m.To_InputDialogPeer()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputDialogPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputDialogPeer:
		t := m.To_InputDialogPeer()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputDialogPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputDialogPeer:
		m2 := &TLInputDialogPeer{Data2: &InputDialogPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputDialogPeer#fcaafeb7 peer:InputPeer = InputDialogPeer;
func (m *InputDialogPeer) To_InputDialogPeer() *TLInputDialogPeer {
	return &TLInputDialogPeer{
		Data2: m.Data2,
	}
}

// inputDialogPeer#fcaafeb7 peer:InputPeer = InputDialogPeer;
func (m *TLInputDialogPeer) To_InputDialogPeer() *InputDialogPeer {
	return &InputDialogPeer{
		Constructor: TLConstructor_CRC32_inputDialogPeer,
		Data2:       m.Data2,
	}
}

func (m *TLInputDialogPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputDialogPeer) GetPeer() *InputPeer  { return m.Data2.Peer }

func NewTLInputDialogPeer() *TLInputDialogPeer {
	return &TLInputDialogPeer{Data2: &InputDialogPeer_Data{}}
}

func (m *TLInputDialogPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDialogPeer))

	x.Bytes(m.GetPeer().Encode())

	return x.buf
}

func (m *TLInputDialogPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDialogPeer))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputDialogPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_SentCode <--
//  + TL_AuthSentCode
//

func (m *Auth_SentCode) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_sentCode:
		t := m.To_AuthSentCode()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_SentCode) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_sentCode:
		t := m.To_AuthSentCode()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_SentCode) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_sentCode:
		m2 := &TLAuthSentCode{Data2: &Auth_SentCode_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.sentCode#38faab5f flags:# phone_registered:flags.0?true type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int terms_of_service:flags.3?help.TermsOfService = auth.SentCode;
func (m *Auth_SentCode) To_AuthSentCode() *TLAuthSentCode {
	return &TLAuthSentCode{
		Data2: m.Data2,
	}
}

// auth.sentCode#38faab5f flags:# phone_registered:flags.0?true type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int terms_of_service:flags.3?help.TermsOfService = auth.SentCode;
func (m *TLAuthSentCode) To_Auth_SentCode() *Auth_SentCode {
	return &Auth_SentCode{
		Constructor: TLConstructor_CRC32_auth_sentCode,
		Data2:       m.Data2,
	}
}

func (m *TLAuthSentCode) SetPhoneRegistered(v bool) { m.Data2.PhoneRegistered = v }
func (m *TLAuthSentCode) GetPhoneRegistered() bool  { return m.Data2.PhoneRegistered }

func (m *TLAuthSentCode) SetType(v *Auth_SentCodeType) { m.Data2.Type = v }
func (m *TLAuthSentCode) GetType() *Auth_SentCodeType  { return m.Data2.Type }

func (m *TLAuthSentCode) SetPhoneCodeHash(v string) { m.Data2.PhoneCodeHash = v }
func (m *TLAuthSentCode) GetPhoneCodeHash() string  { return m.Data2.PhoneCodeHash }

func (m *TLAuthSentCode) SetNextType(v *Auth_CodeType) { m.Data2.NextType = v }
func (m *TLAuthSentCode) GetNextType() *Auth_CodeType  { return m.Data2.NextType }

func (m *TLAuthSentCode) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLAuthSentCode) GetTimeout() int32  { return m.Data2.Timeout }

func (m *TLAuthSentCode) SetTermsOfService(v *Help_TermsOfService) { m.Data2.TermsOfService = v }
func (m *TLAuthSentCode) GetTermsOfService() *Help_TermsOfService  { return m.Data2.TermsOfService }

func NewTLAuthSentCode() *TLAuthSentCode {
	return &TLAuthSentCode{Data2: &Auth_SentCode_Data{}}
}

func (m *TLAuthSentCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCode))

	// flags
	var flags uint32 = 0
	if m.GetPhoneRegistered() == true {
		flags |= 1 << 0
	}
	if m.GetNextType() != nil {
		flags |= 1 << 1
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 2
	}
	if m.GetTermsOfService() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.GetType().Encode())
	x.String(m.GetPhoneCodeHash())
	if m.GetNextType() != nil {
		x.Bytes(m.GetNextType().Encode())
	}
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}
	if m.GetTermsOfService() != nil {
		x.Bytes(m.GetTermsOfService().Encode())
	}

	return x.buf
}

func (m *TLAuthSentCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sentCode))

	// flags
	var flags uint32 = 0
	if m.GetPhoneRegistered() == true {
		flags |= 1 << 0
	}
	if m.GetNextType() != nil {
		flags |= 1 << 1
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 2
	}
	if m.GetTermsOfService() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.String(m.GetPhoneCodeHash())
	if m.GetNextType() != nil {
		x.Bytes(m.GetNextType().EncodeToLayer(layer))
	}
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}
	if m.GetTermsOfService() != nil {
		x.Bytes(m.GetTermsOfService().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAuthSentCode) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetPhoneRegistered(true)
	}
	m3 := &Auth_SentCodeType{}
	m3.Decode(dbuf)
	m.SetType(m3)
	m.SetPhoneCodeHash(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		m5 := &Auth_CodeType{}
		m5.Decode(dbuf)
		m.SetNextType(m5)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTimeout(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m7 := &Help_TermsOfService{}
		m7.Decode(dbuf)
		m.SetTermsOfService(m7)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_Authorizations <--
//  + TL_AccountAuthorizations
//

func (m *Account_Authorizations) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_authorizations:
		t := m.To_AccountAuthorizations()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_Authorizations) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_authorizations:
		t := m.To_AccountAuthorizations()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_Authorizations) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_authorizations:
		m2 := &TLAccountAuthorizations{Data2: &Account_Authorizations_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.authorizations#1250abde authorizations:Vector<Authorization> = account.Authorizations;
func (m *Account_Authorizations) To_AccountAuthorizations() *TLAccountAuthorizations {
	return &TLAccountAuthorizations{
		Data2: m.Data2,
	}
}

// account.authorizations#1250abde authorizations:Vector<Authorization> = account.Authorizations;
func (m *TLAccountAuthorizations) To_Account_Authorizations() *Account_Authorizations {
	return &Account_Authorizations{
		Constructor: TLConstructor_CRC32_account_authorizations,
		Data2:       m.Data2,
	}
}

func (m *TLAccountAuthorizations) SetAuthorizations(v []*Authorization) { m.Data2.Authorizations = v }
func (m *TLAccountAuthorizations) GetAuthorizations() []*Authorization  { return m.Data2.Authorizations }

func NewTLAccountAuthorizations() *TLAccountAuthorizations {
	return &TLAccountAuthorizations{Data2: &Account_Authorizations_Data{}}
}

func (m *TLAccountAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_authorizations))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAuthorizations())))
	for _, v := range m.GetAuthorizations() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccountAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_authorizations))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAuthorizations())))
	for _, v := range m.GetAuthorizations() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccountAuthorizations) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Authorization, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Authorization{}
		v1[i].Decode(dbuf)
	}
	m.SetAuthorizations(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ReceivedNotifyMessage <--
//  + TL_ReceivedNotifyMessage
//

func (m *ReceivedNotifyMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_receivedNotifyMessage:
		t := m.To_ReceivedNotifyMessage()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ReceivedNotifyMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_receivedNotifyMessage:
		t := m.To_ReceivedNotifyMessage()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ReceivedNotifyMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_receivedNotifyMessage:
		m2 := &TLReceivedNotifyMessage{Data2: &ReceivedNotifyMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// receivedNotifyMessage#a384b779 id:int flags:int = ReceivedNotifyMessage;
func (m *ReceivedNotifyMessage) To_ReceivedNotifyMessage() *TLReceivedNotifyMessage {
	return &TLReceivedNotifyMessage{
		Data2: m.Data2,
	}
}

// receivedNotifyMessage#a384b779 id:int flags:int = ReceivedNotifyMessage;
func (m *TLReceivedNotifyMessage) To_ReceivedNotifyMessage() *ReceivedNotifyMessage {
	return &ReceivedNotifyMessage{
		Constructor: TLConstructor_CRC32_receivedNotifyMessage,
		Data2:       m.Data2,
	}
}

func (m *TLReceivedNotifyMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLReceivedNotifyMessage) GetId() int32  { return m.Data2.Id }

func (m *TLReceivedNotifyMessage) SetFlags(v int32) { m.Data2.Flags = v }
func (m *TLReceivedNotifyMessage) GetFlags() int32  { return m.Data2.Flags }

func NewTLReceivedNotifyMessage() *TLReceivedNotifyMessage {
	return &TLReceivedNotifyMessage{Data2: &ReceivedNotifyMessage_Data{}}
}

func (m *TLReceivedNotifyMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_receivedNotifyMessage))

	x.Int(m.GetId())
	x.Int(m.GetFlags())

	return x.buf
}

func (m *TLReceivedNotifyMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_receivedNotifyMessage))

	x.Int(m.GetId())
	x.Int(m.GetFlags())

	return x.buf
}

func (m *TLReceivedNotifyMessage) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetFlags(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Channels_ChannelParticipant <--
//  + TL_ChannelsChannelParticipant
//

func (m *Channels_ChannelParticipant) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channels_channelParticipant:
		t := m.To_ChannelsChannelParticipant()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Channels_ChannelParticipant) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channels_channelParticipant:
		t := m.To_ChannelsChannelParticipant()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Channels_ChannelParticipant) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channels_channelParticipant:
		m2 := &TLChannelsChannelParticipant{Data2: &Channels_ChannelParticipant_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant;
func (m *Channels_ChannelParticipant) To_ChannelsChannelParticipant() *TLChannelsChannelParticipant {
	return &TLChannelsChannelParticipant{
		Data2: m.Data2,
	}
}

// channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant;
func (m *TLChannelsChannelParticipant) To_Channels_ChannelParticipant() *Channels_ChannelParticipant {
	return &Channels_ChannelParticipant{
		Constructor: TLConstructor_CRC32_channels_channelParticipant,
		Data2:       m.Data2,
	}
}

func (m *TLChannelsChannelParticipant) SetParticipant(v *ChannelParticipant) { m.Data2.Participant = v }
func (m *TLChannelsChannelParticipant) GetParticipant() *ChannelParticipant {
	return m.Data2.Participant
}

func (m *TLChannelsChannelParticipant) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsChannelParticipant) GetUsers() []*User  { return m.Data2.Users }

func NewTLChannelsChannelParticipant() *TLChannelsChannelParticipant {
	return &TLChannelsChannelParticipant{Data2: &Channels_ChannelParticipant_Data{}}
}

func (m *TLChannelsChannelParticipant) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_channelParticipant))

	x.Bytes(m.GetParticipant().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelsChannelParticipant) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_channelParticipant))

	x.Bytes(m.GetParticipant().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelsChannelParticipant) Decode(dbuf *DecodeBuf) error {
	m1 := &ChannelParticipant{}
	m1.Decode(dbuf)
	m.SetParticipant(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputMessage <--
//  + TL_InputMessageID
//  + TL_InputMessageReplyTo
//  + TL_InputMessagePinned
//

func (m *InputMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputMessageID:
		t := m.To_InputMessageID()
		return t.Encode()
	case TLConstructor_CRC32_inputMessageReplyTo:
		t := m.To_InputMessageReplyTo()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagePinned:
		t := m.To_InputMessagePinned()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputMessageID:
		t := m.To_InputMessageID()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessageReplyTo:
		t := m.To_InputMessageReplyTo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagePinned:
		t := m.To_InputMessagePinned()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputMessageID:
		m2 := &TLInputMessageID{Data2: &InputMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessageReplyTo:
		m2 := &TLInputMessageReplyTo{Data2: &InputMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagePinned:
		m2 := &TLInputMessagePinned{Data2: &InputMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputMessageID#a676a322 id:int = InputMessage;
func (m *InputMessage) To_InputMessageID() *TLInputMessageID {
	return &TLInputMessageID{
		Data2: m.Data2,
	}
}

// inputMessageReplyTo#bad88395 id:int = InputMessage;
func (m *InputMessage) To_InputMessageReplyTo() *TLInputMessageReplyTo {
	return &TLInputMessageReplyTo{
		Data2: m.Data2,
	}
}

// inputMessagePinned#86872538 = InputMessage;
func (m *InputMessage) To_InputMessagePinned() *TLInputMessagePinned {
	return &TLInputMessagePinned{
		Data2: m.Data2,
	}
}

// inputMessageID#a676a322 id:int = InputMessage;
func (m *TLInputMessageID) To_InputMessage() *InputMessage {
	return &InputMessage{
		Constructor: TLConstructor_CRC32_inputMessageID,
		Data2:       m.Data2,
	}
}

func (m *TLInputMessageID) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageID) GetId() int32  { return m.Data2.Id }

func NewTLInputMessageID() *TLInputMessageID {
	return &TLInputMessageID{Data2: &InputMessage_Data{}}
}

func (m *TLInputMessageID) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessageID))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLInputMessageID) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessageID))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLInputMessageID) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

// inputMessageReplyTo#bad88395 id:int = InputMessage;
func (m *TLInputMessageReplyTo) To_InputMessage() *InputMessage {
	return &InputMessage{
		Constructor: TLConstructor_CRC32_inputMessageReplyTo,
		Data2:       m.Data2,
	}
}

func (m *TLInputMessageReplyTo) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageReplyTo) GetId() int32  { return m.Data2.Id }

func NewTLInputMessageReplyTo() *TLInputMessageReplyTo {
	return &TLInputMessageReplyTo{Data2: &InputMessage_Data{}}
}

func (m *TLInputMessageReplyTo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessageReplyTo))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLInputMessageReplyTo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessageReplyTo))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLInputMessageReplyTo) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

// inputMessagePinned#86872538 = InputMessage;
func (m *TLInputMessagePinned) To_InputMessage() *InputMessage {
	return &InputMessage{
		Constructor: TLConstructor_CRC32_inputMessagePinned,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagePinned() *TLInputMessagePinned {
	return &TLInputMessagePinned{Data2: &InputMessage_Data{}}
}

func (m *TLInputMessagePinned) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagePinned))

	return x.buf
}

func (m *TLInputMessagePinned) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagePinned))

	return x.buf
}

func (m *TLInputMessagePinned) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PeerSettings <--
//  + TL_PeerSettings
//

func (m *PeerSettings) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_peerSettings:
		t := m.To_PeerSettings()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PeerSettings) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_peerSettings:
		t := m.To_PeerSettings()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PeerSettings) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_peerSettings:
		m2 := &TLPeerSettings{Data2: &PeerSettings_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// peerSettings#818426cd flags:# report_spam:flags.0?true = PeerSettings;
func (m *PeerSettings) To_PeerSettings() *TLPeerSettings {
	return &TLPeerSettings{
		Data2: m.Data2,
	}
}

// peerSettings#818426cd flags:# report_spam:flags.0?true = PeerSettings;
func (m *TLPeerSettings) To_PeerSettings() *PeerSettings {
	return &PeerSettings{
		Constructor: TLConstructor_CRC32_peerSettings,
		Data2:       m.Data2,
	}
}

func (m *TLPeerSettings) SetReportSpam(v bool) { m.Data2.ReportSpam = v }
func (m *TLPeerSettings) GetReportSpam() bool  { return m.Data2.ReportSpam }

func NewTLPeerSettings() *TLPeerSettings {
	return &TLPeerSettings{Data2: &PeerSettings_Data{}}
}

func (m *TLPeerSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerSettings))

	// flags
	var flags uint32 = 0
	if m.GetReportSpam() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLPeerSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerSettings))

	// flags
	var flags uint32 = 0
	if m.GetReportSpam() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLPeerSettings) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetReportSpam(true)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputEncryptedFile <--
//  + TL_InputEncryptedFileEmpty
//  + TL_InputEncryptedFileUploaded
//  + TL_InputEncryptedFile
//  + TL_InputEncryptedFileBigUploaded
//

func (m *InputEncryptedFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputEncryptedFileEmpty:
		t := m.To_InputEncryptedFileEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputEncryptedFileUploaded:
		t := m.To_InputEncryptedFileUploaded()
		return t.Encode()
	case TLConstructor_CRC32_inputEncryptedFile:
		t := m.To_InputEncryptedFile()
		return t.Encode()
	case TLConstructor_CRC32_inputEncryptedFileBigUploaded:
		t := m.To_InputEncryptedFileBigUploaded()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputEncryptedFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputEncryptedFileEmpty:
		t := m.To_InputEncryptedFileEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputEncryptedFileUploaded:
		t := m.To_InputEncryptedFileUploaded()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputEncryptedFile:
		t := m.To_InputEncryptedFile()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputEncryptedFileBigUploaded:
		t := m.To_InputEncryptedFileBigUploaded()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputEncryptedFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputEncryptedFileEmpty:
		m2 := &TLInputEncryptedFileEmpty{Data2: &InputEncryptedFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputEncryptedFileUploaded:
		m2 := &TLInputEncryptedFileUploaded{Data2: &InputEncryptedFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputEncryptedFile:
		m2 := &TLInputEncryptedFile{Data2: &InputEncryptedFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputEncryptedFileBigUploaded:
		m2 := &TLInputEncryptedFileBigUploaded{Data2: &InputEncryptedFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputEncryptedFileEmpty#1837c364 = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFileEmpty() *TLInputEncryptedFileEmpty {
	return &TLInputEncryptedFileEmpty{
		Data2: m.Data2,
	}
}

// inputEncryptedFileUploaded#64bd0306 id:long parts:int md5_checksum:string key_fingerprint:int = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFileUploaded() *TLInputEncryptedFileUploaded {
	return &TLInputEncryptedFileUploaded{
		Data2: m.Data2,
	}
}

// inputEncryptedFile#5a17b5e5 id:long access_hash:long = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFile() *TLInputEncryptedFile {
	return &TLInputEncryptedFile{
		Data2: m.Data2,
	}
}

// inputEncryptedFileBigUploaded#2dc173c8 id:long parts:int key_fingerprint:int = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFileBigUploaded() *TLInputEncryptedFileBigUploaded {
	return &TLInputEncryptedFileBigUploaded{
		Data2: m.Data2,
	}
}

// inputEncryptedFileEmpty#1837c364 = InputEncryptedFile;
func (m *TLInputEncryptedFileEmpty) To_InputEncryptedFile() *InputEncryptedFile {
	return &InputEncryptedFile{
		Constructor: TLConstructor_CRC32_inputEncryptedFileEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputEncryptedFileEmpty() *TLInputEncryptedFileEmpty {
	return &TLInputEncryptedFileEmpty{Data2: &InputEncryptedFile_Data{}}
}

func (m *TLInputEncryptedFileEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileEmpty))

	return x.buf
}

func (m *TLInputEncryptedFileEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileEmpty))

	return x.buf
}

func (m *TLInputEncryptedFileEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputEncryptedFileUploaded#64bd0306 id:long parts:int md5_checksum:string key_fingerprint:int = InputEncryptedFile;
func (m *TLInputEncryptedFileUploaded) To_InputEncryptedFile() *InputEncryptedFile {
	return &InputEncryptedFile{
		Constructor: TLConstructor_CRC32_inputEncryptedFileUploaded,
		Data2:       m.Data2,
	}
}

func (m *TLInputEncryptedFileUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileUploaded) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFileUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputEncryptedFileUploaded) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputEncryptedFileUploaded) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputEncryptedFileUploaded) GetMd5Checksum() string  { return m.Data2.Md5Checksum }

func (m *TLInputEncryptedFileUploaded) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLInputEncryptedFileUploaded) GetKeyFingerprint() int32  { return m.Data2.KeyFingerprint }

func NewTLInputEncryptedFileUploaded() *TLInputEncryptedFileUploaded {
	return &TLInputEncryptedFileUploaded{Data2: &InputEncryptedFile_Data{}}
}

func (m *TLInputEncryptedFileUploaded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileUploaded))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetMd5Checksum())
	x.Int(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLInputEncryptedFileUploaded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileUploaded))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetMd5Checksum())
	x.Int(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLInputEncryptedFileUploaded) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetParts(dbuf.Int())
	m.SetMd5Checksum(dbuf.String())
	m.SetKeyFingerprint(dbuf.Int())

	return dbuf.err
}

// inputEncryptedFile#5a17b5e5 id:long access_hash:long = InputEncryptedFile;
func (m *TLInputEncryptedFile) To_InputEncryptedFile() *InputEncryptedFile {
	return &InputEncryptedFile{
		Constructor: TLConstructor_CRC32_inputEncryptedFile,
		Data2:       m.Data2,
	}
}

func (m *TLInputEncryptedFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputEncryptedFile() *TLInputEncryptedFile {
	return &TLInputEncryptedFile{Data2: &InputEncryptedFile_Data{}}
}

func (m *TLInputEncryptedFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputEncryptedFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputEncryptedFile) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputEncryptedFileBigUploaded#2dc173c8 id:long parts:int key_fingerprint:int = InputEncryptedFile;
func (m *TLInputEncryptedFileBigUploaded) To_InputEncryptedFile() *InputEncryptedFile {
	return &InputEncryptedFile{
		Constructor: TLConstructor_CRC32_inputEncryptedFileBigUploaded,
		Data2:       m.Data2,
	}
}

func (m *TLInputEncryptedFileBigUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileBigUploaded) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFileBigUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputEncryptedFileBigUploaded) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputEncryptedFileBigUploaded) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLInputEncryptedFileBigUploaded) GetKeyFingerprint() int32  { return m.Data2.KeyFingerprint }

func NewTLInputEncryptedFileBigUploaded() *TLInputEncryptedFileBigUploaded {
	return &TLInputEncryptedFileBigUploaded{Data2: &InputEncryptedFile_Data{}}
}

func (m *TLInputEncryptedFileBigUploaded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileBigUploaded))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.Int(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLInputEncryptedFileBigUploaded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedFileBigUploaded))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.Int(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLInputEncryptedFileBigUploaded) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetParts(dbuf.Int())
	m.SetKeyFingerprint(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ArchivedStickers <--
//  + TL_MessagesArchivedStickers
//

func (m *Messages_ArchivedStickers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_archivedStickers:
		t := m.To_MessagesArchivedStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_ArchivedStickers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_archivedStickers:
		t := m.To_MessagesArchivedStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_ArchivedStickers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_archivedStickers:
		m2 := &TLMessagesArchivedStickers{Data2: &Messages_ArchivedStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.archivedStickers#4fcba9c8 count:int sets:Vector<StickerSetCovered> = messages.ArchivedStickers;
func (m *Messages_ArchivedStickers) To_MessagesArchivedStickers() *TLMessagesArchivedStickers {
	return &TLMessagesArchivedStickers{
		Data2: m.Data2,
	}
}

// messages.archivedStickers#4fcba9c8 count:int sets:Vector<StickerSetCovered> = messages.ArchivedStickers;
func (m *TLMessagesArchivedStickers) To_Messages_ArchivedStickers() *Messages_ArchivedStickers {
	return &Messages_ArchivedStickers{
		Constructor: TLConstructor_CRC32_messages_archivedStickers,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesArchivedStickers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesArchivedStickers) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesArchivedStickers) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesArchivedStickers) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func NewTLMessagesArchivedStickers() *TLMessagesArchivedStickers {
	return &TLMessagesArchivedStickers{Data2: &Messages_ArchivedStickers_Data{}}
}

func (m *TLMessagesArchivedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_archivedStickers))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesArchivedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_archivedStickers))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesArchivedStickers) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerSetCovered, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerSetCovered{}
		v2[i].Decode(dbuf)
	}
	m.SetSets(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputSecureFile <--
//  + TL_InputSecureFileUploaded
//  + TL_InputSecureFile
//

func (m *InputSecureFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputSecureFileUploaded:
		t := m.To_InputSecureFileUploaded()
		return t.Encode()
	case TLConstructor_CRC32_inputSecureFile:
		t := m.To_InputSecureFile()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputSecureFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputSecureFileUploaded:
		t := m.To_InputSecureFileUploaded()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputSecureFile:
		t := m.To_InputSecureFile()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputSecureFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputSecureFileUploaded:
		m2 := &TLInputSecureFileUploaded{Data2: &InputSecureFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputSecureFile:
		m2 := &TLInputSecureFile{Data2: &InputSecureFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputSecureFileUploaded#3334b0f0 id:long parts:int md5_checksum:string file_hash:bytes secret:bytes = InputSecureFile;
func (m *InputSecureFile) To_InputSecureFileUploaded() *TLInputSecureFileUploaded {
	return &TLInputSecureFileUploaded{
		Data2: m.Data2,
	}
}

// inputSecureFile#5367e5be id:long access_hash:long = InputSecureFile;
func (m *InputSecureFile) To_InputSecureFile() *TLInputSecureFile {
	return &TLInputSecureFile{
		Data2: m.Data2,
	}
}

// inputSecureFileUploaded#3334b0f0 id:long parts:int md5_checksum:string file_hash:bytes secret:bytes = InputSecureFile;
func (m *TLInputSecureFileUploaded) To_InputSecureFile() *InputSecureFile {
	return &InputSecureFile{
		Constructor: TLConstructor_CRC32_inputSecureFileUploaded,
		Data2:       m.Data2,
	}
}

func (m *TLInputSecureFileUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFileUploaded) GetId() int64  { return m.Data2.Id }

func (m *TLInputSecureFileUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputSecureFileUploaded) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputSecureFileUploaded) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputSecureFileUploaded) GetMd5Checksum() string  { return m.Data2.Md5Checksum }

func (m *TLInputSecureFileUploaded) SetFileHash(v []byte) { m.Data2.FileHash = v }
func (m *TLInputSecureFileUploaded) GetFileHash() []byte  { return m.Data2.FileHash }

func (m *TLInputSecureFileUploaded) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLInputSecureFileUploaded) GetSecret() []byte  { return m.Data2.Secret }

func NewTLInputSecureFileUploaded() *TLInputSecureFileUploaded {
	return &TLInputSecureFileUploaded{Data2: &InputSecureFile_Data{}}
}

func (m *TLInputSecureFileUploaded) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureFileUploaded))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetMd5Checksum())
	x.StringBytes(m.GetFileHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLInputSecureFileUploaded) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureFileUploaded))

	x.Long(m.GetId())
	x.Int(m.GetParts())
	x.String(m.GetMd5Checksum())
	x.StringBytes(m.GetFileHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLInputSecureFileUploaded) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetParts(dbuf.Int())
	m.SetMd5Checksum(dbuf.String())
	m.SetFileHash(dbuf.StringBytes())
	m.SetSecret(dbuf.StringBytes())

	return dbuf.err
}

// inputSecureFile#5367e5be id:long access_hash:long = InputSecureFile;
func (m *TLInputSecureFile) To_InputSecureFile() *InputSecureFile {
	return &InputSecureFile{
		Constructor: TLConstructor_CRC32_inputSecureFile,
		Data2:       m.Data2,
	}
}

func (m *TLInputSecureFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputSecureFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputSecureFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputSecureFile() *TLInputSecureFile {
	return &TLInputSecureFile{Data2: &InputSecureFile_Data{}}
}

func (m *TLInputSecureFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputSecureFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputSecureFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputSecureFile) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// HighScore <--
//  + TL_HighScore
//

func (m *HighScore) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_highScore:
		t := m.To_HighScore()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *HighScore) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_highScore:
		t := m.To_HighScore()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *HighScore) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_highScore:
		m2 := &TLHighScore{Data2: &HighScore_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// highScore#58fffcd0 pos:int user_id:int score:int = HighScore;
func (m *HighScore) To_HighScore() *TLHighScore {
	return &TLHighScore{
		Data2: m.Data2,
	}
}

// highScore#58fffcd0 pos:int user_id:int score:int = HighScore;
func (m *TLHighScore) To_HighScore() *HighScore {
	return &HighScore{
		Constructor: TLConstructor_CRC32_highScore,
		Data2:       m.Data2,
	}
}

func (m *TLHighScore) SetPos(v int32) { m.Data2.Pos = v }
func (m *TLHighScore) GetPos() int32  { return m.Data2.Pos }

func (m *TLHighScore) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLHighScore) GetUserId() int32  { return m.Data2.UserId }

func (m *TLHighScore) SetScore(v int32) { m.Data2.Score = v }
func (m *TLHighScore) GetScore() int32  { return m.Data2.Score }

func NewTLHighScore() *TLHighScore {
	return &TLHighScore{Data2: &HighScore_Data{}}
}

func (m *TLHighScore) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_highScore))

	x.Int(m.GetPos())
	x.Int(m.GetUserId())
	x.Int(m.GetScore())

	return x.buf
}

func (m *TLHighScore) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_highScore))

	x.Int(m.GetPos())
	x.Int(m.GetUserId())
	x.Int(m.GetScore())

	return x.buf
}

func (m *TLHighScore) Decode(dbuf *DecodeBuf) error {
	m.SetPos(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m.SetScore(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_HighScores <--
//  + TL_MessagesHighScores
//

func (m *Messages_HighScores) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_highScores:
		t := m.To_MessagesHighScores()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_HighScores) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_highScores:
		t := m.To_MessagesHighScores()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_HighScores) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_highScores:
		m2 := &TLMessagesHighScores{Data2: &Messages_HighScores_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores;
func (m *Messages_HighScores) To_MessagesHighScores() *TLMessagesHighScores {
	return &TLMessagesHighScores{
		Data2: m.Data2,
	}
}

// messages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores;
func (m *TLMessagesHighScores) To_Messages_HighScores() *Messages_HighScores {
	return &Messages_HighScores{
		Constructor: TLConstructor_CRC32_messages_highScores,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesHighScores) SetScores(v []*HighScore) { m.Data2.Scores = v }
func (m *TLMessagesHighScores) GetScores() []*HighScore  { return m.Data2.Scores }

func (m *TLMessagesHighScores) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesHighScores) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesHighScores() *TLMessagesHighScores {
	return &TLMessagesHighScores{Data2: &Messages_HighScores_Data{}}
}

func (m *TLMessagesHighScores) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_highScores))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetScores())))
	for _, v := range m.GetScores() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesHighScores) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_highScores))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetScores())))
	for _, v := range m.GetScores() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesHighScores) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*HighScore, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &HighScore{}
		v1[i].Decode(dbuf)
	}
	m.SetScores(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*User, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &User{}
		v2[i].Decode(dbuf)
	}
	m.SetUsers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Page <--
//  + TL_PagePart
//  + TL_PageFull
//

func (m *Page) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_pagePart:
		t := m.To_PagePart()
		return t.Encode()
	case TLConstructor_CRC32_pageFull:
		t := m.To_PageFull()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Page) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_pagePart:
		t := m.To_PagePart()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageFull:
		t := m.To_PageFull()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Page) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_pagePart:
		m2 := &TLPagePart{Data2: &Page_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageFull:
		m2 := &TLPageFull{Data2: &Page_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// pagePart#8e3f9ebe blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *Page) To_PagePart() *TLPagePart {
	return &TLPagePart{
		Data2: m.Data2,
	}
}

// pageFull#556ec7aa blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *Page) To_PageFull() *TLPageFull {
	return &TLPageFull{
		Data2: m.Data2,
	}
}

// pagePart#8e3f9ebe blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *TLPagePart) To_Page() *Page {
	return &Page{
		Constructor: TLConstructor_CRC32_pagePart,
		Data2:       m.Data2,
	}
}

func (m *TLPagePart) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPagePart) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPagePart) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPagePart) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPagePart) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLPagePart) GetDocuments() []*Document  { return m.Data2.Documents }

func NewTLPagePart() *TLPagePart {
	return &TLPagePart{Data2: &Page_Data{}}
}

func (m *TLPagePart) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pagePart))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocks())))
	for _, v := range m.GetBlocks() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDocuments())))
	for _, v := range m.GetDocuments() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPagePart) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pagePart))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocks())))
	for _, v := range m.GetBlocks() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDocuments())))
	for _, v := range m.GetDocuments() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPagePart) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*PageBlock, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &PageBlock{}
		v1[i].Decode(dbuf)
	}
	m.SetBlocks(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Photo, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Photo{}
		v2[i].Decode(dbuf)
	}
	m.SetPhotos(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Document, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Document{}
		v3[i].Decode(dbuf)
	}
	m.SetDocuments(v3)

	return dbuf.err
}

// pageFull#556ec7aa blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *TLPageFull) To_Page() *Page {
	return &Page{
		Constructor: TLConstructor_CRC32_pageFull,
		Data2:       m.Data2,
	}
}

func (m *TLPageFull) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageFull) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPageFull) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPageFull) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPageFull) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLPageFull) GetDocuments() []*Document  { return m.Data2.Documents }

func NewTLPageFull() *TLPageFull {
	return &TLPageFull{Data2: &Page_Data{}}
}

func (m *TLPageFull) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageFull))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocks())))
	for _, v := range m.GetBlocks() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDocuments())))
	for _, v := range m.GetDocuments() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPageFull) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageFull))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocks())))
	for _, v := range m.GetBlocks() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPhotos())))
	for _, v := range m.GetPhotos() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetDocuments())))
	for _, v := range m.GetDocuments() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPageFull) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*PageBlock, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &PageBlock{}
		v1[i].Decode(dbuf)
	}
	m.SetBlocks(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Photo, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Photo{}
		v2[i].Decode(dbuf)
	}
	m.SetPhotos(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Document, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Document{}
		v3[i].Decode(dbuf)
	}
	m.SetDocuments(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SchemeParam <--
//  + TL_SchemeParam
//

func (m *SchemeParam) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_schemeParam:
		t := m.To_SchemeParam()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SchemeParam) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_schemeParam:
		t := m.To_SchemeParam()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SchemeParam) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_schemeParam:
		m2 := &TLSchemeParam{Data2: &SchemeParam_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// schemeParam#21b59bef name:string type:string = SchemeParam;
func (m *SchemeParam) To_SchemeParam() *TLSchemeParam {
	return &TLSchemeParam{
		Data2: m.Data2,
	}
}

// schemeParam#21b59bef name:string type:string = SchemeParam;
func (m *TLSchemeParam) To_SchemeParam() *SchemeParam {
	return &SchemeParam{
		Constructor: TLConstructor_CRC32_schemeParam,
		Data2:       m.Data2,
	}
}

func (m *TLSchemeParam) SetName(v string) { m.Data2.Name = v }
func (m *TLSchemeParam) GetName() string  { return m.Data2.Name }

func (m *TLSchemeParam) SetType(v string) { m.Data2.Type = v }
func (m *TLSchemeParam) GetType() string  { return m.Data2.Type }

func NewTLSchemeParam() *TLSchemeParam {
	return &TLSchemeParam{Data2: &SchemeParam_Data{}}
}

func (m *TLSchemeParam) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeParam))

	x.String(m.GetName())
	x.String(m.GetType())

	return x.buf
}

func (m *TLSchemeParam) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeParam))

	x.String(m.GetName())
	x.String(m.GetType())

	return x.buf
}

func (m *TLSchemeParam) Decode(dbuf *DecodeBuf) error {
	m.SetName(dbuf.String())
	m.SetType(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputChatPhoto <--
//  + TL_InputChatPhotoEmpty
//  + TL_InputChatUploadedPhoto
//  + TL_InputChatPhoto
//

func (m *InputChatPhoto) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputChatPhotoEmpty:
		t := m.To_InputChatPhotoEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputChatUploadedPhoto:
		t := m.To_InputChatUploadedPhoto()
		return t.Encode()
	case TLConstructor_CRC32_inputChatPhoto:
		t := m.To_InputChatPhoto()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputChatPhoto) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputChatPhotoEmpty:
		t := m.To_InputChatPhotoEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputChatUploadedPhoto:
		t := m.To_InputChatUploadedPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputChatPhoto:
		t := m.To_InputChatPhoto()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputChatPhoto) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputChatPhotoEmpty:
		m2 := &TLInputChatPhotoEmpty{Data2: &InputChatPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputChatUploadedPhoto:
		m2 := &TLInputChatUploadedPhoto{Data2: &InputChatPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputChatPhoto:
		m2 := &TLInputChatPhoto{Data2: &InputChatPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputChatPhotoEmpty#1ca48f57 = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatPhotoEmpty() *TLInputChatPhotoEmpty {
	return &TLInputChatPhotoEmpty{
		Data2: m.Data2,
	}
}

// inputChatUploadedPhoto#927c55b4 file:InputFile = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatUploadedPhoto() *TLInputChatUploadedPhoto {
	return &TLInputChatUploadedPhoto{
		Data2: m.Data2,
	}
}

// inputChatPhoto#8953ad37 id:InputPhoto = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatPhoto() *TLInputChatPhoto {
	return &TLInputChatPhoto{
		Data2: m.Data2,
	}
}

// inputChatPhotoEmpty#1ca48f57 = InputChatPhoto;
func (m *TLInputChatPhotoEmpty) To_InputChatPhoto() *InputChatPhoto {
	return &InputChatPhoto{
		Constructor: TLConstructor_CRC32_inputChatPhotoEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputChatPhotoEmpty() *TLInputChatPhotoEmpty {
	return &TLInputChatPhotoEmpty{Data2: &InputChatPhoto_Data{}}
}

func (m *TLInputChatPhotoEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChatPhotoEmpty))

	return x.buf
}

func (m *TLInputChatPhotoEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChatPhotoEmpty))

	return x.buf
}

func (m *TLInputChatPhotoEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputChatUploadedPhoto#927c55b4 file:InputFile = InputChatPhoto;
func (m *TLInputChatUploadedPhoto) To_InputChatPhoto() *InputChatPhoto {
	return &InputChatPhoto{
		Constructor: TLConstructor_CRC32_inputChatUploadedPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputChatUploadedPhoto) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputChatUploadedPhoto) GetFile() *InputFile  { return m.Data2.File }

func NewTLInputChatUploadedPhoto() *TLInputChatUploadedPhoto {
	return &TLInputChatUploadedPhoto{Data2: &InputChatPhoto_Data{}}
}

func (m *TLInputChatUploadedPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChatUploadedPhoto))

	x.Bytes(m.GetFile().Encode())

	return x.buf
}

func (m *TLInputChatUploadedPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChatUploadedPhoto))

	x.Bytes(m.GetFile().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputChatUploadedPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &InputFile{}
	m1.Decode(dbuf)
	m.SetFile(m1)

	return dbuf.err
}

// inputChatPhoto#8953ad37 id:InputPhoto = InputChatPhoto;
func (m *TLInputChatPhoto) To_InputChatPhoto() *InputChatPhoto {
	return &InputChatPhoto{
		Constructor: TLConstructor_CRC32_inputChatPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputChatPhoto) SetId(v *InputPhoto) { m.Data2.Id = v }
func (m *TLInputChatPhoto) GetId() *InputPhoto  { return m.Data2.Id }

func NewTLInputChatPhoto() *TLInputChatPhoto {
	return &TLInputChatPhoto{Data2: &InputChatPhoto_Data{}}
}

func (m *TLInputChatPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChatPhoto))

	x.Bytes(m.GetId().Encode())

	return x.buf
}

func (m *TLInputChatPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChatPhoto))

	x.Bytes(m.GetId().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputChatPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoto{}
	m1.Decode(dbuf)
	m.SetId(m1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChatParticipants <--
//  + TL_ChatParticipantsForbidden
//  + TL_ChatParticipants
//

func (m *ChatParticipants) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatParticipantsForbidden:
		t := m.To_ChatParticipantsForbidden()
		return t.Encode()
	case TLConstructor_CRC32_chatParticipants:
		t := m.To_ChatParticipants()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatParticipants) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatParticipantsForbidden:
		t := m.To_ChatParticipantsForbidden()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatParticipants:
		t := m.To_ChatParticipants()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatParticipants) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatParticipantsForbidden:
		m2 := &TLChatParticipantsForbidden{Data2: &ChatParticipants_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatParticipants:
		m2 := &TLChatParticipants{Data2: &ChatParticipants_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatParticipantsForbidden#fc900c2b flags:# chat_id:int self_participant:flags.0?ChatParticipant = ChatParticipants;
func (m *ChatParticipants) To_ChatParticipantsForbidden() *TLChatParticipantsForbidden {
	return &TLChatParticipantsForbidden{
		Data2: m.Data2,
	}
}

// chatParticipants#3f460fed chat_id:int participants:Vector<ChatParticipant> version:int = ChatParticipants;
func (m *ChatParticipants) To_ChatParticipants() *TLChatParticipants {
	return &TLChatParticipants{
		Data2: m.Data2,
	}
}

// chatParticipantsForbidden#fc900c2b flags:# chat_id:int self_participant:flags.0?ChatParticipant = ChatParticipants;
func (m *TLChatParticipantsForbidden) To_ChatParticipants() *ChatParticipants {
	return &ChatParticipants{
		Constructor: TLConstructor_CRC32_chatParticipantsForbidden,
		Data2:       m.Data2,
	}
}

func (m *TLChatParticipantsForbidden) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLChatParticipantsForbidden) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLChatParticipantsForbidden) SetSelfParticipant(v *ChatParticipant) {
	m.Data2.SelfParticipant = v
}
func (m *TLChatParticipantsForbidden) GetSelfParticipant() *ChatParticipant {
	return m.Data2.SelfParticipant
}

func NewTLChatParticipantsForbidden() *TLChatParticipantsForbidden {
	return &TLChatParticipantsForbidden{Data2: &ChatParticipants_Data{}}
}

func (m *TLChatParticipantsForbidden) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipantsForbidden))

	// flags
	var flags uint32 = 0
	if m.GetSelfParticipant() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetChatId())
	if m.GetSelfParticipant() != nil {
		x.Bytes(m.GetSelfParticipant().Encode())
	}

	return x.buf
}

func (m *TLChatParticipantsForbidden) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipantsForbidden))

	// flags
	var flags uint32 = 0
	if m.GetSelfParticipant() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.GetChatId())
	if m.GetSelfParticipant() != nil {
		x.Bytes(m.GetSelfParticipant().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLChatParticipantsForbidden) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetChatId(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m3 := &ChatParticipant{}
		m3.Decode(dbuf)
		m.SetSelfParticipant(m3)
	}

	return dbuf.err
}

// chatParticipants#3f460fed chat_id:int participants:Vector<ChatParticipant> version:int = ChatParticipants;
func (m *TLChatParticipants) To_ChatParticipants() *ChatParticipants {
	return &ChatParticipants{
		Constructor: TLConstructor_CRC32_chatParticipants,
		Data2:       m.Data2,
	}
}

func (m *TLChatParticipants) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLChatParticipants) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLChatParticipants) SetParticipants(v []*ChatParticipant) { m.Data2.Participants = v }
func (m *TLChatParticipants) GetParticipants() []*ChatParticipant  { return m.Data2.Participants }

func (m *TLChatParticipants) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChatParticipants) GetVersion() int32  { return m.Data2.Version }

func NewTLChatParticipants() *TLChatParticipants {
	return &TLChatParticipants{Data2: &ChatParticipants_Data{}}
}

func (m *TLChatParticipants) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipants))

	x.Int(m.GetChatId())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParticipants())))
	for _, v := range m.GetParticipants() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLChatParticipants) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatParticipants))

	x.Int(m.GetChatId())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParticipants())))
	for _, v := range m.GetParticipants() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.GetVersion())

	return x.buf
}

func (m *TLChatParticipants) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*ChatParticipant, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &ChatParticipant{}
		v2[i].Decode(dbuf)
	}
	m.SetParticipants(v2)

	m.SetVersion(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// EncryptedFile <--
//  + TL_EncryptedFileEmpty
//  + TL_EncryptedFile
//

func (m *EncryptedFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_encryptedFileEmpty:
		t := m.To_EncryptedFileEmpty()
		return t.Encode()
	case TLConstructor_CRC32_encryptedFile:
		t := m.To_EncryptedFile()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *EncryptedFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_encryptedFileEmpty:
		t := m.To_EncryptedFileEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_encryptedFile:
		t := m.To_EncryptedFile()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *EncryptedFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_encryptedFileEmpty:
		m2 := &TLEncryptedFileEmpty{Data2: &EncryptedFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_encryptedFile:
		m2 := &TLEncryptedFile{Data2: &EncryptedFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// encryptedFileEmpty#c21f497e = EncryptedFile;
func (m *EncryptedFile) To_EncryptedFileEmpty() *TLEncryptedFileEmpty {
	return &TLEncryptedFileEmpty{
		Data2: m.Data2,
	}
}

// encryptedFile#4a70994c id:long access_hash:long size:int dc_id:int key_fingerprint:int = EncryptedFile;
func (m *EncryptedFile) To_EncryptedFile() *TLEncryptedFile {
	return &TLEncryptedFile{
		Data2: m.Data2,
	}
}

// encryptedFileEmpty#c21f497e = EncryptedFile;
func (m *TLEncryptedFileEmpty) To_EncryptedFile() *EncryptedFile {
	return &EncryptedFile{
		Constructor: TLConstructor_CRC32_encryptedFileEmpty,
		Data2:       m.Data2,
	}
}

func NewTLEncryptedFileEmpty() *TLEncryptedFileEmpty {
	return &TLEncryptedFileEmpty{Data2: &EncryptedFile_Data{}}
}

func (m *TLEncryptedFileEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedFileEmpty))

	return x.buf
}

func (m *TLEncryptedFileEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedFileEmpty))

	return x.buf
}

func (m *TLEncryptedFileEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// encryptedFile#4a70994c id:long access_hash:long size:int dc_id:int key_fingerprint:int = EncryptedFile;
func (m *TLEncryptedFile) To_EncryptedFile() *EncryptedFile {
	return &EncryptedFile{
		Constructor: TLConstructor_CRC32_encryptedFile,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLEncryptedFile) GetId() int64  { return m.Data2.Id }

func (m *TLEncryptedFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedFile) SetSize(v int32) { m.Data2.Size = v }
func (m *TLEncryptedFile) GetSize() int32  { return m.Data2.Size }

func (m *TLEncryptedFile) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLEncryptedFile) GetDcId() int32  { return m.Data2.DcId }

func (m *TLEncryptedFile) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLEncryptedFile) GetKeyFingerprint() int32  { return m.Data2.KeyFingerprint }

func NewTLEncryptedFile() *TLEncryptedFile {
	return &TLEncryptedFile{Data2: &EncryptedFile_Data{}}
}

func (m *TLEncryptedFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetSize())
	x.Int(m.GetDcId())
	x.Int(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLEncryptedFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetSize())
	x.Int(m.GetDcId())
	x.Int(m.GetKeyFingerprint())

	return x.buf
}

func (m *TLEncryptedFile) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetSize(dbuf.Int())
	m.SetDcId(dbuf.Int())
	m.SetKeyFingerprint(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Channels_ChannelParticipants <--
//  + TL_ChannelsChannelParticipants
//  + TL_ChannelsChannelParticipantsNotModified
//

func (m *Channels_ChannelParticipants) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channels_channelParticipants:
		t := m.To_ChannelsChannelParticipants()
		return t.Encode()
	case TLConstructor_CRC32_channels_channelParticipantsNotModified:
		t := m.To_ChannelsChannelParticipantsNotModified()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Channels_ChannelParticipants) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channels_channelParticipants:
		t := m.To_ChannelsChannelParticipants()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channels_channelParticipantsNotModified:
		t := m.To_ChannelsChannelParticipantsNotModified()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Channels_ChannelParticipants) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channels_channelParticipants:
		m2 := &TLChannelsChannelParticipants{Data2: &Channels_ChannelParticipants_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channels_channelParticipantsNotModified:
		m2 := &TLChannelsChannelParticipantsNotModified{Data2: &Channels_ChannelParticipants_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channels.channelParticipants#f56ee2a8 count:int participants:Vector<ChannelParticipant> users:Vector<User> = channels.ChannelParticipants;
func (m *Channels_ChannelParticipants) To_ChannelsChannelParticipants() *TLChannelsChannelParticipants {
	return &TLChannelsChannelParticipants{
		Data2: m.Data2,
	}
}

// channels.channelParticipantsNotModified#f0173fe9 = channels.ChannelParticipants;
func (m *Channels_ChannelParticipants) To_ChannelsChannelParticipantsNotModified() *TLChannelsChannelParticipantsNotModified {
	return &TLChannelsChannelParticipantsNotModified{
		Data2: m.Data2,
	}
}

// channels.channelParticipants#f56ee2a8 count:int participants:Vector<ChannelParticipant> users:Vector<User> = channels.ChannelParticipants;
func (m *TLChannelsChannelParticipants) To_Channels_ChannelParticipants() *Channels_ChannelParticipants {
	return &Channels_ChannelParticipants{
		Constructor: TLConstructor_CRC32_channels_channelParticipants,
		Data2:       m.Data2,
	}
}

func (m *TLChannelsChannelParticipants) SetCount(v int32) { m.Data2.Count = v }
func (m *TLChannelsChannelParticipants) GetCount() int32  { return m.Data2.Count }

func (m *TLChannelsChannelParticipants) SetParticipants(v []*ChannelParticipant) {
	m.Data2.Participants = v
}
func (m *TLChannelsChannelParticipants) GetParticipants() []*ChannelParticipant {
	return m.Data2.Participants
}

func (m *TLChannelsChannelParticipants) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsChannelParticipants) GetUsers() []*User  { return m.Data2.Users }

func NewTLChannelsChannelParticipants() *TLChannelsChannelParticipants {
	return &TLChannelsChannelParticipants{Data2: &Channels_ChannelParticipants_Data{}}
}

func (m *TLChannelsChannelParticipants) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_channelParticipants))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParticipants())))
	for _, v := range m.GetParticipants() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelsChannelParticipants) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_channelParticipants))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParticipants())))
	for _, v := range m.GetParticipants() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelsChannelParticipants) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*ChannelParticipant, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &ChannelParticipant{}
		v2[i].Decode(dbuf)
	}
	m.SetParticipants(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

// channels.channelParticipantsNotModified#f0173fe9 = channels.ChannelParticipants;
func (m *TLChannelsChannelParticipantsNotModified) To_Channels_ChannelParticipants() *Channels_ChannelParticipants {
	return &Channels_ChannelParticipants{
		Constructor: TLConstructor_CRC32_channels_channelParticipantsNotModified,
		Data2:       m.Data2,
	}
}

func NewTLChannelsChannelParticipantsNotModified() *TLChannelsChannelParticipantsNotModified {
	return &TLChannelsChannelParticipantsNotModified{Data2: &Channels_ChannelParticipants_Data{}}
}

func (m *TLChannelsChannelParticipantsNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_channelParticipantsNotModified))

	return x.buf
}

func (m *TLChannelsChannelParticipantsNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_channelParticipantsNotModified))

	return x.buf
}

func (m *TLChannelsChannelParticipantsNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_Password <--
//  + TL_AccountPassword
//

func (m *Account_Password) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_password:
		t := m.To_AccountPassword()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_Password) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_password:
		t := m.To_AccountPassword()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_Password) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_password:
		m2 := &TLAccountPassword{Data2: &Account_Password_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.password#ad2641f8 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true has_password:flags.2?true current_algo:flags.2?PasswordKdfAlgo srp_B:flags.2?bytes srp_id:flags.2?long hint:flags.3?string email_unconfirmed_pattern:flags.4?string new_algo:PasswordKdfAlgo new_secure_algo:SecurePasswordKdfAlgo secure_random:bytes = account.Password;
func (m *Account_Password) To_AccountPassword() *TLAccountPassword {
	return &TLAccountPassword{
		Data2: m.Data2,
	}
}

// account.password#ad2641f8 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true has_password:flags.2?true current_algo:flags.2?PasswordKdfAlgo srp_B:flags.2?bytes srp_id:flags.2?long hint:flags.3?string email_unconfirmed_pattern:flags.4?string new_algo:PasswordKdfAlgo new_secure_algo:SecurePasswordKdfAlgo secure_random:bytes = account.Password;
func (m *TLAccountPassword) To_Account_Password() *Account_Password {
	return &Account_Password{
		Constructor: TLConstructor_CRC32_account_password,
		Data2:       m.Data2,
	}
}

func (m *TLAccountPassword) SetHasRecovery(v bool) { m.Data2.HasRecovery = v }
func (m *TLAccountPassword) GetHasRecovery() bool  { return m.Data2.HasRecovery }

func (m *TLAccountPassword) SetHasSecureValues(v bool) { m.Data2.HasSecureValues = v }
func (m *TLAccountPassword) GetHasSecureValues() bool  { return m.Data2.HasSecureValues }

func (m *TLAccountPassword) SetHasPassword(v bool) { m.Data2.HasPassword = v }
func (m *TLAccountPassword) GetHasPassword() bool  { return m.Data2.HasPassword }

func (m *TLAccountPassword) SetCurrentAlgo(v *PasswordKdfAlgo) { m.Data2.CurrentAlgo = v }
func (m *TLAccountPassword) GetCurrentAlgo() *PasswordKdfAlgo  { return m.Data2.CurrentAlgo }

func (m *TLAccountPassword) SetSrp_B(v []byte) { m.Data2.Srp_B = v }
func (m *TLAccountPassword) GetSrp_B() []byte  { return m.Data2.Srp_B }

func (m *TLAccountPassword) SetSrpId(v int64) { m.Data2.SrpId = v }
func (m *TLAccountPassword) GetSrpId() int64  { return m.Data2.SrpId }

func (m *TLAccountPassword) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPassword) GetHint() string  { return m.Data2.Hint }

func (m *TLAccountPassword) SetEmailUnconfirmedPattern(v string) { m.Data2.EmailUnconfirmedPattern = v }
func (m *TLAccountPassword) GetEmailUnconfirmedPattern() string {
	return m.Data2.EmailUnconfirmedPattern
}

func (m *TLAccountPassword) SetNewAlgo(v *PasswordKdfAlgo) { m.Data2.NewAlgo = v }
func (m *TLAccountPassword) GetNewAlgo() *PasswordKdfAlgo  { return m.Data2.NewAlgo }

func (m *TLAccountPassword) SetNewSecureAlgo(v *SecurePasswordKdfAlgo) { m.Data2.NewSecureAlgo = v }
func (m *TLAccountPassword) GetNewSecureAlgo() *SecurePasswordKdfAlgo  { return m.Data2.NewSecureAlgo }

func (m *TLAccountPassword) SetSecureRandom(v []byte) { m.Data2.SecureRandom = v }
func (m *TLAccountPassword) GetSecureRandom() []byte  { return m.Data2.SecureRandom }

func NewTLAccountPassword() *TLAccountPassword {
	return &TLAccountPassword{Data2: &Account_Password_Data{}}
}

func (m *TLAccountPassword) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_password))

	// flags
	var flags uint32 = 0
	if m.GetHasRecovery() == true {
		flags |= 1 << 0
	}
	if m.GetHasSecureValues() == true {
		flags |= 1 << 1
	}
	if m.GetHasPassword() == true {
		flags |= 1 << 2
	}
	if m.GetCurrentAlgo() != nil {
		flags |= 1 << 2
	}
	if m.GetSrp_B() != nil {
		flags |= 1 << 2
	}
	if m.GetSrpId() != 0 {
		flags |= 1 << 2
	}
	if m.GetHint() != "" {
		flags |= 1 << 3
	}
	if m.GetEmailUnconfirmedPattern() != "" {
		flags |= 1 << 4
	}
	x.UInt(flags)

	if m.GetCurrentAlgo() != nil {
		x.Bytes(m.GetCurrentAlgo().Encode())
	}
	if m.GetSrp_B() != nil {
		x.StringBytes(m.GetSrp_B())
	}
	if m.GetSrpId() != 0 {
		x.Long(m.GetSrpId())
	}
	if m.GetHint() != "" {
		x.String(m.GetHint())
	}
	if m.GetEmailUnconfirmedPattern() != "" {
		x.String(m.GetEmailUnconfirmedPattern())
	}
	x.Bytes(m.GetNewAlgo().Encode())
	x.Bytes(m.GetNewSecureAlgo().Encode())
	x.StringBytes(m.GetSecureRandom())

	return x.buf
}

func (m *TLAccountPassword) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_password))

	// flags
	var flags uint32 = 0
	if m.GetHasRecovery() == true {
		flags |= 1 << 0
	}
	if m.GetHasSecureValues() == true {
		flags |= 1 << 1
	}
	if m.GetHasPassword() == true {
		flags |= 1 << 2
	}
	if m.GetCurrentAlgo() != nil {
		flags |= 1 << 2
	}
	if m.GetSrp_B() != nil {
		flags |= 1 << 2
	}
	if m.GetSrpId() != 0 {
		flags |= 1 << 2
	}
	if m.GetHint() != "" {
		flags |= 1 << 3
	}
	if m.GetEmailUnconfirmedPattern() != "" {
		flags |= 1 << 4
	}
	x.UInt(flags)

	if m.GetCurrentAlgo() != nil {
		x.Bytes(m.GetCurrentAlgo().EncodeToLayer(layer))
	}
	if m.GetSrp_B() != nil {
		x.StringBytes(m.GetSrp_B())
	}
	if m.GetSrpId() != 0 {
		x.Long(m.GetSrpId())
	}
	if m.GetHint() != "" {
		x.String(m.GetHint())
	}
	if m.GetEmailUnconfirmedPattern() != "" {
		x.String(m.GetEmailUnconfirmedPattern())
	}
	x.Bytes(m.GetNewAlgo().EncodeToLayer(layer))
	x.Bytes(m.GetNewSecureAlgo().EncodeToLayer(layer))
	x.StringBytes(m.GetSecureRandom())

	return x.buf
}

func (m *TLAccountPassword) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetHasRecovery(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetHasSecureValues(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetHasPassword(true)
	}
	if (flags & (1 << 2)) != 0 {
		m5 := &PasswordKdfAlgo{}
		m5.Decode(dbuf)
		m.SetCurrentAlgo(m5)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetSrp_B(dbuf.StringBytes())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetSrpId(dbuf.Long())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetHint(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m.SetEmailUnconfirmedPattern(dbuf.String())
	}
	m10 := &PasswordKdfAlgo{}
	m10.Decode(dbuf)
	m.SetNewAlgo(m10)
	m11 := &SecurePasswordKdfAlgo{}
	m11.Decode(dbuf)
	m.SetNewSecureAlgo(m11)
	m.SetSecureRandom(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureValueType <--
//  + TL_SecureValueTypePersonalDetails
//  + TL_SecureValueTypePassport
//  + TL_SecureValueTypeDriverLicense
//  + TL_SecureValueTypeIdentityCard
//  + TL_SecureValueTypeInternalPassport
//  + TL_SecureValueTypeAddress
//  + TL_SecureValueTypeUtilityBill
//  + TL_SecureValueTypeBankStatement
//  + TL_SecureValueTypeRentalAgreement
//  + TL_SecureValueTypePassportRegistration
//  + TL_SecureValueTypeTemporaryRegistration
//  + TL_SecureValueTypePhone
//  + TL_SecureValueTypeEmail
//

func (m *SecureValueType) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureValueTypePersonalDetails:
		t := m.To_SecureValueTypePersonalDetails()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypePassport:
		t := m.To_SecureValueTypePassport()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeDriverLicense:
		t := m.To_SecureValueTypeDriverLicense()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeIdentityCard:
		t := m.To_SecureValueTypeIdentityCard()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeInternalPassport:
		t := m.To_SecureValueTypeInternalPassport()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeAddress:
		t := m.To_SecureValueTypeAddress()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeUtilityBill:
		t := m.To_SecureValueTypeUtilityBill()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeBankStatement:
		t := m.To_SecureValueTypeBankStatement()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeRentalAgreement:
		t := m.To_SecureValueTypeRentalAgreement()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypePassportRegistration:
		t := m.To_SecureValueTypePassportRegistration()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeTemporaryRegistration:
		t := m.To_SecureValueTypeTemporaryRegistration()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypePhone:
		t := m.To_SecureValueTypePhone()
		return t.Encode()
	case TLConstructor_CRC32_secureValueTypeEmail:
		t := m.To_SecureValueTypeEmail()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValueType) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureValueTypePersonalDetails:
		t := m.To_SecureValueTypePersonalDetails()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypePassport:
		t := m.To_SecureValueTypePassport()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeDriverLicense:
		t := m.To_SecureValueTypeDriverLicense()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeIdentityCard:
		t := m.To_SecureValueTypeIdentityCard()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeInternalPassport:
		t := m.To_SecureValueTypeInternalPassport()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeAddress:
		t := m.To_SecureValueTypeAddress()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeUtilityBill:
		t := m.To_SecureValueTypeUtilityBill()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeBankStatement:
		t := m.To_SecureValueTypeBankStatement()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeRentalAgreement:
		t := m.To_SecureValueTypeRentalAgreement()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypePassportRegistration:
		t := m.To_SecureValueTypePassportRegistration()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeTemporaryRegistration:
		t := m.To_SecureValueTypeTemporaryRegistration()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypePhone:
		t := m.To_SecureValueTypePhone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueTypeEmail:
		t := m.To_SecureValueTypeEmail()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValueType) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureValueTypePersonalDetails:
		m2 := &TLSecureValueTypePersonalDetails{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypePassport:
		m2 := &TLSecureValueTypePassport{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeDriverLicense:
		m2 := &TLSecureValueTypeDriverLicense{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeIdentityCard:
		m2 := &TLSecureValueTypeIdentityCard{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeInternalPassport:
		m2 := &TLSecureValueTypeInternalPassport{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeAddress:
		m2 := &TLSecureValueTypeAddress{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeUtilityBill:
		m2 := &TLSecureValueTypeUtilityBill{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeBankStatement:
		m2 := &TLSecureValueTypeBankStatement{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeRentalAgreement:
		m2 := &TLSecureValueTypeRentalAgreement{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypePassportRegistration:
		m2 := &TLSecureValueTypePassportRegistration{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeTemporaryRegistration:
		m2 := &TLSecureValueTypeTemporaryRegistration{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypePhone:
		m2 := &TLSecureValueTypePhone{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueTypeEmail:
		m2 := &TLSecureValueTypeEmail{Data2: &SecureValueType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureValueTypePersonalDetails#9d2a81e3 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePersonalDetails() *TLSecureValueTypePersonalDetails {
	return &TLSecureValueTypePersonalDetails{
		Data2: m.Data2,
	}
}

// secureValueTypePassport#3dac6a00 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePassport() *TLSecureValueTypePassport {
	return &TLSecureValueTypePassport{
		Data2: m.Data2,
	}
}

// secureValueTypeDriverLicense#6e425c4 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeDriverLicense() *TLSecureValueTypeDriverLicense {
	return &TLSecureValueTypeDriverLicense{
		Data2: m.Data2,
	}
}

// secureValueTypeIdentityCard#a0d0744b = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeIdentityCard() *TLSecureValueTypeIdentityCard {
	return &TLSecureValueTypeIdentityCard{
		Data2: m.Data2,
	}
}

// secureValueTypeInternalPassport#99a48f23 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeInternalPassport() *TLSecureValueTypeInternalPassport {
	return &TLSecureValueTypeInternalPassport{
		Data2: m.Data2,
	}
}

// secureValueTypeAddress#cbe31e26 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeAddress() *TLSecureValueTypeAddress {
	return &TLSecureValueTypeAddress{
		Data2: m.Data2,
	}
}

// secureValueTypeUtilityBill#fc36954e = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeUtilityBill() *TLSecureValueTypeUtilityBill {
	return &TLSecureValueTypeUtilityBill{
		Data2: m.Data2,
	}
}

// secureValueTypeBankStatement#89137c0d = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeBankStatement() *TLSecureValueTypeBankStatement {
	return &TLSecureValueTypeBankStatement{
		Data2: m.Data2,
	}
}

// secureValueTypeRentalAgreement#8b883488 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeRentalAgreement() *TLSecureValueTypeRentalAgreement {
	return &TLSecureValueTypeRentalAgreement{
		Data2: m.Data2,
	}
}

// secureValueTypePassportRegistration#99e3806a = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePassportRegistration() *TLSecureValueTypePassportRegistration {
	return &TLSecureValueTypePassportRegistration{
		Data2: m.Data2,
	}
}

// secureValueTypeTemporaryRegistration#ea02ec33 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeTemporaryRegistration() *TLSecureValueTypeTemporaryRegistration {
	return &TLSecureValueTypeTemporaryRegistration{
		Data2: m.Data2,
	}
}

// secureValueTypePhone#b320aadb = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePhone() *TLSecureValueTypePhone {
	return &TLSecureValueTypePhone{
		Data2: m.Data2,
	}
}

// secureValueTypeEmail#8e3ca7ee = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeEmail() *TLSecureValueTypeEmail {
	return &TLSecureValueTypeEmail{
		Data2: m.Data2,
	}
}

// secureValueTypePersonalDetails#9d2a81e3 = SecureValueType;
func (m *TLSecureValueTypePersonalDetails) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypePersonalDetails,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypePersonalDetails() *TLSecureValueTypePersonalDetails {
	return &TLSecureValueTypePersonalDetails{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypePersonalDetails) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePersonalDetails))

	return x.buf
}

func (m *TLSecureValueTypePersonalDetails) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePersonalDetails))

	return x.buf
}

func (m *TLSecureValueTypePersonalDetails) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypePassport#3dac6a00 = SecureValueType;
func (m *TLSecureValueTypePassport) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypePassport,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypePassport() *TLSecureValueTypePassport {
	return &TLSecureValueTypePassport{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypePassport) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePassport))

	return x.buf
}

func (m *TLSecureValueTypePassport) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePassport))

	return x.buf
}

func (m *TLSecureValueTypePassport) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeDriverLicense#6e425c4 = SecureValueType;
func (m *TLSecureValueTypeDriverLicense) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeDriverLicense,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeDriverLicense() *TLSecureValueTypeDriverLicense {
	return &TLSecureValueTypeDriverLicense{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeDriverLicense) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeDriverLicense))

	return x.buf
}

func (m *TLSecureValueTypeDriverLicense) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeDriverLicense))

	return x.buf
}

func (m *TLSecureValueTypeDriverLicense) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeIdentityCard#a0d0744b = SecureValueType;
func (m *TLSecureValueTypeIdentityCard) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeIdentityCard,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeIdentityCard() *TLSecureValueTypeIdentityCard {
	return &TLSecureValueTypeIdentityCard{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeIdentityCard) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeIdentityCard))

	return x.buf
}

func (m *TLSecureValueTypeIdentityCard) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeIdentityCard))

	return x.buf
}

func (m *TLSecureValueTypeIdentityCard) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeInternalPassport#99a48f23 = SecureValueType;
func (m *TLSecureValueTypeInternalPassport) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeInternalPassport,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeInternalPassport() *TLSecureValueTypeInternalPassport {
	return &TLSecureValueTypeInternalPassport{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeInternalPassport) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeInternalPassport))

	return x.buf
}

func (m *TLSecureValueTypeInternalPassport) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeInternalPassport))

	return x.buf
}

func (m *TLSecureValueTypeInternalPassport) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeAddress#cbe31e26 = SecureValueType;
func (m *TLSecureValueTypeAddress) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeAddress,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeAddress() *TLSecureValueTypeAddress {
	return &TLSecureValueTypeAddress{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeAddress) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeAddress))

	return x.buf
}

func (m *TLSecureValueTypeAddress) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeAddress))

	return x.buf
}

func (m *TLSecureValueTypeAddress) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeUtilityBill#fc36954e = SecureValueType;
func (m *TLSecureValueTypeUtilityBill) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeUtilityBill,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeUtilityBill() *TLSecureValueTypeUtilityBill {
	return &TLSecureValueTypeUtilityBill{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeUtilityBill) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeUtilityBill))

	return x.buf
}

func (m *TLSecureValueTypeUtilityBill) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeUtilityBill))

	return x.buf
}

func (m *TLSecureValueTypeUtilityBill) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeBankStatement#89137c0d = SecureValueType;
func (m *TLSecureValueTypeBankStatement) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeBankStatement,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeBankStatement() *TLSecureValueTypeBankStatement {
	return &TLSecureValueTypeBankStatement{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeBankStatement) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeBankStatement))

	return x.buf
}

func (m *TLSecureValueTypeBankStatement) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeBankStatement))

	return x.buf
}

func (m *TLSecureValueTypeBankStatement) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeRentalAgreement#8b883488 = SecureValueType;
func (m *TLSecureValueTypeRentalAgreement) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeRentalAgreement,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeRentalAgreement() *TLSecureValueTypeRentalAgreement {
	return &TLSecureValueTypeRentalAgreement{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeRentalAgreement) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeRentalAgreement))

	return x.buf
}

func (m *TLSecureValueTypeRentalAgreement) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeRentalAgreement))

	return x.buf
}

func (m *TLSecureValueTypeRentalAgreement) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypePassportRegistration#99e3806a = SecureValueType;
func (m *TLSecureValueTypePassportRegistration) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypePassportRegistration,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypePassportRegistration() *TLSecureValueTypePassportRegistration {
	return &TLSecureValueTypePassportRegistration{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypePassportRegistration) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePassportRegistration))

	return x.buf
}

func (m *TLSecureValueTypePassportRegistration) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePassportRegistration))

	return x.buf
}

func (m *TLSecureValueTypePassportRegistration) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeTemporaryRegistration#ea02ec33 = SecureValueType;
func (m *TLSecureValueTypeTemporaryRegistration) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeTemporaryRegistration,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeTemporaryRegistration() *TLSecureValueTypeTemporaryRegistration {
	return &TLSecureValueTypeTemporaryRegistration{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeTemporaryRegistration) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeTemporaryRegistration))

	return x.buf
}

func (m *TLSecureValueTypeTemporaryRegistration) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeTemporaryRegistration))

	return x.buf
}

func (m *TLSecureValueTypeTemporaryRegistration) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypePhone#b320aadb = SecureValueType;
func (m *TLSecureValueTypePhone) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypePhone,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypePhone() *TLSecureValueTypePhone {
	return &TLSecureValueTypePhone{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypePhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePhone))

	return x.buf
}

func (m *TLSecureValueTypePhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypePhone))

	return x.buf
}

func (m *TLSecureValueTypePhone) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureValueTypeEmail#8e3ca7ee = SecureValueType;
func (m *TLSecureValueTypeEmail) To_SecureValueType() *SecureValueType {
	return &SecureValueType{
		Constructor: TLConstructor_CRC32_secureValueTypeEmail,
		Data2:       m.Data2,
	}
}

func NewTLSecureValueTypeEmail() *TLSecureValueTypeEmail {
	return &TLSecureValueTypeEmail{Data2: &SecureValueType_Data{}}
}

func (m *TLSecureValueTypeEmail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeEmail))

	return x.buf
}

func (m *TLSecureValueTypeEmail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueTypeEmail))

	return x.buf
}

func (m *TLSecureValueTypeEmail) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// True <--
//  + TL_True
//

func (m *True) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_true:
		t := m.To_True()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *True) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_true:
		t := m.To_True()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *True) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_true:
		m2 := &TLTrue{Data2: &True_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// true#3fedd339 = True;
func (m *True) To_True() *TLTrue {
	return &TLTrue{
		Data2: m.Data2,
	}
}

// true#3fedd339 = True;
func (m *TLTrue) To_True() *True {
	return &True{
		Constructor: TLConstructor_CRC32_true,
		Data2:       m.Data2,
	}
}

func NewTLTrue() *TLTrue {
	return &TLTrue{Data2: &True_Data{}}
}

func (m *TLTrue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_true))

	return x.buf
}

func (m *TLTrue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_true))

	return x.buf
}

func (m *TLTrue) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DcOption <--
//  + TL_DcOption
//

func (m *DcOption) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_dcOption:
		t := m.To_DcOption()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DcOption) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_dcOption:
		t := m.To_DcOption()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DcOption) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_dcOption:
		m2 := &TLDcOption{Data2: &DcOption_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// dcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;
func (m *DcOption) To_DcOption() *TLDcOption {
	return &TLDcOption{
		Data2: m.Data2,
	}
}

// dcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;
func (m *TLDcOption) To_DcOption() *DcOption {
	return &DcOption{
		Constructor: TLConstructor_CRC32_dcOption,
		Data2:       m.Data2,
	}
}

func (m *TLDcOption) SetIpv6(v bool) { m.Data2.Ipv6 = v }
func (m *TLDcOption) GetIpv6() bool  { return m.Data2.Ipv6 }

func (m *TLDcOption) SetMediaOnly(v bool) { m.Data2.MediaOnly = v }
func (m *TLDcOption) GetMediaOnly() bool  { return m.Data2.MediaOnly }

func (m *TLDcOption) SetTcpoOnly(v bool) { m.Data2.TcpoOnly = v }
func (m *TLDcOption) GetTcpoOnly() bool  { return m.Data2.TcpoOnly }

func (m *TLDcOption) SetCdn(v bool) { m.Data2.Cdn = v }
func (m *TLDcOption) GetCdn() bool  { return m.Data2.Cdn }

func (m *TLDcOption) SetStatic(v bool) { m.Data2.Static = v }
func (m *TLDcOption) GetStatic() bool  { return m.Data2.Static }

func (m *TLDcOption) SetId(v int32) { m.Data2.Id = v }
func (m *TLDcOption) GetId() int32  { return m.Data2.Id }

func (m *TLDcOption) SetIpAddress(v string) { m.Data2.IpAddress = v }
func (m *TLDcOption) GetIpAddress() string  { return m.Data2.IpAddress }

func (m *TLDcOption) SetPort(v int32) { m.Data2.Port = v }
func (m *TLDcOption) GetPort() int32  { return m.Data2.Port }

func (m *TLDcOption) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLDcOption) GetSecret() []byte  { return m.Data2.Secret }

func NewTLDcOption() *TLDcOption {
	return &TLDcOption{Data2: &DcOption_Data{}}
}

func (m *TLDcOption) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dcOption))

	// flags
	var flags uint32 = 0
	if m.GetIpv6() == true {
		flags |= 1 << 0
	}
	if m.GetMediaOnly() == true {
		flags |= 1 << 1
	}
	if m.GetTcpoOnly() == true {
		flags |= 1 << 2
	}
	if m.GetCdn() == true {
		flags |= 1 << 3
	}
	if m.GetStatic() == true {
		flags |= 1 << 4
	}
	if m.GetSecret() != nil {
		flags |= 1 << 10
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetIpAddress())
	x.Int(m.GetPort())
	if m.GetSecret() != nil {
		x.StringBytes(m.GetSecret())
	}

	return x.buf
}

func (m *TLDcOption) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dcOption))

	// flags
	var flags uint32 = 0
	if m.GetIpv6() == true {
		flags |= 1 << 0
	}
	if m.GetMediaOnly() == true {
		flags |= 1 << 1
	}
	if m.GetTcpoOnly() == true {
		flags |= 1 << 2
	}
	if m.GetCdn() == true {
		flags |= 1 << 3
	}
	if m.GetStatic() == true {
		flags |= 1 << 4
	}
	if m.GetSecret() != nil {
		flags |= 1 << 10
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetIpAddress())
	x.Int(m.GetPort())
	if m.GetSecret() != nil {
		x.StringBytes(m.GetSecret())
	}

	return x.buf
}

func (m *TLDcOption) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetIpv6(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetMediaOnly(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTcpoOnly(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetCdn(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetStatic(true)
	}
	m.SetId(dbuf.Int())
	m.SetIpAddress(dbuf.String())
	m.SetPort(dbuf.Int())
	if (flags & (1 << 10)) != 0 {
		m.SetSecret(dbuf.StringBytes())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_TopPeers <--
//  + TL_ContactsTopPeersNotModified
//  + TL_ContactsTopPeers
//  + TL_ContactsTopPeersDisabled
//

func (m *Contacts_TopPeers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contacts_topPeersNotModified:
		t := m.To_ContactsTopPeersNotModified()
		return t.Encode()
	case TLConstructor_CRC32_contacts_topPeers:
		t := m.To_ContactsTopPeers()
		return t.Encode()
	case TLConstructor_CRC32_contacts_topPeersDisabled:
		t := m.To_ContactsTopPeersDisabled()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_TopPeers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contacts_topPeersNotModified:
		t := m.To_ContactsTopPeersNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contacts_topPeers:
		t := m.To_ContactsTopPeers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contacts_topPeersDisabled:
		t := m.To_ContactsTopPeersDisabled()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Contacts_TopPeers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contacts_topPeersNotModified:
		m2 := &TLContactsTopPeersNotModified{Data2: &Contacts_TopPeers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contacts_topPeers:
		m2 := &TLContactsTopPeers{Data2: &Contacts_TopPeers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contacts_topPeersDisabled:
		m2 := &TLContactsTopPeersDisabled{Data2: &Contacts_TopPeers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contacts.topPeersNotModified#de266ef5 = contacts.TopPeers;
func (m *Contacts_TopPeers) To_ContactsTopPeersNotModified() *TLContactsTopPeersNotModified {
	return &TLContactsTopPeersNotModified{
		Data2: m.Data2,
	}
}

// contacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;
func (m *Contacts_TopPeers) To_ContactsTopPeers() *TLContactsTopPeers {
	return &TLContactsTopPeers{
		Data2: m.Data2,
	}
}

// contacts.topPeersDisabled#b52c939d = contacts.TopPeers;
func (m *Contacts_TopPeers) To_ContactsTopPeersDisabled() *TLContactsTopPeersDisabled {
	return &TLContactsTopPeersDisabled{
		Data2: m.Data2,
	}
}

// contacts.topPeersNotModified#de266ef5 = contacts.TopPeers;
func (m *TLContactsTopPeersNotModified) To_Contacts_TopPeers() *Contacts_TopPeers {
	return &Contacts_TopPeers{
		Constructor: TLConstructor_CRC32_contacts_topPeersNotModified,
		Data2:       m.Data2,
	}
}

func NewTLContactsTopPeersNotModified() *TLContactsTopPeersNotModified {
	return &TLContactsTopPeersNotModified{Data2: &Contacts_TopPeers_Data{}}
}

func (m *TLContactsTopPeersNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_topPeersNotModified))

	return x.buf
}

func (m *TLContactsTopPeersNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_topPeersNotModified))

	return x.buf
}

func (m *TLContactsTopPeersNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// contacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;
func (m *TLContactsTopPeers) To_Contacts_TopPeers() *Contacts_TopPeers {
	return &Contacts_TopPeers{
		Constructor: TLConstructor_CRC32_contacts_topPeers,
		Data2:       m.Data2,
	}
}

func (m *TLContactsTopPeers) SetCategories(v []*TopPeerCategoryPeers) { m.Data2.Categories = v }
func (m *TLContactsTopPeers) GetCategories() []*TopPeerCategoryPeers  { return m.Data2.Categories }

func (m *TLContactsTopPeers) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsTopPeers) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsTopPeers) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsTopPeers) GetUsers() []*User  { return m.Data2.Users }

func NewTLContactsTopPeers() *TLContactsTopPeers {
	return &TLContactsTopPeers{Data2: &Contacts_TopPeers_Data{}}
}

func (m *TLContactsTopPeers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_topPeers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetCategories())))
	for _, v := range m.GetCategories() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsTopPeers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_topPeers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetCategories())))
	for _, v := range m.GetCategories() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsTopPeers) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*TopPeerCategoryPeers, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &TopPeerCategoryPeers{}
		v1[i].Decode(dbuf)
	}
	m.SetCategories(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

// contacts.topPeersDisabled#b52c939d = contacts.TopPeers;
func (m *TLContactsTopPeersDisabled) To_Contacts_TopPeers() *Contacts_TopPeers {
	return &Contacts_TopPeers{
		Constructor: TLConstructor_CRC32_contacts_topPeersDisabled,
		Data2:       m.Data2,
	}
}

func NewTLContactsTopPeersDisabled() *TLContactsTopPeersDisabled {
	return &TLContactsTopPeersDisabled{Data2: &Contacts_TopPeers_Data{}}
}

func (m *TLContactsTopPeersDisabled) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_topPeersDisabled))

	return x.buf
}

func (m *TLContactsTopPeersDisabled) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_topPeersDisabled))

	return x.buf
}

func (m *TLContactsTopPeersDisabled) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DataJSON <--
//  + TL_DataJSON
//

func (m *DataJSON) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_dataJSON:
		t := m.To_DataJSON()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DataJSON) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_dataJSON:
		t := m.To_DataJSON()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DataJSON) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_dataJSON:
		m2 := &TLDataJSON{Data2: &DataJSON_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// dataJSON#7d748d04 data:string = DataJSON;
func (m *DataJSON) To_DataJSON() *TLDataJSON {
	return &TLDataJSON{
		Data2: m.Data2,
	}
}

// dataJSON#7d748d04 data:string = DataJSON;
func (m *TLDataJSON) To_DataJSON() *DataJSON {
	return &DataJSON{
		Constructor: TLConstructor_CRC32_dataJSON,
		Data2:       m.Data2,
	}
}

func (m *TLDataJSON) SetData(v string) { m.Data2.Data = v }
func (m *TLDataJSON) GetData() string  { return m.Data2.Data }

func NewTLDataJSON() *TLDataJSON {
	return &TLDataJSON{Data2: &DataJSON_Data{}}
}

func (m *TLDataJSON) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dataJSON))

	x.String(m.GetData())

	return x.buf
}

func (m *TLDataJSON) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dataJSON))

	x.String(m.GetData())

	return x.buf
}

func (m *TLDataJSON) Decode(dbuf *DecodeBuf) error {
	m.SetData(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FoundStickerSets <--
//  + TL_MessagesFoundStickerSetsNotModified
//  + TL_MessagesFoundStickerSets
//

func (m *Messages_FoundStickerSets) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_foundStickerSetsNotModified:
		t := m.To_MessagesFoundStickerSetsNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_foundStickerSets:
		t := m.To_MessagesFoundStickerSets()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FoundStickerSets) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_foundStickerSetsNotModified:
		t := m.To_MessagesFoundStickerSetsNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_foundStickerSets:
		t := m.To_MessagesFoundStickerSets()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FoundStickerSets) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_foundStickerSetsNotModified:
		m2 := &TLMessagesFoundStickerSetsNotModified{Data2: &Messages_FoundStickerSets_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_foundStickerSets:
		m2 := &TLMessagesFoundStickerSets{Data2: &Messages_FoundStickerSets_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.foundStickerSetsNotModified#d54b65d = messages.FoundStickerSets;
func (m *Messages_FoundStickerSets) To_MessagesFoundStickerSetsNotModified() *TLMessagesFoundStickerSetsNotModified {
	return &TLMessagesFoundStickerSetsNotModified{
		Data2: m.Data2,
	}
}

// messages.foundStickerSets#5108d648 hash:int sets:Vector<StickerSetCovered> = messages.FoundStickerSets;
func (m *Messages_FoundStickerSets) To_MessagesFoundStickerSets() *TLMessagesFoundStickerSets {
	return &TLMessagesFoundStickerSets{
		Data2: m.Data2,
	}
}

// messages.foundStickerSetsNotModified#d54b65d = messages.FoundStickerSets;
func (m *TLMessagesFoundStickerSetsNotModified) To_Messages_FoundStickerSets() *Messages_FoundStickerSets {
	return &Messages_FoundStickerSets{
		Constructor: TLConstructor_CRC32_messages_foundStickerSetsNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesFoundStickerSetsNotModified() *TLMessagesFoundStickerSetsNotModified {
	return &TLMessagesFoundStickerSetsNotModified{Data2: &Messages_FoundStickerSets_Data{}}
}

func (m *TLMessagesFoundStickerSetsNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_foundStickerSetsNotModified))

	return x.buf
}

func (m *TLMessagesFoundStickerSetsNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_foundStickerSetsNotModified))

	return x.buf
}

func (m *TLMessagesFoundStickerSetsNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.foundStickerSets#5108d648 hash:int sets:Vector<StickerSetCovered> = messages.FoundStickerSets;
func (m *TLMessagesFoundStickerSets) To_Messages_FoundStickerSets() *Messages_FoundStickerSets {
	return &Messages_FoundStickerSets{
		Constructor: TLConstructor_CRC32_messages_foundStickerSets,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesFoundStickerSets) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFoundStickerSets) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesFoundStickerSets) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFoundStickerSets) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func NewTLMessagesFoundStickerSets() *TLMessagesFoundStickerSets {
	return &TLMessagesFoundStickerSets{Data2: &Messages_FoundStickerSets_Data{}}
}

func (m *TLMessagesFoundStickerSets) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_foundStickerSets))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesFoundStickerSets) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_foundStickerSets))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesFoundStickerSets) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerSetCovered, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerSetCovered{}
		v2[i].Decode(dbuf)
	}
	m.SetSets(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// WebAuthorization <--
//  + TL_WebAuthorization
//

func (m *WebAuthorization) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_webAuthorization:
		t := m.To_WebAuthorization()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WebAuthorization) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_webAuthorization:
		t := m.To_WebAuthorization()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WebAuthorization) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_webAuthorization:
		m2 := &TLWebAuthorization{Data2: &WebAuthorization_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// webAuthorization#cac943f2 hash:long bot_id:int domain:string browser:string platform:string date_created:int date_active:int ip:string region:string = WebAuthorization;
func (m *WebAuthorization) To_WebAuthorization() *TLWebAuthorization {
	return &TLWebAuthorization{
		Data2: m.Data2,
	}
}

// webAuthorization#cac943f2 hash:long bot_id:int domain:string browser:string platform:string date_created:int date_active:int ip:string region:string = WebAuthorization;
func (m *TLWebAuthorization) To_WebAuthorization() *WebAuthorization {
	return &WebAuthorization{
		Constructor: TLConstructor_CRC32_webAuthorization,
		Data2:       m.Data2,
	}
}

func (m *TLWebAuthorization) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLWebAuthorization) GetHash() int64  { return m.Data2.Hash }

func (m *TLWebAuthorization) SetBotId(v int32) { m.Data2.BotId = v }
func (m *TLWebAuthorization) GetBotId() int32  { return m.Data2.BotId }

func (m *TLWebAuthorization) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLWebAuthorization) GetDomain() string  { return m.Data2.Domain }

func (m *TLWebAuthorization) SetBrowser(v string) { m.Data2.Browser = v }
func (m *TLWebAuthorization) GetBrowser() string  { return m.Data2.Browser }

func (m *TLWebAuthorization) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLWebAuthorization) GetPlatform() string  { return m.Data2.Platform }

func (m *TLWebAuthorization) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLWebAuthorization) GetDateCreated() int32  { return m.Data2.DateCreated }

func (m *TLWebAuthorization) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLWebAuthorization) GetDateActive() int32  { return m.Data2.DateActive }

func (m *TLWebAuthorization) SetIp(v string) { m.Data2.Ip = v }
func (m *TLWebAuthorization) GetIp() string  { return m.Data2.Ip }

func (m *TLWebAuthorization) SetRegion(v string) { m.Data2.Region = v }
func (m *TLWebAuthorization) GetRegion() string  { return m.Data2.Region }

func NewTLWebAuthorization() *TLWebAuthorization {
	return &TLWebAuthorization{Data2: &WebAuthorization_Data{}}
}

func (m *TLWebAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webAuthorization))

	x.Long(m.GetHash())
	x.Int(m.GetBotId())
	x.String(m.GetDomain())
	x.String(m.GetBrowser())
	x.String(m.GetPlatform())
	x.Int(m.GetDateCreated())
	x.Int(m.GetDateActive())
	x.String(m.GetIp())
	x.String(m.GetRegion())

	return x.buf
}

func (m *TLWebAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webAuthorization))

	x.Long(m.GetHash())
	x.Int(m.GetBotId())
	x.String(m.GetDomain())
	x.String(m.GetBrowser())
	x.String(m.GetPlatform())
	x.Int(m.GetDateCreated())
	x.Int(m.GetDateActive())
	x.String(m.GetIp())
	x.String(m.GetRegion())

	return x.buf
}

func (m *TLWebAuthorization) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Long())
	m.SetBotId(dbuf.Int())
	m.SetDomain(dbuf.String())
	m.SetBrowser(dbuf.String())
	m.SetPlatform(dbuf.String())
	m.SetDateCreated(dbuf.Int())
	m.SetDateActive(dbuf.Int())
	m.SetIp(dbuf.String())
	m.SetRegion(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DocumentAttribute <--
//  + TL_DocumentAttributeImageSize
//  + TL_DocumentAttributeAnimated
//  + TL_DocumentAttributeSticker
//  + TL_DocumentAttributeVideo
//  + TL_DocumentAttributeAudio
//  + TL_DocumentAttributeFilename
//  + TL_DocumentAttributeHasStickers
//

func (m *DocumentAttribute) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_documentAttributeImageSize:
		t := m.To_DocumentAttributeImageSize()
		return t.Encode()
	case TLConstructor_CRC32_documentAttributeAnimated:
		t := m.To_DocumentAttributeAnimated()
		return t.Encode()
	case TLConstructor_CRC32_documentAttributeSticker:
		t := m.To_DocumentAttributeSticker()
		return t.Encode()
	case TLConstructor_CRC32_documentAttributeVideo:
		t := m.To_DocumentAttributeVideo()
		return t.Encode()
	case TLConstructor_CRC32_documentAttributeAudio:
		t := m.To_DocumentAttributeAudio()
		return t.Encode()
	case TLConstructor_CRC32_documentAttributeFilename:
		t := m.To_DocumentAttributeFilename()
		return t.Encode()
	case TLConstructor_CRC32_documentAttributeHasStickers:
		t := m.To_DocumentAttributeHasStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DocumentAttribute) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_documentAttributeImageSize:
		t := m.To_DocumentAttributeImageSize()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentAttributeAnimated:
		t := m.To_DocumentAttributeAnimated()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentAttributeSticker:
		t := m.To_DocumentAttributeSticker()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentAttributeVideo:
		t := m.To_DocumentAttributeVideo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentAttributeAudio:
		t := m.To_DocumentAttributeAudio()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentAttributeFilename:
		t := m.To_DocumentAttributeFilename()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentAttributeHasStickers:
		t := m.To_DocumentAttributeHasStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DocumentAttribute) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_documentAttributeImageSize:
		m2 := &TLDocumentAttributeImageSize{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentAttributeAnimated:
		m2 := &TLDocumentAttributeAnimated{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentAttributeSticker:
		m2 := &TLDocumentAttributeSticker{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentAttributeVideo:
		m2 := &TLDocumentAttributeVideo{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentAttributeAudio:
		m2 := &TLDocumentAttributeAudio{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentAttributeFilename:
		m2 := &TLDocumentAttributeFilename{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentAttributeHasStickers:
		m2 := &TLDocumentAttributeHasStickers{Data2: &DocumentAttribute_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// documentAttributeImageSize#6c37c15c w:int h:int = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeImageSize() *TLDocumentAttributeImageSize {
	return &TLDocumentAttributeImageSize{
		Data2: m.Data2,
	}
}

// documentAttributeAnimated#11b58939 = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeAnimated() *TLDocumentAttributeAnimated {
	return &TLDocumentAttributeAnimated{
		Data2: m.Data2,
	}
}

// documentAttributeSticker#6319d612 flags:# mask:flags.1?true alt:string stickerset:InputStickerSet mask_coords:flags.0?MaskCoords = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeSticker() *TLDocumentAttributeSticker {
	return &TLDocumentAttributeSticker{
		Data2: m.Data2,
	}
}

// documentAttributeVideo#ef02ce6 flags:# round_message:flags.0?true supports_streaming:flags.1?true duration:int w:int h:int = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeVideo() *TLDocumentAttributeVideo {
	return &TLDocumentAttributeVideo{
		Data2: m.Data2,
	}
}

// documentAttributeAudio#9852f9c6 flags:# voice:flags.10?true duration:int title:flags.0?string performer:flags.1?string waveform:flags.2?bytes = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeAudio() *TLDocumentAttributeAudio {
	return &TLDocumentAttributeAudio{
		Data2: m.Data2,
	}
}

// documentAttributeFilename#15590068 file_name:string = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeFilename() *TLDocumentAttributeFilename {
	return &TLDocumentAttributeFilename{
		Data2: m.Data2,
	}
}

// documentAttributeHasStickers#9801d2f7 = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeHasStickers() *TLDocumentAttributeHasStickers {
	return &TLDocumentAttributeHasStickers{
		Data2: m.Data2,
	}
}

// documentAttributeImageSize#6c37c15c w:int h:int = DocumentAttribute;
func (m *TLDocumentAttributeImageSize) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeImageSize,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentAttributeImageSize) SetW(v int32) { m.Data2.W = v }
func (m *TLDocumentAttributeImageSize) GetW() int32  { return m.Data2.W }

func (m *TLDocumentAttributeImageSize) SetH(v int32) { m.Data2.H = v }
func (m *TLDocumentAttributeImageSize) GetH() int32  { return m.Data2.H }

func NewTLDocumentAttributeImageSize() *TLDocumentAttributeImageSize {
	return &TLDocumentAttributeImageSize{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeImageSize) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeImageSize))

	x.Int(m.GetW())
	x.Int(m.GetH())

	return x.buf
}

func (m *TLDocumentAttributeImageSize) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeImageSize))

	x.Int(m.GetW())
	x.Int(m.GetH())

	return x.buf
}

func (m *TLDocumentAttributeImageSize) Decode(dbuf *DecodeBuf) error {
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())

	return dbuf.err
}

// documentAttributeAnimated#11b58939 = DocumentAttribute;
func (m *TLDocumentAttributeAnimated) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeAnimated,
		Data2:       m.Data2,
	}
}

func NewTLDocumentAttributeAnimated() *TLDocumentAttributeAnimated {
	return &TLDocumentAttributeAnimated{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeAnimated) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeAnimated))

	return x.buf
}

func (m *TLDocumentAttributeAnimated) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeAnimated))

	return x.buf
}

func (m *TLDocumentAttributeAnimated) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// documentAttributeSticker#6319d612 flags:# mask:flags.1?true alt:string stickerset:InputStickerSet mask_coords:flags.0?MaskCoords = DocumentAttribute;
func (m *TLDocumentAttributeSticker) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeSticker,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentAttributeSticker) SetMask(v bool) { m.Data2.Mask = v }
func (m *TLDocumentAttributeSticker) GetMask() bool  { return m.Data2.Mask }

func (m *TLDocumentAttributeSticker) SetAlt(v string) { m.Data2.Alt = v }
func (m *TLDocumentAttributeSticker) GetAlt() string  { return m.Data2.Alt }

func (m *TLDocumentAttributeSticker) SetStickerset(v *InputStickerSet) { m.Data2.Stickerset = v }
func (m *TLDocumentAttributeSticker) GetStickerset() *InputStickerSet  { return m.Data2.Stickerset }

func (m *TLDocumentAttributeSticker) SetMaskCoords(v *MaskCoords) { m.Data2.MaskCoords = v }
func (m *TLDocumentAttributeSticker) GetMaskCoords() *MaskCoords  { return m.Data2.MaskCoords }

func NewTLDocumentAttributeSticker() *TLDocumentAttributeSticker {
	return &TLDocumentAttributeSticker{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeSticker) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeSticker))

	// flags
	var flags uint32 = 0
	if m.GetMask() == true {
		flags |= 1 << 1
	}
	if m.GetMaskCoords() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetAlt())
	x.Bytes(m.GetStickerset().Encode())
	if m.GetMaskCoords() != nil {
		x.Bytes(m.GetMaskCoords().Encode())
	}

	return x.buf
}

func (m *TLDocumentAttributeSticker) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeSticker))

	// flags
	var flags uint32 = 0
	if m.GetMask() == true {
		flags |= 1 << 1
	}
	if m.GetMaskCoords() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.GetAlt())
	x.Bytes(m.GetStickerset().EncodeToLayer(layer))
	if m.GetMaskCoords() != nil {
		x.Bytes(m.GetMaskCoords().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLDocumentAttributeSticker) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetMask(true)
	}
	m.SetAlt(dbuf.String())
	m4 := &InputStickerSet{}
	m4.Decode(dbuf)
	m.SetStickerset(m4)
	if (flags & (1 << 0)) != 0 {
		m5 := &MaskCoords{}
		m5.Decode(dbuf)
		m.SetMaskCoords(m5)
	}

	return dbuf.err
}

// documentAttributeVideo#ef02ce6 flags:# round_message:flags.0?true supports_streaming:flags.1?true duration:int w:int h:int = DocumentAttribute;
func (m *TLDocumentAttributeVideo) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeVideo,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentAttributeVideo) SetRoundMessage(v bool) { m.Data2.RoundMessage = v }
func (m *TLDocumentAttributeVideo) GetRoundMessage() bool  { return m.Data2.RoundMessage }

func (m *TLDocumentAttributeVideo) SetSupportsStreaming(v bool) { m.Data2.SupportsStreaming = v }
func (m *TLDocumentAttributeVideo) GetSupportsStreaming() bool  { return m.Data2.SupportsStreaming }

func (m *TLDocumentAttributeVideo) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLDocumentAttributeVideo) GetDuration() int32  { return m.Data2.Duration }

func (m *TLDocumentAttributeVideo) SetW(v int32) { m.Data2.W = v }
func (m *TLDocumentAttributeVideo) GetW() int32  { return m.Data2.W }

func (m *TLDocumentAttributeVideo) SetH(v int32) { m.Data2.H = v }
func (m *TLDocumentAttributeVideo) GetH() int32  { return m.Data2.H }

func NewTLDocumentAttributeVideo() *TLDocumentAttributeVideo {
	return &TLDocumentAttributeVideo{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeVideo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeVideo))

	// flags
	var flags uint32 = 0
	if m.GetRoundMessage() == true {
		flags |= 1 << 0
	}
	if m.GetSupportsStreaming() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetDuration())
	x.Int(m.GetW())
	x.Int(m.GetH())

	return x.buf
}

func (m *TLDocumentAttributeVideo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeVideo))

	// flags
	var flags uint32 = 0
	if m.GetRoundMessage() == true {
		flags |= 1 << 0
	}
	if m.GetSupportsStreaming() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetDuration())
	x.Int(m.GetW())
	x.Int(m.GetH())

	return x.buf
}

func (m *TLDocumentAttributeVideo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetRoundMessage(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetSupportsStreaming(true)
	}
	m.SetDuration(dbuf.Int())
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())

	return dbuf.err
}

// documentAttributeAudio#9852f9c6 flags:# voice:flags.10?true duration:int title:flags.0?string performer:flags.1?string waveform:flags.2?bytes = DocumentAttribute;
func (m *TLDocumentAttributeAudio) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeAudio,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentAttributeAudio) SetVoice(v bool) { m.Data2.Voice = v }
func (m *TLDocumentAttributeAudio) GetVoice() bool  { return m.Data2.Voice }

func (m *TLDocumentAttributeAudio) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLDocumentAttributeAudio) GetDuration() int32  { return m.Data2.Duration }

func (m *TLDocumentAttributeAudio) SetTitle(v string) { m.Data2.Title = v }
func (m *TLDocumentAttributeAudio) GetTitle() string  { return m.Data2.Title }

func (m *TLDocumentAttributeAudio) SetPerformer(v string) { m.Data2.Performer = v }
func (m *TLDocumentAttributeAudio) GetPerformer() string  { return m.Data2.Performer }

func (m *TLDocumentAttributeAudio) SetWaveform(v []byte) { m.Data2.Waveform = v }
func (m *TLDocumentAttributeAudio) GetWaveform() []byte  { return m.Data2.Waveform }

func NewTLDocumentAttributeAudio() *TLDocumentAttributeAudio {
	return &TLDocumentAttributeAudio{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeAudio) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeAudio))

	// flags
	var flags uint32 = 0
	if m.GetVoice() == true {
		flags |= 1 << 10
	}
	if m.GetTitle() != "" {
		flags |= 1 << 0
	}
	if m.GetPerformer() != "" {
		flags |= 1 << 1
	}
	if m.GetWaveform() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(m.GetDuration())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetPerformer() != "" {
		x.String(m.GetPerformer())
	}
	if m.GetWaveform() != nil {
		x.StringBytes(m.GetWaveform())
	}

	return x.buf
}

func (m *TLDocumentAttributeAudio) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeAudio))

	// flags
	var flags uint32 = 0
	if m.GetVoice() == true {
		flags |= 1 << 10
	}
	if m.GetTitle() != "" {
		flags |= 1 << 0
	}
	if m.GetPerformer() != "" {
		flags |= 1 << 1
	}
	if m.GetWaveform() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(m.GetDuration())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetPerformer() != "" {
		x.String(m.GetPerformer())
	}
	if m.GetWaveform() != nil {
		x.StringBytes(m.GetWaveform())
	}

	return x.buf
}

func (m *TLDocumentAttributeAudio) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 10)) != 0 {
		m.SetVoice(true)
	}
	m.SetDuration(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m.SetTitle(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetPerformer(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetWaveform(dbuf.StringBytes())
	}

	return dbuf.err
}

// documentAttributeFilename#15590068 file_name:string = DocumentAttribute;
func (m *TLDocumentAttributeFilename) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeFilename,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentAttributeFilename) SetFileName(v string) { m.Data2.FileName = v }
func (m *TLDocumentAttributeFilename) GetFileName() string  { return m.Data2.FileName }

func NewTLDocumentAttributeFilename() *TLDocumentAttributeFilename {
	return &TLDocumentAttributeFilename{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeFilename) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeFilename))

	x.String(m.GetFileName())

	return x.buf
}

func (m *TLDocumentAttributeFilename) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeFilename))

	x.String(m.GetFileName())

	return x.buf
}

func (m *TLDocumentAttributeFilename) Decode(dbuf *DecodeBuf) error {
	m.SetFileName(dbuf.String())

	return dbuf.err
}

// documentAttributeHasStickers#9801d2f7 = DocumentAttribute;
func (m *TLDocumentAttributeHasStickers) To_DocumentAttribute() *DocumentAttribute {
	return &DocumentAttribute{
		Constructor: TLConstructor_CRC32_documentAttributeHasStickers,
		Data2:       m.Data2,
	}
}

func NewTLDocumentAttributeHasStickers() *TLDocumentAttributeHasStickers {
	return &TLDocumentAttributeHasStickers{Data2: &DocumentAttribute_Data{}}
}

func (m *TLDocumentAttributeHasStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeHasStickers))

	return x.buf
}

func (m *TLDocumentAttributeHasStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentAttributeHasStickers))

	return x.buf
}

func (m *TLDocumentAttributeHasStickers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputWebFileLocation <--
//  + TL_InputWebFileLocation
//  + TL_InputWebFileGeoPointLocation
//

func (m *InputWebFileLocation) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputWebFileLocation:
		t := m.To_InputWebFileLocation()
		return t.Encode()
	case TLConstructor_CRC32_inputWebFileGeoPointLocation:
		t := m.To_InputWebFileGeoPointLocation()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputWebFileLocation) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputWebFileLocation:
		t := m.To_InputWebFileLocation()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputWebFileGeoPointLocation:
		t := m.To_InputWebFileGeoPointLocation()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputWebFileLocation) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputWebFileLocation:
		m2 := &TLInputWebFileLocation{Data2: &InputWebFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputWebFileGeoPointLocation:
		m2 := &TLInputWebFileGeoPointLocation{Data2: &InputWebFileLocation_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputWebFileLocation#c239d686 url:string access_hash:long = InputWebFileLocation;
func (m *InputWebFileLocation) To_InputWebFileLocation() *TLInputWebFileLocation {
	return &TLInputWebFileLocation{
		Data2: m.Data2,
	}
}

// inputWebFileGeoPointLocation#9f2221c9 geo_point:InputGeoPoint access_hash:long w:int h:int zoom:int scale:int = InputWebFileLocation;
func (m *InputWebFileLocation) To_InputWebFileGeoPointLocation() *TLInputWebFileGeoPointLocation {
	return &TLInputWebFileGeoPointLocation{
		Data2: m.Data2,
	}
}

// inputWebFileLocation#c239d686 url:string access_hash:long = InputWebFileLocation;
func (m *TLInputWebFileLocation) To_InputWebFileLocation() *InputWebFileLocation {
	return &InputWebFileLocation{
		Constructor: TLConstructor_CRC32_inputWebFileLocation,
		Data2:       m.Data2,
	}
}

func (m *TLInputWebFileLocation) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputWebFileLocation) GetUrl() string  { return m.Data2.Url }

func (m *TLInputWebFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWebFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputWebFileLocation() *TLInputWebFileLocation {
	return &TLInputWebFileLocation{Data2: &InputWebFileLocation_Data{}}
}

func (m *TLInputWebFileLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputWebFileLocation))

	x.String(m.GetUrl())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputWebFileLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputWebFileLocation))

	x.String(m.GetUrl())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputWebFileLocation) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputWebFileGeoPointLocation#9f2221c9 geo_point:InputGeoPoint access_hash:long w:int h:int zoom:int scale:int = InputWebFileLocation;
func (m *TLInputWebFileGeoPointLocation) To_InputWebFileLocation() *InputWebFileLocation {
	return &InputWebFileLocation{
		Constructor: TLConstructor_CRC32_inputWebFileGeoPointLocation,
		Data2:       m.Data2,
	}
}

func (m *TLInputWebFileGeoPointLocation) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputWebFileGeoPointLocation) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputWebFileGeoPointLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWebFileGeoPointLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputWebFileGeoPointLocation) SetW(v int32) { m.Data2.W = v }
func (m *TLInputWebFileGeoPointLocation) GetW() int32  { return m.Data2.W }

func (m *TLInputWebFileGeoPointLocation) SetH(v int32) { m.Data2.H = v }
func (m *TLInputWebFileGeoPointLocation) GetH() int32  { return m.Data2.H }

func (m *TLInputWebFileGeoPointLocation) SetZoom(v int32) { m.Data2.Zoom = v }
func (m *TLInputWebFileGeoPointLocation) GetZoom() int32  { return m.Data2.Zoom }

func (m *TLInputWebFileGeoPointLocation) SetScale(v int32) { m.Data2.Scale = v }
func (m *TLInputWebFileGeoPointLocation) GetScale() int32  { return m.Data2.Scale }

func NewTLInputWebFileGeoPointLocation() *TLInputWebFileGeoPointLocation {
	return &TLInputWebFileGeoPointLocation{Data2: &InputWebFileLocation_Data{}}
}

func (m *TLInputWebFileGeoPointLocation) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputWebFileGeoPointLocation))

	x.Bytes(m.GetGeoPoint().Encode())
	x.Long(m.GetAccessHash())
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.Int(m.GetZoom())
	x.Int(m.GetScale())

	return x.buf
}

func (m *TLInputWebFileGeoPointLocation) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputWebFileGeoPointLocation))

	x.Bytes(m.GetGeoPoint().EncodeToLayer(layer))
	x.Long(m.GetAccessHash())
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.Int(m.GetZoom())
	x.Int(m.GetScale())

	return x.buf
}

func (m *TLInputWebFileGeoPointLocation) Decode(dbuf *DecodeBuf) error {
	m1 := &InputGeoPoint{}
	m1.Decode(dbuf)
	m.SetGeoPoint(m1)
	m.SetAccessHash(dbuf.Long())
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())
	m.SetZoom(dbuf.Int())
	m.SetScale(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentForm <--
//  + TL_PaymentsPaymentForm
//

func (m *Payments_PaymentForm) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_payments_paymentForm:
		t := m.To_PaymentsPaymentForm()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_PaymentForm) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_payments_paymentForm:
		t := m.To_PaymentsPaymentForm()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_PaymentForm) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_payments_paymentForm:
		m2 := &TLPaymentsPaymentForm{Data2: &Payments_PaymentForm_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// payments.paymentForm#3f56aea3 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true bot_id:int invoice:Invoice provider_id:int url:string native_provider:flags.4?string native_params:flags.4?DataJSON saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?PaymentSavedCredentials users:Vector<User> = payments.PaymentForm;
func (m *Payments_PaymentForm) To_PaymentsPaymentForm() *TLPaymentsPaymentForm {
	return &TLPaymentsPaymentForm{
		Data2: m.Data2,
	}
}

// payments.paymentForm#3f56aea3 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true bot_id:int invoice:Invoice provider_id:int url:string native_provider:flags.4?string native_params:flags.4?DataJSON saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?PaymentSavedCredentials users:Vector<User> = payments.PaymentForm;
func (m *TLPaymentsPaymentForm) To_Payments_PaymentForm() *Payments_PaymentForm {
	return &Payments_PaymentForm{
		Constructor: TLConstructor_CRC32_payments_paymentForm,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentsPaymentForm) SetCanSaveCredentials(v bool) { m.Data2.CanSaveCredentials = v }
func (m *TLPaymentsPaymentForm) GetCanSaveCredentials() bool  { return m.Data2.CanSaveCredentials }

func (m *TLPaymentsPaymentForm) SetPasswordMissing(v bool) { m.Data2.PasswordMissing = v }
func (m *TLPaymentsPaymentForm) GetPasswordMissing() bool  { return m.Data2.PasswordMissing }

func (m *TLPaymentsPaymentForm) SetBotId(v int32) { m.Data2.BotId = v }
func (m *TLPaymentsPaymentForm) GetBotId() int32  { return m.Data2.BotId }

func (m *TLPaymentsPaymentForm) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLPaymentsPaymentForm) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLPaymentsPaymentForm) SetProviderId(v int32) { m.Data2.ProviderId = v }
func (m *TLPaymentsPaymentForm) GetProviderId() int32  { return m.Data2.ProviderId }

func (m *TLPaymentsPaymentForm) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentForm) GetUrl() string  { return m.Data2.Url }

func (m *TLPaymentsPaymentForm) SetNativeProvider(v string) { m.Data2.NativeProvider = v }
func (m *TLPaymentsPaymentForm) GetNativeProvider() string  { return m.Data2.NativeProvider }

func (m *TLPaymentsPaymentForm) SetNativeParams(v *DataJSON) { m.Data2.NativeParams = v }
func (m *TLPaymentsPaymentForm) GetNativeParams() *DataJSON  { return m.Data2.NativeParams }

func (m *TLPaymentsPaymentForm) SetSavedInfo(v *PaymentRequestedInfo) { m.Data2.SavedInfo = v }
func (m *TLPaymentsPaymentForm) GetSavedInfo() *PaymentRequestedInfo  { return m.Data2.SavedInfo }

func (m *TLPaymentsPaymentForm) SetSavedCredentials(v *PaymentSavedCredentials) {
	m.Data2.SavedCredentials = v
}
func (m *TLPaymentsPaymentForm) GetSavedCredentials() *PaymentSavedCredentials {
	return m.Data2.SavedCredentials
}

func (m *TLPaymentsPaymentForm) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPaymentsPaymentForm) GetUsers() []*User  { return m.Data2.Users }

func NewTLPaymentsPaymentForm() *TLPaymentsPaymentForm {
	return &TLPaymentsPaymentForm{Data2: &Payments_PaymentForm_Data{}}
}

func (m *TLPaymentsPaymentForm) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentForm))

	// flags
	var flags uint32 = 0
	if m.GetCanSaveCredentials() == true {
		flags |= 1 << 2
	}
	if m.GetPasswordMissing() == true {
		flags |= 1 << 3
	}
	if m.GetNativeProvider() != "" {
		flags |= 1 << 4
	}
	if m.GetNativeParams() != nil {
		flags |= 1 << 4
	}
	if m.GetSavedInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetSavedCredentials() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetBotId())
	x.Bytes(m.GetInvoice().Encode())
	x.Int(m.GetProviderId())
	x.String(m.GetUrl())
	if m.GetNativeProvider() != "" {
		x.String(m.GetNativeProvider())
	}
	if m.GetNativeParams() != nil {
		x.Bytes(m.GetNativeParams().Encode())
	}
	if m.GetSavedInfo() != nil {
		x.Bytes(m.GetSavedInfo().Encode())
	}
	if m.GetSavedCredentials() != nil {
		x.Bytes(m.GetSavedCredentials().Encode())
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPaymentsPaymentForm) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_paymentForm))

	// flags
	var flags uint32 = 0
	if m.GetCanSaveCredentials() == true {
		flags |= 1 << 2
	}
	if m.GetPasswordMissing() == true {
		flags |= 1 << 3
	}
	if m.GetNativeProvider() != "" {
		flags |= 1 << 4
	}
	if m.GetNativeParams() != nil {
		flags |= 1 << 4
	}
	if m.GetSavedInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetSavedCredentials() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetBotId())
	x.Bytes(m.GetInvoice().EncodeToLayer(layer))
	x.Int(m.GetProviderId())
	x.String(m.GetUrl())
	if m.GetNativeProvider() != "" {
		x.String(m.GetNativeProvider())
	}
	if m.GetNativeParams() != nil {
		x.Bytes(m.GetNativeParams().EncodeToLayer(layer))
	}
	if m.GetSavedInfo() != nil {
		x.Bytes(m.GetSavedInfo().EncodeToLayer(layer))
	}
	if m.GetSavedCredentials() != nil {
		x.Bytes(m.GetSavedCredentials().EncodeToLayer(layer))
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPaymentsPaymentForm) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 2)) != 0 {
		m.SetCanSaveCredentials(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetPasswordMissing(true)
	}
	m.SetBotId(dbuf.Int())
	m5 := &Invoice{}
	m5.Decode(dbuf)
	m.SetInvoice(m5)
	m.SetProviderId(dbuf.Int())
	m.SetUrl(dbuf.String())
	if (flags & (1 << 4)) != 0 {
		m.SetNativeProvider(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m9 := &DataJSON{}
		m9.Decode(dbuf)
		m.SetNativeParams(m9)
	}
	if (flags & (1 << 0)) != 0 {
		m10 := &PaymentRequestedInfo{}
		m10.Decode(dbuf)
		m.SetSavedInfo(m10)
	}
	if (flags & (1 << 1)) != 0 {
		m11 := &PaymentSavedCredentials{}
		m11.Decode(dbuf)
		m.SetSavedCredentials(m11)
	}
	c12 := dbuf.Int()
	if c12 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 12, c12)
		return dbuf.err
	}
	l12 := dbuf.Int()
	v12 := make([]*User, l12)
	for i := int32(0); i < l12; i++ {
		v12[i] = &User{}
		v12[i].Decode(dbuf)
	}
	m.SetUsers(v12)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// LangPackString <--
//  + TL_LangPackString
//  + TL_LangPackStringPluralized
//  + TL_LangPackStringDeleted
//

func (m *LangPackString) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_langPackString:
		t := m.To_LangPackString()
		return t.Encode()
	case TLConstructor_CRC32_langPackStringPluralized:
		t := m.To_LangPackStringPluralized()
		return t.Encode()
	case TLConstructor_CRC32_langPackStringDeleted:
		t := m.To_LangPackStringDeleted()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LangPackString) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_langPackString:
		t := m.To_LangPackString()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_langPackStringPluralized:
		t := m.To_LangPackStringPluralized()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_langPackStringDeleted:
		t := m.To_LangPackStringDeleted()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LangPackString) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_langPackString:
		m2 := &TLLangPackString{Data2: &LangPackString_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_langPackStringPluralized:
		m2 := &TLLangPackStringPluralized{Data2: &LangPackString_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_langPackStringDeleted:
		m2 := &TLLangPackStringDeleted{Data2: &LangPackString_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// langPackString#cad181f6 key:string value:string = LangPackString;
func (m *LangPackString) To_LangPackString() *TLLangPackString {
	return &TLLangPackString{
		Data2: m.Data2,
	}
}

// langPackStringPluralized#6c47ac9f flags:# key:string zero_value:flags.0?string one_value:flags.1?string two_value:flags.2?string few_value:flags.3?string many_value:flags.4?string other_value:string = LangPackString;
func (m *LangPackString) To_LangPackStringPluralized() *TLLangPackStringPluralized {
	return &TLLangPackStringPluralized{
		Data2: m.Data2,
	}
}

// langPackStringDeleted#2979eeb2 key:string = LangPackString;
func (m *LangPackString) To_LangPackStringDeleted() *TLLangPackStringDeleted {
	return &TLLangPackStringDeleted{
		Data2: m.Data2,
	}
}

// langPackString#cad181f6 key:string value:string = LangPackString;
func (m *TLLangPackString) To_LangPackString() *LangPackString {
	return &LangPackString{
		Constructor: TLConstructor_CRC32_langPackString,
		Data2:       m.Data2,
	}
}

func (m *TLLangPackString) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackString) GetKey() string  { return m.Data2.Key }

func (m *TLLangPackString) SetValue(v string) { m.Data2.Value = v }
func (m *TLLangPackString) GetValue() string  { return m.Data2.Value }

func NewTLLangPackString() *TLLangPackString {
	return &TLLangPackString{Data2: &LangPackString_Data{}}
}

func (m *TLLangPackString) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackString))

	x.String(m.GetKey())
	x.String(m.GetValue())

	return x.buf
}

func (m *TLLangPackString) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackString))

	x.String(m.GetKey())
	x.String(m.GetValue())

	return x.buf
}

func (m *TLLangPackString) Decode(dbuf *DecodeBuf) error {
	m.SetKey(dbuf.String())
	m.SetValue(dbuf.String())

	return dbuf.err
}

// langPackStringPluralized#6c47ac9f flags:# key:string zero_value:flags.0?string one_value:flags.1?string two_value:flags.2?string few_value:flags.3?string many_value:flags.4?string other_value:string = LangPackString;
func (m *TLLangPackStringPluralized) To_LangPackString() *LangPackString {
	return &LangPackString{
		Constructor: TLConstructor_CRC32_langPackStringPluralized,
		Data2:       m.Data2,
	}
}

func (m *TLLangPackStringPluralized) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackStringPluralized) GetKey() string  { return m.Data2.Key }

func (m *TLLangPackStringPluralized) SetZeroValue(v string) { m.Data2.ZeroValue = v }
func (m *TLLangPackStringPluralized) GetZeroValue() string  { return m.Data2.ZeroValue }

func (m *TLLangPackStringPluralized) SetOneValue(v string) { m.Data2.OneValue = v }
func (m *TLLangPackStringPluralized) GetOneValue() string  { return m.Data2.OneValue }

func (m *TLLangPackStringPluralized) SetTwoValue(v string) { m.Data2.TwoValue = v }
func (m *TLLangPackStringPluralized) GetTwoValue() string  { return m.Data2.TwoValue }

func (m *TLLangPackStringPluralized) SetFewValue(v string) { m.Data2.FewValue = v }
func (m *TLLangPackStringPluralized) GetFewValue() string  { return m.Data2.FewValue }

func (m *TLLangPackStringPluralized) SetManyValue(v string) { m.Data2.ManyValue = v }
func (m *TLLangPackStringPluralized) GetManyValue() string  { return m.Data2.ManyValue }

func (m *TLLangPackStringPluralized) SetOtherValue(v string) { m.Data2.OtherValue = v }
func (m *TLLangPackStringPluralized) GetOtherValue() string  { return m.Data2.OtherValue }

func NewTLLangPackStringPluralized() *TLLangPackStringPluralized {
	return &TLLangPackStringPluralized{Data2: &LangPackString_Data{}}
}

func (m *TLLangPackStringPluralized) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackStringPluralized))

	// flags
	var flags uint32 = 0
	if m.GetZeroValue() != "" {
		flags |= 1 << 0
	}
	if m.GetOneValue() != "" {
		flags |= 1 << 1
	}
	if m.GetTwoValue() != "" {
		flags |= 1 << 2
	}
	if m.GetFewValue() != "" {
		flags |= 1 << 3
	}
	if m.GetManyValue() != "" {
		flags |= 1 << 4
	}
	x.UInt(flags)

	x.String(m.GetKey())
	if m.GetZeroValue() != "" {
		x.String(m.GetZeroValue())
	}
	if m.GetOneValue() != "" {
		x.String(m.GetOneValue())
	}
	if m.GetTwoValue() != "" {
		x.String(m.GetTwoValue())
	}
	if m.GetFewValue() != "" {
		x.String(m.GetFewValue())
	}
	if m.GetManyValue() != "" {
		x.String(m.GetManyValue())
	}
	x.String(m.GetOtherValue())

	return x.buf
}

func (m *TLLangPackStringPluralized) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackStringPluralized))

	// flags
	var flags uint32 = 0
	if m.GetZeroValue() != "" {
		flags |= 1 << 0
	}
	if m.GetOneValue() != "" {
		flags |= 1 << 1
	}
	if m.GetTwoValue() != "" {
		flags |= 1 << 2
	}
	if m.GetFewValue() != "" {
		flags |= 1 << 3
	}
	if m.GetManyValue() != "" {
		flags |= 1 << 4
	}
	x.UInt(flags)

	x.String(m.GetKey())
	if m.GetZeroValue() != "" {
		x.String(m.GetZeroValue())
	}
	if m.GetOneValue() != "" {
		x.String(m.GetOneValue())
	}
	if m.GetTwoValue() != "" {
		x.String(m.GetTwoValue())
	}
	if m.GetFewValue() != "" {
		x.String(m.GetFewValue())
	}
	if m.GetManyValue() != "" {
		x.String(m.GetManyValue())
	}
	x.String(m.GetOtherValue())

	return x.buf
}

func (m *TLLangPackStringPluralized) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetKey(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m.SetZeroValue(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetOneValue(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTwoValue(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetFewValue(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m.SetManyValue(dbuf.String())
	}
	m.SetOtherValue(dbuf.String())

	return dbuf.err
}

// langPackStringDeleted#2979eeb2 key:string = LangPackString;
func (m *TLLangPackStringDeleted) To_LangPackString() *LangPackString {
	return &LangPackString{
		Constructor: TLConstructor_CRC32_langPackStringDeleted,
		Data2:       m.Data2,
	}
}

func (m *TLLangPackStringDeleted) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackStringDeleted) GetKey() string  { return m.Data2.Key }

func NewTLLangPackStringDeleted() *TLLangPackStringDeleted {
	return &TLLangPackStringDeleted{Data2: &LangPackString_Data{}}
}

func (m *TLLangPackStringDeleted) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackStringDeleted))

	x.String(m.GetKey())

	return x.buf
}

func (m *TLLangPackStringDeleted) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackStringDeleted))

	x.String(m.GetKey())

	return x.buf
}

func (m *TLLangPackStringDeleted) Decode(dbuf *DecodeBuf) error {
	m.SetKey(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// LangPackLanguage <--
//  + TL_LangPackLanguage
//

func (m *LangPackLanguage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_langPackLanguage:
		t := m.To_LangPackLanguage()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LangPackLanguage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_langPackLanguage:
		t := m.To_LangPackLanguage()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *LangPackLanguage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_langPackLanguage:
		m2 := &TLLangPackLanguage{Data2: &LangPackLanguage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// langPackLanguage#117698f1 name:string native_name:string lang_code:string = LangPackLanguage;
func (m *LangPackLanguage) To_LangPackLanguage() *TLLangPackLanguage {
	return &TLLangPackLanguage{
		Data2: m.Data2,
	}
}

// langPackLanguage#117698f1 name:string native_name:string lang_code:string = LangPackLanguage;
func (m *TLLangPackLanguage) To_LangPackLanguage() *LangPackLanguage {
	return &LangPackLanguage{
		Constructor: TLConstructor_CRC32_langPackLanguage,
		Data2:       m.Data2,
	}
}

func (m *TLLangPackLanguage) SetName(v string) { m.Data2.Name = v }
func (m *TLLangPackLanguage) GetName() string  { return m.Data2.Name }

func (m *TLLangPackLanguage) SetNativeName(v string) { m.Data2.NativeName = v }
func (m *TLLangPackLanguage) GetNativeName() string  { return m.Data2.NativeName }

func (m *TLLangPackLanguage) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackLanguage) GetLangCode() string  { return m.Data2.LangCode }

func NewTLLangPackLanguage() *TLLangPackLanguage {
	return &TLLangPackLanguage{Data2: &LangPackLanguage_Data{}}
}

func (m *TLLangPackLanguage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackLanguage))

	x.String(m.GetName())
	x.String(m.GetNativeName())
	x.String(m.GetLangCode())

	return x.buf
}

func (m *TLLangPackLanguage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langPackLanguage))

	x.String(m.GetName())
	x.String(m.GetNativeName())
	x.String(m.GetLangCode())

	return x.buf
}

func (m *TLLangPackLanguage) Decode(dbuf *DecodeBuf) error {
	m.SetName(dbuf.String())
	m.SetNativeName(dbuf.String())
	m.SetLangCode(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPrivacyRule <--
//  + TL_InputPrivacyValueAllowContacts
//  + TL_InputPrivacyValueAllowAll
//  + TL_InputPrivacyValueAllowUsers
//  + TL_InputPrivacyValueDisallowContacts
//  + TL_InputPrivacyValueDisallowAll
//  + TL_InputPrivacyValueDisallowUsers
//

func (m *InputPrivacyRule) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPrivacyValueAllowContacts:
		t := m.To_InputPrivacyValueAllowContacts()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyValueAllowAll:
		t := m.To_InputPrivacyValueAllowAll()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyValueAllowUsers:
		t := m.To_InputPrivacyValueAllowUsers()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyValueDisallowContacts:
		t := m.To_InputPrivacyValueDisallowContacts()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyValueDisallowAll:
		t := m.To_InputPrivacyValueDisallowAll()
		return t.Encode()
	case TLConstructor_CRC32_inputPrivacyValueDisallowUsers:
		t := m.To_InputPrivacyValueDisallowUsers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPrivacyRule) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPrivacyValueAllowContacts:
		t := m.To_InputPrivacyValueAllowContacts()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyValueAllowAll:
		t := m.To_InputPrivacyValueAllowAll()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyValueAllowUsers:
		t := m.To_InputPrivacyValueAllowUsers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyValueDisallowContacts:
		t := m.To_InputPrivacyValueDisallowContacts()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyValueDisallowAll:
		t := m.To_InputPrivacyValueDisallowAll()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPrivacyValueDisallowUsers:
		t := m.To_InputPrivacyValueDisallowUsers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPrivacyRule) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPrivacyValueAllowContacts:
		m2 := &TLInputPrivacyValueAllowContacts{Data2: &InputPrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyValueAllowAll:
		m2 := &TLInputPrivacyValueAllowAll{Data2: &InputPrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyValueAllowUsers:
		m2 := &TLInputPrivacyValueAllowUsers{Data2: &InputPrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyValueDisallowContacts:
		m2 := &TLInputPrivacyValueDisallowContacts{Data2: &InputPrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyValueDisallowAll:
		m2 := &TLInputPrivacyValueDisallowAll{Data2: &InputPrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPrivacyValueDisallowUsers:
		m2 := &TLInputPrivacyValueDisallowUsers{Data2: &InputPrivacyRule_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPrivacyValueAllowContacts#d09e07b = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowContacts() *TLInputPrivacyValueAllowContacts {
	return &TLInputPrivacyValueAllowContacts{
		Data2: m.Data2,
	}
}

// inputPrivacyValueAllowAll#184b35ce = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowAll() *TLInputPrivacyValueAllowAll {
	return &TLInputPrivacyValueAllowAll{
		Data2: m.Data2,
	}
}

// inputPrivacyValueAllowUsers#131cc67f users:Vector<InputUser> = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowUsers() *TLInputPrivacyValueAllowUsers {
	return &TLInputPrivacyValueAllowUsers{
		Data2: m.Data2,
	}
}

// inputPrivacyValueDisallowContacts#ba52007 = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowContacts() *TLInputPrivacyValueDisallowContacts {
	return &TLInputPrivacyValueDisallowContacts{
		Data2: m.Data2,
	}
}

// inputPrivacyValueDisallowAll#d66b66c9 = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowAll() *TLInputPrivacyValueDisallowAll {
	return &TLInputPrivacyValueDisallowAll{
		Data2: m.Data2,
	}
}

// inputPrivacyValueDisallowUsers#90110467 users:Vector<InputUser> = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowUsers() *TLInputPrivacyValueDisallowUsers {
	return &TLInputPrivacyValueDisallowUsers{
		Data2: m.Data2,
	}
}

// inputPrivacyValueAllowContacts#d09e07b = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowContacts) To_InputPrivacyRule() *InputPrivacyRule {
	return &InputPrivacyRule{
		Constructor: TLConstructor_CRC32_inputPrivacyValueAllowContacts,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyValueAllowContacts() *TLInputPrivacyValueAllowContacts {
	return &TLInputPrivacyValueAllowContacts{Data2: &InputPrivacyRule_Data{}}
}

func (m *TLInputPrivacyValueAllowContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowContacts))

	return x.buf
}

func (m *TLInputPrivacyValueAllowContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowContacts))

	return x.buf
}

func (m *TLInputPrivacyValueAllowContacts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPrivacyValueAllowAll#184b35ce = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowAll) To_InputPrivacyRule() *InputPrivacyRule {
	return &InputPrivacyRule{
		Constructor: TLConstructor_CRC32_inputPrivacyValueAllowAll,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyValueAllowAll() *TLInputPrivacyValueAllowAll {
	return &TLInputPrivacyValueAllowAll{Data2: &InputPrivacyRule_Data{}}
}

func (m *TLInputPrivacyValueAllowAll) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowAll))

	return x.buf
}

func (m *TLInputPrivacyValueAllowAll) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowAll))

	return x.buf
}

func (m *TLInputPrivacyValueAllowAll) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPrivacyValueAllowUsers#131cc67f users:Vector<InputUser> = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowUsers) To_InputPrivacyRule() *InputPrivacyRule {
	return &InputPrivacyRule{
		Constructor: TLConstructor_CRC32_inputPrivacyValueAllowUsers,
		Data2:       m.Data2,
	}
}

func (m *TLInputPrivacyValueAllowUsers) SetUsers(v []*InputUser) { m.Data2.Users = v }
func (m *TLInputPrivacyValueAllowUsers) GetUsers() []*InputUser  { return m.Data2.Users }

func NewTLInputPrivacyValueAllowUsers() *TLInputPrivacyValueAllowUsers {
	return &TLInputPrivacyValueAllowUsers{Data2: &InputPrivacyRule_Data{}}
}

func (m *TLInputPrivacyValueAllowUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowUsers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLInputPrivacyValueAllowUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowUsers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLInputPrivacyValueAllowUsers) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*InputUser, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &InputUser{}
		v1[i].Decode(dbuf)
	}
	m.SetUsers(v1)

	return dbuf.err
}

// inputPrivacyValueDisallowContacts#ba52007 = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowContacts) To_InputPrivacyRule() *InputPrivacyRule {
	return &InputPrivacyRule{
		Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowContacts,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyValueDisallowContacts() *TLInputPrivacyValueDisallowContacts {
	return &TLInputPrivacyValueDisallowContacts{Data2: &InputPrivacyRule_Data{}}
}

func (m *TLInputPrivacyValueDisallowContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowContacts))

	return x.buf
}

func (m *TLInputPrivacyValueDisallowContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowContacts))

	return x.buf
}

func (m *TLInputPrivacyValueDisallowContacts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPrivacyValueDisallowAll#d66b66c9 = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowAll) To_InputPrivacyRule() *InputPrivacyRule {
	return &InputPrivacyRule{
		Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowAll,
		Data2:       m.Data2,
	}
}

func NewTLInputPrivacyValueDisallowAll() *TLInputPrivacyValueDisallowAll {
	return &TLInputPrivacyValueDisallowAll{Data2: &InputPrivacyRule_Data{}}
}

func (m *TLInputPrivacyValueDisallowAll) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowAll))

	return x.buf
}

func (m *TLInputPrivacyValueDisallowAll) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowAll))

	return x.buf
}

func (m *TLInputPrivacyValueDisallowAll) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPrivacyValueDisallowUsers#90110467 users:Vector<InputUser> = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowUsers) To_InputPrivacyRule() *InputPrivacyRule {
	return &InputPrivacyRule{
		Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowUsers,
		Data2:       m.Data2,
	}
}

func (m *TLInputPrivacyValueDisallowUsers) SetUsers(v []*InputUser) { m.Data2.Users = v }
func (m *TLInputPrivacyValueDisallowUsers) GetUsers() []*InputUser  { return m.Data2.Users }

func NewTLInputPrivacyValueDisallowUsers() *TLInputPrivacyValueDisallowUsers {
	return &TLInputPrivacyValueDisallowUsers{Data2: &InputPrivacyRule_Data{}}
}

func (m *TLInputPrivacyValueDisallowUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowUsers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLInputPrivacyValueDisallowUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowUsers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLInputPrivacyValueDisallowUsers) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*InputUser, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &InputUser{}
		v1[i].Decode(dbuf)
	}
	m.SetUsers(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InlineBotSwitchPM <--
//  + TL_InlineBotSwitchPM
//

func (m *InlineBotSwitchPM) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inlineBotSwitchPM:
		t := m.To_InlineBotSwitchPM()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InlineBotSwitchPM) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inlineBotSwitchPM:
		t := m.To_InlineBotSwitchPM()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InlineBotSwitchPM) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inlineBotSwitchPM:
		m2 := &TLInlineBotSwitchPM{Data2: &InlineBotSwitchPM_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inlineBotSwitchPM#3c20629f text:string start_param:string = InlineBotSwitchPM;
func (m *InlineBotSwitchPM) To_InlineBotSwitchPM() *TLInlineBotSwitchPM {
	return &TLInlineBotSwitchPM{
		Data2: m.Data2,
	}
}

// inlineBotSwitchPM#3c20629f text:string start_param:string = InlineBotSwitchPM;
func (m *TLInlineBotSwitchPM) To_InlineBotSwitchPM() *InlineBotSwitchPM {
	return &InlineBotSwitchPM{
		Constructor: TLConstructor_CRC32_inlineBotSwitchPM,
		Data2:       m.Data2,
	}
}

func (m *TLInlineBotSwitchPM) SetText(v string) { m.Data2.Text = v }
func (m *TLInlineBotSwitchPM) GetText() string  { return m.Data2.Text }

func (m *TLInlineBotSwitchPM) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLInlineBotSwitchPM) GetStartParam() string  { return m.Data2.StartParam }

func NewTLInlineBotSwitchPM() *TLInlineBotSwitchPM {
	return &TLInlineBotSwitchPM{Data2: &InlineBotSwitchPM_Data{}}
}

func (m *TLInlineBotSwitchPM) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inlineBotSwitchPM))

	x.String(m.GetText())
	x.String(m.GetStartParam())

	return x.buf
}

func (m *TLInlineBotSwitchPM) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inlineBotSwitchPM))

	x.String(m.GetText())
	x.String(m.GetStartParam())

	return x.buf
}

func (m *TLInlineBotSwitchPM) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())
	m.SetStartParam(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureData <--
//  + TL_SecureData
//

func (m *SecureData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureData:
		t := m.To_SecureData()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureData:
		t := m.To_SecureData()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureData:
		m2 := &TLSecureData{Data2: &SecureData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureData#8aeabec3 data:bytes data_hash:bytes secret:bytes = SecureData;
func (m *SecureData) To_SecureData() *TLSecureData {
	return &TLSecureData{
		Data2: m.Data2,
	}
}

// secureData#8aeabec3 data:bytes data_hash:bytes secret:bytes = SecureData;
func (m *TLSecureData) To_SecureData() *SecureData {
	return &SecureData{
		Constructor: TLConstructor_CRC32_secureData,
		Data2:       m.Data2,
	}
}

func (m *TLSecureData) SetData(v []byte) { m.Data2.Data = v }
func (m *TLSecureData) GetData() []byte  { return m.Data2.Data }

func (m *TLSecureData) SetDataHash(v []byte) { m.Data2.DataHash = v }
func (m *TLSecureData) GetDataHash() []byte  { return m.Data2.DataHash }

func (m *TLSecureData) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureData) GetSecret() []byte  { return m.Data2.Secret }

func NewTLSecureData() *TLSecureData {
	return &TLSecureData{Data2: &SecureData_Data{}}
}

func (m *TLSecureData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureData))

	x.StringBytes(m.GetData())
	x.StringBytes(m.GetDataHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLSecureData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureData))

	x.StringBytes(m.GetData())
	x.StringBytes(m.GetDataHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLSecureData) Decode(dbuf *DecodeBuf) error {
	m.SetData(dbuf.StringBytes())
	m.SetDataHash(dbuf.StringBytes())
	m.SetSecret(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// DraftMessage <--
//  + TL_DraftMessageEmpty
//  + TL_DraftMessage
//

func (m *DraftMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_draftMessageEmpty:
		t := m.To_DraftMessageEmpty()
		return t.Encode()
	case TLConstructor_CRC32_draftMessage:
		t := m.To_DraftMessage()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DraftMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_draftMessageEmpty:
		t := m.To_DraftMessageEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_draftMessage:
		t := m.To_DraftMessage()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *DraftMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_draftMessageEmpty:
		m2 := &TLDraftMessageEmpty{Data2: &DraftMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_draftMessage:
		m2 := &TLDraftMessage{Data2: &DraftMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// draftMessageEmpty#1b0c841a flags:# date:flags.0?int = DraftMessage;
func (m *DraftMessage) To_DraftMessageEmpty() *TLDraftMessageEmpty {
	return &TLDraftMessageEmpty{
		Data2: m.Data2,
	}
}

// draftMessage#fd8e711f flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int message:string entities:flags.3?Vector<MessageEntity> date:int = DraftMessage;
func (m *DraftMessage) To_DraftMessage() *TLDraftMessage {
	return &TLDraftMessage{
		Data2: m.Data2,
	}
}

// draftMessageEmpty#1b0c841a flags:# date:flags.0?int = DraftMessage;
func (m *TLDraftMessageEmpty) To_DraftMessage() *DraftMessage {
	return &DraftMessage{
		Constructor: TLConstructor_CRC32_draftMessageEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLDraftMessageEmpty) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDraftMessageEmpty) GetDate() int32  { return m.Data2.Date }

func NewTLDraftMessageEmpty() *TLDraftMessageEmpty {
	return &TLDraftMessageEmpty{Data2: &DraftMessage_Data{}}
}

func (m *TLDraftMessageEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_draftMessageEmpty))

	// flags
	var flags uint32 = 0
	if m.GetDate() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetDate() != 0 {
		x.Int(m.GetDate())
	}

	return x.buf
}

func (m *TLDraftMessageEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_draftMessageEmpty))

	// flags
	var flags uint32 = 0
	if m.GetDate() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetDate() != 0 {
		x.Int(m.GetDate())
	}

	return x.buf
}

func (m *TLDraftMessageEmpty) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetDate(dbuf.Int())
	}

	return dbuf.err
}

// draftMessage#fd8e711f flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int message:string entities:flags.3?Vector<MessageEntity> date:int = DraftMessage;
func (m *TLDraftMessage) To_DraftMessage() *DraftMessage {
	return &DraftMessage{
		Constructor: TLConstructor_CRC32_draftMessage,
		Data2:       m.Data2,
	}
}

func (m *TLDraftMessage) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLDraftMessage) GetNoWebpage() bool  { return m.Data2.NoWebpage }

func (m *TLDraftMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLDraftMessage) GetReplyToMsgId() int32  { return m.Data2.ReplyToMsgId }

func (m *TLDraftMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLDraftMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLDraftMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLDraftMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLDraftMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDraftMessage) GetDate() int32  { return m.Data2.Date }

func NewTLDraftMessage() *TLDraftMessage {
	return &TLDraftMessage{Data2: &DraftMessage_Data{}}
}

func (m *TLDraftMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_draftMessage))

	// flags
	var flags uint32 = 0
	if m.GetNoWebpage() == true {
		flags |= 1 << 1
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLDraftMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_draftMessage))

	// flags
	var flags uint32 = 0
	if m.GetNoWebpage() == true {
		flags |= 1 << 1
	}
	if m.GetReplyToMsgId() != 0 {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetReplyToMsgId() != 0 {
		x.Int(m.GetReplyToMsgId())
	}
	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLDraftMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetNoWebpage(true)
	}
	if (flags & (1 << 0)) != 0 {
		m.SetReplyToMsgId(dbuf.Int())
	}
	m.SetMessage(dbuf.String())
	if (flags & (1 << 3)) != 0 {
		c5 := dbuf.Int()
		if c5 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
			return dbuf.err
		}
		l5 := dbuf.Int()
		v5 := make([]*MessageEntity, l5)
		for i := int32(0); i < l5; i++ {
			v5[i] = &MessageEntity{}
			v5[i].Decode(dbuf)
		}
		m.SetEntities(v5)

	}
	m.SetDate(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPaymentCredentials <--
//  + TL_InputPaymentCredentialsSaved
//  + TL_InputPaymentCredentials
//  + TL_InputPaymentCredentialsApplePay
//  + TL_InputPaymentCredentialsAndroidPay
//

func (m *InputPaymentCredentials) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPaymentCredentialsSaved:
		t := m.To_InputPaymentCredentialsSaved()
		return t.Encode()
	case TLConstructor_CRC32_inputPaymentCredentials:
		t := m.To_InputPaymentCredentials()
		return t.Encode()
	case TLConstructor_CRC32_inputPaymentCredentialsApplePay:
		t := m.To_InputPaymentCredentialsApplePay()
		return t.Encode()
	case TLConstructor_CRC32_inputPaymentCredentialsAndroidPay:
		t := m.To_InputPaymentCredentialsAndroidPay()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPaymentCredentials) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPaymentCredentialsSaved:
		t := m.To_InputPaymentCredentialsSaved()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPaymentCredentials:
		t := m.To_InputPaymentCredentials()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPaymentCredentialsApplePay:
		t := m.To_InputPaymentCredentialsApplePay()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPaymentCredentialsAndroidPay:
		t := m.To_InputPaymentCredentialsAndroidPay()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPaymentCredentials) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPaymentCredentialsSaved:
		m2 := &TLInputPaymentCredentialsSaved{Data2: &InputPaymentCredentials_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPaymentCredentials:
		m2 := &TLInputPaymentCredentials{Data2: &InputPaymentCredentials_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPaymentCredentialsApplePay:
		m2 := &TLInputPaymentCredentialsApplePay{Data2: &InputPaymentCredentials_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPaymentCredentialsAndroidPay:
		m2 := &TLInputPaymentCredentialsAndroidPay{Data2: &InputPaymentCredentials_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentialsSaved() *TLInputPaymentCredentialsSaved {
	return &TLInputPaymentCredentialsSaved{
		Data2: m.Data2,
	}
}

// inputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentials() *TLInputPaymentCredentials {
	return &TLInputPaymentCredentials{
		Data2: m.Data2,
	}
}

// inputPaymentCredentialsApplePay#aa1c39f payment_data:DataJSON = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentialsApplePay() *TLInputPaymentCredentialsApplePay {
	return &TLInputPaymentCredentialsApplePay{
		Data2: m.Data2,
	}
}

// inputPaymentCredentialsAndroidPay#ca05d50e payment_token:DataJSON google_transaction_id:string = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentialsAndroidPay() *TLInputPaymentCredentialsAndroidPay {
	return &TLInputPaymentCredentialsAndroidPay{
		Data2: m.Data2,
	}
}

// inputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials;
func (m *TLInputPaymentCredentialsSaved) To_InputPaymentCredentials() *InputPaymentCredentials {
	return &InputPaymentCredentials{
		Constructor: TLConstructor_CRC32_inputPaymentCredentialsSaved,
		Data2:       m.Data2,
	}
}

func (m *TLInputPaymentCredentialsSaved) SetId(v string) { m.Data2.Id = v }
func (m *TLInputPaymentCredentialsSaved) GetId() string  { return m.Data2.Id }

func (m *TLInputPaymentCredentialsSaved) SetTmpPassword(v []byte) { m.Data2.TmpPassword = v }
func (m *TLInputPaymentCredentialsSaved) GetTmpPassword() []byte  { return m.Data2.TmpPassword }

func NewTLInputPaymentCredentialsSaved() *TLInputPaymentCredentialsSaved {
	return &TLInputPaymentCredentialsSaved{Data2: &InputPaymentCredentials_Data{}}
}

func (m *TLInputPaymentCredentialsSaved) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsSaved))

	x.String(m.GetId())
	x.StringBytes(m.GetTmpPassword())

	return x.buf
}

func (m *TLInputPaymentCredentialsSaved) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsSaved))

	x.String(m.GetId())
	x.StringBytes(m.GetTmpPassword())

	return x.buf
}

func (m *TLInputPaymentCredentialsSaved) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.String())
	m.SetTmpPassword(dbuf.StringBytes())

	return dbuf.err
}

// inputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;
func (m *TLInputPaymentCredentials) To_InputPaymentCredentials() *InputPaymentCredentials {
	return &InputPaymentCredentials{
		Constructor: TLConstructor_CRC32_inputPaymentCredentials,
		Data2:       m.Data2,
	}
}

func (m *TLInputPaymentCredentials) SetSave(v bool) { m.Data2.Save = v }
func (m *TLInputPaymentCredentials) GetSave() bool  { return m.Data2.Save }

func (m *TLInputPaymentCredentials) SetData(v *DataJSON) { m.Data2.Data = v }
func (m *TLInputPaymentCredentials) GetData() *DataJSON  { return m.Data2.Data }

func NewTLInputPaymentCredentials() *TLInputPaymentCredentials {
	return &TLInputPaymentCredentials{Data2: &InputPaymentCredentials_Data{}}
}

func (m *TLInputPaymentCredentials) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentials))

	// flags
	var flags uint32 = 0
	if m.GetSave() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetData().Encode())

	return x.buf
}

func (m *TLInputPaymentCredentials) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentials))

	// flags
	var flags uint32 = 0
	if m.GetSave() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.GetData().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputPaymentCredentials) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetSave(true)
	}
	m3 := &DataJSON{}
	m3.Decode(dbuf)
	m.SetData(m3)

	return dbuf.err
}

// inputPaymentCredentialsApplePay#aa1c39f payment_data:DataJSON = InputPaymentCredentials;
func (m *TLInputPaymentCredentialsApplePay) To_InputPaymentCredentials() *InputPaymentCredentials {
	return &InputPaymentCredentials{
		Constructor: TLConstructor_CRC32_inputPaymentCredentialsApplePay,
		Data2:       m.Data2,
	}
}

func (m *TLInputPaymentCredentialsApplePay) SetPaymentData(v *DataJSON) { m.Data2.PaymentData = v }
func (m *TLInputPaymentCredentialsApplePay) GetPaymentData() *DataJSON  { return m.Data2.PaymentData }

func NewTLInputPaymentCredentialsApplePay() *TLInputPaymentCredentialsApplePay {
	return &TLInputPaymentCredentialsApplePay{Data2: &InputPaymentCredentials_Data{}}
}

func (m *TLInputPaymentCredentialsApplePay) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsApplePay))

	x.Bytes(m.GetPaymentData().Encode())

	return x.buf
}

func (m *TLInputPaymentCredentialsApplePay) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsApplePay))

	x.Bytes(m.GetPaymentData().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputPaymentCredentialsApplePay) Decode(dbuf *DecodeBuf) error {
	m1 := &DataJSON{}
	m1.Decode(dbuf)
	m.SetPaymentData(m1)

	return dbuf.err
}

// inputPaymentCredentialsAndroidPay#ca05d50e payment_token:DataJSON google_transaction_id:string = InputPaymentCredentials;
func (m *TLInputPaymentCredentialsAndroidPay) To_InputPaymentCredentials() *InputPaymentCredentials {
	return &InputPaymentCredentials{
		Constructor: TLConstructor_CRC32_inputPaymentCredentialsAndroidPay,
		Data2:       m.Data2,
	}
}

func (m *TLInputPaymentCredentialsAndroidPay) SetPaymentToken(v *DataJSON) { m.Data2.PaymentToken = v }
func (m *TLInputPaymentCredentialsAndroidPay) GetPaymentToken() *DataJSON  { return m.Data2.PaymentToken }

func (m *TLInputPaymentCredentialsAndroidPay) SetGoogleTransactionId(v string) {
	m.Data2.GoogleTransactionId = v
}
func (m *TLInputPaymentCredentialsAndroidPay) GetGoogleTransactionId() string {
	return m.Data2.GoogleTransactionId
}

func NewTLInputPaymentCredentialsAndroidPay() *TLInputPaymentCredentialsAndroidPay {
	return &TLInputPaymentCredentialsAndroidPay{Data2: &InputPaymentCredentials_Data{}}
}

func (m *TLInputPaymentCredentialsAndroidPay) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsAndroidPay))

	x.Bytes(m.GetPaymentToken().Encode())
	x.String(m.GetGoogleTransactionId())

	return x.buf
}

func (m *TLInputPaymentCredentialsAndroidPay) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsAndroidPay))

	x.Bytes(m.GetPaymentToken().EncodeToLayer(layer))
	x.String(m.GetGoogleTransactionId())

	return x.buf
}

func (m *TLInputPaymentCredentialsAndroidPay) Decode(dbuf *DecodeBuf) error {
	m1 := &DataJSON{}
	m1.Decode(dbuf)
	m.SetPaymentToken(m1)
	m.SetGoogleTransactionId(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_Authorization <--
//  + TL_AuthAuthorization
//

func (m *Auth_Authorization) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_authorization:
		t := m.To_AuthAuthorization()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_Authorization) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_authorization:
		t := m.To_AuthAuthorization()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_Authorization) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_authorization:
		m2 := &TLAuthAuthorization{Data2: &Auth_Authorization_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.authorization#cd050916 flags:# tmp_sessions:flags.0?int user:User = auth.Authorization;
func (m *Auth_Authorization) To_AuthAuthorization() *TLAuthAuthorization {
	return &TLAuthAuthorization{
		Data2: m.Data2,
	}
}

// auth.authorization#cd050916 flags:# tmp_sessions:flags.0?int user:User = auth.Authorization;
func (m *TLAuthAuthorization) To_Auth_Authorization() *Auth_Authorization {
	return &Auth_Authorization{
		Constructor: TLConstructor_CRC32_auth_authorization,
		Data2:       m.Data2,
	}
}

func (m *TLAuthAuthorization) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLAuthAuthorization) GetTmpSessions() int32  { return m.Data2.TmpSessions }

func (m *TLAuthAuthorization) SetUser(v *User) { m.Data2.User = v }
func (m *TLAuthAuthorization) GetUser() *User  { return m.Data2.User }

func NewTLAuthAuthorization() *TLAuthAuthorization {
	return &TLAuthAuthorization{Data2: &Auth_Authorization_Data{}}
}

func (m *TLAuthAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_authorization))

	// flags
	var flags uint32 = 0
	if m.GetTmpSessions() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetTmpSessions() != 0 {
		x.Int(m.GetTmpSessions())
	}
	x.Bytes(m.GetUser().Encode())

	return x.buf
}

func (m *TLAuthAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_authorization))

	// flags
	var flags uint32 = 0
	if m.GetTmpSessions() != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	if m.GetTmpSessions() != 0 {
		x.Int(m.GetTmpSessions())
	}
	x.Bytes(m.GetUser().EncodeToLayer(layer))

	return x.buf
}

func (m *TLAuthAuthorization) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetTmpSessions(dbuf.Int())
	}
	m3 := &User{}
	m3.Decode(dbuf)
	m.SetUser(m3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Dialog <--
//  + TL_Dialog
//

func (m *Dialog) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_dialog:
		t := m.To_Dialog()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Dialog) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_dialog:
		t := m.To_Dialog()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Dialog) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_dialog:
		m2 := &TLDialog{Data2: &Dialog_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// dialog#e4def5db flags:# pinned:flags.2?true unread_mark:flags.3?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage = Dialog;
func (m *Dialog) To_Dialog() *TLDialog {
	return &TLDialog{
		Data2: m.Data2,
	}
}

// dialog#e4def5db flags:# pinned:flags.2?true unread_mark:flags.3?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage = Dialog;
func (m *TLDialog) To_Dialog() *Dialog {
	return &Dialog{
		Constructor: TLConstructor_CRC32_dialog,
		Data2:       m.Data2,
	}
}

func (m *TLDialog) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLDialog) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLDialog) SetUnreadMark(v bool) { m.Data2.UnreadMark = v }
func (m *TLDialog) GetUnreadMark() bool  { return m.Data2.UnreadMark }

func (m *TLDialog) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialog) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLDialog) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLDialog) GetTopMessage() int32  { return m.Data2.TopMessage }

func (m *TLDialog) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLDialog) GetReadInboxMaxId() int32  { return m.Data2.ReadInboxMaxId }

func (m *TLDialog) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLDialog) GetReadOutboxMaxId() int32  { return m.Data2.ReadOutboxMaxId }

func (m *TLDialog) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLDialog) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLDialog) SetUnreadMentionsCount(v int32) { m.Data2.UnreadMentionsCount = v }
func (m *TLDialog) GetUnreadMentionsCount() int32  { return m.Data2.UnreadMentionsCount }

func (m *TLDialog) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLDialog) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLDialog) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLDialog) GetPts() int32  { return m.Data2.Pts }

func (m *TLDialog) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLDialog) GetDraft() *DraftMessage  { return m.Data2.Draft }

func NewTLDialog() *TLDialog {
	return &TLDialog{Data2: &Dialog_Data{}}
}

func (m *TLDialog) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dialog))

	// flags
	var flags uint32 = 0
	if m.GetPinned() == true {
		flags |= 1 << 2
	}
	if m.GetUnreadMark() == true {
		flags |= 1 << 3
	}
	if m.GetPts() != 0 {
		flags |= 1 << 0
	}
	if m.GetDraft() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetPeer().Encode())
	x.Int(m.GetTopMessage())
	x.Int(m.GetReadInboxMaxId())
	x.Int(m.GetReadOutboxMaxId())
	x.Int(m.GetUnreadCount())
	x.Int(m.GetUnreadMentionsCount())
	x.Bytes(m.GetNotifySettings().Encode())
	if m.GetPts() != 0 {
		x.Int(m.GetPts())
	}
	if m.GetDraft() != nil {
		x.Bytes(m.GetDraft().Encode())
	}

	return x.buf
}

func (m *TLDialog) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_dialog))

	// flags
	var flags uint32 = 0
	if m.GetPinned() == true {
		flags |= 1 << 2
	}
	if m.GetUnreadMark() == true {
		flags |= 1 << 3
	}
	if m.GetPts() != 0 {
		flags |= 1 << 0
	}
	if m.GetDraft() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetPeer().EncodeToLayer(layer))
	x.Int(m.GetTopMessage())
	x.Int(m.GetReadInboxMaxId())
	x.Int(m.GetReadOutboxMaxId())
	x.Int(m.GetUnreadCount())
	x.Int(m.GetUnreadMentionsCount())
	x.Bytes(m.GetNotifySettings().EncodeToLayer(layer))
	if m.GetPts() != 0 {
		x.Int(m.GetPts())
	}
	if m.GetDraft() != nil {
		x.Bytes(m.GetDraft().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLDialog) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 2)) != 0 {
		m.SetPinned(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetUnreadMark(true)
	}
	m4 := &Peer{}
	m4.Decode(dbuf)
	m.SetPeer(m4)
	m.SetTopMessage(dbuf.Int())
	m.SetReadInboxMaxId(dbuf.Int())
	m.SetReadOutboxMaxId(dbuf.Int())
	m.SetUnreadCount(dbuf.Int())
	m.SetUnreadMentionsCount(dbuf.Int())
	m10 := &PeerNotifySettings{}
	m10.Decode(dbuf)
	m.SetNotifySettings(m10)
	if (flags & (1 << 0)) != 0 {
		m.SetPts(dbuf.Int())
	}
	if (flags & (1 << 1)) != 0 {
		m12 := &DraftMessage{}
		m12.Decode(dbuf)
		m.SetDraft(m12)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_PasswordRecovery <--
//  + TL_AuthPasswordRecovery
//

func (m *Auth_PasswordRecovery) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_passwordRecovery:
		t := m.To_AuthPasswordRecovery()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_PasswordRecovery) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_passwordRecovery:
		t := m.To_AuthPasswordRecovery()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_PasswordRecovery) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_passwordRecovery:
		m2 := &TLAuthPasswordRecovery{Data2: &Auth_PasswordRecovery_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.passwordRecovery#137948a5 email_pattern:string = auth.PasswordRecovery;
func (m *Auth_PasswordRecovery) To_AuthPasswordRecovery() *TLAuthPasswordRecovery {
	return &TLAuthPasswordRecovery{
		Data2: m.Data2,
	}
}

// auth.passwordRecovery#137948a5 email_pattern:string = auth.PasswordRecovery;
func (m *TLAuthPasswordRecovery) To_Auth_PasswordRecovery() *Auth_PasswordRecovery {
	return &Auth_PasswordRecovery{
		Constructor: TLConstructor_CRC32_auth_passwordRecovery,
		Data2:       m.Data2,
	}
}

func (m *TLAuthPasswordRecovery) SetEmailPattern(v string) { m.Data2.EmailPattern = v }
func (m *TLAuthPasswordRecovery) GetEmailPattern() string  { return m.Data2.EmailPattern }

func NewTLAuthPasswordRecovery() *TLAuthPasswordRecovery {
	return &TLAuthPasswordRecovery{Data2: &Auth_PasswordRecovery_Data{}}
}

func (m *TLAuthPasswordRecovery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_passwordRecovery))

	x.String(m.GetEmailPattern())

	return x.buf
}

func (m *TLAuthPasswordRecovery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_passwordRecovery))

	x.String(m.GetEmailPattern())

	return x.buf
}

func (m *TLAuthPasswordRecovery) Decode(dbuf *DecodeBuf) error {
	m.SetEmailPattern(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// BotInlineMessage <--
//  + TL_BotInlineMessageMediaAuto
//  + TL_BotInlineMessageText
//  + TL_BotInlineMessageMediaGeo
//  + TL_BotInlineMessageMediaVenue
//  + TL_BotInlineMessageMediaContact
//

func (m *BotInlineMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_botInlineMessageMediaAuto:
		t := m.To_BotInlineMessageMediaAuto()
		return t.Encode()
	case TLConstructor_CRC32_botInlineMessageText:
		t := m.To_BotInlineMessageText()
		return t.Encode()
	case TLConstructor_CRC32_botInlineMessageMediaGeo:
		t := m.To_BotInlineMessageMediaGeo()
		return t.Encode()
	case TLConstructor_CRC32_botInlineMessageMediaVenue:
		t := m.To_BotInlineMessageMediaVenue()
		return t.Encode()
	case TLConstructor_CRC32_botInlineMessageMediaContact:
		t := m.To_BotInlineMessageMediaContact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotInlineMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_botInlineMessageMediaAuto:
		t := m.To_BotInlineMessageMediaAuto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_botInlineMessageText:
		t := m.To_BotInlineMessageText()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_botInlineMessageMediaGeo:
		t := m.To_BotInlineMessageMediaGeo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_botInlineMessageMediaVenue:
		t := m.To_BotInlineMessageMediaVenue()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_botInlineMessageMediaContact:
		t := m.To_BotInlineMessageMediaContact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotInlineMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_botInlineMessageMediaAuto:
		m2 := &TLBotInlineMessageMediaAuto{Data2: &BotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_botInlineMessageText:
		m2 := &TLBotInlineMessageText{Data2: &BotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_botInlineMessageMediaGeo:
		m2 := &TLBotInlineMessageMediaGeo{Data2: &BotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_botInlineMessageMediaVenue:
		m2 := &TLBotInlineMessageMediaVenue{Data2: &BotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_botInlineMessageMediaContact:
		m2 := &TLBotInlineMessageMediaContact{Data2: &BotInlineMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// botInlineMessageMediaAuto#764cf810 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaAuto() *TLBotInlineMessageMediaAuto {
	return &TLBotInlineMessageMediaAuto{
		Data2: m.Data2,
	}
}

// botInlineMessageText#8c7f65e2 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageText() *TLBotInlineMessageText {
	return &TLBotInlineMessageText{
		Data2: m.Data2,
	}
}

// botInlineMessageMediaGeo#b722de65 flags:# geo:GeoPoint period:int reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaGeo() *TLBotInlineMessageMediaGeo {
	return &TLBotInlineMessageMediaGeo{
		Data2: m.Data2,
	}
}

// botInlineMessageMediaVenue#8a86659c flags:# geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaVenue() *TLBotInlineMessageMediaVenue {
	return &TLBotInlineMessageMediaVenue{
		Data2: m.Data2,
	}
}

// botInlineMessageMediaContact#18d1cdc2 flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaContact() *TLBotInlineMessageMediaContact {
	return &TLBotInlineMessageMediaContact{
		Data2: m.Data2,
	}
}

// botInlineMessageMediaAuto#764cf810 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaAuto) To_BotInlineMessage() *BotInlineMessage {
	return &BotInlineMessage{
		Constructor: TLConstructor_CRC32_botInlineMessageMediaAuto,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineMessageMediaAuto) SetMessage(v string) { m.Data2.Message = v }
func (m *TLBotInlineMessageMediaAuto) GetMessage() string  { return m.Data2.Message }

func (m *TLBotInlineMessageMediaAuto) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLBotInlineMessageMediaAuto) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLBotInlineMessageMediaAuto) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaAuto) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLBotInlineMessageMediaAuto() *TLBotInlineMessageMediaAuto {
	return &TLBotInlineMessageMediaAuto{Data2: &BotInlineMessage_Data{}}
}

func (m *TLBotInlineMessageMediaAuto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaAuto))

	// flags
	var flags uint32 = 0
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaAuto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaAuto))

	// flags
	var flags uint32 = 0
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaAuto) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetMessage(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		c3 := dbuf.Int()
		if c3 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
			return dbuf.err
		}
		l3 := dbuf.Int()
		v3 := make([]*MessageEntity, l3)
		for i := int32(0); i < l3; i++ {
			v3[i] = &MessageEntity{}
			v3[i].Decode(dbuf)
		}
		m.SetEntities(v3)

	}
	if (flags & (1 << 2)) != 0 {
		m4 := &ReplyMarkup{}
		m4.Decode(dbuf)
		m.SetReplyMarkup(m4)
	}

	return dbuf.err
}

// botInlineMessageText#8c7f65e2 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageText) To_BotInlineMessage() *BotInlineMessage {
	return &BotInlineMessage{
		Constructor: TLConstructor_CRC32_botInlineMessageText,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineMessageText) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLBotInlineMessageText) GetNoWebpage() bool  { return m.Data2.NoWebpage }

func (m *TLBotInlineMessageText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLBotInlineMessageText) GetMessage() string  { return m.Data2.Message }

func (m *TLBotInlineMessageText) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLBotInlineMessageText) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLBotInlineMessageText) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageText) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLBotInlineMessageText() *TLBotInlineMessageText {
	return &TLBotInlineMessageText{Data2: &BotInlineMessage_Data{}}
}

func (m *TLBotInlineMessageText) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageText))

	// flags
	var flags uint32 = 0
	if m.GetNoWebpage() == true {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLBotInlineMessageText) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageText))

	// flags
	var flags uint32 = 0
	if m.GetNoWebpage() == true {
		flags |= 1 << 0
	}
	if m.GetEntities() != nil {
		flags |= 1 << 1
	}
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetMessage())
	if m.GetEntities() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLBotInlineMessageText) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetNoWebpage(true)
	}
	m.SetMessage(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		c4 := dbuf.Int()
		if c4 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
			return dbuf.err
		}
		l4 := dbuf.Int()
		v4 := make([]*MessageEntity, l4)
		for i := int32(0); i < l4; i++ {
			v4[i] = &MessageEntity{}
			v4[i].Decode(dbuf)
		}
		m.SetEntities(v4)

	}
	if (flags & (1 << 2)) != 0 {
		m5 := &ReplyMarkup{}
		m5.Decode(dbuf)
		m.SetReplyMarkup(m5)
	}

	return dbuf.err
}

// botInlineMessageMediaGeo#b722de65 flags:# geo:GeoPoint period:int reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaGeo) To_BotInlineMessage() *BotInlineMessage {
	return &BotInlineMessage{
		Constructor: TLConstructor_CRC32_botInlineMessageMediaGeo,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineMessageMediaGeo) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaGeo) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaGeo) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLBotInlineMessageMediaGeo) GetPeriod() int32  { return m.Data2.Period }

func (m *TLBotInlineMessageMediaGeo) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaGeo) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLBotInlineMessageMediaGeo() *TLBotInlineMessageMediaGeo {
	return &TLBotInlineMessageMediaGeo{Data2: &BotInlineMessage_Data{}}
}

func (m *TLBotInlineMessageMediaGeo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaGeo))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeo().Encode())
	x.Int(m.GetPeriod())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaGeo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaGeo))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeo().EncodeToLayer(layer))
	x.Int(m.GetPeriod())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaGeo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &GeoPoint{}
	m2.Decode(dbuf)
	m.SetGeo(m2)
	m.SetPeriod(dbuf.Int())
	if (flags & (1 << 2)) != 0 {
		m4 := &ReplyMarkup{}
		m4.Decode(dbuf)
		m.SetReplyMarkup(m4)
	}

	return dbuf.err
}

// botInlineMessageMediaVenue#8a86659c flags:# geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaVenue) To_BotInlineMessage() *BotInlineMessage {
	return &BotInlineMessage{
		Constructor: TLConstructor_CRC32_botInlineMessageMediaVenue,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineMessageMediaVenue) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaVenue) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMessageMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLBotInlineMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLBotInlineMessageMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLBotInlineMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLBotInlineMessageMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLBotInlineMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLBotInlineMessageMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLBotInlineMessageMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLBotInlineMessageMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func (m *TLBotInlineMessageMediaVenue) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaVenue) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLBotInlineMessageMediaVenue() *TLBotInlineMessageMediaVenue {
	return &TLBotInlineMessageMediaVenue{Data2: &BotInlineMessage_Data{}}
}

func (m *TLBotInlineMessageMediaVenue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaVenue))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeo().Encode())
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaVenue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaVenue))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetGeo().EncodeToLayer(layer))
	x.String(m.GetTitle())
	x.String(m.GetAddress())
	x.String(m.GetProvider())
	x.String(m.GetVenueId())
	x.String(m.GetVenueType())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaVenue) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &GeoPoint{}
	m2.Decode(dbuf)
	m.SetGeo(m2)
	m.SetTitle(dbuf.String())
	m.SetAddress(dbuf.String())
	m.SetProvider(dbuf.String())
	m.SetVenueId(dbuf.String())
	m.SetVenueType(dbuf.String())
	if (flags & (1 << 2)) != 0 {
		m8 := &ReplyMarkup{}
		m8.Decode(dbuf)
		m.SetReplyMarkup(m8)
	}

	return dbuf.err
}

// botInlineMessageMediaContact#18d1cdc2 flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaContact) To_BotInlineMessage() *BotInlineMessage {
	return &BotInlineMessage{
		Constructor: TLConstructor_CRC32_botInlineMessageMediaContact,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLBotInlineMessageMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLBotInlineMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLBotInlineMessageMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLBotInlineMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLBotInlineMessageMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLBotInlineMessageMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLBotInlineMessageMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLBotInlineMessageMediaContact) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaContact) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func NewTLBotInlineMessageMediaContact() *TLBotInlineMessageMediaContact {
	return &TLBotInlineMessageMediaContact{Data2: &BotInlineMessage_Data{}}
}

func (m *TLBotInlineMessageMediaContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaContact))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().Encode())
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaContact))

	// flags
	var flags uint32 = 0
	if m.GetReplyMarkup() != nil {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.String(m.GetPhoneNumber())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.String(m.GetVcard())
	if m.GetReplyMarkup() != nil {
		x.Bytes(m.GetReplyMarkup().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLBotInlineMessageMediaContact) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetPhoneNumber(dbuf.String())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())
	m.SetVcard(dbuf.String())
	if (flags & (1 << 2)) != 0 {
		m6 := &ReplyMarkup{}
		m6.Decode(dbuf)
		m.SetReplyMarkup(m6)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecurePlainData <--
//  + TL_SecurePlainPhone
//  + TL_SecurePlainEmail
//

func (m *SecurePlainData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_securePlainPhone:
		t := m.To_SecurePlainPhone()
		return t.Encode()
	case TLConstructor_CRC32_securePlainEmail:
		t := m.To_SecurePlainEmail()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecurePlainData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_securePlainPhone:
		t := m.To_SecurePlainPhone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_securePlainEmail:
		t := m.To_SecurePlainEmail()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecurePlainData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_securePlainPhone:
		m2 := &TLSecurePlainPhone{Data2: &SecurePlainData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_securePlainEmail:
		m2 := &TLSecurePlainEmail{Data2: &SecurePlainData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// securePlainPhone#7d6099dd phone:string = SecurePlainData;
func (m *SecurePlainData) To_SecurePlainPhone() *TLSecurePlainPhone {
	return &TLSecurePlainPhone{
		Data2: m.Data2,
	}
}

// securePlainEmail#21ec5a5f email:string = SecurePlainData;
func (m *SecurePlainData) To_SecurePlainEmail() *TLSecurePlainEmail {
	return &TLSecurePlainEmail{
		Data2: m.Data2,
	}
}

// securePlainPhone#7d6099dd phone:string = SecurePlainData;
func (m *TLSecurePlainPhone) To_SecurePlainData() *SecurePlainData {
	return &SecurePlainData{
		Constructor: TLConstructor_CRC32_securePlainPhone,
		Data2:       m.Data2,
	}
}

func (m *TLSecurePlainPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLSecurePlainPhone) GetPhone() string  { return m.Data2.Phone }

func NewTLSecurePlainPhone() *TLSecurePlainPhone {
	return &TLSecurePlainPhone{Data2: &SecurePlainData_Data{}}
}

func (m *TLSecurePlainPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePlainPhone))

	x.String(m.GetPhone())

	return x.buf
}

func (m *TLSecurePlainPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePlainPhone))

	x.String(m.GetPhone())

	return x.buf
}

func (m *TLSecurePlainPhone) Decode(dbuf *DecodeBuf) error {
	m.SetPhone(dbuf.String())

	return dbuf.err
}

// securePlainEmail#21ec5a5f email:string = SecurePlainData;
func (m *TLSecurePlainEmail) To_SecurePlainData() *SecurePlainData {
	return &SecurePlainData{
		Constructor: TLConstructor_CRC32_securePlainEmail,
		Data2:       m.Data2,
	}
}

func (m *TLSecurePlainEmail) SetEmail(v string) { m.Data2.Email = v }
func (m *TLSecurePlainEmail) GetEmail() string  { return m.Data2.Email }

func NewTLSecurePlainEmail() *TLSecurePlainEmail {
	return &TLSecurePlainEmail{Data2: &SecurePlainData_Data{}}
}

func (m *TLSecurePlainEmail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePlainEmail))

	x.String(m.GetEmail())

	return x.buf
}

func (m *TLSecurePlainEmail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_securePlainEmail))

	x.String(m.GetEmail())

	return x.buf
}

func (m *TLSecurePlainEmail) Decode(dbuf *DecodeBuf) error {
	m.SetEmail(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Error <--
//  + TL_Error
//

func (m *Error) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_error:
		t := m.To_Error()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Error) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_error:
		t := m.To_Error()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Error) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_error:
		m2 := &TLError{Data2: &Error_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// error#c4b9f9bb code:int text:string = Error;
func (m *Error) To_Error() *TLError {
	return &TLError{
		Data2: m.Data2,
	}
}

// error#c4b9f9bb code:int text:string = Error;
func (m *TLError) To_Error() *Error {
	return &Error{
		Constructor: TLConstructor_CRC32_error,
		Data2:       m.Data2,
	}
}

func (m *TLError) SetCode(v int32) { m.Data2.Code = v }
func (m *TLError) GetCode() int32  { return m.Data2.Code }

func (m *TLError) SetText(v string) { m.Data2.Text = v }
func (m *TLError) GetText() string  { return m.Data2.Text }

func NewTLError() *TLError {
	return &TLError{Data2: &Error_Data{}}
}

func (m *TLError) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_error))

	x.Int(m.GetCode())
	x.String(m.GetText())

	return x.buf
}

func (m *TLError) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_error))

	x.Int(m.GetCode())
	x.String(m.GetText())

	return x.buf
}

func (m *TLError) Decode(dbuf *DecodeBuf) error {
	m.SetCode(dbuf.Int())
	m.SetText(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Invoice <--
//  + TL_Invoice
//

func (m *Invoice) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_invoice:
		t := m.To_Invoice()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Invoice) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_invoice:
		t := m.To_Invoice()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Invoice) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_invoice:
		m2 := &TLInvoice{Data2: &Invoice_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// invoice#c30aa358 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true currency:string prices:Vector<LabeledPrice> = Invoice;
func (m *Invoice) To_Invoice() *TLInvoice {
	return &TLInvoice{
		Data2: m.Data2,
	}
}

// invoice#c30aa358 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true currency:string prices:Vector<LabeledPrice> = Invoice;
func (m *TLInvoice) To_Invoice() *Invoice {
	return &Invoice{
		Constructor: TLConstructor_CRC32_invoice,
		Data2:       m.Data2,
	}
}

func (m *TLInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLInvoice) GetTest() bool  { return m.Data2.Test }

func (m *TLInvoice) SetNameRequested(v bool) { m.Data2.NameRequested = v }
func (m *TLInvoice) GetNameRequested() bool  { return m.Data2.NameRequested }

func (m *TLInvoice) SetPhoneRequested(v bool) { m.Data2.PhoneRequested = v }
func (m *TLInvoice) GetPhoneRequested() bool  { return m.Data2.PhoneRequested }

func (m *TLInvoice) SetEmailRequested(v bool) { m.Data2.EmailRequested = v }
func (m *TLInvoice) GetEmailRequested() bool  { return m.Data2.EmailRequested }

func (m *TLInvoice) SetShippingAddressRequested(v bool) { m.Data2.ShippingAddressRequested = v }
func (m *TLInvoice) GetShippingAddressRequested() bool  { return m.Data2.ShippingAddressRequested }

func (m *TLInvoice) SetFlexible(v bool) { m.Data2.Flexible = v }
func (m *TLInvoice) GetFlexible() bool  { return m.Data2.Flexible }

func (m *TLInvoice) SetPhoneToProvider(v bool) { m.Data2.PhoneToProvider = v }
func (m *TLInvoice) GetPhoneToProvider() bool  { return m.Data2.PhoneToProvider }

func (m *TLInvoice) SetEmailToProvider(v bool) { m.Data2.EmailToProvider = v }
func (m *TLInvoice) GetEmailToProvider() bool  { return m.Data2.EmailToProvider }

func (m *TLInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLInvoice) GetCurrency() string  { return m.Data2.Currency }

func (m *TLInvoice) SetPrices(v []*LabeledPrice) { m.Data2.Prices = v }
func (m *TLInvoice) GetPrices() []*LabeledPrice  { return m.Data2.Prices }

func NewTLInvoice() *TLInvoice {
	return &TLInvoice{Data2: &Invoice_Data{}}
}

func (m *TLInvoice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invoice))

	// flags
	var flags uint32 = 0
	if m.GetTest() == true {
		flags |= 1 << 0
	}
	if m.GetNameRequested() == true {
		flags |= 1 << 1
	}
	if m.GetPhoneRequested() == true {
		flags |= 1 << 2
	}
	if m.GetEmailRequested() == true {
		flags |= 1 << 3
	}
	if m.GetShippingAddressRequested() == true {
		flags |= 1 << 4
	}
	if m.GetFlexible() == true {
		flags |= 1 << 5
	}
	if m.GetPhoneToProvider() == true {
		flags |= 1 << 6
	}
	if m.GetEmailToProvider() == true {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.String(m.GetCurrency())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPrices())))
	for _, v := range m.GetPrices() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLInvoice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invoice))

	// flags
	var flags uint32 = 0
	if m.GetTest() == true {
		flags |= 1 << 0
	}
	if m.GetNameRequested() == true {
		flags |= 1 << 1
	}
	if m.GetPhoneRequested() == true {
		flags |= 1 << 2
	}
	if m.GetEmailRequested() == true {
		flags |= 1 << 3
	}
	if m.GetShippingAddressRequested() == true {
		flags |= 1 << 4
	}
	if m.GetFlexible() == true {
		flags |= 1 << 5
	}
	if m.GetPhoneToProvider() == true {
		flags |= 1 << 6
	}
	if m.GetEmailToProvider() == true {
		flags |= 1 << 7
	}
	x.UInt(flags)

	x.String(m.GetCurrency())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPrices())))
	for _, v := range m.GetPrices() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLInvoice) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetTest(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetNameRequested(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetPhoneRequested(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetEmailRequested(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetShippingAddressRequested(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetFlexible(true)
	}
	if (flags & (1 << 6)) != 0 {
		m.SetPhoneToProvider(true)
	}
	if (flags & (1 << 7)) != 0 {
		m.SetEmailToProvider(true)
	}
	m.SetCurrency(dbuf.String())
	c11 := dbuf.Int()
	if c11 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
		return dbuf.err
	}
	l11 := dbuf.Int()
	v11 := make([]*LabeledPrice, l11)
	for i := int32(0); i < l11; i++ {
		v11[i] = &LabeledPrice{}
		v11[i].Decode(dbuf)
	}
	m.SetPrices(v11)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Upload_WebFile <--
//  + TL_UploadWebFile
//

func (m *Upload_WebFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_upload_webFile:
		t := m.To_UploadWebFile()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Upload_WebFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_upload_webFile:
		t := m.To_UploadWebFile()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Upload_WebFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_upload_webFile:
		m2 := &TLUploadWebFile{Data2: &Upload_WebFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// upload.webFile#21e753bc size:int mime_type:string file_type:storage.FileType mtime:int bytes:bytes = upload.WebFile;
func (m *Upload_WebFile) To_UploadWebFile() *TLUploadWebFile {
	return &TLUploadWebFile{
		Data2: m.Data2,
	}
}

// upload.webFile#21e753bc size:int mime_type:string file_type:storage.FileType mtime:int bytes:bytes = upload.WebFile;
func (m *TLUploadWebFile) To_Upload_WebFile() *Upload_WebFile {
	return &Upload_WebFile{
		Constructor: TLConstructor_CRC32_upload_webFile,
		Data2:       m.Data2,
	}
}

func (m *TLUploadWebFile) SetSize(v int32) { m.Data2.Size = v }
func (m *TLUploadWebFile) GetSize() int32  { return m.Data2.Size }

func (m *TLUploadWebFile) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLUploadWebFile) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLUploadWebFile) SetFileType(v *Storage_FileType) { m.Data2.FileType = v }
func (m *TLUploadWebFile) GetFileType() *Storage_FileType  { return m.Data2.FileType }

func (m *TLUploadWebFile) SetMtime(v int32) { m.Data2.Mtime = v }
func (m *TLUploadWebFile) GetMtime() int32  { return m.Data2.Mtime }

func (m *TLUploadWebFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadWebFile) GetBytes() []byte  { return m.Data2.Bytes }

func NewTLUploadWebFile() *TLUploadWebFile {
	return &TLUploadWebFile{Data2: &Upload_WebFile_Data{}}
}

func (m *TLUploadWebFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_webFile))

	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Bytes(m.GetFileType().Encode())
	x.Int(m.GetMtime())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLUploadWebFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_webFile))

	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Bytes(m.GetFileType().EncodeToLayer(layer))
	x.Int(m.GetMtime())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLUploadWebFile) Decode(dbuf *DecodeBuf) error {
	m.SetSize(dbuf.Int())
	m.SetMimeType(dbuf.String())
	m3 := &Storage_FileType{}
	m3.Decode(dbuf)
	m.SetFileType(m3)
	m.SetMtime(dbuf.Int())
	m.SetBytes(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// RecentMeUrl <--
//  + TL_RecentMeUrlUnknown
//  + TL_RecentMeUrlUser
//  + TL_RecentMeUrlChat
//  + TL_RecentMeUrlChatInvite
//  + TL_RecentMeUrlStickerSet
//

func (m *RecentMeUrl) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_recentMeUrlUnknown:
		t := m.To_RecentMeUrlUnknown()
		return t.Encode()
	case TLConstructor_CRC32_recentMeUrlUser:
		t := m.To_RecentMeUrlUser()
		return t.Encode()
	case TLConstructor_CRC32_recentMeUrlChat:
		t := m.To_RecentMeUrlChat()
		return t.Encode()
	case TLConstructor_CRC32_recentMeUrlChatInvite:
		t := m.To_RecentMeUrlChatInvite()
		return t.Encode()
	case TLConstructor_CRC32_recentMeUrlStickerSet:
		t := m.To_RecentMeUrlStickerSet()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RecentMeUrl) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_recentMeUrlUnknown:
		t := m.To_RecentMeUrlUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_recentMeUrlUser:
		t := m.To_RecentMeUrlUser()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_recentMeUrlChat:
		t := m.To_RecentMeUrlChat()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_recentMeUrlChatInvite:
		t := m.To_RecentMeUrlChatInvite()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_recentMeUrlStickerSet:
		t := m.To_RecentMeUrlStickerSet()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RecentMeUrl) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_recentMeUrlUnknown:
		m2 := &TLRecentMeUrlUnknown{Data2: &RecentMeUrl_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_recentMeUrlUser:
		m2 := &TLRecentMeUrlUser{Data2: &RecentMeUrl_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_recentMeUrlChat:
		m2 := &TLRecentMeUrlChat{Data2: &RecentMeUrl_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_recentMeUrlChatInvite:
		m2 := &TLRecentMeUrlChatInvite{Data2: &RecentMeUrl_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_recentMeUrlStickerSet:
		m2 := &TLRecentMeUrlStickerSet{Data2: &RecentMeUrl_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// recentMeUrlUnknown#46e1d13d url:string = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlUnknown() *TLRecentMeUrlUnknown {
	return &TLRecentMeUrlUnknown{
		Data2: m.Data2,
	}
}

// recentMeUrlUser#8dbc3336 url:string user_id:int = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlUser() *TLRecentMeUrlUser {
	return &TLRecentMeUrlUser{
		Data2: m.Data2,
	}
}

// recentMeUrlChat#a01b22f9 url:string chat_id:int = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlChat() *TLRecentMeUrlChat {
	return &TLRecentMeUrlChat{
		Data2: m.Data2,
	}
}

// recentMeUrlChatInvite#eb49081d url:string chat_invite:ChatInvite = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlChatInvite() *TLRecentMeUrlChatInvite {
	return &TLRecentMeUrlChatInvite{
		Data2: m.Data2,
	}
}

// recentMeUrlStickerSet#bc0a57dc url:string set:StickerSetCovered = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlStickerSet() *TLRecentMeUrlStickerSet {
	return &TLRecentMeUrlStickerSet{
		Data2: m.Data2,
	}
}

// recentMeUrlUnknown#46e1d13d url:string = RecentMeUrl;
func (m *TLRecentMeUrlUnknown) To_RecentMeUrl() *RecentMeUrl {
	return &RecentMeUrl{
		Constructor: TLConstructor_CRC32_recentMeUrlUnknown,
		Data2:       m.Data2,
	}
}

func (m *TLRecentMeUrlUnknown) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlUnknown) GetUrl() string  { return m.Data2.Url }

func NewTLRecentMeUrlUnknown() *TLRecentMeUrlUnknown {
	return &TLRecentMeUrlUnknown{Data2: &RecentMeUrl_Data{}}
}

func (m *TLRecentMeUrlUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlUnknown))

	x.String(m.GetUrl())

	return x.buf
}

func (m *TLRecentMeUrlUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlUnknown))

	x.String(m.GetUrl())

	return x.buf
}

func (m *TLRecentMeUrlUnknown) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())

	return dbuf.err
}

// recentMeUrlUser#8dbc3336 url:string user_id:int = RecentMeUrl;
func (m *TLRecentMeUrlUser) To_RecentMeUrl() *RecentMeUrl {
	return &RecentMeUrl{
		Constructor: TLConstructor_CRC32_recentMeUrlUser,
		Data2:       m.Data2,
	}
}

func (m *TLRecentMeUrlUser) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlUser) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLRecentMeUrlUser) GetUserId() int32  { return m.Data2.UserId }

func NewTLRecentMeUrlUser() *TLRecentMeUrlUser {
	return &TLRecentMeUrlUser{Data2: &RecentMeUrl_Data{}}
}

func (m *TLRecentMeUrlUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlUser))

	x.String(m.GetUrl())
	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLRecentMeUrlUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlUser))

	x.String(m.GetUrl())
	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLRecentMeUrlUser) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// recentMeUrlChat#a01b22f9 url:string chat_id:int = RecentMeUrl;
func (m *TLRecentMeUrlChat) To_RecentMeUrl() *RecentMeUrl {
	return &RecentMeUrl{
		Constructor: TLConstructor_CRC32_recentMeUrlChat,
		Data2:       m.Data2,
	}
}

func (m *TLRecentMeUrlChat) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlChat) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLRecentMeUrlChat) GetChatId() int32  { return m.Data2.ChatId }

func NewTLRecentMeUrlChat() *TLRecentMeUrlChat {
	return &TLRecentMeUrlChat{Data2: &RecentMeUrl_Data{}}
}

func (m *TLRecentMeUrlChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlChat))

	x.String(m.GetUrl())
	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLRecentMeUrlChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlChat))

	x.String(m.GetUrl())
	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLRecentMeUrlChat) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetChatId(dbuf.Int())

	return dbuf.err
}

// recentMeUrlChatInvite#eb49081d url:string chat_invite:ChatInvite = RecentMeUrl;
func (m *TLRecentMeUrlChatInvite) To_RecentMeUrl() *RecentMeUrl {
	return &RecentMeUrl{
		Constructor: TLConstructor_CRC32_recentMeUrlChatInvite,
		Data2:       m.Data2,
	}
}

func (m *TLRecentMeUrlChatInvite) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlChatInvite) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlChatInvite) SetChatInvite(v *ChatInvite) { m.Data2.ChatInvite = v }
func (m *TLRecentMeUrlChatInvite) GetChatInvite() *ChatInvite  { return m.Data2.ChatInvite }

func NewTLRecentMeUrlChatInvite() *TLRecentMeUrlChatInvite {
	return &TLRecentMeUrlChatInvite{Data2: &RecentMeUrl_Data{}}
}

func (m *TLRecentMeUrlChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlChatInvite))

	x.String(m.GetUrl())
	x.Bytes(m.GetChatInvite().Encode())

	return x.buf
}

func (m *TLRecentMeUrlChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlChatInvite))

	x.String(m.GetUrl())
	x.Bytes(m.GetChatInvite().EncodeToLayer(layer))

	return x.buf
}

func (m *TLRecentMeUrlChatInvite) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m2 := &ChatInvite{}
	m2.Decode(dbuf)
	m.SetChatInvite(m2)

	return dbuf.err
}

// recentMeUrlStickerSet#bc0a57dc url:string set:StickerSetCovered = RecentMeUrl;
func (m *TLRecentMeUrlStickerSet) To_RecentMeUrl() *RecentMeUrl {
	return &RecentMeUrl{
		Constructor: TLConstructor_CRC32_recentMeUrlStickerSet,
		Data2:       m.Data2,
	}
}

func (m *TLRecentMeUrlStickerSet) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlStickerSet) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlStickerSet) SetSet(v *StickerSetCovered) { m.Data2.Set = v }
func (m *TLRecentMeUrlStickerSet) GetSet() *StickerSetCovered  { return m.Data2.Set }

func NewTLRecentMeUrlStickerSet() *TLRecentMeUrlStickerSet {
	return &TLRecentMeUrlStickerSet{Data2: &RecentMeUrl_Data{}}
}

func (m *TLRecentMeUrlStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlStickerSet))

	x.String(m.GetUrl())
	x.Bytes(m.GetSet().Encode())

	return x.buf
}

func (m *TLRecentMeUrlStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_recentMeUrlStickerSet))

	x.String(m.GetUrl())
	x.Bytes(m.GetSet().EncodeToLayer(layer))

	return x.buf
}

func (m *TLRecentMeUrlStickerSet) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m2 := &StickerSetCovered{}
	m2.Decode(dbuf)
	m.SetSet(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Chats <--
//  + TL_MessagesChats
//  + TL_MessagesChatsSlice
//

func (m *Messages_Chats) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_chats:
		t := m.To_MessagesChats()
		return t.Encode()
	case TLConstructor_CRC32_messages_chatsSlice:
		t := m.To_MessagesChatsSlice()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Chats) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_chats:
		t := m.To_MessagesChats()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_chatsSlice:
		t := m.To_MessagesChatsSlice()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_Chats) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_chats:
		m2 := &TLMessagesChats{Data2: &Messages_Chats_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_chatsSlice:
		m2 := &TLMessagesChatsSlice{Data2: &Messages_Chats_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;
func (m *Messages_Chats) To_MessagesChats() *TLMessagesChats {
	return &TLMessagesChats{
		Data2: m.Data2,
	}
}

// messages.chatsSlice#9cd81144 count:int chats:Vector<Chat> = messages.Chats;
func (m *Messages_Chats) To_MessagesChatsSlice() *TLMessagesChatsSlice {
	return &TLMessagesChatsSlice{
		Data2: m.Data2,
	}
}

// messages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;
func (m *TLMessagesChats) To_Messages_Chats() *Messages_Chats {
	return &Messages_Chats{
		Constructor: TLConstructor_CRC32_messages_chats,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesChats) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChats) GetChats() []*Chat  { return m.Data2.Chats }

func NewTLMessagesChats() *TLMessagesChats {
	return &TLMessagesChats{Data2: &Messages_Chats_Data{}}
}

func (m *TLMessagesChats) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_chats))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesChats) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_chats))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesChats) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Chat, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Chat{}
		v1[i].Decode(dbuf)
	}
	m.SetChats(v1)

	return dbuf.err
}

// messages.chatsSlice#9cd81144 count:int chats:Vector<Chat> = messages.Chats;
func (m *TLMessagesChatsSlice) To_Messages_Chats() *Messages_Chats {
	return &Messages_Chats{
		Constructor: TLConstructor_CRC32_messages_chatsSlice,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesChatsSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChatsSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesChatsSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChatsSlice) GetChats() []*Chat  { return m.Data2.Chats }

func NewTLMessagesChatsSlice() *TLMessagesChatsSlice {
	return &TLMessagesChatsSlice{Data2: &Messages_Chats_Data{}}
}

func (m *TLMessagesChatsSlice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_chatsSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesChatsSlice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_chatsSlice))

	x.Int(m.GetCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesChatsSlice) Decode(dbuf *DecodeBuf) error {
	m.SetCount(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_TmpPassword <--
//  + TL_AccountTmpPassword
//

func (m *Account_TmpPassword) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_tmpPassword:
		t := m.To_AccountTmpPassword()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_TmpPassword) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_tmpPassword:
		t := m.To_AccountTmpPassword()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_TmpPassword) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_tmpPassword:
		m2 := &TLAccountTmpPassword{Data2: &Account_TmpPassword_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.tmpPassword#db64fd34 tmp_password:bytes valid_until:int = account.TmpPassword;
func (m *Account_TmpPassword) To_AccountTmpPassword() *TLAccountTmpPassword {
	return &TLAccountTmpPassword{
		Data2: m.Data2,
	}
}

// account.tmpPassword#db64fd34 tmp_password:bytes valid_until:int = account.TmpPassword;
func (m *TLAccountTmpPassword) To_Account_TmpPassword() *Account_TmpPassword {
	return &Account_TmpPassword{
		Constructor: TLConstructor_CRC32_account_tmpPassword,
		Data2:       m.Data2,
	}
}

func (m *TLAccountTmpPassword) SetTmpPassword(v []byte) { m.Data2.TmpPassword = v }
func (m *TLAccountTmpPassword) GetTmpPassword() []byte  { return m.Data2.TmpPassword }

func (m *TLAccountTmpPassword) SetValidUntil(v int32) { m.Data2.ValidUntil = v }
func (m *TLAccountTmpPassword) GetValidUntil() int32  { return m.Data2.ValidUntil }

func NewTLAccountTmpPassword() *TLAccountTmpPassword {
	return &TLAccountTmpPassword{Data2: &Account_TmpPassword_Data{}}
}

func (m *TLAccountTmpPassword) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_tmpPassword))

	x.StringBytes(m.GetTmpPassword())
	x.Int(m.GetValidUntil())

	return x.buf
}

func (m *TLAccountTmpPassword) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_tmpPassword))

	x.StringBytes(m.GetTmpPassword())
	x.Int(m.GetValidUntil())

	return x.buf
}

func (m *TLAccountTmpPassword) Decode(dbuf *DecodeBuf) error {
	m.SetTmpPassword(dbuf.StringBytes())
	m.SetValidUntil(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_PassportConfig <--
//  + TL_HelpPassportConfigNotModified
//  + TL_HelpPassportConfig
//

func (m *Help_PassportConfig) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_passportConfigNotModified:
		t := m.To_HelpPassportConfigNotModified()
		return t.Encode()
	case TLConstructor_CRC32_help_passportConfig:
		t := m.To_HelpPassportConfig()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_PassportConfig) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_passportConfigNotModified:
		t := m.To_HelpPassportConfigNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_help_passportConfig:
		t := m.To_HelpPassportConfig()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_PassportConfig) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_passportConfigNotModified:
		m2 := &TLHelpPassportConfigNotModified{Data2: &Help_PassportConfig_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_help_passportConfig:
		m2 := &TLHelpPassportConfig{Data2: &Help_PassportConfig_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.passportConfigNotModified#bfb9f457 = help.PassportConfig;
func (m *Help_PassportConfig) To_HelpPassportConfigNotModified() *TLHelpPassportConfigNotModified {
	return &TLHelpPassportConfigNotModified{
		Data2: m.Data2,
	}
}

// help.passportConfig#a098d6af hash:int countries_langs:DataJSON = help.PassportConfig;
func (m *Help_PassportConfig) To_HelpPassportConfig() *TLHelpPassportConfig {
	return &TLHelpPassportConfig{
		Data2: m.Data2,
	}
}

// help.passportConfigNotModified#bfb9f457 = help.PassportConfig;
func (m *TLHelpPassportConfigNotModified) To_Help_PassportConfig() *Help_PassportConfig {
	return &Help_PassportConfig{
		Constructor: TLConstructor_CRC32_help_passportConfigNotModified,
		Data2:       m.Data2,
	}
}

func NewTLHelpPassportConfigNotModified() *TLHelpPassportConfigNotModified {
	return &TLHelpPassportConfigNotModified{Data2: &Help_PassportConfig_Data{}}
}

func (m *TLHelpPassportConfigNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_passportConfigNotModified))

	return x.buf
}

func (m *TLHelpPassportConfigNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_passportConfigNotModified))

	return x.buf
}

func (m *TLHelpPassportConfigNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// help.passportConfig#a098d6af hash:int countries_langs:DataJSON = help.PassportConfig;
func (m *TLHelpPassportConfig) To_Help_PassportConfig() *Help_PassportConfig {
	return &Help_PassportConfig{
		Constructor: TLConstructor_CRC32_help_passportConfig,
		Data2:       m.Data2,
	}
}

func (m *TLHelpPassportConfig) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLHelpPassportConfig) GetHash() int32  { return m.Data2.Hash }

func (m *TLHelpPassportConfig) SetCountriesLangs(v *DataJSON) { m.Data2.CountriesLangs = v }
func (m *TLHelpPassportConfig) GetCountriesLangs() *DataJSON  { return m.Data2.CountriesLangs }

func NewTLHelpPassportConfig() *TLHelpPassportConfig {
	return &TLHelpPassportConfig{Data2: &Help_PassportConfig_Data{}}
}

func (m *TLHelpPassportConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_passportConfig))

	x.Int(m.GetHash())
	x.Bytes(m.GetCountriesLangs().Encode())

	return x.buf
}

func (m *TLHelpPassportConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_passportConfig))

	x.Int(m.GetHash())
	x.Bytes(m.GetCountriesLangs().EncodeToLayer(layer))

	return x.buf
}

func (m *TLHelpPassportConfig) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	m2 := &DataJSON{}
	m2.Decode(dbuf)
	m.SetCountriesLangs(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Payments_ValidatedRequestedInfo <--
//  + TL_PaymentsValidatedRequestedInfo
//

func (m *Payments_ValidatedRequestedInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_payments_validatedRequestedInfo:
		t := m.To_PaymentsValidatedRequestedInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_ValidatedRequestedInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_payments_validatedRequestedInfo:
		t := m.To_PaymentsValidatedRequestedInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Payments_ValidatedRequestedInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_payments_validatedRequestedInfo:
		m2 := &TLPaymentsValidatedRequestedInfo{Data2: &Payments_ValidatedRequestedInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// payments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo;
func (m *Payments_ValidatedRequestedInfo) To_PaymentsValidatedRequestedInfo() *TLPaymentsValidatedRequestedInfo {
	return &TLPaymentsValidatedRequestedInfo{
		Data2: m.Data2,
	}
}

// payments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo;
func (m *TLPaymentsValidatedRequestedInfo) To_Payments_ValidatedRequestedInfo() *Payments_ValidatedRequestedInfo {
	return &Payments_ValidatedRequestedInfo{
		Constructor: TLConstructor_CRC32_payments_validatedRequestedInfo,
		Data2:       m.Data2,
	}
}

func (m *TLPaymentsValidatedRequestedInfo) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentsValidatedRequestedInfo) GetId() string  { return m.Data2.Id }

func (m *TLPaymentsValidatedRequestedInfo) SetShippingOptions(v []*ShippingOption) {
	m.Data2.ShippingOptions = v
}
func (m *TLPaymentsValidatedRequestedInfo) GetShippingOptions() []*ShippingOption {
	return m.Data2.ShippingOptions
}

func NewTLPaymentsValidatedRequestedInfo() *TLPaymentsValidatedRequestedInfo {
	return &TLPaymentsValidatedRequestedInfo{Data2: &Payments_ValidatedRequestedInfo_Data{}}
}

func (m *TLPaymentsValidatedRequestedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_validatedRequestedInfo))

	// flags
	var flags uint32 = 0
	if m.GetId() != "" {
		flags |= 1 << 0
	}
	if m.GetShippingOptions() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	if m.GetId() != "" {
		x.String(m.GetId())
	}
	if m.GetShippingOptions() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetShippingOptions())))
		for _, v := range m.GetShippingOptions() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLPaymentsValidatedRequestedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_validatedRequestedInfo))

	// flags
	var flags uint32 = 0
	if m.GetId() != "" {
		flags |= 1 << 0
	}
	if m.GetShippingOptions() != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	if m.GetId() != "" {
		x.String(m.GetId())
	}
	if m.GetShippingOptions() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetShippingOptions())))
		for _, v := range m.GetShippingOptions() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLPaymentsValidatedRequestedInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetId(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		c3 := dbuf.Int()
		if c3 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
			return dbuf.err
		}
		l3 := dbuf.Int()
		v3 := make([]*ShippingOption, l3)
		for i := int32(0); i < l3; i++ {
			v3[i] = &ShippingOption{}
			v3[i].Decode(dbuf)
		}
		m.SetShippingOptions(v3)

	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// EncryptedMessage <--
//  + TL_EncryptedMessage
//  + TL_EncryptedMessageService
//

func (m *EncryptedMessage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_encryptedMessage:
		t := m.To_EncryptedMessage()
		return t.Encode()
	case TLConstructor_CRC32_encryptedMessageService:
		t := m.To_EncryptedMessageService()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *EncryptedMessage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_encryptedMessage:
		t := m.To_EncryptedMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_encryptedMessageService:
		t := m.To_EncryptedMessageService()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *EncryptedMessage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_encryptedMessage:
		m2 := &TLEncryptedMessage{Data2: &EncryptedMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_encryptedMessageService:
		m2 := &TLEncryptedMessageService{Data2: &EncryptedMessage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// encryptedMessage#ed18c118 random_id:long chat_id:int date:int bytes:bytes file:EncryptedFile = EncryptedMessage;
func (m *EncryptedMessage) To_EncryptedMessage() *TLEncryptedMessage {
	return &TLEncryptedMessage{
		Data2: m.Data2,
	}
}

// encryptedMessageService#23734b06 random_id:long chat_id:int date:int bytes:bytes = EncryptedMessage;
func (m *EncryptedMessage) To_EncryptedMessageService() *TLEncryptedMessageService {
	return &TLEncryptedMessageService{
		Data2: m.Data2,
	}
}

// encryptedMessage#ed18c118 random_id:long chat_id:int date:int bytes:bytes file:EncryptedFile = EncryptedMessage;
func (m *TLEncryptedMessage) To_EncryptedMessage() *EncryptedMessage {
	return &EncryptedMessage{
		Constructor: TLConstructor_CRC32_encryptedMessage,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedMessage) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLEncryptedMessage) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLEncryptedMessage) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLEncryptedMessage) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLEncryptedMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedMessage) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLEncryptedMessage) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLEncryptedMessage) SetFile(v *EncryptedFile) { m.Data2.File = v }
func (m *TLEncryptedMessage) GetFile() *EncryptedFile  { return m.Data2.File }

func NewTLEncryptedMessage() *TLEncryptedMessage {
	return &TLEncryptedMessage{Data2: &EncryptedMessage_Data{}}
}

func (m *TLEncryptedMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedMessage))

	x.Long(m.GetRandomId())
	x.Int(m.GetChatId())
	x.Int(m.GetDate())
	x.StringBytes(m.GetBytes())
	x.Bytes(m.GetFile().Encode())

	return x.buf
}

func (m *TLEncryptedMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedMessage))

	x.Long(m.GetRandomId())
	x.Int(m.GetChatId())
	x.Int(m.GetDate())
	x.StringBytes(m.GetBytes())
	x.Bytes(m.GetFile().EncodeToLayer(layer))

	return x.buf
}

func (m *TLEncryptedMessage) Decode(dbuf *DecodeBuf) error {
	m.SetRandomId(dbuf.Long())
	m.SetChatId(dbuf.Int())
	m.SetDate(dbuf.Int())
	m.SetBytes(dbuf.StringBytes())
	m5 := &EncryptedFile{}
	m5.Decode(dbuf)
	m.SetFile(m5)

	return dbuf.err
}

// encryptedMessageService#23734b06 random_id:long chat_id:int date:int bytes:bytes = EncryptedMessage;
func (m *TLEncryptedMessageService) To_EncryptedMessage() *EncryptedMessage {
	return &EncryptedMessage{
		Constructor: TLConstructor_CRC32_encryptedMessageService,
		Data2:       m.Data2,
	}
}

func (m *TLEncryptedMessageService) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLEncryptedMessageService) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLEncryptedMessageService) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLEncryptedMessageService) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLEncryptedMessageService) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedMessageService) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedMessageService) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLEncryptedMessageService) GetBytes() []byte  { return m.Data2.Bytes }

func NewTLEncryptedMessageService() *TLEncryptedMessageService {
	return &TLEncryptedMessageService{Data2: &EncryptedMessage_Data{}}
}

func (m *TLEncryptedMessageService) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedMessageService))

	x.Long(m.GetRandomId())
	x.Int(m.GetChatId())
	x.Int(m.GetDate())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLEncryptedMessageService) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_encryptedMessageService))

	x.Long(m.GetRandomId())
	x.Int(m.GetChatId())
	x.Int(m.GetDate())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLEncryptedMessageService) Decode(dbuf *DecodeBuf) error {
	m.SetRandomId(dbuf.Long())
	m.SetChatId(dbuf.Int())
	m.SetDate(dbuf.Int())
	m.SetBytes(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputDocument <--
//  + TL_InputDocumentEmpty
//  + TL_InputDocument
//  + TL_InputDocumentLayer86
//

func (m *InputDocument) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputDocumentEmpty:
		t := m.To_InputDocumentEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputDocument:
		t := m.To_InputDocument()
		return t.Encode()
	case TLConstructor_CRC32_inputDocumentLayer86:
		t := m.To_InputDocumentLayer86()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputDocument) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputDocumentEmpty:
		t := m.To_InputDocumentEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputDocument:
		t := m.To_InputDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputDocumentLayer86:
		t := m.To_InputDocumentLayer86()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputDocument) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputDocumentEmpty:
		m2 := &TLInputDocumentEmpty{Data2: &InputDocument_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputDocument:
		m2 := &TLInputDocument{Data2: &InputDocument_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputDocumentLayer86:
		m2 := &TLInputDocumentLayer86{Data2: &InputDocument_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputDocumentEmpty#72f0eaae = InputDocument;
func (m *InputDocument) To_InputDocumentEmpty() *TLInputDocumentEmpty {
	return &TLInputDocumentEmpty{
		Data2: m.Data2,
	}
}

// inputDocument#18798952 id:long access_hash:long = InputDocument;
func (m *InputDocument) To_InputDocument() *TLInputDocument {
	return &TLInputDocument{
		Data2: m.Data2,
	}
}

// inputDocument#1abfb575 id:long access_hash:long file_reference:bytes = InputDocument;
func (m *InputDocument) To_InputDocumentLayer86() *TLInputDocumentLayer86 {
	return &TLInputDocumentLayer86{
		Data2: m.Data2,
	}
}

// inputDocumentEmpty#72f0eaae = InputDocument;
func (m *TLInputDocumentEmpty) To_InputDocument() *InputDocument {
	return &InputDocument{
		Constructor: TLConstructor_CRC32_inputDocumentEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputDocumentEmpty() *TLInputDocumentEmpty {
	return &TLInputDocumentEmpty{Data2: &InputDocument_Data{}}
}

func (m *TLInputDocumentEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentEmpty))

	return x.buf
}

func (m *TLInputDocumentEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentEmpty))

	return x.buf
}

func (m *TLInputDocumentEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputDocument#18798952 id:long access_hash:long = InputDocument;
func (m *TLInputDocument) To_InputDocument() *InputDocument {
	return &InputDocument{
		Constructor: TLConstructor_CRC32_inputDocument,
		Data2:       m.Data2,
	}
}

func (m *TLInputDocument) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocument) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocument) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputDocument() *TLInputDocument {
	return &TLInputDocument{Data2: &InputDocument_Data{}}
}

func (m *TLInputDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocument))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocument))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputDocument) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputDocument#1abfb575 id:long access_hash:long file_reference:bytes = InputDocument;
func (m *TLInputDocumentLayer86) To_InputDocument() *InputDocument {
	return &InputDocument{
		Constructor: TLConstructor_CRC32_inputDocumentLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLInputDocumentLayer86) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentLayer86) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocumentLayer86) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentLayer86) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputDocumentLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputDocumentLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func NewTLInputDocumentLayer86() *TLInputDocumentLayer86 {
	return &TLInputDocumentLayer86{Data2: &InputDocument_Data{}}
}

func (m *TLInputDocumentLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputDocumentLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputDocumentLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputDocumentLayer86) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputChannel <--
//  + TL_InputChannelEmpty
//  + TL_InputChannel
//

func (m *InputChannel) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputChannelEmpty:
		t := m.To_InputChannelEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputChannel:
		t := m.To_InputChannel()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputChannel) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputChannelEmpty:
		t := m.To_InputChannelEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputChannel:
		t := m.To_InputChannel()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputChannel) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputChannelEmpty:
		m2 := &TLInputChannelEmpty{Data2: &InputChannel_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputChannel:
		m2 := &TLInputChannel{Data2: &InputChannel_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputChannelEmpty#ee8c1e86 = InputChannel;
func (m *InputChannel) To_InputChannelEmpty() *TLInputChannelEmpty {
	return &TLInputChannelEmpty{
		Data2: m.Data2,
	}
}

// inputChannel#afeb712e channel_id:int access_hash:long = InputChannel;
func (m *InputChannel) To_InputChannel() *TLInputChannel {
	return &TLInputChannel{
		Data2: m.Data2,
	}
}

// inputChannelEmpty#ee8c1e86 = InputChannel;
func (m *TLInputChannelEmpty) To_InputChannel() *InputChannel {
	return &InputChannel{
		Constructor: TLConstructor_CRC32_inputChannelEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputChannelEmpty() *TLInputChannelEmpty {
	return &TLInputChannelEmpty{Data2: &InputChannel_Data{}}
}

func (m *TLInputChannelEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChannelEmpty))

	return x.buf
}

func (m *TLInputChannelEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChannelEmpty))

	return x.buf
}

func (m *TLInputChannelEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputChannel#afeb712e channel_id:int access_hash:long = InputChannel;
func (m *TLInputChannel) To_InputChannel() *InputChannel {
	return &InputChannel{
		Constructor: TLConstructor_CRC32_inputChannel,
		Data2:       m.Data2,
	}
}

func (m *TLInputChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLInputChannel) GetChannelId() int32  { return m.Data2.ChannelId }

func (m *TLInputChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputChannel) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputChannel() *TLInputChannel {
	return &TLInputChannel{Data2: &InputChannel_Data{}}
}

func (m *TLInputChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChannel))

	x.Int(m.GetChannelId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputChannel))

	x.Int(m.GetChannelId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputChannel) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FoundGifs <--
//  + TL_MessagesFoundGifs
//

func (m *Messages_FoundGifs) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_foundGifs:
		t := m.To_MessagesFoundGifs()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FoundGifs) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_foundGifs:
		t := m.To_MessagesFoundGifs()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FoundGifs) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_foundGifs:
		m2 := &TLMessagesFoundGifs{Data2: &Messages_FoundGifs_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.foundGifs#450a1c0a next_offset:int results:Vector<FoundGif> = messages.FoundGifs;
func (m *Messages_FoundGifs) To_MessagesFoundGifs() *TLMessagesFoundGifs {
	return &TLMessagesFoundGifs{
		Data2: m.Data2,
	}
}

// messages.foundGifs#450a1c0a next_offset:int results:Vector<FoundGif> = messages.FoundGifs;
func (m *TLMessagesFoundGifs) To_Messages_FoundGifs() *Messages_FoundGifs {
	return &Messages_FoundGifs{
		Constructor: TLConstructor_CRC32_messages_foundGifs,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesFoundGifs) SetNextOffset(v int32) { m.Data2.NextOffset = v }
func (m *TLMessagesFoundGifs) GetNextOffset() int32  { return m.Data2.NextOffset }

func (m *TLMessagesFoundGifs) SetResults(v []*FoundGif) { m.Data2.Results = v }
func (m *TLMessagesFoundGifs) GetResults() []*FoundGif  { return m.Data2.Results }

func NewTLMessagesFoundGifs() *TLMessagesFoundGifs {
	return &TLMessagesFoundGifs{Data2: &Messages_FoundGifs_Data{}}
}

func (m *TLMessagesFoundGifs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_foundGifs))

	x.Int(m.GetNextOffset())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetResults())))
	for _, v := range m.GetResults() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesFoundGifs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_foundGifs))

	x.Int(m.GetNextOffset())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetResults())))
	for _, v := range m.GetResults() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesFoundGifs) Decode(dbuf *DecodeBuf) error {
	m.SetNextOffset(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*FoundGif, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &FoundGif{}
		v2[i].Decode(dbuf)
	}
	m.SetResults(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// StickerSetCovered <--
//  + TL_StickerSetCovered
//  + TL_StickerSetMultiCovered
//

func (m *StickerSetCovered) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_stickerSetCovered:
		t := m.To_StickerSetCovered()
		return t.Encode()
	case TLConstructor_CRC32_stickerSetMultiCovered:
		t := m.To_StickerSetMultiCovered()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *StickerSetCovered) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_stickerSetCovered:
		t := m.To_StickerSetCovered()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_stickerSetMultiCovered:
		t := m.To_StickerSetMultiCovered()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *StickerSetCovered) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_stickerSetCovered:
		m2 := &TLStickerSetCovered{Data2: &StickerSetCovered_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_stickerSetMultiCovered:
		m2 := &TLStickerSetMultiCovered{Data2: &StickerSetCovered_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// stickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered;
func (m *StickerSetCovered) To_StickerSetCovered() *TLStickerSetCovered {
	return &TLStickerSetCovered{
		Data2: m.Data2,
	}
}

// stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered;
func (m *StickerSetCovered) To_StickerSetMultiCovered() *TLStickerSetMultiCovered {
	return &TLStickerSetMultiCovered{
		Data2: m.Data2,
	}
}

// stickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered;
func (m *TLStickerSetCovered) To_StickerSetCovered() *StickerSetCovered {
	return &StickerSetCovered{
		Constructor: TLConstructor_CRC32_stickerSetCovered,
		Data2:       m.Data2,
	}
}

func (m *TLStickerSetCovered) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLStickerSetCovered) GetSet() *StickerSet  { return m.Data2.Set }

func (m *TLStickerSetCovered) SetCover(v *Document) { m.Data2.Cover = v }
func (m *TLStickerSetCovered) GetCover() *Document  { return m.Data2.Cover }

func NewTLStickerSetCovered() *TLStickerSetCovered {
	return &TLStickerSetCovered{Data2: &StickerSetCovered_Data{}}
}

func (m *TLStickerSetCovered) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerSetCovered))

	x.Bytes(m.GetSet().Encode())
	x.Bytes(m.GetCover().Encode())

	return x.buf
}

func (m *TLStickerSetCovered) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerSetCovered))

	x.Bytes(m.GetSet().EncodeToLayer(layer))
	x.Bytes(m.GetCover().EncodeToLayer(layer))

	return x.buf
}

func (m *TLStickerSetCovered) Decode(dbuf *DecodeBuf) error {
	m1 := &StickerSet{}
	m1.Decode(dbuf)
	m.SetSet(m1)
	m2 := &Document{}
	m2.Decode(dbuf)
	m.SetCover(m2)

	return dbuf.err
}

// stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered;
func (m *TLStickerSetMultiCovered) To_StickerSetCovered() *StickerSetCovered {
	return &StickerSetCovered{
		Constructor: TLConstructor_CRC32_stickerSetMultiCovered,
		Data2:       m.Data2,
	}
}

func (m *TLStickerSetMultiCovered) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLStickerSetMultiCovered) GetSet() *StickerSet  { return m.Data2.Set }

func (m *TLStickerSetMultiCovered) SetCovers(v []*Document) { m.Data2.Covers = v }
func (m *TLStickerSetMultiCovered) GetCovers() []*Document  { return m.Data2.Covers }

func NewTLStickerSetMultiCovered() *TLStickerSetMultiCovered {
	return &TLStickerSetMultiCovered{Data2: &StickerSetCovered_Data{}}
}

func (m *TLStickerSetMultiCovered) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerSetMultiCovered))

	x.Bytes(m.GetSet().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetCovers())))
	for _, v := range m.GetCovers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLStickerSetMultiCovered) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerSetMultiCovered))

	x.Bytes(m.GetSet().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetCovers())))
	for _, v := range m.GetCovers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLStickerSetMultiCovered) Decode(dbuf *DecodeBuf) error {
	m1 := &StickerSet{}
	m1.Decode(dbuf)
	m.SetSet(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Document, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Document{}
		v2[i].Decode(dbuf)
	}
	m.SetCovers(v2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_InviteText <--
//  + TL_HelpInviteText
//

func (m *Help_InviteText) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_inviteText:
		t := m.To_HelpInviteText()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_InviteText) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_inviteText:
		t := m.To_HelpInviteText()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_InviteText) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_inviteText:
		m2 := &TLHelpInviteText{Data2: &Help_InviteText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.inviteText#18cb9f78 message:string = help.InviteText;
func (m *Help_InviteText) To_HelpInviteText() *TLHelpInviteText {
	return &TLHelpInviteText{
		Data2: m.Data2,
	}
}

// help.inviteText#18cb9f78 message:string = help.InviteText;
func (m *TLHelpInviteText) To_Help_InviteText() *Help_InviteText {
	return &Help_InviteText{
		Constructor: TLConstructor_CRC32_help_inviteText,
		Data2:       m.Data2,
	}
}

func (m *TLHelpInviteText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpInviteText) GetMessage() string  { return m.Data2.Message }

func NewTLHelpInviteText() *TLHelpInviteText {
	return &TLHelpInviteText{Data2: &Help_InviteText_Data{}}
}

func (m *TLHelpInviteText) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_inviteText))

	x.String(m.GetMessage())

	return x.buf
}

func (m *TLHelpInviteText) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_inviteText))

	x.String(m.GetMessage())

	return x.buf
}

func (m *TLHelpInviteText) Decode(dbuf *DecodeBuf) error {
	m.SetMessage(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MaskCoords <--
//  + TL_MaskCoords
//

func (m *MaskCoords) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_maskCoords:
		t := m.To_MaskCoords()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MaskCoords) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_maskCoords:
		t := m.To_MaskCoords()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MaskCoords) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_maskCoords:
		m2 := &TLMaskCoords{Data2: &MaskCoords_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords;
func (m *MaskCoords) To_MaskCoords() *TLMaskCoords {
	return &TLMaskCoords{
		Data2: m.Data2,
	}
}

// maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords;
func (m *TLMaskCoords) To_MaskCoords() *MaskCoords {
	return &MaskCoords{
		Constructor: TLConstructor_CRC32_maskCoords,
		Data2:       m.Data2,
	}
}

func (m *TLMaskCoords) SetN(v int32) { m.Data2.N = v }
func (m *TLMaskCoords) GetN() int32  { return m.Data2.N }

func (m *TLMaskCoords) SetX(v float64) { m.Data2.X = v }
func (m *TLMaskCoords) GetX() float64  { return m.Data2.X }

func (m *TLMaskCoords) SetY(v float64) { m.Data2.Y = v }
func (m *TLMaskCoords) GetY() float64  { return m.Data2.Y }

func (m *TLMaskCoords) SetZoom(v float64) { m.Data2.Zoom = v }
func (m *TLMaskCoords) GetZoom() float64  { return m.Data2.Zoom }

func NewTLMaskCoords() *TLMaskCoords {
	return &TLMaskCoords{Data2: &MaskCoords_Data{}}
}

func (m *TLMaskCoords) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_maskCoords))

	x.Int(m.GetN())
	x.Double(m.GetX())
	x.Double(m.GetY())
	x.Double(m.GetZoom())

	return x.buf
}

func (m *TLMaskCoords) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_maskCoords))

	x.Int(m.GetN())
	x.Double(m.GetX())
	x.Double(m.GetY())
	x.Double(m.GetZoom())

	return x.buf
}

func (m *TLMaskCoords) Decode(dbuf *DecodeBuf) error {
	m.SetN(dbuf.Int())
	m.SetX(dbuf.Double())
	m.SetY(dbuf.Double())
	m.SetZoom(dbuf.Double())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureCredentialsEncrypted <--
//  + TL_SecureCredentialsEncrypted
//

func (m *SecureCredentialsEncrypted) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureCredentialsEncrypted:
		t := m.To_SecureCredentialsEncrypted()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureCredentialsEncrypted) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureCredentialsEncrypted:
		t := m.To_SecureCredentialsEncrypted()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureCredentialsEncrypted) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureCredentialsEncrypted:
		m2 := &TLSecureCredentialsEncrypted{Data2: &SecureCredentialsEncrypted_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;
func (m *SecureCredentialsEncrypted) To_SecureCredentialsEncrypted() *TLSecureCredentialsEncrypted {
	return &TLSecureCredentialsEncrypted{
		Data2: m.Data2,
	}
}

// secureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;
func (m *TLSecureCredentialsEncrypted) To_SecureCredentialsEncrypted() *SecureCredentialsEncrypted {
	return &SecureCredentialsEncrypted{
		Constructor: TLConstructor_CRC32_secureCredentialsEncrypted,
		Data2:       m.Data2,
	}
}

func (m *TLSecureCredentialsEncrypted) SetData(v []byte) { m.Data2.Data = v }
func (m *TLSecureCredentialsEncrypted) GetData() []byte  { return m.Data2.Data }

func (m *TLSecureCredentialsEncrypted) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureCredentialsEncrypted) GetHash() []byte  { return m.Data2.Hash }

func (m *TLSecureCredentialsEncrypted) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureCredentialsEncrypted) GetSecret() []byte  { return m.Data2.Secret }

func NewTLSecureCredentialsEncrypted() *TLSecureCredentialsEncrypted {
	return &TLSecureCredentialsEncrypted{Data2: &SecureCredentialsEncrypted_Data{}}
}

func (m *TLSecureCredentialsEncrypted) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureCredentialsEncrypted))

	x.StringBytes(m.GetData())
	x.StringBytes(m.GetHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLSecureCredentialsEncrypted) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureCredentialsEncrypted))

	x.StringBytes(m.GetData())
	x.StringBytes(m.GetHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLSecureCredentialsEncrypted) Decode(dbuf *DecodeBuf) error {
	m.SetData(dbuf.StringBytes())
	m.SetHash(dbuf.StringBytes())
	m.SetSecret(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureRequiredType <--
//  + TL_SecureRequiredType
//  + TL_SecureRequiredTypeOneOf
//

func (m *SecureRequiredType) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureRequiredType:
		t := m.To_SecureRequiredType()
		return t.Encode()
	case TLConstructor_CRC32_secureRequiredTypeOneOf:
		t := m.To_SecureRequiredTypeOneOf()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureRequiredType) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureRequiredType:
		t := m.To_SecureRequiredType()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureRequiredTypeOneOf:
		t := m.To_SecureRequiredTypeOneOf()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureRequiredType) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureRequiredType:
		m2 := &TLSecureRequiredType{Data2: &SecureRequiredType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureRequiredTypeOneOf:
		m2 := &TLSecureRequiredTypeOneOf{Data2: &SecureRequiredType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureRequiredType#829d99da flags:# native_names:flags.0?true selfie_required:flags.1?true translation_required:flags.2?true type:SecureValueType = SecureRequiredType;
func (m *SecureRequiredType) To_SecureRequiredType() *TLSecureRequiredType {
	return &TLSecureRequiredType{
		Data2: m.Data2,
	}
}

// secureRequiredTypeOneOf#27477b4 types:Vector<SecureRequiredType> = SecureRequiredType;
func (m *SecureRequiredType) To_SecureRequiredTypeOneOf() *TLSecureRequiredTypeOneOf {
	return &TLSecureRequiredTypeOneOf{
		Data2: m.Data2,
	}
}

// secureRequiredType#829d99da flags:# native_names:flags.0?true selfie_required:flags.1?true translation_required:flags.2?true type:SecureValueType = SecureRequiredType;
func (m *TLSecureRequiredType) To_SecureRequiredType() *SecureRequiredType {
	return &SecureRequiredType{
		Constructor: TLConstructor_CRC32_secureRequiredType,
		Data2:       m.Data2,
	}
}

func (m *TLSecureRequiredType) SetNativeNames(v bool) { m.Data2.NativeNames = v }
func (m *TLSecureRequiredType) GetNativeNames() bool  { return m.Data2.NativeNames }

func (m *TLSecureRequiredType) SetSelfieRequired(v bool) { m.Data2.SelfieRequired = v }
func (m *TLSecureRequiredType) GetSelfieRequired() bool  { return m.Data2.SelfieRequired }

func (m *TLSecureRequiredType) SetTranslationRequired(v bool) { m.Data2.TranslationRequired = v }
func (m *TLSecureRequiredType) GetTranslationRequired() bool  { return m.Data2.TranslationRequired }

func (m *TLSecureRequiredType) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureRequiredType) GetType() *SecureValueType  { return m.Data2.Type }

func NewTLSecureRequiredType() *TLSecureRequiredType {
	return &TLSecureRequiredType{Data2: &SecureRequiredType_Data{}}
}

func (m *TLSecureRequiredType) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureRequiredType))

	// flags
	var flags uint32 = 0
	if m.GetNativeNames() == true {
		flags |= 1 << 0
	}
	if m.GetSelfieRequired() == true {
		flags |= 1 << 1
	}
	if m.GetTranslationRequired() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetType().Encode())

	return x.buf
}

func (m *TLSecureRequiredType) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureRequiredType))

	// flags
	var flags uint32 = 0
	if m.GetNativeNames() == true {
		flags |= 1 << 0
	}
	if m.GetSelfieRequired() == true {
		flags |= 1 << 1
	}
	if m.GetTranslationRequired() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Bytes(m.GetType().EncodeToLayer(layer))

	return x.buf
}

func (m *TLSecureRequiredType) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetNativeNames(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetSelfieRequired(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTranslationRequired(true)
	}
	m5 := &SecureValueType{}
	m5.Decode(dbuf)
	m.SetType(m5)

	return dbuf.err
}

// secureRequiredTypeOneOf#27477b4 types:Vector<SecureRequiredType> = SecureRequiredType;
func (m *TLSecureRequiredTypeOneOf) To_SecureRequiredType() *SecureRequiredType {
	return &SecureRequiredType{
		Constructor: TLConstructor_CRC32_secureRequiredTypeOneOf,
		Data2:       m.Data2,
	}
}

func (m *TLSecureRequiredTypeOneOf) SetTypes(v []*SecureRequiredType) { m.Data2.Types = v }
func (m *TLSecureRequiredTypeOneOf) GetTypes() []*SecureRequiredType  { return m.Data2.Types }

func NewTLSecureRequiredTypeOneOf() *TLSecureRequiredTypeOneOf {
	return &TLSecureRequiredTypeOneOf{Data2: &SecureRequiredType_Data{}}
}

func (m *TLSecureRequiredTypeOneOf) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureRequiredTypeOneOf))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTypes())))
	for _, v := range m.GetTypes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLSecureRequiredTypeOneOf) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureRequiredTypeOneOf))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTypes())))
	for _, v := range m.GetTypes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLSecureRequiredTypeOneOf) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*SecureRequiredType, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &SecureRequiredType{}
		v1[i].Decode(dbuf)
	}
	m.SetTypes(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// WebPage <--
//  + TL_WebPageEmpty
//  + TL_WebPagePending
//  + TL_WebPage
//  + TL_WebPageNotModified
//

func (m *WebPage) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_webPageEmpty:
		t := m.To_WebPageEmpty()
		return t.Encode()
	case TLConstructor_CRC32_webPagePending:
		t := m.To_WebPagePending()
		return t.Encode()
	case TLConstructor_CRC32_webPage:
		t := m.To_WebPage()
		return t.Encode()
	case TLConstructor_CRC32_webPageNotModified:
		t := m.To_WebPageNotModified()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WebPage) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_webPageEmpty:
		t := m.To_WebPageEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_webPagePending:
		t := m.To_WebPagePending()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_webPage:
		t := m.To_WebPage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_webPageNotModified:
		t := m.To_WebPageNotModified()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *WebPage) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_webPageEmpty:
		m2 := &TLWebPageEmpty{Data2: &WebPage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_webPagePending:
		m2 := &TLWebPagePending{Data2: &WebPage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_webPage:
		m2 := &TLWebPage{Data2: &WebPage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_webPageNotModified:
		m2 := &TLWebPageNotModified{Data2: &WebPage_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// webPageEmpty#eb1477e8 id:long = WebPage;
func (m *WebPage) To_WebPageEmpty() *TLWebPageEmpty {
	return &TLWebPageEmpty{
		Data2: m.Data2,
	}
}

// webPagePending#c586da1c id:long date:int = WebPage;
func (m *WebPage) To_WebPagePending() *TLWebPagePending {
	return &TLWebPagePending{
		Data2: m.Data2,
	}
}

// webPage#5f07b4bc flags:# id:long url:string display_url:string hash:int type:flags.0?string site_name:flags.1?string title:flags.2?string description:flags.3?string photo:flags.4?Photo embed_url:flags.5?string embed_type:flags.5?string embed_width:flags.6?int embed_height:flags.6?int duration:flags.7?int author:flags.8?string document:flags.9?Document cached_page:flags.10?Page = WebPage;
func (m *WebPage) To_WebPage() *TLWebPage {
	return &TLWebPage{
		Data2: m.Data2,
	}
}

// webPageNotModified#85849473 = WebPage;
func (m *WebPage) To_WebPageNotModified() *TLWebPageNotModified {
	return &TLWebPageNotModified{
		Data2: m.Data2,
	}
}

// webPageEmpty#eb1477e8 id:long = WebPage;
func (m *TLWebPageEmpty) To_WebPage() *WebPage {
	return &WebPage{
		Constructor: TLConstructor_CRC32_webPageEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLWebPageEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPageEmpty) GetId() int64  { return m.Data2.Id }

func NewTLWebPageEmpty() *TLWebPageEmpty {
	return &TLWebPageEmpty{Data2: &WebPage_Data{}}
}

func (m *TLWebPageEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPageEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLWebPageEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPageEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLWebPageEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())

	return dbuf.err
}

// webPagePending#c586da1c id:long date:int = WebPage;
func (m *TLWebPagePending) To_WebPage() *WebPage {
	return &WebPage{
		Constructor: TLConstructor_CRC32_webPagePending,
		Data2:       m.Data2,
	}
}

func (m *TLWebPagePending) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPagePending) GetId() int64  { return m.Data2.Id }

func (m *TLWebPagePending) SetDate(v int32) { m.Data2.Date = v }
func (m *TLWebPagePending) GetDate() int32  { return m.Data2.Date }

func NewTLWebPagePending() *TLWebPagePending {
	return &TLWebPagePending{Data2: &WebPage_Data{}}
}

func (m *TLWebPagePending) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPagePending))

	x.Long(m.GetId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLWebPagePending) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPagePending))

	x.Long(m.GetId())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLWebPagePending) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

// webPage#5f07b4bc flags:# id:long url:string display_url:string hash:int type:flags.0?string site_name:flags.1?string title:flags.2?string description:flags.3?string photo:flags.4?Photo embed_url:flags.5?string embed_type:flags.5?string embed_width:flags.6?int embed_height:flags.6?int duration:flags.7?int author:flags.8?string document:flags.9?Document cached_page:flags.10?Page = WebPage;
func (m *TLWebPage) To_WebPage() *WebPage {
	return &WebPage{
		Constructor: TLConstructor_CRC32_webPage,
		Data2:       m.Data2,
	}
}

func (m *TLWebPage) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPage) GetId() int64  { return m.Data2.Id }

func (m *TLWebPage) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebPage) GetUrl() string  { return m.Data2.Url }

func (m *TLWebPage) SetDisplayUrl(v string) { m.Data2.DisplayUrl = v }
func (m *TLWebPage) GetDisplayUrl() string  { return m.Data2.DisplayUrl }

func (m *TLWebPage) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLWebPage) GetHash() int32  { return m.Data2.Hash }

func (m *TLWebPage) SetType(v string) { m.Data2.Type = v }
func (m *TLWebPage) GetType() string  { return m.Data2.Type }

func (m *TLWebPage) SetSiteName(v string) { m.Data2.SiteName = v }
func (m *TLWebPage) GetSiteName() string  { return m.Data2.SiteName }

func (m *TLWebPage) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWebPage) GetTitle() string  { return m.Data2.Title }

func (m *TLWebPage) SetDescription(v string) { m.Data2.Description = v }
func (m *TLWebPage) GetDescription() string  { return m.Data2.Description }

func (m *TLWebPage) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLWebPage) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLWebPage) SetEmbedUrl(v string) { m.Data2.EmbedUrl = v }
func (m *TLWebPage) GetEmbedUrl() string  { return m.Data2.EmbedUrl }

func (m *TLWebPage) SetEmbedType(v string) { m.Data2.EmbedType = v }
func (m *TLWebPage) GetEmbedType() string  { return m.Data2.EmbedType }

func (m *TLWebPage) SetEmbedWidth(v int32) { m.Data2.EmbedWidth = v }
func (m *TLWebPage) GetEmbedWidth() int32  { return m.Data2.EmbedWidth }

func (m *TLWebPage) SetEmbedHeight(v int32) { m.Data2.EmbedHeight = v }
func (m *TLWebPage) GetEmbedHeight() int32  { return m.Data2.EmbedHeight }

func (m *TLWebPage) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLWebPage) GetDuration() int32  { return m.Data2.Duration }

func (m *TLWebPage) SetAuthor(v string) { m.Data2.Author = v }
func (m *TLWebPage) GetAuthor() string  { return m.Data2.Author }

func (m *TLWebPage) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLWebPage) GetDocument() *Document  { return m.Data2.Document }

func (m *TLWebPage) SetCachedPage(v *Page) { m.Data2.CachedPage = v }
func (m *TLWebPage) GetCachedPage() *Page  { return m.Data2.CachedPage }

func NewTLWebPage() *TLWebPage {
	return &TLWebPage{Data2: &WebPage_Data{}}
}

func (m *TLWebPage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPage))

	// flags
	var flags uint32 = 0
	if m.GetType() != "" {
		flags |= 1 << 0
	}
	if m.GetSiteName() != "" {
		flags |= 1 << 1
	}
	if m.GetTitle() != "" {
		flags |= 1 << 2
	}
	if m.GetDescription() != "" {
		flags |= 1 << 3
	}
	if m.GetPhoto() != nil {
		flags |= 1 << 4
	}
	if m.GetEmbedUrl() != "" {
		flags |= 1 << 5
	}
	if m.GetEmbedType() != "" {
		flags |= 1 << 5
	}
	if m.GetEmbedWidth() != 0 {
		flags |= 1 << 6
	}
	if m.GetEmbedHeight() != 0 {
		flags |= 1 << 6
	}
	if m.GetDuration() != 0 {
		flags |= 1 << 7
	}
	if m.GetAuthor() != "" {
		flags |= 1 << 8
	}
	if m.GetDocument() != nil {
		flags |= 1 << 9
	}
	if m.GetCachedPage() != nil {
		flags |= 1 << 10
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.String(m.GetUrl())
	x.String(m.GetDisplayUrl())
	x.Int(m.GetHash())
	if m.GetType() != "" {
		x.String(m.GetType())
	}
	if m.GetSiteName() != "" {
		x.String(m.GetSiteName())
	}
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().Encode())
	}
	if m.GetEmbedUrl() != "" {
		x.String(m.GetEmbedUrl())
	}
	if m.GetEmbedType() != "" {
		x.String(m.GetEmbedType())
	}
	if m.GetEmbedWidth() != 0 {
		x.Int(m.GetEmbedWidth())
	}
	if m.GetEmbedHeight() != 0 {
		x.Int(m.GetEmbedHeight())
	}
	if m.GetDuration() != 0 {
		x.Int(m.GetDuration())
	}
	if m.GetAuthor() != "" {
		x.String(m.GetAuthor())
	}
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().Encode())
	}
	if m.GetCachedPage() != nil {
		x.Bytes(m.GetCachedPage().Encode())
	}

	return x.buf
}

func (m *TLWebPage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPage))

	// flags
	var flags uint32 = 0
	if m.GetType() != "" {
		flags |= 1 << 0
	}
	if m.GetSiteName() != "" {
		flags |= 1 << 1
	}
	if m.GetTitle() != "" {
		flags |= 1 << 2
	}
	if m.GetDescription() != "" {
		flags |= 1 << 3
	}
	if m.GetPhoto() != nil {
		flags |= 1 << 4
	}
	if m.GetEmbedUrl() != "" {
		flags |= 1 << 5
	}
	if m.GetEmbedType() != "" {
		flags |= 1 << 5
	}
	if m.GetEmbedWidth() != 0 {
		flags |= 1 << 6
	}
	if m.GetEmbedHeight() != 0 {
		flags |= 1 << 6
	}
	if m.GetDuration() != 0 {
		flags |= 1 << 7
	}
	if m.GetAuthor() != "" {
		flags |= 1 << 8
	}
	if m.GetDocument() != nil {
		flags |= 1 << 9
	}
	if m.GetCachedPage() != nil {
		flags |= 1 << 10
	}
	x.UInt(flags)

	x.Long(m.GetId())
	x.String(m.GetUrl())
	x.String(m.GetDisplayUrl())
	x.Int(m.GetHash())
	if m.GetType() != "" {
		x.String(m.GetType())
	}
	if m.GetSiteName() != "" {
		x.String(m.GetSiteName())
	}
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	}
	if m.GetEmbedUrl() != "" {
		x.String(m.GetEmbedUrl())
	}
	if m.GetEmbedType() != "" {
		x.String(m.GetEmbedType())
	}
	if m.GetEmbedWidth() != 0 {
		x.Int(m.GetEmbedWidth())
	}
	if m.GetEmbedHeight() != 0 {
		x.Int(m.GetEmbedHeight())
	}
	if m.GetDuration() != 0 {
		x.Int(m.GetDuration())
	}
	if m.GetAuthor() != "" {
		x.String(m.GetAuthor())
	}
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().EncodeToLayer(layer))
	}
	if m.GetCachedPage() != nil {
		x.Bytes(m.GetCachedPage().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLWebPage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.Long())
	m.SetUrl(dbuf.String())
	m.SetDisplayUrl(dbuf.String())
	m.SetHash(dbuf.Int())
	if (flags & (1 << 0)) != 0 {
		m.SetType(dbuf.String())
	}
	if (flags & (1 << 1)) != 0 {
		m.SetSiteName(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTitle(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetDescription(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m10 := &Photo{}
		m10.Decode(dbuf)
		m.SetPhoto(m10)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetEmbedUrl(dbuf.String())
	}
	if (flags & (1 << 5)) != 0 {
		m.SetEmbedType(dbuf.String())
	}
	if (flags & (1 << 6)) != 0 {
		m.SetEmbedWidth(dbuf.Int())
	}
	if (flags & (1 << 6)) != 0 {
		m.SetEmbedHeight(dbuf.Int())
	}
	if (flags & (1 << 7)) != 0 {
		m.SetDuration(dbuf.Int())
	}
	if (flags & (1 << 8)) != 0 {
		m.SetAuthor(dbuf.String())
	}
	if (flags & (1 << 9)) != 0 {
		m17 := &Document{}
		m17.Decode(dbuf)
		m.SetDocument(m17)
	}
	if (flags & (1 << 10)) != 0 {
		m18 := &Page{}
		m18.Decode(dbuf)
		m.SetCachedPage(m18)
	}

	return dbuf.err
}

// webPageNotModified#85849473 = WebPage;
func (m *TLWebPageNotModified) To_WebPage() *WebPage {
	return &WebPage{
		Constructor: TLConstructor_CRC32_webPageNotModified,
		Data2:       m.Data2,
	}
}

func NewTLWebPageNotModified() *TLWebPageNotModified {
	return &TLWebPageNotModified{Data2: &WebPage_Data{}}
}

func (m *TLWebPageNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPageNotModified))

	return x.buf
}

func (m *TLWebPageNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_webPageNotModified))

	return x.buf
}

func (m *TLWebPageNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Chat <--
//  + TL_ChatEmpty
//  + TL_Chat
//  + TL_ChatForbidden
//  + TL_Channel
//  + TL_ChannelForbidden
//

func (m *Chat) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatEmpty:
		t := m.To_ChatEmpty()
		return t.Encode()
	case TLConstructor_CRC32_chat:
		t := m.To_Chat()
		return t.Encode()
	case TLConstructor_CRC32_chatForbidden:
		t := m.To_ChatForbidden()
		return t.Encode()
	case TLConstructor_CRC32_channel:
		t := m.To_Channel()
		return t.Encode()
	case TLConstructor_CRC32_channelForbidden:
		t := m.To_ChannelForbidden()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Chat) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatEmpty:
		t := m.To_ChatEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chat:
		t := m.To_Chat()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatForbidden:
		t := m.To_ChatForbidden()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channel:
		t := m.To_Channel()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelForbidden:
		t := m.To_ChannelForbidden()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Chat) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatEmpty:
		m2 := &TLChatEmpty{Data2: &Chat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chat:
		m2 := &TLChat{Data2: &Chat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatForbidden:
		m2 := &TLChatForbidden{Data2: &Chat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channel:
		m2 := &TLChannel{Data2: &Chat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelForbidden:
		m2 := &TLChannelForbidden{Data2: &Chat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatEmpty#9ba2d800 id:int = Chat;
func (m *Chat) To_ChatEmpty() *TLChatEmpty {
	return &TLChatEmpty{
		Data2: m.Data2,
	}
}

// chat#d91cdd54 flags:# creator:flags.0?true kicked:flags.1?true left:flags.2?true admins_enabled:flags.3?true admin:flags.4?true deactivated:flags.5?true id:int title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel = Chat;
func (m *Chat) To_Chat() *TLChat {
	return &TLChat{
		Data2: m.Data2,
	}
}

// chatForbidden#7328bdb id:int title:string = Chat;
func (m *Chat) To_ChatForbidden() *TLChatForbidden {
	return &TLChatForbidden{
		Data2: m.Data2,
	}
}

// channel#c88974ac flags:# creator:flags.0?true left:flags.2?true editor:flags.3?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true democracy:flags.10?true signatures:flags.11?true min:flags.12?true id:int access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int version:int restriction_reason:flags.9?string admin_rights:flags.14?ChannelAdminRights banned_rights:flags.15?ChannelBannedRights participants_count:flags.17?int = Chat;
func (m *Chat) To_Channel() *TLChannel {
	return &TLChannel{
		Data2: m.Data2,
	}
}

// channelForbidden#289da732 flags:# broadcast:flags.5?true megagroup:flags.8?true id:int access_hash:long title:string until_date:flags.16?int = Chat;
func (m *Chat) To_ChannelForbidden() *TLChannelForbidden {
	return &TLChannelForbidden{
		Data2: m.Data2,
	}
}

// chatEmpty#9ba2d800 id:int = Chat;
func (m *TLChatEmpty) To_Chat() *Chat {
	return &Chat{
		Constructor: TLConstructor_CRC32_chatEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLChatEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatEmpty) GetId() int32  { return m.Data2.Id }

func NewTLChatEmpty() *TLChatEmpty {
	return &TLChatEmpty{Data2: &Chat_Data{}}
}

func (m *TLChatEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLChatEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatEmpty))

	x.Int(m.GetId())

	return x.buf
}

func (m *TLChatEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())

	return dbuf.err
}

// chat#d91cdd54 flags:# creator:flags.0?true kicked:flags.1?true left:flags.2?true admins_enabled:flags.3?true admin:flags.4?true deactivated:flags.5?true id:int title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel = Chat;
func (m *TLChat) To_Chat() *Chat {
	return &Chat{
		Constructor: TLConstructor_CRC32_chat,
		Data2:       m.Data2,
	}
}

func (m *TLChat) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChat) GetCreator() bool  { return m.Data2.Creator }

func (m *TLChat) SetKicked(v bool) { m.Data2.Kicked = v }
func (m *TLChat) GetKicked() bool  { return m.Data2.Kicked }

func (m *TLChat) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChat) GetLeft() bool  { return m.Data2.Left }

func (m *TLChat) SetAdminsEnabled(v bool) { m.Data2.AdminsEnabled = v }
func (m *TLChat) GetAdminsEnabled() bool  { return m.Data2.AdminsEnabled }

func (m *TLChat) SetAdmin(v bool) { m.Data2.Admin = v }
func (m *TLChat) GetAdmin() bool  { return m.Data2.Admin }

func (m *TLChat) SetDeactivated(v bool) { m.Data2.Deactivated = v }
func (m *TLChat) GetDeactivated() bool  { return m.Data2.Deactivated }

func (m *TLChat) SetId(v int32) { m.Data2.Id = v }
func (m *TLChat) GetId() int32  { return m.Data2.Id }

func (m *TLChat) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChat) GetTitle() string  { return m.Data2.Title }

func (m *TLChat) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChat) GetPhoto() *ChatPhoto  { return m.Data2.Photo }

func (m *TLChat) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChat) GetParticipantsCount() int32  { return m.Data2.ParticipantsCount }

func (m *TLChat) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChat) GetDate() int32  { return m.Data2.Date }

func (m *TLChat) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChat) GetVersion() int32  { return m.Data2.Version }

func (m *TLChat) SetMigratedTo(v *InputChannel) { m.Data2.MigratedTo = v }
func (m *TLChat) GetMigratedTo() *InputChannel  { return m.Data2.MigratedTo }

func NewTLChat() *TLChat {
	return &TLChat{Data2: &Chat_Data{}}
}

func (m *TLChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chat))

	// flags
	var flags uint32 = 0
	if m.GetCreator() == true {
		flags |= 1 << 0
	}
	if m.GetKicked() == true {
		flags |= 1 << 1
	}
	if m.GetLeft() == true {
		flags |= 1 << 2
	}
	if m.GetAdminsEnabled() == true {
		flags |= 1 << 3
	}
	if m.GetAdmin() == true {
		flags |= 1 << 4
	}
	if m.GetDeactivated() == true {
		flags |= 1 << 5
	}
	if m.GetMigratedTo() != nil {
		flags |= 1 << 6
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetTitle())
	x.Bytes(m.GetPhoto().Encode())
	x.Int(m.GetParticipantsCount())
	x.Int(m.GetDate())
	x.Int(m.GetVersion())
	if m.GetMigratedTo() != nil {
		x.Bytes(m.GetMigratedTo().Encode())
	}

	return x.buf
}

func (m *TLChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chat))

	// flags
	var flags uint32 = 0
	if m.GetCreator() == true {
		flags |= 1 << 0
	}
	if m.GetKicked() == true {
		flags |= 1 << 1
	}
	if m.GetLeft() == true {
		flags |= 1 << 2
	}
	if m.GetAdminsEnabled() == true {
		flags |= 1 << 3
	}
	if m.GetAdmin() == true {
		flags |= 1 << 4
	}
	if m.GetDeactivated() == true {
		flags |= 1 << 5
	}
	if m.GetMigratedTo() != nil {
		flags |= 1 << 6
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.String(m.GetTitle())
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Int(m.GetParticipantsCount())
	x.Int(m.GetDate())
	x.Int(m.GetVersion())
	if m.GetMigratedTo() != nil {
		x.Bytes(m.GetMigratedTo().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLChat) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetCreator(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetKicked(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetLeft(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetAdminsEnabled(true)
	}
	if (flags & (1 << 4)) != 0 {
		m.SetAdmin(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetDeactivated(true)
	}
	m.SetId(dbuf.Int())
	m.SetTitle(dbuf.String())
	m10 := &ChatPhoto{}
	m10.Decode(dbuf)
	m.SetPhoto(m10)
	m.SetParticipantsCount(dbuf.Int())
	m.SetDate(dbuf.Int())
	m.SetVersion(dbuf.Int())
	if (flags & (1 << 6)) != 0 {
		m14 := &InputChannel{}
		m14.Decode(dbuf)
		m.SetMigratedTo(m14)
	}

	return dbuf.err
}

// chatForbidden#7328bdb id:int title:string = Chat;
func (m *TLChatForbidden) To_Chat() *Chat {
	return &Chat{
		Constructor: TLConstructor_CRC32_chatForbidden,
		Data2:       m.Data2,
	}
}

func (m *TLChatForbidden) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatForbidden) GetId() int32  { return m.Data2.Id }

func (m *TLChatForbidden) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatForbidden) GetTitle() string  { return m.Data2.Title }

func NewTLChatForbidden() *TLChatForbidden {
	return &TLChatForbidden{Data2: &Chat_Data{}}
}

func (m *TLChatForbidden) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatForbidden))

	x.Int(m.GetId())
	x.String(m.GetTitle())

	return x.buf
}

func (m *TLChatForbidden) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatForbidden))

	x.Int(m.GetId())
	x.String(m.GetTitle())

	return x.buf
}

func (m *TLChatForbidden) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetTitle(dbuf.String())

	return dbuf.err
}

// channel#c88974ac flags:# creator:flags.0?true left:flags.2?true editor:flags.3?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true democracy:flags.10?true signatures:flags.11?true min:flags.12?true id:int access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int version:int restriction_reason:flags.9?string admin_rights:flags.14?ChannelAdminRights banned_rights:flags.15?ChannelBannedRights participants_count:flags.17?int = Chat;
func (m *TLChannel) To_Chat() *Chat {
	return &Chat{
		Constructor: TLConstructor_CRC32_channel,
		Data2:       m.Data2,
	}
}

func (m *TLChannel) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChannel) GetCreator() bool  { return m.Data2.Creator }

func (m *TLChannel) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannel) GetLeft() bool  { return m.Data2.Left }

func (m *TLChannel) SetEditor(v bool) { m.Data2.Editor = v }
func (m *TLChannel) GetEditor() bool  { return m.Data2.Editor }

func (m *TLChannel) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannel) GetBroadcast() bool  { return m.Data2.Broadcast }

func (m *TLChannel) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLChannel) GetVerified() bool  { return m.Data2.Verified }

func (m *TLChannel) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannel) GetMegagroup() bool  { return m.Data2.Megagroup }

func (m *TLChannel) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLChannel) GetRestricted() bool  { return m.Data2.Restricted }

func (m *TLChannel) SetDemocracy(v bool) { m.Data2.Democracy = v }
func (m *TLChannel) GetDemocracy() bool  { return m.Data2.Democracy }

func (m *TLChannel) SetSignatures(v bool) { m.Data2.Signatures = v }
func (m *TLChannel) GetSignatures() bool  { return m.Data2.Signatures }

func (m *TLChannel) SetMin(v bool) { m.Data2.Min = v }
func (m *TLChannel) GetMin() bool  { return m.Data2.Min }

func (m *TLChannel) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannel) GetId() int32  { return m.Data2.Id }

func (m *TLChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLChannel) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLChannel) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannel) GetTitle() string  { return m.Data2.Title }

func (m *TLChannel) SetUsername(v string) { m.Data2.Username = v }
func (m *TLChannel) GetUsername() string  { return m.Data2.Username }

func (m *TLChannel) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChannel) GetPhoto() *ChatPhoto  { return m.Data2.Photo }

func (m *TLChannel) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannel) GetDate() int32  { return m.Data2.Date }

func (m *TLChannel) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChannel) GetVersion() int32  { return m.Data2.Version }

func (m *TLChannel) SetRestrictionReason(v string) { m.Data2.RestrictionReason = v }
func (m *TLChannel) GetRestrictionReason() string  { return m.Data2.RestrictionReason }

func (m *TLChannel) SetAdminRights(v *ChannelAdminRights) { m.Data2.AdminRights = v }
func (m *TLChannel) GetAdminRights() *ChannelAdminRights  { return m.Data2.AdminRights }

func (m *TLChannel) SetBannedRights(v *ChannelBannedRights) { m.Data2.BannedRights = v }
func (m *TLChannel) GetBannedRights() *ChannelBannedRights  { return m.Data2.BannedRights }

func (m *TLChannel) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChannel) GetParticipantsCount() int32  { return m.Data2.ParticipantsCount }

func NewTLChannel() *TLChannel {
	return &TLChannel{Data2: &Chat_Data{}}
}

func (m *TLChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channel))

	// flags
	var flags uint32 = 0
	if m.GetCreator() == true {
		flags |= 1 << 0
	}
	if m.GetLeft() == true {
		flags |= 1 << 2
	}
	if m.GetEditor() == true {
		flags |= 1 << 3
	}
	if m.GetBroadcast() == true {
		flags |= 1 << 5
	}
	if m.GetVerified() == true {
		flags |= 1 << 7
	}
	if m.GetMegagroup() == true {
		flags |= 1 << 8
	}
	if m.GetRestricted() == true {
		flags |= 1 << 9
	}
	if m.GetDemocracy() == true {
		flags |= 1 << 10
	}
	if m.GetSignatures() == true {
		flags |= 1 << 11
	}
	if m.GetMin() == true {
		flags |= 1 << 12
	}
	if m.GetAccessHash() != 0 {
		flags |= 1 << 13
	}
	if m.GetUsername() != "" {
		flags |= 1 << 6
	}
	if m.GetRestrictionReason() != "" {
		flags |= 1 << 9
	}
	if m.GetAdminRights() != nil {
		flags |= 1 << 14
	}
	if m.GetBannedRights() != nil {
		flags |= 1 << 15
	}
	if m.GetParticipantsCount() != 0 {
		flags |= 1 << 17
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetAccessHash() != 0 {
		x.Long(m.GetAccessHash())
	}
	x.String(m.GetTitle())
	if m.GetUsername() != "" {
		x.String(m.GetUsername())
	}
	x.Bytes(m.GetPhoto().Encode())
	x.Int(m.GetDate())
	x.Int(m.GetVersion())
	if m.GetRestrictionReason() != "" {
		x.String(m.GetRestrictionReason())
	}
	if m.GetAdminRights() != nil {
		x.Bytes(m.GetAdminRights().Encode())
	}
	if m.GetBannedRights() != nil {
		x.Bytes(m.GetBannedRights().Encode())
	}
	if m.GetParticipantsCount() != 0 {
		x.Int(m.GetParticipantsCount())
	}

	return x.buf
}

func (m *TLChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channel))

	// flags
	var flags uint32 = 0
	if m.GetCreator() == true {
		flags |= 1 << 0
	}
	if m.GetLeft() == true {
		flags |= 1 << 2
	}
	if m.GetEditor() == true {
		flags |= 1 << 3
	}
	if m.GetBroadcast() == true {
		flags |= 1 << 5
	}
	if m.GetVerified() == true {
		flags |= 1 << 7
	}
	if m.GetMegagroup() == true {
		flags |= 1 << 8
	}
	if m.GetRestricted() == true {
		flags |= 1 << 9
	}
	if m.GetDemocracy() == true {
		flags |= 1 << 10
	}
	if m.GetSignatures() == true {
		flags |= 1 << 11
	}
	if m.GetMin() == true {
		flags |= 1 << 12
	}
	if m.GetAccessHash() != 0 {
		flags |= 1 << 13
	}
	if m.GetUsername() != "" {
		flags |= 1 << 6
	}
	if m.GetRestrictionReason() != "" {
		flags |= 1 << 9
	}
	if m.GetAdminRights() != nil {
		flags |= 1 << 14
	}
	if m.GetBannedRights() != nil {
		flags |= 1 << 15
	}
	if m.GetParticipantsCount() != 0 {
		flags |= 1 << 17
	}
	x.UInt(flags)

	x.Int(m.GetId())
	if m.GetAccessHash() != 0 {
		x.Long(m.GetAccessHash())
	}
	x.String(m.GetTitle())
	if m.GetUsername() != "" {
		x.String(m.GetUsername())
	}
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Int(m.GetDate())
	x.Int(m.GetVersion())
	if m.GetRestrictionReason() != "" {
		x.String(m.GetRestrictionReason())
	}
	if m.GetAdminRights() != nil {
		x.Bytes(m.GetAdminRights().EncodeToLayer(layer))
	}
	if m.GetBannedRights() != nil {
		x.Bytes(m.GetBannedRights().EncodeToLayer(layer))
	}
	if m.GetParticipantsCount() != 0 {
		x.Int(m.GetParticipantsCount())
	}

	return x.buf
}

func (m *TLChannel) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetCreator(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetLeft(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetEditor(true)
	}
	if (flags & (1 << 5)) != 0 {
		m.SetBroadcast(true)
	}
	if (flags & (1 << 7)) != 0 {
		m.SetVerified(true)
	}
	if (flags & (1 << 8)) != 0 {
		m.SetMegagroup(true)
	}
	if (flags & (1 << 9)) != 0 {
		m.SetRestricted(true)
	}
	if (flags & (1 << 10)) != 0 {
		m.SetDemocracy(true)
	}
	if (flags & (1 << 11)) != 0 {
		m.SetSignatures(true)
	}
	if (flags & (1 << 12)) != 0 {
		m.SetMin(true)
	}
	m.SetId(dbuf.Int())
	if (flags & (1 << 13)) != 0 {
		m.SetAccessHash(dbuf.Long())
	}
	m.SetTitle(dbuf.String())
	if (flags & (1 << 6)) != 0 {
		m.SetUsername(dbuf.String())
	}
	m16 := &ChatPhoto{}
	m16.Decode(dbuf)
	m.SetPhoto(m16)
	m.SetDate(dbuf.Int())
	m.SetVersion(dbuf.Int())
	if (flags & (1 << 9)) != 0 {
		m.SetRestrictionReason(dbuf.String())
	}
	if (flags & (1 << 14)) != 0 {
		m20 := &ChannelAdminRights{}
		m20.Decode(dbuf)
		m.SetAdminRights(m20)
	}
	if (flags & (1 << 15)) != 0 {
		m21 := &ChannelBannedRights{}
		m21.Decode(dbuf)
		m.SetBannedRights(m21)
	}
	if (flags & (1 << 17)) != 0 {
		m.SetParticipantsCount(dbuf.Int())
	}

	return dbuf.err
}

// channelForbidden#289da732 flags:# broadcast:flags.5?true megagroup:flags.8?true id:int access_hash:long title:string until_date:flags.16?int = Chat;
func (m *TLChannelForbidden) To_Chat() *Chat {
	return &Chat{
		Constructor: TLConstructor_CRC32_channelForbidden,
		Data2:       m.Data2,
	}
}

func (m *TLChannelForbidden) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannelForbidden) GetBroadcast() bool  { return m.Data2.Broadcast }

func (m *TLChannelForbidden) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannelForbidden) GetMegagroup() bool  { return m.Data2.Megagroup }

func (m *TLChannelForbidden) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannelForbidden) GetId() int32  { return m.Data2.Id }

func (m *TLChannelForbidden) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLChannelForbidden) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLChannelForbidden) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannelForbidden) GetTitle() string  { return m.Data2.Title }

func (m *TLChannelForbidden) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLChannelForbidden) GetUntilDate() int32  { return m.Data2.UntilDate }

func NewTLChannelForbidden() *TLChannelForbidden {
	return &TLChannelForbidden{Data2: &Chat_Data{}}
}

func (m *TLChannelForbidden) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelForbidden))

	// flags
	var flags uint32 = 0
	if m.GetBroadcast() == true {
		flags |= 1 << 5
	}
	if m.GetMegagroup() == true {
		flags |= 1 << 8
	}
	if m.GetUntilDate() != 0 {
		flags |= 1 << 16
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.String(m.GetTitle())
	if m.GetUntilDate() != 0 {
		x.Int(m.GetUntilDate())
	}

	return x.buf
}

func (m *TLChannelForbidden) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelForbidden))

	// flags
	var flags uint32 = 0
	if m.GetBroadcast() == true {
		flags |= 1 << 5
	}
	if m.GetMegagroup() == true {
		flags |= 1 << 8
	}
	if m.GetUntilDate() != 0 {
		flags |= 1 << 16
	}
	x.UInt(flags)

	x.Int(m.GetId())
	x.Long(m.GetAccessHash())
	x.String(m.GetTitle())
	if m.GetUntilDate() != 0 {
		x.Int(m.GetUntilDate())
	}

	return x.buf
}

func (m *TLChannelForbidden) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 5)) != 0 {
		m.SetBroadcast(true)
	}
	if (flags & (1 << 8)) != 0 {
		m.SetMegagroup(true)
	}
	m.SetId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())
	m.SetTitle(dbuf.String())
	if (flags & (1 << 16)) != 0 {
		m.SetUntilDate(dbuf.Int())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ChatFull <--
//  + TL_MessagesChatFull
//

func (m *Messages_ChatFull) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_chatFull:
		t := m.To_MessagesChatFull()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_ChatFull) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_chatFull:
		t := m.To_MessagesChatFull()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_ChatFull) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_chatFull:
		m2 := &TLMessagesChatFull{Data2: &Messages_ChatFull_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;
func (m *Messages_ChatFull) To_MessagesChatFull() *TLMessagesChatFull {
	return &TLMessagesChatFull{
		Data2: m.Data2,
	}
}

// messages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;
func (m *TLMessagesChatFull) To_Messages_ChatFull() *Messages_ChatFull {
	return &Messages_ChatFull{
		Constructor: TLConstructor_CRC32_messages_chatFull,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesChatFull) SetFullChat(v *ChatFull) { m.Data2.FullChat = v }
func (m *TLMessagesChatFull) GetFullChat() *ChatFull  { return m.Data2.FullChat }

func (m *TLMessagesChatFull) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChatFull) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesChatFull) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChatFull) GetUsers() []*User  { return m.Data2.Users }

func NewTLMessagesChatFull() *TLMessagesChatFull {
	return &TLMessagesChatFull{Data2: &Messages_ChatFull_Data{}}
}

func (m *TLMessagesChatFull) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_chatFull))

	x.Bytes(m.GetFullChat().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesChatFull) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_chatFull))

	x.Bytes(m.GetFullChat().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesChatFull) Decode(dbuf *DecodeBuf) error {
	m1 := &ChatFull{}
	m1.Decode(dbuf)
	m.SetFullChat(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_AuthorizationForm <--
//  + TL_AccountAuthorizationForm
//

func (m *Account_AuthorizationForm) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_authorizationForm:
		t := m.To_AccountAuthorizationForm()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_AuthorizationForm) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_authorizationForm:
		t := m.To_AccountAuthorizationForm()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_AuthorizationForm) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_authorizationForm:
		m2 := &TLAccountAuthorizationForm{Data2: &Account_AuthorizationForm_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.authorizationForm#ad2e1cd8 flags:# required_types:Vector<SecureRequiredType> values:Vector<SecureValue> errors:Vector<SecureValueError> users:Vector<User> privacy_policy_url:flags.0?string = account.AuthorizationForm;
func (m *Account_AuthorizationForm) To_AccountAuthorizationForm() *TLAccountAuthorizationForm {
	return &TLAccountAuthorizationForm{
		Data2: m.Data2,
	}
}

// account.authorizationForm#ad2e1cd8 flags:# required_types:Vector<SecureRequiredType> values:Vector<SecureValue> errors:Vector<SecureValueError> users:Vector<User> privacy_policy_url:flags.0?string = account.AuthorizationForm;
func (m *TLAccountAuthorizationForm) To_Account_AuthorizationForm() *Account_AuthorizationForm {
	return &Account_AuthorizationForm{
		Constructor: TLConstructor_CRC32_account_authorizationForm,
		Data2:       m.Data2,
	}
}

func (m *TLAccountAuthorizationForm) SetRequiredTypes(v []*SecureRequiredType) {
	m.Data2.RequiredTypes = v
}
func (m *TLAccountAuthorizationForm) GetRequiredTypes() []*SecureRequiredType {
	return m.Data2.RequiredTypes
}

func (m *TLAccountAuthorizationForm) SetValues(v []*SecureValue) { m.Data2.Values = v }
func (m *TLAccountAuthorizationForm) GetValues() []*SecureValue  { return m.Data2.Values }

func (m *TLAccountAuthorizationForm) SetErrors(v []*SecureValueError) { m.Data2.Errors = v }
func (m *TLAccountAuthorizationForm) GetErrors() []*SecureValueError  { return m.Data2.Errors }

func (m *TLAccountAuthorizationForm) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountAuthorizationForm) GetUsers() []*User  { return m.Data2.Users }

func (m *TLAccountAuthorizationForm) SetPrivacyPolicyUrl(v string) { m.Data2.PrivacyPolicyUrl = v }
func (m *TLAccountAuthorizationForm) GetPrivacyPolicyUrl() string  { return m.Data2.PrivacyPolicyUrl }

func NewTLAccountAuthorizationForm() *TLAccountAuthorizationForm {
	return &TLAccountAuthorizationForm{Data2: &Account_AuthorizationForm_Data{}}
}

func (m *TLAccountAuthorizationForm) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_authorizationForm))

	// flags
	var flags uint32 = 0
	if m.GetPrivacyPolicyUrl() != "" {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRequiredTypes())))
	for _, v := range m.GetRequiredTypes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetValues())))
	for _, v := range m.GetValues() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetErrors())))
	for _, v := range m.GetErrors() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	if m.GetPrivacyPolicyUrl() != "" {
		x.String(m.GetPrivacyPolicyUrl())
	}

	return x.buf
}

func (m *TLAccountAuthorizationForm) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_authorizationForm))

	// flags
	var flags uint32 = 0
	if m.GetPrivacyPolicyUrl() != "" {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRequiredTypes())))
	for _, v := range m.GetRequiredTypes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetValues())))
	for _, v := range m.GetValues() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetErrors())))
	for _, v := range m.GetErrors() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	if m.GetPrivacyPolicyUrl() != "" {
		x.String(m.GetPrivacyPolicyUrl())
	}

	return x.buf
}

func (m *TLAccountAuthorizationForm) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*SecureRequiredType, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &SecureRequiredType{}
		v2[i].Decode(dbuf)
	}
	m.SetRequiredTypes(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*SecureValue, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &SecureValue{}
		v3[i].Decode(dbuf)
	}
	m.SetValues(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*SecureValueError, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &SecureValueError{}
		v4[i].Decode(dbuf)
	}
	m.SetErrors(v4)

	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*User, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &User{}
		v5[i].Decode(dbuf)
	}
	m.SetUsers(v5)

	if (flags & (1 << 0)) != 0 {
		m.SetPrivacyPolicyUrl(dbuf.String())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChatPhoto <--
//  + TL_ChatPhotoEmpty
//  + TL_ChatPhoto
//

func (m *ChatPhoto) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatPhotoEmpty:
		t := m.To_ChatPhotoEmpty()
		return t.Encode()
	case TLConstructor_CRC32_chatPhoto:
		t := m.To_ChatPhoto()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatPhoto) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatPhotoEmpty:
		t := m.To_ChatPhotoEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatPhoto:
		t := m.To_ChatPhoto()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatPhoto) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatPhotoEmpty:
		m2 := &TLChatPhotoEmpty{Data2: &ChatPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatPhoto:
		m2 := &TLChatPhoto{Data2: &ChatPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatPhotoEmpty#37c1011c = ChatPhoto;
func (m *ChatPhoto) To_ChatPhotoEmpty() *TLChatPhotoEmpty {
	return &TLChatPhotoEmpty{
		Data2: m.Data2,
	}
}

// chatPhoto#6153276a photo_small:FileLocation photo_big:FileLocation = ChatPhoto;
func (m *ChatPhoto) To_ChatPhoto() *TLChatPhoto {
	return &TLChatPhoto{
		Data2: m.Data2,
	}
}

// chatPhotoEmpty#37c1011c = ChatPhoto;
func (m *TLChatPhotoEmpty) To_ChatPhoto() *ChatPhoto {
	return &ChatPhoto{
		Constructor: TLConstructor_CRC32_chatPhotoEmpty,
		Data2:       m.Data2,
	}
}

func NewTLChatPhotoEmpty() *TLChatPhotoEmpty {
	return &TLChatPhotoEmpty{Data2: &ChatPhoto_Data{}}
}

func (m *TLChatPhotoEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatPhotoEmpty))

	return x.buf
}

func (m *TLChatPhotoEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatPhotoEmpty))

	return x.buf
}

func (m *TLChatPhotoEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// chatPhoto#6153276a photo_small:FileLocation photo_big:FileLocation = ChatPhoto;
func (m *TLChatPhoto) To_ChatPhoto() *ChatPhoto {
	return &ChatPhoto{
		Constructor: TLConstructor_CRC32_chatPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLChatPhoto) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLChatPhoto) GetPhotoSmall() *FileLocation  { return m.Data2.PhotoSmall }

func (m *TLChatPhoto) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLChatPhoto) GetPhotoBig() *FileLocation  { return m.Data2.PhotoBig }

func NewTLChatPhoto() *TLChatPhoto {
	return &TLChatPhoto{Data2: &ChatPhoto_Data{}}
}

func (m *TLChatPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatPhoto))

	x.Bytes(m.GetPhotoSmall().Encode())
	x.Bytes(m.GetPhotoBig().Encode())

	return x.buf
}

func (m *TLChatPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatPhoto))

	x.Bytes(m.GetPhotoSmall().EncodeToLayer(layer))
	x.Bytes(m.GetPhotoBig().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChatPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &FileLocation{}
	m1.Decode(dbuf)
	m.SetPhotoSmall(m1)
	m2 := &FileLocation{}
	m2.Decode(dbuf)
	m.SetPhotoBig(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_DhConfig <--
//  + TL_MessagesDhConfigNotModified
//  + TL_MessagesDhConfig
//

func (m *Messages_DhConfig) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_dhConfigNotModified:
		t := m.To_MessagesDhConfigNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_dhConfig:
		t := m.To_MessagesDhConfig()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_DhConfig) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_dhConfigNotModified:
		t := m.To_MessagesDhConfigNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_dhConfig:
		t := m.To_MessagesDhConfig()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_DhConfig) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_dhConfigNotModified:
		m2 := &TLMessagesDhConfigNotModified{Data2: &Messages_DhConfig_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_dhConfig:
		m2 := &TLMessagesDhConfig{Data2: &Messages_DhConfig_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.dhConfigNotModified#c0e24635 random:bytes = messages.DhConfig;
func (m *Messages_DhConfig) To_MessagesDhConfigNotModified() *TLMessagesDhConfigNotModified {
	return &TLMessagesDhConfigNotModified{
		Data2: m.Data2,
	}
}

// messages.dhConfig#2c221edd g:int p:bytes version:int random:bytes = messages.DhConfig;
func (m *Messages_DhConfig) To_MessagesDhConfig() *TLMessagesDhConfig {
	return &TLMessagesDhConfig{
		Data2: m.Data2,
	}
}

// messages.dhConfigNotModified#c0e24635 random:bytes = messages.DhConfig;
func (m *TLMessagesDhConfigNotModified) To_Messages_DhConfig() *Messages_DhConfig {
	return &Messages_DhConfig{
		Constructor: TLConstructor_CRC32_messages_dhConfigNotModified,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesDhConfigNotModified) SetRandom(v []byte) { m.Data2.Random = v }
func (m *TLMessagesDhConfigNotModified) GetRandom() []byte  { return m.Data2.Random }

func NewTLMessagesDhConfigNotModified() *TLMessagesDhConfigNotModified {
	return &TLMessagesDhConfigNotModified{Data2: &Messages_DhConfig_Data{}}
}

func (m *TLMessagesDhConfigNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dhConfigNotModified))

	x.StringBytes(m.GetRandom())

	return x.buf
}

func (m *TLMessagesDhConfigNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dhConfigNotModified))

	x.StringBytes(m.GetRandom())

	return x.buf
}

func (m *TLMessagesDhConfigNotModified) Decode(dbuf *DecodeBuf) error {
	m.SetRandom(dbuf.StringBytes())

	return dbuf.err
}

// messages.dhConfig#2c221edd g:int p:bytes version:int random:bytes = messages.DhConfig;
func (m *TLMessagesDhConfig) To_Messages_DhConfig() *Messages_DhConfig {
	return &Messages_DhConfig{
		Constructor: TLConstructor_CRC32_messages_dhConfig,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesDhConfig) SetG(v int32) { m.Data2.G = v }
func (m *TLMessagesDhConfig) GetG() int32  { return m.Data2.G }

func (m *TLMessagesDhConfig) SetP(v []byte) { m.Data2.P = v }
func (m *TLMessagesDhConfig) GetP() []byte  { return m.Data2.P }

func (m *TLMessagesDhConfig) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLMessagesDhConfig) GetVersion() int32  { return m.Data2.Version }

func (m *TLMessagesDhConfig) SetRandom(v []byte) { m.Data2.Random = v }
func (m *TLMessagesDhConfig) GetRandom() []byte  { return m.Data2.Random }

func NewTLMessagesDhConfig() *TLMessagesDhConfig {
	return &TLMessagesDhConfig{Data2: &Messages_DhConfig_Data{}}
}

func (m *TLMessagesDhConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dhConfig))

	x.Int(m.GetG())
	x.StringBytes(m.GetP())
	x.Int(m.GetVersion())
	x.StringBytes(m.GetRandom())

	return x.buf
}

func (m *TLMessagesDhConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_dhConfig))

	x.Int(m.GetG())
	x.StringBytes(m.GetP())
	x.Int(m.GetVersion())
	x.StringBytes(m.GetRandom())

	return x.buf
}

func (m *TLMessagesDhConfig) Decode(dbuf *DecodeBuf) error {
	m.SetG(dbuf.Int())
	m.SetP(dbuf.StringBytes())
	m.SetVersion(dbuf.Int())
	m.SetRandom(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PageBlock <--
//  + TL_PageBlockUnsupported
//  + TL_PageBlockTitle
//  + TL_PageBlockSubtitle
//  + TL_PageBlockAuthorDate
//  + TL_PageBlockHeader
//  + TL_PageBlockSubheader
//  + TL_PageBlockParagraph
//  + TL_PageBlockPreformatted
//  + TL_PageBlockFooter
//  + TL_PageBlockDivider
//  + TL_PageBlockAnchor
//  + TL_PageBlockList
//  + TL_PageBlockBlockquote
//  + TL_PageBlockPullquote
//  + TL_PageBlockPhoto
//  + TL_PageBlockVideo
//  + TL_PageBlockCover
//  + TL_PageBlockEmbed
//  + TL_PageBlockEmbedPost
//  + TL_PageBlockCollage
//  + TL_PageBlockSlideshow
//  + TL_PageBlockChannel
//  + TL_PageBlockAudio
//

func (m *PageBlock) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_pageBlockUnsupported:
		t := m.To_PageBlockUnsupported()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockTitle:
		t := m.To_PageBlockTitle()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockSubtitle:
		t := m.To_PageBlockSubtitle()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockAuthorDate:
		t := m.To_PageBlockAuthorDate()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockHeader:
		t := m.To_PageBlockHeader()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockSubheader:
		t := m.To_PageBlockSubheader()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockParagraph:
		t := m.To_PageBlockParagraph()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockPreformatted:
		t := m.To_PageBlockPreformatted()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockFooter:
		t := m.To_PageBlockFooter()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockDivider:
		t := m.To_PageBlockDivider()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockAnchor:
		t := m.To_PageBlockAnchor()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockList:
		t := m.To_PageBlockList()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockBlockquote:
		t := m.To_PageBlockBlockquote()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockPullquote:
		t := m.To_PageBlockPullquote()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockPhoto:
		t := m.To_PageBlockPhoto()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockVideo:
		t := m.To_PageBlockVideo()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockCover:
		t := m.To_PageBlockCover()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockEmbed:
		t := m.To_PageBlockEmbed()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockEmbedPost:
		t := m.To_PageBlockEmbedPost()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockCollage:
		t := m.To_PageBlockCollage()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockSlideshow:
		t := m.To_PageBlockSlideshow()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockChannel:
		t := m.To_PageBlockChannel()
		return t.Encode()
	case TLConstructor_CRC32_pageBlockAudio:
		t := m.To_PageBlockAudio()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PageBlock) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_pageBlockUnsupported:
		t := m.To_PageBlockUnsupported()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockTitle:
		t := m.To_PageBlockTitle()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockSubtitle:
		t := m.To_PageBlockSubtitle()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockAuthorDate:
		t := m.To_PageBlockAuthorDate()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockHeader:
		t := m.To_PageBlockHeader()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockSubheader:
		t := m.To_PageBlockSubheader()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockParagraph:
		t := m.To_PageBlockParagraph()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockPreformatted:
		t := m.To_PageBlockPreformatted()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockFooter:
		t := m.To_PageBlockFooter()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockDivider:
		t := m.To_PageBlockDivider()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockAnchor:
		t := m.To_PageBlockAnchor()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockList:
		t := m.To_PageBlockList()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockBlockquote:
		t := m.To_PageBlockBlockquote()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockPullquote:
		t := m.To_PageBlockPullquote()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockPhoto:
		t := m.To_PageBlockPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockVideo:
		t := m.To_PageBlockVideo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockCover:
		t := m.To_PageBlockCover()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockEmbed:
		t := m.To_PageBlockEmbed()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockEmbedPost:
		t := m.To_PageBlockEmbedPost()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockCollage:
		t := m.To_PageBlockCollage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockSlideshow:
		t := m.To_PageBlockSlideshow()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockChannel:
		t := m.To_PageBlockChannel()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_pageBlockAudio:
		t := m.To_PageBlockAudio()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PageBlock) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_pageBlockUnsupported:
		m2 := &TLPageBlockUnsupported{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockTitle:
		m2 := &TLPageBlockTitle{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockSubtitle:
		m2 := &TLPageBlockSubtitle{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockAuthorDate:
		m2 := &TLPageBlockAuthorDate{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockHeader:
		m2 := &TLPageBlockHeader{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockSubheader:
		m2 := &TLPageBlockSubheader{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockParagraph:
		m2 := &TLPageBlockParagraph{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockPreformatted:
		m2 := &TLPageBlockPreformatted{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockFooter:
		m2 := &TLPageBlockFooter{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockDivider:
		m2 := &TLPageBlockDivider{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockAnchor:
		m2 := &TLPageBlockAnchor{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockList:
		m2 := &TLPageBlockList{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockBlockquote:
		m2 := &TLPageBlockBlockquote{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockPullquote:
		m2 := &TLPageBlockPullquote{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockPhoto:
		m2 := &TLPageBlockPhoto{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockVideo:
		m2 := &TLPageBlockVideo{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockCover:
		m2 := &TLPageBlockCover{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockEmbed:
		m2 := &TLPageBlockEmbed{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockEmbedPost:
		m2 := &TLPageBlockEmbedPost{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockCollage:
		m2 := &TLPageBlockCollage{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockSlideshow:
		m2 := &TLPageBlockSlideshow{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockChannel:
		m2 := &TLPageBlockChannel{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_pageBlockAudio:
		m2 := &TLPageBlockAudio{Data2: &PageBlock_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// pageBlockUnsupported#13567e8a = PageBlock;
func (m *PageBlock) To_PageBlockUnsupported() *TLPageBlockUnsupported {
	return &TLPageBlockUnsupported{
		Data2: m.Data2,
	}
}

// pageBlockTitle#70abc3fd text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockTitle() *TLPageBlockTitle {
	return &TLPageBlockTitle{
		Data2: m.Data2,
	}
}

// pageBlockSubtitle#8ffa9a1f text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockSubtitle() *TLPageBlockSubtitle {
	return &TLPageBlockSubtitle{
		Data2: m.Data2,
	}
}

// pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock;
func (m *PageBlock) To_PageBlockAuthorDate() *TLPageBlockAuthorDate {
	return &TLPageBlockAuthorDate{
		Data2: m.Data2,
	}
}

// pageBlockHeader#bfd064ec text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockHeader() *TLPageBlockHeader {
	return &TLPageBlockHeader{
		Data2: m.Data2,
	}
}

// pageBlockSubheader#f12bb6e1 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockSubheader() *TLPageBlockSubheader {
	return &TLPageBlockSubheader{
		Data2: m.Data2,
	}
}

// pageBlockParagraph#467a0766 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockParagraph() *TLPageBlockParagraph {
	return &TLPageBlockParagraph{
		Data2: m.Data2,
	}
}

// pageBlockPreformatted#c070d93e text:RichText language:string = PageBlock;
func (m *PageBlock) To_PageBlockPreformatted() *TLPageBlockPreformatted {
	return &TLPageBlockPreformatted{
		Data2: m.Data2,
	}
}

// pageBlockFooter#48870999 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockFooter() *TLPageBlockFooter {
	return &TLPageBlockFooter{
		Data2: m.Data2,
	}
}

// pageBlockDivider#db20b188 = PageBlock;
func (m *PageBlock) To_PageBlockDivider() *TLPageBlockDivider {
	return &TLPageBlockDivider{
		Data2: m.Data2,
	}
}

// pageBlockAnchor#ce0d37b0 name:string = PageBlock;
func (m *PageBlock) To_PageBlockAnchor() *TLPageBlockAnchor {
	return &TLPageBlockAnchor{
		Data2: m.Data2,
	}
}

// pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock;
func (m *PageBlock) To_PageBlockList() *TLPageBlockList {
	return &TLPageBlockList{
		Data2: m.Data2,
	}
}

// pageBlockBlockquote#263d7c26 text:RichText caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockBlockquote() *TLPageBlockBlockquote {
	return &TLPageBlockBlockquote{
		Data2: m.Data2,
	}
}

// pageBlockPullquote#4f4456d3 text:RichText caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockPullquote() *TLPageBlockPullquote {
	return &TLPageBlockPullquote{
		Data2: m.Data2,
	}
}

// pageBlockPhoto#e9c69982 photo_id:long caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockPhoto() *TLPageBlockPhoto {
	return &TLPageBlockPhoto{
		Data2: m.Data2,
	}
}

// pageBlockVideo#d9d71866 flags:# autoplay:flags.0?true loop:flags.1?true video_id:long caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockVideo() *TLPageBlockVideo {
	return &TLPageBlockVideo{
		Data2: m.Data2,
	}
}

// pageBlockCover#39f23300 cover:PageBlock = PageBlock;
func (m *PageBlock) To_PageBlockCover() *TLPageBlockCover {
	return &TLPageBlockCover{
		Data2: m.Data2,
	}
}

// pageBlockEmbed#cde200d1 flags:# full_width:flags.0?true allow_scrolling:flags.3?true url:flags.1?string html:flags.2?string poster_photo_id:flags.4?long w:int h:int caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockEmbed() *TLPageBlockEmbed {
	return &TLPageBlockEmbed{
		Data2: m.Data2,
	}
}

// pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockEmbedPost() *TLPageBlockEmbedPost {
	return &TLPageBlockEmbedPost{
		Data2: m.Data2,
	}
}

// pageBlockCollage#8b31c4f items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockCollage() *TLPageBlockCollage {
	return &TLPageBlockCollage{
		Data2: m.Data2,
	}
}

// pageBlockSlideshow#130c8963 items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockSlideshow() *TLPageBlockSlideshow {
	return &TLPageBlockSlideshow{
		Data2: m.Data2,
	}
}

// pageBlockChannel#ef1751b5 channel:Chat = PageBlock;
func (m *PageBlock) To_PageBlockChannel() *TLPageBlockChannel {
	return &TLPageBlockChannel{
		Data2: m.Data2,
	}
}

// pageBlockAudio#31b81a7f audio_id:long caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockAudio() *TLPageBlockAudio {
	return &TLPageBlockAudio{
		Data2: m.Data2,
	}
}

// pageBlockUnsupported#13567e8a = PageBlock;
func (m *TLPageBlockUnsupported) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockUnsupported,
		Data2:       m.Data2,
	}
}

func NewTLPageBlockUnsupported() *TLPageBlockUnsupported {
	return &TLPageBlockUnsupported{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockUnsupported) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockUnsupported))

	return x.buf
}

func (m *TLPageBlockUnsupported) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockUnsupported))

	return x.buf
}

func (m *TLPageBlockUnsupported) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// pageBlockTitle#70abc3fd text:RichText = PageBlock;
func (m *TLPageBlockTitle) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockTitle,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockTitle) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockTitle) GetText() *RichText  { return m.Data2.Text }

func NewTLPageBlockTitle() *TLPageBlockTitle {
	return &TLPageBlockTitle{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockTitle) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockTitle))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLPageBlockTitle) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockTitle))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockTitle) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// pageBlockSubtitle#8ffa9a1f text:RichText = PageBlock;
func (m *TLPageBlockSubtitle) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockSubtitle,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockSubtitle) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockSubtitle) GetText() *RichText  { return m.Data2.Text }

func NewTLPageBlockSubtitle() *TLPageBlockSubtitle {
	return &TLPageBlockSubtitle{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockSubtitle) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockSubtitle))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLPageBlockSubtitle) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockSubtitle))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockSubtitle) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock;
func (m *TLPageBlockAuthorDate) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockAuthorDate,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockAuthorDate) SetAuthor(v *RichText) { m.Data2.Author_2 = v }
func (m *TLPageBlockAuthorDate) GetAuthor() *RichText  { return m.Data2.Author_2 }

func (m *TLPageBlockAuthorDate) SetPublishedDate(v int32) { m.Data2.PublishedDate = v }
func (m *TLPageBlockAuthorDate) GetPublishedDate() int32  { return m.Data2.PublishedDate }

func NewTLPageBlockAuthorDate() *TLPageBlockAuthorDate {
	return &TLPageBlockAuthorDate{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockAuthorDate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockAuthorDate))

	x.Bytes(m.GetAuthor().Encode())
	x.Int(m.GetPublishedDate())

	return x.buf
}

func (m *TLPageBlockAuthorDate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockAuthorDate))

	x.Bytes(m.GetAuthor().EncodeToLayer(layer))
	x.Int(m.GetPublishedDate())

	return x.buf
}

func (m *TLPageBlockAuthorDate) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetAuthor(m1)
	m.SetPublishedDate(dbuf.Int())

	return dbuf.err
}

// pageBlockHeader#bfd064ec text:RichText = PageBlock;
func (m *TLPageBlockHeader) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockHeader,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockHeader) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockHeader) GetText() *RichText  { return m.Data2.Text }

func NewTLPageBlockHeader() *TLPageBlockHeader {
	return &TLPageBlockHeader{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockHeader) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockHeader))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLPageBlockHeader) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockHeader))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockHeader) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// pageBlockSubheader#f12bb6e1 text:RichText = PageBlock;
func (m *TLPageBlockSubheader) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockSubheader,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockSubheader) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockSubheader) GetText() *RichText  { return m.Data2.Text }

func NewTLPageBlockSubheader() *TLPageBlockSubheader {
	return &TLPageBlockSubheader{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockSubheader) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockSubheader))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLPageBlockSubheader) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockSubheader))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockSubheader) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// pageBlockParagraph#467a0766 text:RichText = PageBlock;
func (m *TLPageBlockParagraph) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockParagraph,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockParagraph) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockParagraph) GetText() *RichText  { return m.Data2.Text }

func NewTLPageBlockParagraph() *TLPageBlockParagraph {
	return &TLPageBlockParagraph{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockParagraph) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockParagraph))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLPageBlockParagraph) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockParagraph))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockParagraph) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// pageBlockPreformatted#c070d93e text:RichText language:string = PageBlock;
func (m *TLPageBlockPreformatted) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockPreformatted,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockPreformatted) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockPreformatted) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockPreformatted) SetLanguage(v string) { m.Data2.Language = v }
func (m *TLPageBlockPreformatted) GetLanguage() string  { return m.Data2.Language }

func NewTLPageBlockPreformatted() *TLPageBlockPreformatted {
	return &TLPageBlockPreformatted{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockPreformatted) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockPreformatted))

	x.Bytes(m.GetText().Encode())
	x.String(m.GetLanguage())

	return x.buf
}

func (m *TLPageBlockPreformatted) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockPreformatted))

	x.Bytes(m.GetText().EncodeToLayer(layer))
	x.String(m.GetLanguage())

	return x.buf
}

func (m *TLPageBlockPreformatted) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)
	m.SetLanguage(dbuf.String())

	return dbuf.err
}

// pageBlockFooter#48870999 text:RichText = PageBlock;
func (m *TLPageBlockFooter) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockFooter,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockFooter) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockFooter) GetText() *RichText  { return m.Data2.Text }

func NewTLPageBlockFooter() *TLPageBlockFooter {
	return &TLPageBlockFooter{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockFooter) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockFooter))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLPageBlockFooter) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockFooter))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockFooter) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// pageBlockDivider#db20b188 = PageBlock;
func (m *TLPageBlockDivider) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockDivider,
		Data2:       m.Data2,
	}
}

func NewTLPageBlockDivider() *TLPageBlockDivider {
	return &TLPageBlockDivider{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockDivider) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockDivider))

	return x.buf
}

func (m *TLPageBlockDivider) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockDivider))

	return x.buf
}

func (m *TLPageBlockDivider) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// pageBlockAnchor#ce0d37b0 name:string = PageBlock;
func (m *TLPageBlockAnchor) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockAnchor,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockAnchor) SetName(v string) { m.Data2.Name = v }
func (m *TLPageBlockAnchor) GetName() string  { return m.Data2.Name }

func NewTLPageBlockAnchor() *TLPageBlockAnchor {
	return &TLPageBlockAnchor{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockAnchor) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockAnchor))

	x.String(m.GetName())

	return x.buf
}

func (m *TLPageBlockAnchor) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockAnchor))

	x.String(m.GetName())

	return x.buf
}

func (m *TLPageBlockAnchor) Decode(dbuf *DecodeBuf) error {
	m.SetName(dbuf.String())

	return dbuf.err
}

// pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock;
func (m *TLPageBlockList) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockList,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockList) SetOrdered(v *Bool) { m.Data2.Ordered = v }
func (m *TLPageBlockList) GetOrdered() *Bool  { return m.Data2.Ordered }

func (m *TLPageBlockList) SetItems(v []*RichText) { m.Data2.Items_7 = v }
func (m *TLPageBlockList) GetItems() []*RichText  { return m.Data2.Items_7 }

func NewTLPageBlockList() *TLPageBlockList {
	return &TLPageBlockList{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockList) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockList))

	x.Bytes(m.GetOrdered().Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetItems())))
	for _, v := range m.GetItems() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPageBlockList) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockList))

	x.Bytes(m.GetOrdered().EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetItems())))
	for _, v := range m.GetItems() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPageBlockList) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.SetOrdered(m1)
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*RichText, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &RichText{}
		v2[i].Decode(dbuf)
	}
	m.SetItems(v2)

	return dbuf.err
}

// pageBlockBlockquote#263d7c26 text:RichText caption:RichText = PageBlock;
func (m *TLPageBlockBlockquote) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockBlockquote,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockBlockquote) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockBlockquote) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockBlockquote) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockBlockquote) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockBlockquote() *TLPageBlockBlockquote {
	return &TLPageBlockBlockquote{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockBlockquote) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockBlockquote))

	x.Bytes(m.GetText().Encode())
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockBlockquote) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockBlockquote))

	x.Bytes(m.GetText().EncodeToLayer(layer))
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockBlockquote) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)
	m2 := &RichText{}
	m2.Decode(dbuf)
	m.SetCaption(m2)

	return dbuf.err
}

// pageBlockPullquote#4f4456d3 text:RichText caption:RichText = PageBlock;
func (m *TLPageBlockPullquote) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockPullquote,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockPullquote) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockPullquote) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockPullquote) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockPullquote) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockPullquote() *TLPageBlockPullquote {
	return &TLPageBlockPullquote{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockPullquote) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockPullquote))

	x.Bytes(m.GetText().Encode())
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockPullquote) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockPullquote))

	x.Bytes(m.GetText().EncodeToLayer(layer))
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockPullquote) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)
	m2 := &RichText{}
	m2.Decode(dbuf)
	m.SetCaption(m2)

	return dbuf.err
}

// pageBlockPhoto#e9c69982 photo_id:long caption:RichText = PageBlock;
func (m *TLPageBlockPhoto) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockPhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLPageBlockPhoto) GetPhotoId() int64  { return m.Data2.PhotoId }

func (m *TLPageBlockPhoto) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockPhoto) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockPhoto() *TLPageBlockPhoto {
	return &TLPageBlockPhoto{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockPhoto))

	x.Long(m.GetPhotoId())
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockPhoto))

	x.Long(m.GetPhotoId())
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockPhoto) Decode(dbuf *DecodeBuf) error {
	m.SetPhotoId(dbuf.Long())
	m2 := &RichText{}
	m2.Decode(dbuf)
	m.SetCaption(m2)

	return dbuf.err
}

// pageBlockVideo#d9d71866 flags:# autoplay:flags.0?true loop:flags.1?true video_id:long caption:RichText = PageBlock;
func (m *TLPageBlockVideo) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockVideo,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockVideo) SetAutoplay(v bool) { m.Data2.Autoplay = v }
func (m *TLPageBlockVideo) GetAutoplay() bool  { return m.Data2.Autoplay }

func (m *TLPageBlockVideo) SetLoop(v bool) { m.Data2.Loop = v }
func (m *TLPageBlockVideo) GetLoop() bool  { return m.Data2.Loop }

func (m *TLPageBlockVideo) SetVideoId(v int64) { m.Data2.VideoId = v }
func (m *TLPageBlockVideo) GetVideoId() int64  { return m.Data2.VideoId }

func (m *TLPageBlockVideo) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockVideo) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockVideo() *TLPageBlockVideo {
	return &TLPageBlockVideo{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockVideo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockVideo))

	// flags
	var flags uint32 = 0
	if m.GetAutoplay() == true {
		flags |= 1 << 0
	}
	if m.GetLoop() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetVideoId())
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockVideo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockVideo))

	// flags
	var flags uint32 = 0
	if m.GetAutoplay() == true {
		flags |= 1 << 0
	}
	if m.GetLoop() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetVideoId())
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockVideo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetAutoplay(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetLoop(true)
	}
	m.SetVideoId(dbuf.Long())
	m5 := &RichText{}
	m5.Decode(dbuf)
	m.SetCaption(m5)

	return dbuf.err
}

// pageBlockCover#39f23300 cover:PageBlock = PageBlock;
func (m *TLPageBlockCover) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockCover,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockCover) SetCover(v *PageBlock) { m.Data2.Cover = v }
func (m *TLPageBlockCover) GetCover() *PageBlock  { return m.Data2.Cover }

func NewTLPageBlockCover() *TLPageBlockCover {
	return &TLPageBlockCover{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockCover) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockCover))

	x.Bytes(m.GetCover().Encode())

	return x.buf
}

func (m *TLPageBlockCover) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockCover))

	x.Bytes(m.GetCover().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockCover) Decode(dbuf *DecodeBuf) error {
	m1 := &PageBlock{}
	m1.Decode(dbuf)
	m.SetCover(m1)

	return dbuf.err
}

// pageBlockEmbed#cde200d1 flags:# full_width:flags.0?true allow_scrolling:flags.3?true url:flags.1?string html:flags.2?string poster_photo_id:flags.4?long w:int h:int caption:RichText = PageBlock;
func (m *TLPageBlockEmbed) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockEmbed,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockEmbed) SetFullWidth(v bool) { m.Data2.FullWidth = v }
func (m *TLPageBlockEmbed) GetFullWidth() bool  { return m.Data2.FullWidth }

func (m *TLPageBlockEmbed) SetAllowScrolling(v bool) { m.Data2.AllowScrolling = v }
func (m *TLPageBlockEmbed) GetAllowScrolling() bool  { return m.Data2.AllowScrolling }

func (m *TLPageBlockEmbed) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockEmbed) GetUrl() string  { return m.Data2.Url }

func (m *TLPageBlockEmbed) SetHtml(v string) { m.Data2.Html = v }
func (m *TLPageBlockEmbed) GetHtml() string  { return m.Data2.Html }

func (m *TLPageBlockEmbed) SetPosterPhotoId(v int64) { m.Data2.PosterPhotoId = v }
func (m *TLPageBlockEmbed) GetPosterPhotoId() int64  { return m.Data2.PosterPhotoId }

func (m *TLPageBlockEmbed) SetW(v int32) { m.Data2.W = v }
func (m *TLPageBlockEmbed) GetW() int32  { return m.Data2.W }

func (m *TLPageBlockEmbed) SetH(v int32) { m.Data2.H = v }
func (m *TLPageBlockEmbed) GetH() int32  { return m.Data2.H }

func (m *TLPageBlockEmbed) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockEmbed) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockEmbed() *TLPageBlockEmbed {
	return &TLPageBlockEmbed{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockEmbed) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockEmbed))

	// flags
	var flags uint32 = 0
	if m.GetFullWidth() == true {
		flags |= 1 << 0
	}
	if m.GetAllowScrolling() == true {
		flags |= 1 << 3
	}
	if m.GetUrl() != "" {
		flags |= 1 << 1
	}
	if m.GetHtml() != "" {
		flags |= 1 << 2
	}
	if m.GetPosterPhotoId() != 0 {
		flags |= 1 << 4
	}
	x.UInt(flags)

	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	if m.GetHtml() != "" {
		x.String(m.GetHtml())
	}
	if m.GetPosterPhotoId() != 0 {
		x.Long(m.GetPosterPhotoId())
	}
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockEmbed) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockEmbed))

	// flags
	var flags uint32 = 0
	if m.GetFullWidth() == true {
		flags |= 1 << 0
	}
	if m.GetAllowScrolling() == true {
		flags |= 1 << 3
	}
	if m.GetUrl() != "" {
		flags |= 1 << 1
	}
	if m.GetHtml() != "" {
		flags |= 1 << 2
	}
	if m.GetPosterPhotoId() != 0 {
		flags |= 1 << 4
	}
	x.UInt(flags)

	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	if m.GetHtml() != "" {
		x.String(m.GetHtml())
	}
	if m.GetPosterPhotoId() != 0 {
		x.Long(m.GetPosterPhotoId())
	}
	x.Int(m.GetW())
	x.Int(m.GetH())
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockEmbed) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetFullWidth(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetAllowScrolling(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetUrl(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetHtml(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m.SetPosterPhotoId(dbuf.Long())
	}
	m.SetW(dbuf.Int())
	m.SetH(dbuf.Int())
	m9 := &RichText{}
	m9.Decode(dbuf)
	m.SetCaption(m9)

	return dbuf.err
}

// pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock;
func (m *TLPageBlockEmbedPost) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockEmbedPost,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockEmbedPost) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockEmbedPost) GetUrl() string  { return m.Data2.Url }

func (m *TLPageBlockEmbedPost) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLPageBlockEmbedPost) GetWebpageId() int64  { return m.Data2.WebpageId }

func (m *TLPageBlockEmbedPost) SetAuthorPhotoId(v int64) { m.Data2.AuthorPhotoId = v }
func (m *TLPageBlockEmbedPost) GetAuthorPhotoId() int64  { return m.Data2.AuthorPhotoId }

func (m *TLPageBlockEmbedPost) SetAuthor(v string) { m.Data2.Author_23 = v }
func (m *TLPageBlockEmbedPost) GetAuthor() string  { return m.Data2.Author_23 }

func (m *TLPageBlockEmbedPost) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPageBlockEmbedPost) GetDate() int32  { return m.Data2.Date }

func (m *TLPageBlockEmbedPost) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageBlockEmbedPost) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPageBlockEmbedPost) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockEmbedPost) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockEmbedPost() *TLPageBlockEmbedPost {
	return &TLPageBlockEmbedPost{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockEmbedPost) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockEmbedPost))

	x.String(m.GetUrl())
	x.Long(m.GetWebpageId())
	x.Long(m.GetAuthorPhotoId())
	x.String(m.GetAuthor())
	x.Int(m.GetDate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocks())))
	for _, v := range m.GetBlocks() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockEmbedPost) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockEmbedPost))

	x.String(m.GetUrl())
	x.Long(m.GetWebpageId())
	x.Long(m.GetAuthorPhotoId())
	x.String(m.GetAuthor())
	x.Int(m.GetDate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetBlocks())))
	for _, v := range m.GetBlocks() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockEmbedPost) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetWebpageId(dbuf.Long())
	m.SetAuthorPhotoId(dbuf.Long())
	m.SetAuthor(dbuf.String())
	m.SetDate(dbuf.Int())
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*PageBlock, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &PageBlock{}
		v6[i].Decode(dbuf)
	}
	m.SetBlocks(v6)

	m7 := &RichText{}
	m7.Decode(dbuf)
	m.SetCaption(m7)

	return dbuf.err
}

// pageBlockCollage#8b31c4f items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *TLPageBlockCollage) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockCollage,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockCollage) SetItems(v []*PageBlock) { m.Data2.Items_26 = v }
func (m *TLPageBlockCollage) GetItems() []*PageBlock  { return m.Data2.Items_26 }

func (m *TLPageBlockCollage) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockCollage) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockCollage() *TLPageBlockCollage {
	return &TLPageBlockCollage{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockCollage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockCollage))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetItems())))
	for _, v := range m.GetItems() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockCollage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockCollage))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetItems())))
	for _, v := range m.GetItems() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockCollage) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*PageBlock, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &PageBlock{}
		v1[i].Decode(dbuf)
	}
	m.SetItems(v1)

	m2 := &RichText{}
	m2.Decode(dbuf)
	m.SetCaption(m2)

	return dbuf.err
}

// pageBlockSlideshow#130c8963 items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *TLPageBlockSlideshow) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockSlideshow,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockSlideshow) SetItems(v []*PageBlock) { m.Data2.Items_26 = v }
func (m *TLPageBlockSlideshow) GetItems() []*PageBlock  { return m.Data2.Items_26 }

func (m *TLPageBlockSlideshow) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockSlideshow) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockSlideshow() *TLPageBlockSlideshow {
	return &TLPageBlockSlideshow{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockSlideshow) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockSlideshow))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetItems())))
	for _, v := range m.GetItems() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockSlideshow) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockSlideshow))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetItems())))
	for _, v := range m.GetItems() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockSlideshow) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*PageBlock, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &PageBlock{}
		v1[i].Decode(dbuf)
	}
	m.SetItems(v1)

	m2 := &RichText{}
	m2.Decode(dbuf)
	m.SetCaption(m2)

	return dbuf.err
}

// pageBlockChannel#ef1751b5 channel:Chat = PageBlock;
func (m *TLPageBlockChannel) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockChannel,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockChannel) SetChannel(v *Chat) { m.Data2.Channel = v }
func (m *TLPageBlockChannel) GetChannel() *Chat  { return m.Data2.Channel }

func NewTLPageBlockChannel() *TLPageBlockChannel {
	return &TLPageBlockChannel{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockChannel))

	x.Bytes(m.GetChannel().Encode())

	return x.buf
}

func (m *TLPageBlockChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockChannel))

	x.Bytes(m.GetChannel().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockChannel) Decode(dbuf *DecodeBuf) error {
	m1 := &Chat{}
	m1.Decode(dbuf)
	m.SetChannel(m1)

	return dbuf.err
}

// pageBlockAudio#31b81a7f audio_id:long caption:RichText = PageBlock;
func (m *TLPageBlockAudio) To_PageBlock() *PageBlock {
	return &PageBlock{
		Constructor: TLConstructor_CRC32_pageBlockAudio,
		Data2:       m.Data2,
	}
}

func (m *TLPageBlockAudio) SetAudioId(v int64) { m.Data2.AudioId = v }
func (m *TLPageBlockAudio) GetAudioId() int64  { return m.Data2.AudioId }

func (m *TLPageBlockAudio) SetCaption(v *RichText) { m.Data2.Caption = v }
func (m *TLPageBlockAudio) GetCaption() *RichText  { return m.Data2.Caption }

func NewTLPageBlockAudio() *TLPageBlockAudio {
	return &TLPageBlockAudio{Data2: &PageBlock_Data{}}
}

func (m *TLPageBlockAudio) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockAudio))

	x.Long(m.GetAudioId())
	x.Bytes(m.GetCaption().Encode())

	return x.buf
}

func (m *TLPageBlockAudio) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_pageBlockAudio))

	x.Long(m.GetAudioId())
	x.Bytes(m.GetCaption().EncodeToLayer(layer))

	return x.buf
}

func (m *TLPageBlockAudio) Decode(dbuf *DecodeBuf) error {
	m.SetAudioId(dbuf.Long())
	m2 := &RichText{}
	m2.Decode(dbuf)
	m.SetCaption(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Upload_File <--
//  + TL_UploadFile
//  + TL_UploadFileCdnRedirect
//

func (m *Upload_File) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_upload_file:
		t := m.To_UploadFile()
		return t.Encode()
	case TLConstructor_CRC32_upload_fileCdnRedirect:
		t := m.To_UploadFileCdnRedirect()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Upload_File) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_upload_file:
		t := m.To_UploadFile()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_upload_fileCdnRedirect:
		t := m.To_UploadFileCdnRedirect()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Upload_File) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_upload_file:
		m2 := &TLUploadFile{Data2: &Upload_File_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_upload_fileCdnRedirect:
		m2 := &TLUploadFileCdnRedirect{Data2: &Upload_File_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// upload.file#96a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File;
func (m *Upload_File) To_UploadFile() *TLUploadFile {
	return &TLUploadFile{
		Data2: m.Data2,
	}
}

// upload.fileCdnRedirect#f18cda44 dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes file_hashes:Vector<FileHash> = upload.File;
func (m *Upload_File) To_UploadFileCdnRedirect() *TLUploadFileCdnRedirect {
	return &TLUploadFileCdnRedirect{
		Data2: m.Data2,
	}
}

// upload.file#96a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File;
func (m *TLUploadFile) To_Upload_File() *Upload_File {
	return &Upload_File{
		Constructor: TLConstructor_CRC32_upload_file,
		Data2:       m.Data2,
	}
}

func (m *TLUploadFile) SetType(v *Storage_FileType) { m.Data2.Type = v }
func (m *TLUploadFile) GetType() *Storage_FileType  { return m.Data2.Type }

func (m *TLUploadFile) SetMtime(v int32) { m.Data2.Mtime = v }
func (m *TLUploadFile) GetMtime() int32  { return m.Data2.Mtime }

func (m *TLUploadFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadFile) GetBytes() []byte  { return m.Data2.Bytes }

func NewTLUploadFile() *TLUploadFile {
	return &TLUploadFile{Data2: &Upload_File_Data{}}
}

func (m *TLUploadFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_file))

	x.Bytes(m.GetType().Encode())
	x.Int(m.GetMtime())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLUploadFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_file))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.Int(m.GetMtime())
	x.StringBytes(m.GetBytes())

	return x.buf
}

func (m *TLUploadFile) Decode(dbuf *DecodeBuf) error {
	m1 := &Storage_FileType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetMtime(dbuf.Int())
	m.SetBytes(dbuf.StringBytes())

	return dbuf.err
}

// upload.fileCdnRedirect#f18cda44 dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes file_hashes:Vector<FileHash> = upload.File;
func (m *TLUploadFileCdnRedirect) To_Upload_File() *Upload_File {
	return &Upload_File{
		Constructor: TLConstructor_CRC32_upload_fileCdnRedirect,
		Data2:       m.Data2,
	}
}

func (m *TLUploadFileCdnRedirect) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUploadFileCdnRedirect) GetDcId() int32  { return m.Data2.DcId }

func (m *TLUploadFileCdnRedirect) SetFileToken(v []byte) { m.Data2.FileToken = v }
func (m *TLUploadFileCdnRedirect) GetFileToken() []byte  { return m.Data2.FileToken }

func (m *TLUploadFileCdnRedirect) SetEncryptionKey(v []byte) { m.Data2.EncryptionKey = v }
func (m *TLUploadFileCdnRedirect) GetEncryptionKey() []byte  { return m.Data2.EncryptionKey }

func (m *TLUploadFileCdnRedirect) SetEncryptionIv(v []byte) { m.Data2.EncryptionIv = v }
func (m *TLUploadFileCdnRedirect) GetEncryptionIv() []byte  { return m.Data2.EncryptionIv }

func (m *TLUploadFileCdnRedirect) SetFileHashes(v []*FileHash) { m.Data2.FileHashes = v }
func (m *TLUploadFileCdnRedirect) GetFileHashes() []*FileHash  { return m.Data2.FileHashes }

func NewTLUploadFileCdnRedirect() *TLUploadFileCdnRedirect {
	return &TLUploadFileCdnRedirect{Data2: &Upload_File_Data{}}
}

func (m *TLUploadFileCdnRedirect) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_fileCdnRedirect))

	x.Int(m.GetDcId())
	x.StringBytes(m.GetFileToken())
	x.StringBytes(m.GetEncryptionKey())
	x.StringBytes(m.GetEncryptionIv())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetFileHashes())))
	for _, v := range m.GetFileHashes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUploadFileCdnRedirect) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_fileCdnRedirect))

	x.Int(m.GetDcId())
	x.StringBytes(m.GetFileToken())
	x.StringBytes(m.GetEncryptionKey())
	x.StringBytes(m.GetEncryptionIv())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetFileHashes())))
	for _, v := range m.GetFileHashes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUploadFileCdnRedirect) Decode(dbuf *DecodeBuf) error {
	m.SetDcId(dbuf.Int())
	m.SetFileToken(dbuf.StringBytes())
	m.SetEncryptionKey(dbuf.StringBytes())
	m.SetEncryptionIv(dbuf.StringBytes())
	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*FileHash, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &FileHash{}
		v5[i].Decode(dbuf)
	}
	m.SetFileHashes(v5)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Document <--
//  + TL_DocumentEmpty
//  + TL_Document
//  + TL_DocumentLayer86
//

func (m *Document) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_documentEmpty:
		t := m.To_DocumentEmpty()
		return t.Encode()
	case TLConstructor_CRC32_document:
		t := m.To_Document()
		return t.Encode()
	case TLConstructor_CRC32_documentLayer86:
		t := m.To_DocumentLayer86()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Document) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_documentEmpty:
		t := m.To_DocumentEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_document:
		t := m.To_Document()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_documentLayer86:
		t := m.To_DocumentLayer86()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Document) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_documentEmpty:
		m2 := &TLDocumentEmpty{Data2: &Document_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_document:
		m2 := &TLDocument{Data2: &Document_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_documentLayer86:
		m2 := &TLDocumentLayer86{Data2: &Document_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// documentEmpty#36f8c871 id:long = Document;
func (m *Document) To_DocumentEmpty() *TLDocumentEmpty {
	return &TLDocumentEmpty{
		Data2: m.Data2,
	}
}

// document#87232bc7 id:long access_hash:long date:int mime_type:string size:int thumb:PhotoSize dc_id:int version:int attributes:Vector<DocumentAttribute> = Document;
func (m *Document) To_Document() *TLDocument {
	return &TLDocument{
		Data2: m.Data2,
	}
}

// document#59534e4c id:long access_hash:long file_reference:bytes date:int mime_type:string size:int thumb:PhotoSize dc_id:int attributes:Vector<DocumentAttribute> = Document;
func (m *Document) To_DocumentLayer86() *TLDocumentLayer86 {
	return &TLDocumentLayer86{
		Data2: m.Data2,
	}
}

// documentEmpty#36f8c871 id:long = Document;
func (m *TLDocumentEmpty) To_Document() *Document {
	return &Document{
		Constructor: TLConstructor_CRC32_documentEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocumentEmpty) GetId() int64  { return m.Data2.Id }

func NewTLDocumentEmpty() *TLDocumentEmpty {
	return &TLDocumentEmpty{Data2: &Document_Data{}}
}

func (m *TLDocumentEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLDocumentEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentEmpty))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLDocumentEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())

	return dbuf.err
}

// document#87232bc7 id:long access_hash:long date:int mime_type:string size:int thumb:PhotoSize dc_id:int version:int attributes:Vector<DocumentAttribute> = Document;
func (m *TLDocument) To_Document() *Document {
	return &Document{
		Constructor: TLConstructor_CRC32_document,
		Data2:       m.Data2,
	}
}

func (m *TLDocument) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocument) GetId() int64  { return m.Data2.Id }

func (m *TLDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLDocument) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLDocument) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDocument) GetDate() int32  { return m.Data2.Date }

func (m *TLDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLDocument) SetSize(v int32) { m.Data2.Size = v }
func (m *TLDocument) GetSize() int32  { return m.Data2.Size }

func (m *TLDocument) SetThumb(v *PhotoSize) { m.Data2.Thumb = v }
func (m *TLDocument) GetThumb() *PhotoSize  { return m.Data2.Thumb }

func (m *TLDocument) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLDocument) GetDcId() int32  { return m.Data2.DcId }

func (m *TLDocument) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLDocument) GetVersion() int32  { return m.Data2.Version }

func (m *TLDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func NewTLDocument() *TLDocument {
	return &TLDocument{Data2: &Document_Data{}}
}

func (m *TLDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_document))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.String(m.GetMimeType())
	x.Int(m.GetSize())
	x.Bytes(m.GetThumb().Encode())
	x.Int(m.GetDcId())
	x.Int(m.GetVersion())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_document))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetDate())
	x.String(m.GetMimeType())
	x.Int(m.GetSize())
	x.Bytes(m.GetThumb().EncodeToLayer(layer))
	x.Int(m.GetDcId())
	x.Int(m.GetVersion())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLDocument) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetDate(dbuf.Int())
	m.SetMimeType(dbuf.String())
	m.SetSize(dbuf.Int())
	m6 := &PhotoSize{}
	m6.Decode(dbuf)
	m.SetThumb(m6)
	m.SetDcId(dbuf.Int())
	m.SetVersion(dbuf.Int())
	c9 := dbuf.Int()
	if c9 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
		return dbuf.err
	}
	l9 := dbuf.Int()
	v9 := make([]*DocumentAttribute, l9)
	for i := int32(0); i < l9; i++ {
		v9[i] = &DocumentAttribute{}
		v9[i].Decode(dbuf)
	}
	m.SetAttributes(v9)

	return dbuf.err
}

// document#59534e4c id:long access_hash:long file_reference:bytes date:int mime_type:string size:int thumb:PhotoSize dc_id:int attributes:Vector<DocumentAttribute> = Document;
func (m *TLDocumentLayer86) To_Document() *Document {
	return &Document{
		Constructor: TLConstructor_CRC32_documentLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLDocumentLayer86) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocumentLayer86) GetId() int64  { return m.Data2.Id }

func (m *TLDocumentLayer86) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLDocumentLayer86) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLDocumentLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLDocumentLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLDocumentLayer86) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDocumentLayer86) GetDate() int32  { return m.Data2.Date }

func (m *TLDocumentLayer86) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLDocumentLayer86) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLDocumentLayer86) SetSize(v int32) { m.Data2.Size = v }
func (m *TLDocumentLayer86) GetSize() int32  { return m.Data2.Size }

func (m *TLDocumentLayer86) SetThumb(v *PhotoSize) { m.Data2.Thumb = v }
func (m *TLDocumentLayer86) GetThumb() *PhotoSize  { return m.Data2.Thumb }

func (m *TLDocumentLayer86) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLDocumentLayer86) GetDcId() int32  { return m.Data2.DcId }

func (m *TLDocumentLayer86) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLDocumentLayer86) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func NewTLDocumentLayer86() *TLDocumentLayer86 {
	return &TLDocumentLayer86{Data2: &Document_Data{}}
}

func (m *TLDocumentLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())
	x.Int(m.GetDate())
	x.String(m.GetMimeType())
	x.Int(m.GetSize())
	x.Bytes(m.GetThumb().Encode())
	x.Int(m.GetDcId())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLDocumentLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_documentLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())
	x.Int(m.GetDate())
	x.String(m.GetMimeType())
	x.Int(m.GetSize())
	x.Bytes(m.GetThumb().EncodeToLayer(layer))
	x.Int(m.GetDcId())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLDocumentLayer86) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())
	m.SetDate(dbuf.Int())
	m.SetMimeType(dbuf.String())
	m.SetSize(dbuf.Int())
	m7 := &PhotoSize{}
	m7.Decode(dbuf)
	m.SetThumb(m7)
	m.SetDcId(dbuf.Int())
	c9 := dbuf.Int()
	if c9 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
		return dbuf.err
	}
	l9 := dbuf.Int()
	v9 := make([]*DocumentAttribute, l9)
	for i := int32(0); i < l9; i++ {
		v9[i] = &DocumentAttribute{}
		v9[i].Decode(dbuf)
	}
	m.SetAttributes(v9)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_TermsOfService <--
//  + TL_HelpTermsOfService
//

func (m *Help_TermsOfService) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_termsOfService:
		t := m.To_HelpTermsOfService()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_TermsOfService) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_termsOfService:
		t := m.To_HelpTermsOfService()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_TermsOfService) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_termsOfService:
		m2 := &TLHelpTermsOfService{Data2: &Help_TermsOfService_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.termsOfService#780a0310 flags:# popup:flags.0?true id:DataJSON text:string entities:Vector<MessageEntity> min_age_confirm:flags.1?int = help.TermsOfService;
func (m *Help_TermsOfService) To_HelpTermsOfService() *TLHelpTermsOfService {
	return &TLHelpTermsOfService{
		Data2: m.Data2,
	}
}

// help.termsOfService#780a0310 flags:# popup:flags.0?true id:DataJSON text:string entities:Vector<MessageEntity> min_age_confirm:flags.1?int = help.TermsOfService;
func (m *TLHelpTermsOfService) To_Help_TermsOfService() *Help_TermsOfService {
	return &Help_TermsOfService{
		Constructor: TLConstructor_CRC32_help_termsOfService,
		Data2:       m.Data2,
	}
}

func (m *TLHelpTermsOfService) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLHelpTermsOfService) GetPopup() bool  { return m.Data2.Popup }

func (m *TLHelpTermsOfService) SetId(v *DataJSON) { m.Data2.Id = v }
func (m *TLHelpTermsOfService) GetId() *DataJSON  { return m.Data2.Id }

func (m *TLHelpTermsOfService) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpTermsOfService) GetText() string  { return m.Data2.Text }

func (m *TLHelpTermsOfService) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpTermsOfService) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLHelpTermsOfService) SetMinAgeConfirm(v int32) { m.Data2.MinAgeConfirm = v }
func (m *TLHelpTermsOfService) GetMinAgeConfirm() int32  { return m.Data2.MinAgeConfirm }

func NewTLHelpTermsOfService() *TLHelpTermsOfService {
	return &TLHelpTermsOfService{Data2: &Help_TermsOfService_Data{}}
}

func (m *TLHelpTermsOfService) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_termsOfService))

	// flags
	var flags uint32 = 0
	if m.GetPopup() == true {
		flags |= 1 << 0
	}
	if m.GetMinAgeConfirm() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetId().Encode())
	x.String(m.GetText())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEntities())))
	for _, v := range m.GetEntities() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	if m.GetMinAgeConfirm() != 0 {
		x.Int(m.GetMinAgeConfirm())
	}

	return x.buf
}

func (m *TLHelpTermsOfService) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_termsOfService))

	// flags
	var flags uint32 = 0
	if m.GetPopup() == true {
		flags |= 1 << 0
	}
	if m.GetMinAgeConfirm() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.GetId().EncodeToLayer(layer))
	x.String(m.GetText())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEntities())))
	for _, v := range m.GetEntities() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	if m.GetMinAgeConfirm() != 0 {
		x.Int(m.GetMinAgeConfirm())
	}

	return x.buf
}

func (m *TLHelpTermsOfService) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetPopup(true)
	}
	m3 := &DataJSON{}
	m3.Decode(dbuf)
	m.SetId(m3)
	m.SetText(dbuf.String())
	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*MessageEntity, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &MessageEntity{}
		v5[i].Decode(dbuf)
	}
	m.SetEntities(v5)

	if (flags & (1 << 1)) != 0 {
		m.SetMinAgeConfirm(dbuf.Int())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureFile <--
//  + TL_SecureFileEmpty
//  + TL_SecureFile
//

func (m *SecureFile) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureFileEmpty:
		t := m.To_SecureFileEmpty()
		return t.Encode()
	case TLConstructor_CRC32_secureFile:
		t := m.To_SecureFile()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureFile) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureFileEmpty:
		t := m.To_SecureFileEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureFile:
		t := m.To_SecureFile()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureFile) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureFileEmpty:
		m2 := &TLSecureFileEmpty{Data2: &SecureFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureFile:
		m2 := &TLSecureFile{Data2: &SecureFile_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureFileEmpty#64199744 = SecureFile;
func (m *SecureFile) To_SecureFileEmpty() *TLSecureFileEmpty {
	return &TLSecureFileEmpty{
		Data2: m.Data2,
	}
}

// secureFile#e0277a62 id:long access_hash:long size:int dc_id:int date:int file_hash:bytes secret:bytes = SecureFile;
func (m *SecureFile) To_SecureFile() *TLSecureFile {
	return &TLSecureFile{
		Data2: m.Data2,
	}
}

// secureFileEmpty#64199744 = SecureFile;
func (m *TLSecureFileEmpty) To_SecureFile() *SecureFile {
	return &SecureFile{
		Constructor: TLConstructor_CRC32_secureFileEmpty,
		Data2:       m.Data2,
	}
}

func NewTLSecureFileEmpty() *TLSecureFileEmpty {
	return &TLSecureFileEmpty{Data2: &SecureFile_Data{}}
}

func (m *TLSecureFileEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureFileEmpty))

	return x.buf
}

func (m *TLSecureFileEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureFileEmpty))

	return x.buf
}

func (m *TLSecureFileEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// secureFile#e0277a62 id:long access_hash:long size:int dc_id:int date:int file_hash:bytes secret:bytes = SecureFile;
func (m *TLSecureFile) To_SecureFile() *SecureFile {
	return &SecureFile{
		Constructor: TLConstructor_CRC32_secureFile,
		Data2:       m.Data2,
	}
}

func (m *TLSecureFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLSecureFile) GetId() int64  { return m.Data2.Id }

func (m *TLSecureFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLSecureFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLSecureFile) SetSize(v int32) { m.Data2.Size = v }
func (m *TLSecureFile) GetSize() int32  { return m.Data2.Size }

func (m *TLSecureFile) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLSecureFile) GetDcId() int32  { return m.Data2.DcId }

func (m *TLSecureFile) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSecureFile) GetDate() int32  { return m.Data2.Date }

func (m *TLSecureFile) SetFileHash(v []byte) { m.Data2.FileHash = v }
func (m *TLSecureFile) GetFileHash() []byte  { return m.Data2.FileHash }

func (m *TLSecureFile) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureFile) GetSecret() []byte  { return m.Data2.Secret }

func NewTLSecureFile() *TLSecureFile {
	return &TLSecureFile{Data2: &SecureFile_Data{}}
}

func (m *TLSecureFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetSize())
	x.Int(m.GetDcId())
	x.Int(m.GetDate())
	x.StringBytes(m.GetFileHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLSecureFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureFile))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.Int(m.GetSize())
	x.Int(m.GetDcId())
	x.Int(m.GetDate())
	x.StringBytes(m.GetFileHash())
	x.StringBytes(m.GetSecret())

	return x.buf
}

func (m *TLSecureFile) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetSize(dbuf.Int())
	m.SetDcId(dbuf.Int())
	m.SetDate(dbuf.Int())
	m.SetFileHash(dbuf.StringBytes())
	m.SetSecret(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelParticipantsFilter <--
//  + TL_ChannelParticipantsRecent
//  + TL_ChannelParticipantsAdmins
//  + TL_ChannelParticipantsKicked
//  + TL_ChannelParticipantsBots
//  + TL_ChannelParticipantsBanned
//  + TL_ChannelParticipantsSearch
//

func (m *ChannelParticipantsFilter) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelParticipantsRecent:
		t := m.To_ChannelParticipantsRecent()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantsAdmins:
		t := m.To_ChannelParticipantsAdmins()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantsKicked:
		t := m.To_ChannelParticipantsKicked()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantsBots:
		t := m.To_ChannelParticipantsBots()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantsBanned:
		t := m.To_ChannelParticipantsBanned()
		return t.Encode()
	case TLConstructor_CRC32_channelParticipantsSearch:
		t := m.To_ChannelParticipantsSearch()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelParticipantsFilter) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelParticipantsRecent:
		t := m.To_ChannelParticipantsRecent()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantsAdmins:
		t := m.To_ChannelParticipantsAdmins()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantsKicked:
		t := m.To_ChannelParticipantsKicked()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantsBots:
		t := m.To_ChannelParticipantsBots()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantsBanned:
		t := m.To_ChannelParticipantsBanned()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelParticipantsSearch:
		t := m.To_ChannelParticipantsSearch()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelParticipantsFilter) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelParticipantsRecent:
		m2 := &TLChannelParticipantsRecent{Data2: &ChannelParticipantsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantsAdmins:
		m2 := &TLChannelParticipantsAdmins{Data2: &ChannelParticipantsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantsKicked:
		m2 := &TLChannelParticipantsKicked{Data2: &ChannelParticipantsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantsBots:
		m2 := &TLChannelParticipantsBots{Data2: &ChannelParticipantsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantsBanned:
		m2 := &TLChannelParticipantsBanned{Data2: &ChannelParticipantsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelParticipantsSearch:
		m2 := &TLChannelParticipantsSearch{Data2: &ChannelParticipantsFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelParticipantsRecent#de3f3c79 = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsRecent() *TLChannelParticipantsRecent {
	return &TLChannelParticipantsRecent{
		Data2: m.Data2,
	}
}

// channelParticipantsAdmins#b4608969 = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsAdmins() *TLChannelParticipantsAdmins {
	return &TLChannelParticipantsAdmins{
		Data2: m.Data2,
	}
}

// channelParticipantsKicked#a3b54985 q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsKicked() *TLChannelParticipantsKicked {
	return &TLChannelParticipantsKicked{
		Data2: m.Data2,
	}
}

// channelParticipantsBots#b0d1865b = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsBots() *TLChannelParticipantsBots {
	return &TLChannelParticipantsBots{
		Data2: m.Data2,
	}
}

// channelParticipantsBanned#1427a5e1 q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsBanned() *TLChannelParticipantsBanned {
	return &TLChannelParticipantsBanned{
		Data2: m.Data2,
	}
}

// channelParticipantsSearch#656ac4b q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsSearch() *TLChannelParticipantsSearch {
	return &TLChannelParticipantsSearch{
		Data2: m.Data2,
	}
}

// channelParticipantsRecent#de3f3c79 = ChannelParticipantsFilter;
func (m *TLChannelParticipantsRecent) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	return &ChannelParticipantsFilter{
		Constructor: TLConstructor_CRC32_channelParticipantsRecent,
		Data2:       m.Data2,
	}
}

func NewTLChannelParticipantsRecent() *TLChannelParticipantsRecent {
	return &TLChannelParticipantsRecent{Data2: &ChannelParticipantsFilter_Data{}}
}

func (m *TLChannelParticipantsRecent) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsRecent))

	return x.buf
}

func (m *TLChannelParticipantsRecent) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsRecent))

	return x.buf
}

func (m *TLChannelParticipantsRecent) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// channelParticipantsAdmins#b4608969 = ChannelParticipantsFilter;
func (m *TLChannelParticipantsAdmins) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	return &ChannelParticipantsFilter{
		Constructor: TLConstructor_CRC32_channelParticipantsAdmins,
		Data2:       m.Data2,
	}
}

func NewTLChannelParticipantsAdmins() *TLChannelParticipantsAdmins {
	return &TLChannelParticipantsAdmins{Data2: &ChannelParticipantsFilter_Data{}}
}

func (m *TLChannelParticipantsAdmins) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsAdmins))

	return x.buf
}

func (m *TLChannelParticipantsAdmins) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsAdmins))

	return x.buf
}

func (m *TLChannelParticipantsAdmins) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// channelParticipantsKicked#a3b54985 q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsKicked) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	return &ChannelParticipantsFilter{
		Constructor: TLConstructor_CRC32_channelParticipantsKicked,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantsKicked) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsKicked) GetQ() string  { return m.Data2.Q }

func NewTLChannelParticipantsKicked() *TLChannelParticipantsKicked {
	return &TLChannelParticipantsKicked{Data2: &ChannelParticipantsFilter_Data{}}
}

func (m *TLChannelParticipantsKicked) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsKicked))

	x.String(m.GetQ())

	return x.buf
}

func (m *TLChannelParticipantsKicked) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsKicked))

	x.String(m.GetQ())

	return x.buf
}

func (m *TLChannelParticipantsKicked) Decode(dbuf *DecodeBuf) error {
	m.SetQ(dbuf.String())

	return dbuf.err
}

// channelParticipantsBots#b0d1865b = ChannelParticipantsFilter;
func (m *TLChannelParticipantsBots) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	return &ChannelParticipantsFilter{
		Constructor: TLConstructor_CRC32_channelParticipantsBots,
		Data2:       m.Data2,
	}
}

func NewTLChannelParticipantsBots() *TLChannelParticipantsBots {
	return &TLChannelParticipantsBots{Data2: &ChannelParticipantsFilter_Data{}}
}

func (m *TLChannelParticipantsBots) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsBots))

	return x.buf
}

func (m *TLChannelParticipantsBots) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsBots))

	return x.buf
}

func (m *TLChannelParticipantsBots) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// channelParticipantsBanned#1427a5e1 q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsBanned) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	return &ChannelParticipantsFilter{
		Constructor: TLConstructor_CRC32_channelParticipantsBanned,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantsBanned) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsBanned) GetQ() string  { return m.Data2.Q }

func NewTLChannelParticipantsBanned() *TLChannelParticipantsBanned {
	return &TLChannelParticipantsBanned{Data2: &ChannelParticipantsFilter_Data{}}
}

func (m *TLChannelParticipantsBanned) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsBanned))

	x.String(m.GetQ())

	return x.buf
}

func (m *TLChannelParticipantsBanned) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsBanned))

	x.String(m.GetQ())

	return x.buf
}

func (m *TLChannelParticipantsBanned) Decode(dbuf *DecodeBuf) error {
	m.SetQ(dbuf.String())

	return dbuf.err
}

// channelParticipantsSearch#656ac4b q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsSearch) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	return &ChannelParticipantsFilter{
		Constructor: TLConstructor_CRC32_channelParticipantsSearch,
		Data2:       m.Data2,
	}
}

func (m *TLChannelParticipantsSearch) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsSearch) GetQ() string  { return m.Data2.Q }

func NewTLChannelParticipantsSearch() *TLChannelParticipantsSearch {
	return &TLChannelParticipantsSearch{Data2: &ChannelParticipantsFilter_Data{}}
}

func (m *TLChannelParticipantsSearch) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsSearch))

	x.String(m.GetQ())

	return x.buf
}

func (m *TLChannelParticipantsSearch) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelParticipantsSearch))

	x.String(m.GetQ())

	return x.buf
}

func (m *TLChannelParticipantsSearch) Decode(dbuf *DecodeBuf) error {
	m.SetQ(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// BotInlineResult <--
//  + TL_BotInlineResult
//  + TL_BotInlineMediaResult
//

func (m *BotInlineResult) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_botInlineResult:
		t := m.To_BotInlineResult()
		return t.Encode()
	case TLConstructor_CRC32_botInlineMediaResult:
		t := m.To_BotInlineMediaResult()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotInlineResult) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_botInlineResult:
		t := m.To_BotInlineResult()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_botInlineMediaResult:
		t := m.To_BotInlineMediaResult()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *BotInlineResult) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_botInlineResult:
		m2 := &TLBotInlineResult{Data2: &BotInlineResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_botInlineMediaResult:
		m2 := &TLBotInlineMediaResult{Data2: &BotInlineResult_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// botInlineResult#11965f3a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?WebDocument content:flags.5?WebDocument send_message:BotInlineMessage = BotInlineResult;
func (m *BotInlineResult) To_BotInlineResult() *TLBotInlineResult {
	return &TLBotInlineResult{
		Data2: m.Data2,
	}
}

// botInlineMediaResult#17db940b flags:# id:string type:string photo:flags.0?Photo document:flags.1?Document title:flags.2?string description:flags.3?string send_message:BotInlineMessage = BotInlineResult;
func (m *BotInlineResult) To_BotInlineMediaResult() *TLBotInlineMediaResult {
	return &TLBotInlineMediaResult{
		Data2: m.Data2,
	}
}

// botInlineResult#11965f3a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?WebDocument content:flags.5?WebDocument send_message:BotInlineMessage = BotInlineResult;
func (m *TLBotInlineResult) To_BotInlineResult() *BotInlineResult {
	return &BotInlineResult{
		Constructor: TLConstructor_CRC32_botInlineResult,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineResult) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineResult) GetId() string  { return m.Data2.Id }

func (m *TLBotInlineResult) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineResult) GetType() string  { return m.Data2.Type }

func (m *TLBotInlineResult) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineResult) GetTitle() string  { return m.Data2.Title }

func (m *TLBotInlineResult) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInlineResult) GetDescription() string  { return m.Data2.Description }

func (m *TLBotInlineResult) SetUrl(v string) { m.Data2.Url = v }
func (m *TLBotInlineResult) GetUrl() string  { return m.Data2.Url }

func (m *TLBotInlineResult) SetThumb(v *WebDocument) { m.Data2.Thumb = v }
func (m *TLBotInlineResult) GetThumb() *WebDocument  { return m.Data2.Thumb }

func (m *TLBotInlineResult) SetContent(v *WebDocument) { m.Data2.Content = v }
func (m *TLBotInlineResult) GetContent() *WebDocument  { return m.Data2.Content }

func (m *TLBotInlineResult) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineResult) GetSendMessage() *BotInlineMessage  { return m.Data2.SendMessage }

func NewTLBotInlineResult() *TLBotInlineResult {
	return &TLBotInlineResult{Data2: &BotInlineResult_Data{}}
}

func (m *TLBotInlineResult) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineResult))

	// flags
	var flags uint32 = 0
	if m.GetTitle() != "" {
		flags |= 1 << 1
	}
	if m.GetDescription() != "" {
		flags |= 1 << 2
	}
	if m.GetUrl() != "" {
		flags |= 1 << 3
	}
	if m.GetThumb() != nil {
		flags |= 1 << 4
	}
	if m.GetContent() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	if m.GetThumb() != nil {
		x.Bytes(m.GetThumb().Encode())
	}
	if m.GetContent() != nil {
		x.Bytes(m.GetContent().Encode())
	}
	x.Bytes(m.GetSendMessage().Encode())

	return x.buf
}

func (m *TLBotInlineResult) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineResult))

	// flags
	var flags uint32 = 0
	if m.GetTitle() != "" {
		flags |= 1 << 1
	}
	if m.GetDescription() != "" {
		flags |= 1 << 2
	}
	if m.GetUrl() != "" {
		flags |= 1 << 3
	}
	if m.GetThumb() != nil {
		flags |= 1 << 4
	}
	if m.GetContent() != nil {
		flags |= 1 << 5
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	if m.GetUrl() != "" {
		x.String(m.GetUrl())
	}
	if m.GetThumb() != nil {
		x.Bytes(m.GetThumb().EncodeToLayer(layer))
	}
	if m.GetContent() != nil {
		x.Bytes(m.GetContent().EncodeToLayer(layer))
	}
	x.Bytes(m.GetSendMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLBotInlineResult) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.String())
	m.SetType(dbuf.String())
	if (flags & (1 << 1)) != 0 {
		m.SetTitle(dbuf.String())
	}
	if (flags & (1 << 2)) != 0 {
		m.SetDescription(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetUrl(dbuf.String())
	}
	if (flags & (1 << 4)) != 0 {
		m7 := &WebDocument{}
		m7.Decode(dbuf)
		m.SetThumb(m7)
	}
	if (flags & (1 << 5)) != 0 {
		m8 := &WebDocument{}
		m8.Decode(dbuf)
		m.SetContent(m8)
	}
	m9 := &BotInlineMessage{}
	m9.Decode(dbuf)
	m.SetSendMessage(m9)

	return dbuf.err
}

// botInlineMediaResult#17db940b flags:# id:string type:string photo:flags.0?Photo document:flags.1?Document title:flags.2?string description:flags.3?string send_message:BotInlineMessage = BotInlineResult;
func (m *TLBotInlineMediaResult) To_BotInlineResult() *BotInlineResult {
	return &BotInlineResult{
		Constructor: TLConstructor_CRC32_botInlineMediaResult,
		Data2:       m.Data2,
	}
}

func (m *TLBotInlineMediaResult) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineMediaResult) GetId() string  { return m.Data2.Id }

func (m *TLBotInlineMediaResult) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineMediaResult) GetType() string  { return m.Data2.Type }

func (m *TLBotInlineMediaResult) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLBotInlineMediaResult) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLBotInlineMediaResult) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLBotInlineMediaResult) GetDocument() *Document  { return m.Data2.Document }

func (m *TLBotInlineMediaResult) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMediaResult) GetTitle() string  { return m.Data2.Title }

func (m *TLBotInlineMediaResult) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInlineMediaResult) GetDescription() string  { return m.Data2.Description }

func (m *TLBotInlineMediaResult) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineMediaResult) GetSendMessage() *BotInlineMessage  { return m.Data2.SendMessage }

func NewTLBotInlineMediaResult() *TLBotInlineMediaResult {
	return &TLBotInlineMediaResult{Data2: &BotInlineResult_Data{}}
}

func (m *TLBotInlineMediaResult) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMediaResult))

	// flags
	var flags uint32 = 0
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	if m.GetDocument() != nil {
		flags |= 1 << 1
	}
	if m.GetTitle() != "" {
		flags |= 1 << 2
	}
	if m.GetDescription() != "" {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().Encode())
	}
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().Encode())
	}
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	x.Bytes(m.GetSendMessage().Encode())

	return x.buf
}

func (m *TLBotInlineMediaResult) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_botInlineMediaResult))

	// flags
	var flags uint32 = 0
	if m.GetPhoto() != nil {
		flags |= 1 << 0
	}
	if m.GetDocument() != nil {
		flags |= 1 << 1
	}
	if m.GetTitle() != "" {
		flags |= 1 << 2
	}
	if m.GetDescription() != "" {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.String(m.GetId())
	x.String(m.GetType())
	if m.GetPhoto() != nil {
		x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	}
	if m.GetDocument() != nil {
		x.Bytes(m.GetDocument().EncodeToLayer(layer))
	}
	if m.GetTitle() != "" {
		x.String(m.GetTitle())
	}
	if m.GetDescription() != "" {
		x.String(m.GetDescription())
	}
	x.Bytes(m.GetSendMessage().EncodeToLayer(layer))

	return x.buf
}

func (m *TLBotInlineMediaResult) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetId(dbuf.String())
	m.SetType(dbuf.String())
	if (flags & (1 << 0)) != 0 {
		m4 := &Photo{}
		m4.Decode(dbuf)
		m.SetPhoto(m4)
	}
	if (flags & (1 << 1)) != 0 {
		m5 := &Document{}
		m5.Decode(dbuf)
		m.SetDocument(m5)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetTitle(dbuf.String())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetDescription(dbuf.String())
	}
	m8 := &BotInlineMessage{}
	m8.Decode(dbuf)
	m.SetSendMessage(m8)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// GeoPoint <--
//  + TL_GeoPointEmpty
//  + TL_GeoPoint
//

func (m *GeoPoint) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_geoPointEmpty:
		t := m.To_GeoPointEmpty()
		return t.Encode()
	case TLConstructor_CRC32_geoPoint:
		t := m.To_GeoPoint()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *GeoPoint) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_geoPointEmpty:
		t := m.To_GeoPointEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_geoPoint:
		t := m.To_GeoPoint()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *GeoPoint) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_geoPointEmpty:
		m2 := &TLGeoPointEmpty{Data2: &GeoPoint_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_geoPoint:
		m2 := &TLGeoPoint{Data2: &GeoPoint_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// geoPointEmpty#1117dd5f = GeoPoint;
func (m *GeoPoint) To_GeoPointEmpty() *TLGeoPointEmpty {
	return &TLGeoPointEmpty{
		Data2: m.Data2,
	}
}

// geoPoint#296f104 long:double lat:double access_hash:long = GeoPoint;
func (m *GeoPoint) To_GeoPoint() *TLGeoPoint {
	return &TLGeoPoint{
		Data2: m.Data2,
	}
}

// geoPointEmpty#1117dd5f = GeoPoint;
func (m *TLGeoPointEmpty) To_GeoPoint() *GeoPoint {
	return &GeoPoint{
		Constructor: TLConstructor_CRC32_geoPointEmpty,
		Data2:       m.Data2,
	}
}

func NewTLGeoPointEmpty() *TLGeoPointEmpty {
	return &TLGeoPointEmpty{Data2: &GeoPoint_Data{}}
}

func (m *TLGeoPointEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_geoPointEmpty))

	return x.buf
}

func (m *TLGeoPointEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_geoPointEmpty))

	return x.buf
}

func (m *TLGeoPointEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// geoPoint#296f104 long:double lat:double access_hash:long = GeoPoint;
func (m *TLGeoPoint) To_GeoPoint() *GeoPoint {
	return &GeoPoint{
		Constructor: TLConstructor_CRC32_geoPoint,
		Data2:       m.Data2,
	}
}

func (m *TLGeoPoint) SetLong(v float64) { m.Data2.Long = v }
func (m *TLGeoPoint) GetLong() float64  { return m.Data2.Long }

func (m *TLGeoPoint) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLGeoPoint) GetLat() float64  { return m.Data2.Lat }

func (m *TLGeoPoint) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGeoPoint) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLGeoPoint() *TLGeoPoint {
	return &TLGeoPoint{Data2: &GeoPoint_Data{}}
}

func (m *TLGeoPoint) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_geoPoint))

	x.Double(m.GetLong())
	x.Double(m.GetLat())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLGeoPoint) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_geoPoint))

	x.Double(m.GetLong())
	x.Double(m.GetLat())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLGeoPoint) Decode(dbuf *DecodeBuf) error {
	m.SetLong(dbuf.Double())
	m.SetLat(dbuf.Double())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputNotifyPeer <--
//  + TL_InputNotifyPeer
//  + TL_InputNotifyUsers
//  + TL_InputNotifyChats
//

func (m *InputNotifyPeer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputNotifyPeer:
		t := m.To_InputNotifyPeer()
		return t.Encode()
	case TLConstructor_CRC32_inputNotifyUsers:
		t := m.To_InputNotifyUsers()
		return t.Encode()
	case TLConstructor_CRC32_inputNotifyChats:
		t := m.To_InputNotifyChats()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputNotifyPeer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputNotifyPeer:
		t := m.To_InputNotifyPeer()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputNotifyUsers:
		t := m.To_InputNotifyUsers()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputNotifyChats:
		t := m.To_InputNotifyChats()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputNotifyPeer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputNotifyPeer:
		m2 := &TLInputNotifyPeer{Data2: &InputNotifyPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputNotifyUsers:
		m2 := &TLInputNotifyUsers{Data2: &InputNotifyPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputNotifyChats:
		m2 := &TLInputNotifyChats{Data2: &InputNotifyPeer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputNotifyPeer#b8bc5b0c peer:InputPeer = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyPeer() *TLInputNotifyPeer {
	return &TLInputNotifyPeer{
		Data2: m.Data2,
	}
}

// inputNotifyUsers#193b4417 = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyUsers() *TLInputNotifyUsers {
	return &TLInputNotifyUsers{
		Data2: m.Data2,
	}
}

// inputNotifyChats#4a95e84e = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyChats() *TLInputNotifyChats {
	return &TLInputNotifyChats{
		Data2: m.Data2,
	}
}

// inputNotifyPeer#b8bc5b0c peer:InputPeer = InputNotifyPeer;
func (m *TLInputNotifyPeer) To_InputNotifyPeer() *InputNotifyPeer {
	return &InputNotifyPeer{
		Constructor: TLConstructor_CRC32_inputNotifyPeer,
		Data2:       m.Data2,
	}
}

func (m *TLInputNotifyPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputNotifyPeer) GetPeer() *InputPeer  { return m.Data2.Peer }

func NewTLInputNotifyPeer() *TLInputNotifyPeer {
	return &TLInputNotifyPeer{Data2: &InputNotifyPeer_Data{}}
}

func (m *TLInputNotifyPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputNotifyPeer))

	x.Bytes(m.GetPeer().Encode())

	return x.buf
}

func (m *TLInputNotifyPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputNotifyPeer))

	x.Bytes(m.GetPeer().EncodeToLayer(layer))

	return x.buf
}

func (m *TLInputNotifyPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.SetPeer(m1)

	return dbuf.err
}

// inputNotifyUsers#193b4417 = InputNotifyPeer;
func (m *TLInputNotifyUsers) To_InputNotifyPeer() *InputNotifyPeer {
	return &InputNotifyPeer{
		Constructor: TLConstructor_CRC32_inputNotifyUsers,
		Data2:       m.Data2,
	}
}

func NewTLInputNotifyUsers() *TLInputNotifyUsers {
	return &TLInputNotifyUsers{Data2: &InputNotifyPeer_Data{}}
}

func (m *TLInputNotifyUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputNotifyUsers))

	return x.buf
}

func (m *TLInputNotifyUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputNotifyUsers))

	return x.buf
}

func (m *TLInputNotifyUsers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputNotifyChats#4a95e84e = InputNotifyPeer;
func (m *TLInputNotifyChats) To_InputNotifyPeer() *InputNotifyPeer {
	return &InputNotifyPeer{
		Constructor: TLConstructor_CRC32_inputNotifyChats,
		Data2:       m.Data2,
	}
}

func NewTLInputNotifyChats() *TLInputNotifyChats {
	return &TLInputNotifyChats{Data2: &InputNotifyPeer_Data{}}
}

func (m *TLInputNotifyChats) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputNotifyChats))

	return x.buf
}

func (m *TLInputNotifyChats) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputNotifyChats))

	return x.buf
}

func (m *TLInputNotifyChats) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PhoneCallDiscardReason <--
//  + TL_PhoneCallDiscardReasonMissed
//  + TL_PhoneCallDiscardReasonDisconnect
//  + TL_PhoneCallDiscardReasonHangup
//  + TL_PhoneCallDiscardReasonBusy
//

func (m *PhoneCallDiscardReason) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_phoneCallDiscardReasonMissed:
		t := m.To_PhoneCallDiscardReasonMissed()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallDiscardReasonDisconnect:
		t := m.To_PhoneCallDiscardReasonDisconnect()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallDiscardReasonHangup:
		t := m.To_PhoneCallDiscardReasonHangup()
		return t.Encode()
	case TLConstructor_CRC32_phoneCallDiscardReasonBusy:
		t := m.To_PhoneCallDiscardReasonBusy()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneCallDiscardReason) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_phoneCallDiscardReasonMissed:
		t := m.To_PhoneCallDiscardReasonMissed()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallDiscardReasonDisconnect:
		t := m.To_PhoneCallDiscardReasonDisconnect()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallDiscardReasonHangup:
		t := m.To_PhoneCallDiscardReasonHangup()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_phoneCallDiscardReasonBusy:
		t := m.To_PhoneCallDiscardReasonBusy()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PhoneCallDiscardReason) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_phoneCallDiscardReasonMissed:
		m2 := &TLPhoneCallDiscardReasonMissed{Data2: &PhoneCallDiscardReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallDiscardReasonDisconnect:
		m2 := &TLPhoneCallDiscardReasonDisconnect{Data2: &PhoneCallDiscardReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallDiscardReasonHangup:
		m2 := &TLPhoneCallDiscardReasonHangup{Data2: &PhoneCallDiscardReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_phoneCallDiscardReasonBusy:
		m2 := &TLPhoneCallDiscardReasonBusy{Data2: &PhoneCallDiscardReason_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// phoneCallDiscardReasonMissed#85e42301 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonMissed() *TLPhoneCallDiscardReasonMissed {
	return &TLPhoneCallDiscardReasonMissed{
		Data2: m.Data2,
	}
}

// phoneCallDiscardReasonDisconnect#e095c1a0 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonDisconnect() *TLPhoneCallDiscardReasonDisconnect {
	return &TLPhoneCallDiscardReasonDisconnect{
		Data2: m.Data2,
	}
}

// phoneCallDiscardReasonHangup#57adc690 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonHangup() *TLPhoneCallDiscardReasonHangup {
	return &TLPhoneCallDiscardReasonHangup{
		Data2: m.Data2,
	}
}

// phoneCallDiscardReasonBusy#faf7e8c9 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonBusy() *TLPhoneCallDiscardReasonBusy {
	return &TLPhoneCallDiscardReasonBusy{
		Data2: m.Data2,
	}
}

// phoneCallDiscardReasonMissed#85e42301 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonMissed) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	return &PhoneCallDiscardReason{
		Constructor: TLConstructor_CRC32_phoneCallDiscardReasonMissed,
		Data2:       m.Data2,
	}
}

func NewTLPhoneCallDiscardReasonMissed() *TLPhoneCallDiscardReasonMissed {
	return &TLPhoneCallDiscardReasonMissed{Data2: &PhoneCallDiscardReason_Data{}}
}

func (m *TLPhoneCallDiscardReasonMissed) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonMissed))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonMissed) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonMissed))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonMissed) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// phoneCallDiscardReasonDisconnect#e095c1a0 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonDisconnect) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	return &PhoneCallDiscardReason{
		Constructor: TLConstructor_CRC32_phoneCallDiscardReasonDisconnect,
		Data2:       m.Data2,
	}
}

func NewTLPhoneCallDiscardReasonDisconnect() *TLPhoneCallDiscardReasonDisconnect {
	return &TLPhoneCallDiscardReasonDisconnect{Data2: &PhoneCallDiscardReason_Data{}}
}

func (m *TLPhoneCallDiscardReasonDisconnect) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonDisconnect))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonDisconnect) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonDisconnect))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonDisconnect) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// phoneCallDiscardReasonHangup#57adc690 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonHangup) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	return &PhoneCallDiscardReason{
		Constructor: TLConstructor_CRC32_phoneCallDiscardReasonHangup,
		Data2:       m.Data2,
	}
}

func NewTLPhoneCallDiscardReasonHangup() *TLPhoneCallDiscardReasonHangup {
	return &TLPhoneCallDiscardReasonHangup{Data2: &PhoneCallDiscardReason_Data{}}
}

func (m *TLPhoneCallDiscardReasonHangup) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonHangup))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonHangup) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonHangup))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonHangup) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// phoneCallDiscardReasonBusy#faf7e8c9 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonBusy) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	return &PhoneCallDiscardReason{
		Constructor: TLConstructor_CRC32_phoneCallDiscardReasonBusy,
		Data2:       m.Data2,
	}
}

func NewTLPhoneCallDiscardReasonBusy() *TLPhoneCallDiscardReasonBusy {
	return &TLPhoneCallDiscardReasonBusy{Data2: &PhoneCallDiscardReason_Data{}}
}

func (m *TLPhoneCallDiscardReasonBusy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonBusy))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonBusy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonBusy))

	return x.buf
}

func (m *TLPhoneCallDiscardReasonBusy) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MessageAction <--
//  + TL_MessageActionEmpty
//  + TL_MessageActionChatCreate
//  + TL_MessageActionChatEditTitle
//  + TL_MessageActionChatEditPhoto
//  + TL_MessageActionChatDeletePhoto
//  + TL_MessageActionChatAddUser
//  + TL_MessageActionChatDeleteUser
//  + TL_MessageActionChatJoinedByLink
//  + TL_MessageActionChannelCreate
//  + TL_MessageActionChatMigrateTo
//  + TL_MessageActionChannelMigrateFrom
//  + TL_MessageActionPinMessage
//  + TL_MessageActionHistoryClear
//  + TL_MessageActionGameScore
//  + TL_MessageActionPaymentSentMe
//  + TL_MessageActionPaymentSent
//  + TL_MessageActionPhoneCall
//  + TL_MessageActionScreenshotTaken
//  + TL_MessageActionCustomAction
//  + TL_MessageActionBotAllowed
//  + TL_MessageActionSecureValuesSentMe
//  + TL_MessageActionSecureValuesSent
//

func (m *MessageAction) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messageActionEmpty:
		t := m.To_MessageActionEmpty()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatCreate:
		t := m.To_MessageActionChatCreate()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatEditTitle:
		t := m.To_MessageActionChatEditTitle()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatEditPhoto:
		t := m.To_MessageActionChatEditPhoto()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatDeletePhoto:
		t := m.To_MessageActionChatDeletePhoto()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatAddUser:
		t := m.To_MessageActionChatAddUser()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatDeleteUser:
		t := m.To_MessageActionChatDeleteUser()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatJoinedByLink:
		t := m.To_MessageActionChatJoinedByLink()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChannelCreate:
		t := m.To_MessageActionChannelCreate()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChatMigrateTo:
		t := m.To_MessageActionChatMigrateTo()
		return t.Encode()
	case TLConstructor_CRC32_messageActionChannelMigrateFrom:
		t := m.To_MessageActionChannelMigrateFrom()
		return t.Encode()
	case TLConstructor_CRC32_messageActionPinMessage:
		t := m.To_MessageActionPinMessage()
		return t.Encode()
	case TLConstructor_CRC32_messageActionHistoryClear:
		t := m.To_MessageActionHistoryClear()
		return t.Encode()
	case TLConstructor_CRC32_messageActionGameScore:
		t := m.To_MessageActionGameScore()
		return t.Encode()
	case TLConstructor_CRC32_messageActionPaymentSentMe:
		t := m.To_MessageActionPaymentSentMe()
		return t.Encode()
	case TLConstructor_CRC32_messageActionPaymentSent:
		t := m.To_MessageActionPaymentSent()
		return t.Encode()
	case TLConstructor_CRC32_messageActionPhoneCall:
		t := m.To_MessageActionPhoneCall()
		return t.Encode()
	case TLConstructor_CRC32_messageActionScreenshotTaken:
		t := m.To_MessageActionScreenshotTaken()
		return t.Encode()
	case TLConstructor_CRC32_messageActionCustomAction:
		t := m.To_MessageActionCustomAction()
		return t.Encode()
	case TLConstructor_CRC32_messageActionBotAllowed:
		t := m.To_MessageActionBotAllowed()
		return t.Encode()
	case TLConstructor_CRC32_messageActionSecureValuesSentMe:
		t := m.To_MessageActionSecureValuesSentMe()
		return t.Encode()
	case TLConstructor_CRC32_messageActionSecureValuesSent:
		t := m.To_MessageActionSecureValuesSent()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageAction) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messageActionEmpty:
		t := m.To_MessageActionEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatCreate:
		t := m.To_MessageActionChatCreate()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatEditTitle:
		t := m.To_MessageActionChatEditTitle()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatEditPhoto:
		t := m.To_MessageActionChatEditPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatDeletePhoto:
		t := m.To_MessageActionChatDeletePhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatAddUser:
		t := m.To_MessageActionChatAddUser()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatDeleteUser:
		t := m.To_MessageActionChatDeleteUser()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatJoinedByLink:
		t := m.To_MessageActionChatJoinedByLink()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChannelCreate:
		t := m.To_MessageActionChannelCreate()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChatMigrateTo:
		t := m.To_MessageActionChatMigrateTo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionChannelMigrateFrom:
		t := m.To_MessageActionChannelMigrateFrom()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionPinMessage:
		t := m.To_MessageActionPinMessage()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionHistoryClear:
		t := m.To_MessageActionHistoryClear()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionGameScore:
		t := m.To_MessageActionGameScore()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionPaymentSentMe:
		t := m.To_MessageActionPaymentSentMe()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionPaymentSent:
		t := m.To_MessageActionPaymentSent()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionPhoneCall:
		t := m.To_MessageActionPhoneCall()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionScreenshotTaken:
		t := m.To_MessageActionScreenshotTaken()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionCustomAction:
		t := m.To_MessageActionCustomAction()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionBotAllowed:
		t := m.To_MessageActionBotAllowed()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionSecureValuesSentMe:
		t := m.To_MessageActionSecureValuesSentMe()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messageActionSecureValuesSent:
		t := m.To_MessageActionSecureValuesSent()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessageAction) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messageActionEmpty:
		m2 := &TLMessageActionEmpty{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatCreate:
		m2 := &TLMessageActionChatCreate{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatEditTitle:
		m2 := &TLMessageActionChatEditTitle{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatEditPhoto:
		m2 := &TLMessageActionChatEditPhoto{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatDeletePhoto:
		m2 := &TLMessageActionChatDeletePhoto{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatAddUser:
		m2 := &TLMessageActionChatAddUser{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatDeleteUser:
		m2 := &TLMessageActionChatDeleteUser{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatJoinedByLink:
		m2 := &TLMessageActionChatJoinedByLink{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChannelCreate:
		m2 := &TLMessageActionChannelCreate{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChatMigrateTo:
		m2 := &TLMessageActionChatMigrateTo{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionChannelMigrateFrom:
		m2 := &TLMessageActionChannelMigrateFrom{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionPinMessage:
		m2 := &TLMessageActionPinMessage{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionHistoryClear:
		m2 := &TLMessageActionHistoryClear{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionGameScore:
		m2 := &TLMessageActionGameScore{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionPaymentSentMe:
		m2 := &TLMessageActionPaymentSentMe{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionPaymentSent:
		m2 := &TLMessageActionPaymentSent{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionPhoneCall:
		m2 := &TLMessageActionPhoneCall{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionScreenshotTaken:
		m2 := &TLMessageActionScreenshotTaken{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionCustomAction:
		m2 := &TLMessageActionCustomAction{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionBotAllowed:
		m2 := &TLMessageActionBotAllowed{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionSecureValuesSentMe:
		m2 := &TLMessageActionSecureValuesSentMe{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messageActionSecureValuesSent:
		m2 := &TLMessageActionSecureValuesSent{Data2: &MessageAction_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messageActionEmpty#b6aef7b0 = MessageAction;
func (m *MessageAction) To_MessageActionEmpty() *TLMessageActionEmpty {
	return &TLMessageActionEmpty{
		Data2: m.Data2,
	}
}

// messageActionChatCreate#a6638b9a title:string users:Vector<int> = MessageAction;
func (m *MessageAction) To_MessageActionChatCreate() *TLMessageActionChatCreate {
	return &TLMessageActionChatCreate{
		Data2: m.Data2,
	}
}

// messageActionChatEditTitle#b5a1ce5a title:string = MessageAction;
func (m *MessageAction) To_MessageActionChatEditTitle() *TLMessageActionChatEditTitle {
	return &TLMessageActionChatEditTitle{
		Data2: m.Data2,
	}
}

// messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction;
func (m *MessageAction) To_MessageActionChatEditPhoto() *TLMessageActionChatEditPhoto {
	return &TLMessageActionChatEditPhoto{
		Data2: m.Data2,
	}
}

// messageActionChatDeletePhoto#95e3fbef = MessageAction;
func (m *MessageAction) To_MessageActionChatDeletePhoto() *TLMessageActionChatDeletePhoto {
	return &TLMessageActionChatDeletePhoto{
		Data2: m.Data2,
	}
}

// messageActionChatAddUser#488a7337 users:Vector<int> = MessageAction;
func (m *MessageAction) To_MessageActionChatAddUser() *TLMessageActionChatAddUser {
	return &TLMessageActionChatAddUser{
		Data2: m.Data2,
	}
}

// messageActionChatDeleteUser#b2ae9b0c user_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChatDeleteUser() *TLMessageActionChatDeleteUser {
	return &TLMessageActionChatDeleteUser{
		Data2: m.Data2,
	}
}

// messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChatJoinedByLink() *TLMessageActionChatJoinedByLink {
	return &TLMessageActionChatJoinedByLink{
		Data2: m.Data2,
	}
}

// messageActionChannelCreate#95d2ac92 title:string = MessageAction;
func (m *MessageAction) To_MessageActionChannelCreate() *TLMessageActionChannelCreate {
	return &TLMessageActionChannelCreate{
		Data2: m.Data2,
	}
}

// messageActionChatMigrateTo#51bdb021 channel_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChatMigrateTo() *TLMessageActionChatMigrateTo {
	return &TLMessageActionChatMigrateTo{
		Data2: m.Data2,
	}
}

// messageActionChannelMigrateFrom#b055eaee title:string chat_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChannelMigrateFrom() *TLMessageActionChannelMigrateFrom {
	return &TLMessageActionChannelMigrateFrom{
		Data2: m.Data2,
	}
}

// messageActionPinMessage#94bd38ed = MessageAction;
func (m *MessageAction) To_MessageActionPinMessage() *TLMessageActionPinMessage {
	return &TLMessageActionPinMessage{
		Data2: m.Data2,
	}
}

// messageActionHistoryClear#9fbab604 = MessageAction;
func (m *MessageAction) To_MessageActionHistoryClear() *TLMessageActionHistoryClear {
	return &TLMessageActionHistoryClear{
		Data2: m.Data2,
	}
}

// messageActionGameScore#92a72876 game_id:long score:int = MessageAction;
func (m *MessageAction) To_MessageActionGameScore() *TLMessageActionGameScore {
	return &TLMessageActionGameScore{
		Data2: m.Data2,
	}
}

// messageActionPaymentSentMe#8f31b327 flags:# currency:string total_amount:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string charge:PaymentCharge = MessageAction;
func (m *MessageAction) To_MessageActionPaymentSentMe() *TLMessageActionPaymentSentMe {
	return &TLMessageActionPaymentSentMe{
		Data2: m.Data2,
	}
}

// messageActionPaymentSent#40699cd0 currency:string total_amount:long = MessageAction;
func (m *MessageAction) To_MessageActionPaymentSent() *TLMessageActionPaymentSent {
	return &TLMessageActionPaymentSent{
		Data2: m.Data2,
	}
}

// messageActionPhoneCall#80e11a7f flags:# call_id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = MessageAction;
func (m *MessageAction) To_MessageActionPhoneCall() *TLMessageActionPhoneCall {
	return &TLMessageActionPhoneCall{
		Data2: m.Data2,
	}
}

// messageActionScreenshotTaken#4792929b = MessageAction;
func (m *MessageAction) To_MessageActionScreenshotTaken() *TLMessageActionScreenshotTaken {
	return &TLMessageActionScreenshotTaken{
		Data2: m.Data2,
	}
}

// messageActionCustomAction#fae69f56 message:string = MessageAction;
func (m *MessageAction) To_MessageActionCustomAction() *TLMessageActionCustomAction {
	return &TLMessageActionCustomAction{
		Data2: m.Data2,
	}
}

// messageActionBotAllowed#abe9affe domain:string = MessageAction;
func (m *MessageAction) To_MessageActionBotAllowed() *TLMessageActionBotAllowed {
	return &TLMessageActionBotAllowed{
		Data2: m.Data2,
	}
}

// messageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction;
func (m *MessageAction) To_MessageActionSecureValuesSentMe() *TLMessageActionSecureValuesSentMe {
	return &TLMessageActionSecureValuesSentMe{
		Data2: m.Data2,
	}
}

// messageActionSecureValuesSent#d95c6154 types:Vector<SecureValueType> = MessageAction;
func (m *MessageAction) To_MessageActionSecureValuesSent() *TLMessageActionSecureValuesSent {
	return &TLMessageActionSecureValuesSent{
		Data2: m.Data2,
	}
}

// messageActionEmpty#b6aef7b0 = MessageAction;
func (m *TLMessageActionEmpty) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionEmpty,
		Data2:       m.Data2,
	}
}

func NewTLMessageActionEmpty() *TLMessageActionEmpty {
	return &TLMessageActionEmpty{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionEmpty))

	return x.buf
}

func (m *TLMessageActionEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionEmpty))

	return x.buf
}

func (m *TLMessageActionEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageActionChatCreate#a6638b9a title:string users:Vector<int> = MessageAction;
func (m *TLMessageActionChatCreate) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatCreate,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatCreate) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChatCreate) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageActionChatCreate) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLMessageActionChatCreate) GetUsers() []int32  { return m.Data2.Users }

func NewTLMessageActionChatCreate() *TLMessageActionChatCreate {
	return &TLMessageActionChatCreate{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatCreate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatCreate))

	x.String(m.GetTitle())
	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLMessageActionChatCreate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatCreate))

	x.String(m.GetTitle())
	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLMessageActionChatCreate) Decode(dbuf *DecodeBuf) error {
	m.SetTitle(dbuf.String())
	m.SetUsers(dbuf.VectorInt())

	return dbuf.err
}

// messageActionChatEditTitle#b5a1ce5a title:string = MessageAction;
func (m *TLMessageActionChatEditTitle) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatEditTitle,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatEditTitle) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChatEditTitle) GetTitle() string  { return m.Data2.Title }

func NewTLMessageActionChatEditTitle() *TLMessageActionChatEditTitle {
	return &TLMessageActionChatEditTitle{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatEditTitle) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatEditTitle))

	x.String(m.GetTitle())

	return x.buf
}

func (m *TLMessageActionChatEditTitle) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatEditTitle))

	x.String(m.GetTitle())

	return x.buf
}

func (m *TLMessageActionChatEditTitle) Decode(dbuf *DecodeBuf) error {
	m.SetTitle(dbuf.String())

	return dbuf.err
}

// messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction;
func (m *TLMessageActionChatEditPhoto) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatEditPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatEditPhoto) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLMessageActionChatEditPhoto) GetPhoto() *Photo  { return m.Data2.Photo }

func NewTLMessageActionChatEditPhoto() *TLMessageActionChatEditPhoto {
	return &TLMessageActionChatEditPhoto{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatEditPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatEditPhoto))

	x.Bytes(m.GetPhoto().Encode())

	return x.buf
}

func (m *TLMessageActionChatEditPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatEditPhoto))

	x.Bytes(m.GetPhoto().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageActionChatEditPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &Photo{}
	m1.Decode(dbuf)
	m.SetPhoto(m1)

	return dbuf.err
}

// messageActionChatDeletePhoto#95e3fbef = MessageAction;
func (m *TLMessageActionChatDeletePhoto) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatDeletePhoto,
		Data2:       m.Data2,
	}
}

func NewTLMessageActionChatDeletePhoto() *TLMessageActionChatDeletePhoto {
	return &TLMessageActionChatDeletePhoto{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatDeletePhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatDeletePhoto))

	return x.buf
}

func (m *TLMessageActionChatDeletePhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatDeletePhoto))

	return x.buf
}

func (m *TLMessageActionChatDeletePhoto) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageActionChatAddUser#488a7337 users:Vector<int> = MessageAction;
func (m *TLMessageActionChatAddUser) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatAddUser,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatAddUser) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLMessageActionChatAddUser) GetUsers() []int32  { return m.Data2.Users }

func NewTLMessageActionChatAddUser() *TLMessageActionChatAddUser {
	return &TLMessageActionChatAddUser{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatAddUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatAddUser))

	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLMessageActionChatAddUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatAddUser))

	x.VectorInt(m.GetUsers())

	return x.buf
}

func (m *TLMessageActionChatAddUser) Decode(dbuf *DecodeBuf) error {
	m.SetUsers(dbuf.VectorInt())

	return dbuf.err
}

// messageActionChatDeleteUser#b2ae9b0c user_id:int = MessageAction;
func (m *TLMessageActionChatDeleteUser) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatDeleteUser,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatDeleteUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageActionChatDeleteUser) GetUserId() int32  { return m.Data2.UserId }

func NewTLMessageActionChatDeleteUser() *TLMessageActionChatDeleteUser {
	return &TLMessageActionChatDeleteUser{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatDeleteUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatDeleteUser))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLMessageActionChatDeleteUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatDeleteUser))

	x.Int(m.GetUserId())

	return x.buf
}

func (m *TLMessageActionChatDeleteUser) Decode(dbuf *DecodeBuf) error {
	m.SetUserId(dbuf.Int())

	return dbuf.err
}

// messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction;
func (m *TLMessageActionChatJoinedByLink) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatJoinedByLink,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatJoinedByLink) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLMessageActionChatJoinedByLink) GetInviterId() int32  { return m.Data2.InviterId }

func NewTLMessageActionChatJoinedByLink() *TLMessageActionChatJoinedByLink {
	return &TLMessageActionChatJoinedByLink{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatJoinedByLink) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatJoinedByLink))

	x.Int(m.GetInviterId())

	return x.buf
}

func (m *TLMessageActionChatJoinedByLink) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatJoinedByLink))

	x.Int(m.GetInviterId())

	return x.buf
}

func (m *TLMessageActionChatJoinedByLink) Decode(dbuf *DecodeBuf) error {
	m.SetInviterId(dbuf.Int())

	return dbuf.err
}

// messageActionChannelCreate#95d2ac92 title:string = MessageAction;
func (m *TLMessageActionChannelCreate) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChannelCreate,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChannelCreate) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChannelCreate) GetTitle() string  { return m.Data2.Title }

func NewTLMessageActionChannelCreate() *TLMessageActionChannelCreate {
	return &TLMessageActionChannelCreate{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChannelCreate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChannelCreate))

	x.String(m.GetTitle())

	return x.buf
}

func (m *TLMessageActionChannelCreate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChannelCreate))

	x.String(m.GetTitle())

	return x.buf
}

func (m *TLMessageActionChannelCreate) Decode(dbuf *DecodeBuf) error {
	m.SetTitle(dbuf.String())

	return dbuf.err
}

// messageActionChatMigrateTo#51bdb021 channel_id:int = MessageAction;
func (m *TLMessageActionChatMigrateTo) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChatMigrateTo,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChatMigrateTo) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLMessageActionChatMigrateTo) GetChannelId() int32  { return m.Data2.ChannelId }

func NewTLMessageActionChatMigrateTo() *TLMessageActionChatMigrateTo {
	return &TLMessageActionChatMigrateTo{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChatMigrateTo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatMigrateTo))

	x.Int(m.GetChannelId())

	return x.buf
}

func (m *TLMessageActionChatMigrateTo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChatMigrateTo))

	x.Int(m.GetChannelId())

	return x.buf
}

func (m *TLMessageActionChatMigrateTo) Decode(dbuf *DecodeBuf) error {
	m.SetChannelId(dbuf.Int())

	return dbuf.err
}

// messageActionChannelMigrateFrom#b055eaee title:string chat_id:int = MessageAction;
func (m *TLMessageActionChannelMigrateFrom) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionChannelMigrateFrom,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionChannelMigrateFrom) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChannelMigrateFrom) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageActionChannelMigrateFrom) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLMessageActionChannelMigrateFrom) GetChatId() int32  { return m.Data2.ChatId }

func NewTLMessageActionChannelMigrateFrom() *TLMessageActionChannelMigrateFrom {
	return &TLMessageActionChannelMigrateFrom{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionChannelMigrateFrom) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChannelMigrateFrom))

	x.String(m.GetTitle())
	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLMessageActionChannelMigrateFrom) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionChannelMigrateFrom))

	x.String(m.GetTitle())
	x.Int(m.GetChatId())

	return x.buf
}

func (m *TLMessageActionChannelMigrateFrom) Decode(dbuf *DecodeBuf) error {
	m.SetTitle(dbuf.String())
	m.SetChatId(dbuf.Int())

	return dbuf.err
}

// messageActionPinMessage#94bd38ed = MessageAction;
func (m *TLMessageActionPinMessage) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionPinMessage,
		Data2:       m.Data2,
	}
}

func NewTLMessageActionPinMessage() *TLMessageActionPinMessage {
	return &TLMessageActionPinMessage{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionPinMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPinMessage))

	return x.buf
}

func (m *TLMessageActionPinMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPinMessage))

	return x.buf
}

func (m *TLMessageActionPinMessage) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageActionHistoryClear#9fbab604 = MessageAction;
func (m *TLMessageActionHistoryClear) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionHistoryClear,
		Data2:       m.Data2,
	}
}

func NewTLMessageActionHistoryClear() *TLMessageActionHistoryClear {
	return &TLMessageActionHistoryClear{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionHistoryClear) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionHistoryClear))

	return x.buf
}

func (m *TLMessageActionHistoryClear) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionHistoryClear))

	return x.buf
}

func (m *TLMessageActionHistoryClear) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageActionGameScore#92a72876 game_id:long score:int = MessageAction;
func (m *TLMessageActionGameScore) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionGameScore,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionGameScore) SetGameId(v int64) { m.Data2.GameId = v }
func (m *TLMessageActionGameScore) GetGameId() int64  { return m.Data2.GameId }

func (m *TLMessageActionGameScore) SetScore(v int32) { m.Data2.Score = v }
func (m *TLMessageActionGameScore) GetScore() int32  { return m.Data2.Score }

func NewTLMessageActionGameScore() *TLMessageActionGameScore {
	return &TLMessageActionGameScore{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionGameScore) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionGameScore))

	x.Long(m.GetGameId())
	x.Int(m.GetScore())

	return x.buf
}

func (m *TLMessageActionGameScore) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionGameScore))

	x.Long(m.GetGameId())
	x.Int(m.GetScore())

	return x.buf
}

func (m *TLMessageActionGameScore) Decode(dbuf *DecodeBuf) error {
	m.SetGameId(dbuf.Long())
	m.SetScore(dbuf.Int())

	return dbuf.err
}

// messageActionPaymentSentMe#8f31b327 flags:# currency:string total_amount:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string charge:PaymentCharge = MessageAction;
func (m *TLMessageActionPaymentSentMe) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionPaymentSentMe,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionPaymentSentMe) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageActionPaymentSentMe) GetCurrency() string  { return m.Data2.Currency }

func (m *TLMessageActionPaymentSentMe) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageActionPaymentSentMe) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLMessageActionPaymentSentMe) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLMessageActionPaymentSentMe) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLMessageActionPaymentSentMe) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLMessageActionPaymentSentMe) GetInfo() *PaymentRequestedInfo  { return m.Data2.Info }

func (m *TLMessageActionPaymentSentMe) SetShippingOptionId(v string) { m.Data2.ShippingOptionId = v }
func (m *TLMessageActionPaymentSentMe) GetShippingOptionId() string  { return m.Data2.ShippingOptionId }

func (m *TLMessageActionPaymentSentMe) SetCharge(v *PaymentCharge) { m.Data2.Charge = v }
func (m *TLMessageActionPaymentSentMe) GetCharge() *PaymentCharge  { return m.Data2.Charge }

func NewTLMessageActionPaymentSentMe() *TLMessageActionPaymentSentMe {
	return &TLMessageActionPaymentSentMe{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionPaymentSentMe) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPaymentSentMe))

	// flags
	var flags uint32 = 0
	if m.GetInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetShippingOptionId() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())
	x.StringBytes(m.GetPayload())
	if m.GetInfo() != nil {
		x.Bytes(m.GetInfo().Encode())
	}
	if m.GetShippingOptionId() != "" {
		x.String(m.GetShippingOptionId())
	}
	x.Bytes(m.GetCharge().Encode())

	return x.buf
}

func (m *TLMessageActionPaymentSentMe) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPaymentSentMe))

	// flags
	var flags uint32 = 0
	if m.GetInfo() != nil {
		flags |= 1 << 0
	}
	if m.GetShippingOptionId() != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())
	x.StringBytes(m.GetPayload())
	if m.GetInfo() != nil {
		x.Bytes(m.GetInfo().EncodeToLayer(layer))
	}
	if m.GetShippingOptionId() != "" {
		x.String(m.GetShippingOptionId())
	}
	x.Bytes(m.GetCharge().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageActionPaymentSentMe) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetCurrency(dbuf.String())
	m.SetTotalAmount(dbuf.Long())
	m.SetPayload(dbuf.StringBytes())
	if (flags & (1 << 0)) != 0 {
		m5 := &PaymentRequestedInfo{}
		m5.Decode(dbuf)
		m.SetInfo(m5)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetShippingOptionId(dbuf.String())
	}
	m7 := &PaymentCharge{}
	m7.Decode(dbuf)
	m.SetCharge(m7)

	return dbuf.err
}

// messageActionPaymentSent#40699cd0 currency:string total_amount:long = MessageAction;
func (m *TLMessageActionPaymentSent) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionPaymentSent,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionPaymentSent) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageActionPaymentSent) GetCurrency() string  { return m.Data2.Currency }

func (m *TLMessageActionPaymentSent) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageActionPaymentSent) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func NewTLMessageActionPaymentSent() *TLMessageActionPaymentSent {
	return &TLMessageActionPaymentSent{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionPaymentSent) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPaymentSent))

	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())

	return x.buf
}

func (m *TLMessageActionPaymentSent) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPaymentSent))

	x.String(m.GetCurrency())
	x.Long(m.GetTotalAmount())

	return x.buf
}

func (m *TLMessageActionPaymentSent) Decode(dbuf *DecodeBuf) error {
	m.SetCurrency(dbuf.String())
	m.SetTotalAmount(dbuf.Long())

	return dbuf.err
}

// messageActionPhoneCall#80e11a7f flags:# call_id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = MessageAction;
func (m *TLMessageActionPhoneCall) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionPhoneCall,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionPhoneCall) SetCallId(v int64) { m.Data2.CallId = v }
func (m *TLMessageActionPhoneCall) GetCallId() int64  { return m.Data2.CallId }

func (m *TLMessageActionPhoneCall) SetReason(v *PhoneCallDiscardReason) { m.Data2.Reason = v }
func (m *TLMessageActionPhoneCall) GetReason() *PhoneCallDiscardReason  { return m.Data2.Reason }

func (m *TLMessageActionPhoneCall) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLMessageActionPhoneCall) GetDuration() int32  { return m.Data2.Duration }

func NewTLMessageActionPhoneCall() *TLMessageActionPhoneCall {
	return &TLMessageActionPhoneCall{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionPhoneCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPhoneCall))

	// flags
	var flags uint32 = 0
	if m.GetReason() != nil {
		flags |= 1 << 0
	}
	if m.GetDuration() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetCallId())
	if m.GetReason() != nil {
		x.Bytes(m.GetReason().Encode())
	}
	if m.GetDuration() != 0 {
		x.Int(m.GetDuration())
	}

	return x.buf
}

func (m *TLMessageActionPhoneCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionPhoneCall))

	// flags
	var flags uint32 = 0
	if m.GetReason() != nil {
		flags |= 1 << 0
	}
	if m.GetDuration() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.GetCallId())
	if m.GetReason() != nil {
		x.Bytes(m.GetReason().EncodeToLayer(layer))
	}
	if m.GetDuration() != 0 {
		x.Int(m.GetDuration())
	}

	return x.buf
}

func (m *TLMessageActionPhoneCall) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetCallId(dbuf.Long())
	if (flags & (1 << 0)) != 0 {
		m3 := &PhoneCallDiscardReason{}
		m3.Decode(dbuf)
		m.SetReason(m3)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetDuration(dbuf.Int())
	}

	return dbuf.err
}

// messageActionScreenshotTaken#4792929b = MessageAction;
func (m *TLMessageActionScreenshotTaken) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionScreenshotTaken,
		Data2:       m.Data2,
	}
}

func NewTLMessageActionScreenshotTaken() *TLMessageActionScreenshotTaken {
	return &TLMessageActionScreenshotTaken{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionScreenshotTaken) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionScreenshotTaken))

	return x.buf
}

func (m *TLMessageActionScreenshotTaken) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionScreenshotTaken))

	return x.buf
}

func (m *TLMessageActionScreenshotTaken) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messageActionCustomAction#fae69f56 message:string = MessageAction;
func (m *TLMessageActionCustomAction) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionCustomAction,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionCustomAction) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessageActionCustomAction) GetMessage() string  { return m.Data2.Message }

func NewTLMessageActionCustomAction() *TLMessageActionCustomAction {
	return &TLMessageActionCustomAction{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionCustomAction) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionCustomAction))

	x.String(m.GetMessage())

	return x.buf
}

func (m *TLMessageActionCustomAction) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionCustomAction))

	x.String(m.GetMessage())

	return x.buf
}

func (m *TLMessageActionCustomAction) Decode(dbuf *DecodeBuf) error {
	m.SetMessage(dbuf.String())

	return dbuf.err
}

// messageActionBotAllowed#abe9affe domain:string = MessageAction;
func (m *TLMessageActionBotAllowed) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionBotAllowed,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionBotAllowed) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLMessageActionBotAllowed) GetDomain() string  { return m.Data2.Domain }

func NewTLMessageActionBotAllowed() *TLMessageActionBotAllowed {
	return &TLMessageActionBotAllowed{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionBotAllowed) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionBotAllowed))

	x.String(m.GetDomain())

	return x.buf
}

func (m *TLMessageActionBotAllowed) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionBotAllowed))

	x.String(m.GetDomain())

	return x.buf
}

func (m *TLMessageActionBotAllowed) Decode(dbuf *DecodeBuf) error {
	m.SetDomain(dbuf.String())

	return dbuf.err
}

// messageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction;
func (m *TLMessageActionSecureValuesSentMe) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionSecureValuesSentMe,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionSecureValuesSentMe) SetValues(v []*SecureValue) { m.Data2.Values = v }
func (m *TLMessageActionSecureValuesSentMe) GetValues() []*SecureValue  { return m.Data2.Values }

func (m *TLMessageActionSecureValuesSentMe) SetCredentials(v *SecureCredentialsEncrypted) {
	m.Data2.Credentials = v
}
func (m *TLMessageActionSecureValuesSentMe) GetCredentials() *SecureCredentialsEncrypted {
	return m.Data2.Credentials
}

func NewTLMessageActionSecureValuesSentMe() *TLMessageActionSecureValuesSentMe {
	return &TLMessageActionSecureValuesSentMe{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionSecureValuesSentMe) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionSecureValuesSentMe))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetValues())))
	for _, v := range m.GetValues() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetCredentials().Encode())

	return x.buf
}

func (m *TLMessageActionSecureValuesSentMe) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionSecureValuesSentMe))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetValues())))
	for _, v := range m.GetValues() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetCredentials().EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessageActionSecureValuesSentMe) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*SecureValue, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &SecureValue{}
		v1[i].Decode(dbuf)
	}
	m.SetValues(v1)

	m2 := &SecureCredentialsEncrypted{}
	m2.Decode(dbuf)
	m.SetCredentials(m2)

	return dbuf.err
}

// messageActionSecureValuesSent#d95c6154 types:Vector<SecureValueType> = MessageAction;
func (m *TLMessageActionSecureValuesSent) To_MessageAction() *MessageAction {
	return &MessageAction{
		Constructor: TLConstructor_CRC32_messageActionSecureValuesSent,
		Data2:       m.Data2,
	}
}

func (m *TLMessageActionSecureValuesSent) SetTypes(v []*SecureValueType) { m.Data2.Types = v }
func (m *TLMessageActionSecureValuesSent) GetTypes() []*SecureValueType  { return m.Data2.Types }

func NewTLMessageActionSecureValuesSent() *TLMessageActionSecureValuesSent {
	return &TLMessageActionSecureValuesSent{Data2: &MessageAction_Data{}}
}

func (m *TLMessageActionSecureValuesSent) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionSecureValuesSent))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTypes())))
	for _, v := range m.GetTypes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessageActionSecureValuesSent) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messageActionSecureValuesSent))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTypes())))
	for _, v := range m.GetTypes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessageActionSecureValuesSent) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*SecureValueType, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &SecureValueType{}
		v1[i].Decode(dbuf)
	}
	m.SetTypes(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_RecentStickers <--
//  + TL_MessagesRecentStickersNotModified
//  + TL_MessagesRecentStickers
//

func (m *Messages_RecentStickers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_recentStickersNotModified:
		t := m.To_MessagesRecentStickersNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_recentStickers:
		t := m.To_MessagesRecentStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_RecentStickers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_recentStickersNotModified:
		t := m.To_MessagesRecentStickersNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_recentStickers:
		t := m.To_MessagesRecentStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_RecentStickers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_recentStickersNotModified:
		m2 := &TLMessagesRecentStickersNotModified{Data2: &Messages_RecentStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_recentStickers:
		m2 := &TLMessagesRecentStickers{Data2: &Messages_RecentStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.recentStickersNotModified#b17f890 = messages.RecentStickers;
func (m *Messages_RecentStickers) To_MessagesRecentStickersNotModified() *TLMessagesRecentStickersNotModified {
	return &TLMessagesRecentStickersNotModified{
		Data2: m.Data2,
	}
}

// messages.recentStickers#22f3afb3 hash:int packs:Vector<StickerPack> stickers:Vector<Document> dates:Vector<int> = messages.RecentStickers;
func (m *Messages_RecentStickers) To_MessagesRecentStickers() *TLMessagesRecentStickers {
	return &TLMessagesRecentStickers{
		Data2: m.Data2,
	}
}

// messages.recentStickersNotModified#b17f890 = messages.RecentStickers;
func (m *TLMessagesRecentStickersNotModified) To_Messages_RecentStickers() *Messages_RecentStickers {
	return &Messages_RecentStickers{
		Constructor: TLConstructor_CRC32_messages_recentStickersNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesRecentStickersNotModified() *TLMessagesRecentStickersNotModified {
	return &TLMessagesRecentStickersNotModified{Data2: &Messages_RecentStickers_Data{}}
}

func (m *TLMessagesRecentStickersNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_recentStickersNotModified))

	return x.buf
}

func (m *TLMessagesRecentStickersNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_recentStickersNotModified))

	return x.buf
}

func (m *TLMessagesRecentStickersNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.recentStickers#22f3afb3 hash:int packs:Vector<StickerPack> stickers:Vector<Document> dates:Vector<int> = messages.RecentStickers;
func (m *TLMessagesRecentStickers) To_Messages_RecentStickers() *Messages_RecentStickers {
	return &Messages_RecentStickers{
		Constructor: TLConstructor_CRC32_messages_recentStickers,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesRecentStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesRecentStickers) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesRecentStickers) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesRecentStickers) GetPacks() []*StickerPack  { return m.Data2.Packs }

func (m *TLMessagesRecentStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesRecentStickers) GetStickers() []*Document  { return m.Data2.Stickers }

func (m *TLMessagesRecentStickers) SetDates(v []int32) { m.Data2.Dates = v }
func (m *TLMessagesRecentStickers) GetDates() []int32  { return m.Data2.Dates }

func NewTLMessagesRecentStickers() *TLMessagesRecentStickers {
	return &TLMessagesRecentStickers{Data2: &Messages_RecentStickers_Data{}}
}

func (m *TLMessagesRecentStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_recentStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPacks())))
	for _, v := range m.GetPacks() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStickers())))
	for _, v := range m.GetStickers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.VectorInt(m.GetDates())

	return x.buf
}

func (m *TLMessagesRecentStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_recentStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPacks())))
	for _, v := range m.GetPacks() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStickers())))
	for _, v := range m.GetStickers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.VectorInt(m.GetDates())

	return x.buf
}

func (m *TLMessagesRecentStickers) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerPack, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerPack{}
		v2[i].Decode(dbuf)
	}
	m.SetPacks(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Document, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Document{}
		v3[i].Decode(dbuf)
	}
	m.SetStickers(v3)

	m.SetDates(dbuf.VectorInt())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FavedStickers <--
//  + TL_MessagesFavedStickersNotModified
//  + TL_MessagesFavedStickers
//

func (m *Messages_FavedStickers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_favedStickersNotModified:
		t := m.To_MessagesFavedStickersNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_favedStickers:
		t := m.To_MessagesFavedStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FavedStickers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_favedStickersNotModified:
		t := m.To_MessagesFavedStickersNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_favedStickers:
		t := m.To_MessagesFavedStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FavedStickers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_favedStickersNotModified:
		m2 := &TLMessagesFavedStickersNotModified{Data2: &Messages_FavedStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_favedStickers:
		m2 := &TLMessagesFavedStickers{Data2: &Messages_FavedStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.favedStickersNotModified#9e8fa6d3 = messages.FavedStickers;
func (m *Messages_FavedStickers) To_MessagesFavedStickersNotModified() *TLMessagesFavedStickersNotModified {
	return &TLMessagesFavedStickersNotModified{
		Data2: m.Data2,
	}
}

// messages.favedStickers#f37f2f16 hash:int packs:Vector<StickerPack> stickers:Vector<Document> = messages.FavedStickers;
func (m *Messages_FavedStickers) To_MessagesFavedStickers() *TLMessagesFavedStickers {
	return &TLMessagesFavedStickers{
		Data2: m.Data2,
	}
}

// messages.favedStickersNotModified#9e8fa6d3 = messages.FavedStickers;
func (m *TLMessagesFavedStickersNotModified) To_Messages_FavedStickers() *Messages_FavedStickers {
	return &Messages_FavedStickers{
		Constructor: TLConstructor_CRC32_messages_favedStickersNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesFavedStickersNotModified() *TLMessagesFavedStickersNotModified {
	return &TLMessagesFavedStickersNotModified{Data2: &Messages_FavedStickers_Data{}}
}

func (m *TLMessagesFavedStickersNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_favedStickersNotModified))

	return x.buf
}

func (m *TLMessagesFavedStickersNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_favedStickersNotModified))

	return x.buf
}

func (m *TLMessagesFavedStickersNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.favedStickers#f37f2f16 hash:int packs:Vector<StickerPack> stickers:Vector<Document> = messages.FavedStickers;
func (m *TLMessagesFavedStickers) To_Messages_FavedStickers() *Messages_FavedStickers {
	return &Messages_FavedStickers{
		Constructor: TLConstructor_CRC32_messages_favedStickers,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesFavedStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFavedStickers) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesFavedStickers) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesFavedStickers) GetPacks() []*StickerPack  { return m.Data2.Packs }

func (m *TLMessagesFavedStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesFavedStickers) GetStickers() []*Document  { return m.Data2.Stickers }

func NewTLMessagesFavedStickers() *TLMessagesFavedStickers {
	return &TLMessagesFavedStickers{Data2: &Messages_FavedStickers_Data{}}
}

func (m *TLMessagesFavedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_favedStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPacks())))
	for _, v := range m.GetPacks() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStickers())))
	for _, v := range m.GetStickers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesFavedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_favedStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetPacks())))
	for _, v := range m.GetPacks() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetStickers())))
	for _, v := range m.GetStickers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesFavedStickers) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerPack, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerPack{}
		v2[i].Decode(dbuf)
	}
	m.SetPacks(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Document, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Document{}
		v3[i].Decode(dbuf)
	}
	m.SetStickers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Account_Takeout <--
//  + TL_AccountTakeout
//

func (m *Account_Takeout) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_account_takeout:
		t := m.To_AccountTakeout()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_Takeout) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_account_takeout:
		t := m.To_AccountTakeout()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Account_Takeout) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_account_takeout:
		m2 := &TLAccountTakeout{Data2: &Account_Takeout_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// account.takeout#4dba4501 id:long = account.Takeout;
func (m *Account_Takeout) To_AccountTakeout() *TLAccountTakeout {
	return &TLAccountTakeout{
		Data2: m.Data2,
	}
}

// account.takeout#4dba4501 id:long = account.Takeout;
func (m *TLAccountTakeout) To_Account_Takeout() *Account_Takeout {
	return &Account_Takeout{
		Constructor: TLConstructor_CRC32_account_takeout,
		Data2:       m.Data2,
	}
}

func (m *TLAccountTakeout) SetId(v int64) { m.Data2.Id = v }
func (m *TLAccountTakeout) GetId() int64  { return m.Data2.Id }

func NewTLAccountTakeout() *TLAccountTakeout {
	return &TLAccountTakeout{Data2: &Account_Takeout_Data{}}
}

func (m *TLAccountTakeout) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_takeout))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLAccountTakeout) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_takeout))

	x.Long(m.GetId())

	return x.buf
}

func (m *TLAccountTakeout) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PeerNotifySettings <--
//  + TL_PeerNotifySettings
//

func (m *PeerNotifySettings) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_peerNotifySettings:
		t := m.To_PeerNotifySettings()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PeerNotifySettings) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_peerNotifySettings:
		t := m.To_PeerNotifySettings()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PeerNotifySettings) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_peerNotifySettings:
		m2 := &TLPeerNotifySettings{Data2: &PeerNotifySettings_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// peerNotifySettings#af509d20 flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = PeerNotifySettings;
func (m *PeerNotifySettings) To_PeerNotifySettings() *TLPeerNotifySettings {
	return &TLPeerNotifySettings{
		Data2: m.Data2,
	}
}

// peerNotifySettings#af509d20 flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = PeerNotifySettings;
func (m *TLPeerNotifySettings) To_PeerNotifySettings() *PeerNotifySettings {
	return &PeerNotifySettings{
		Constructor: TLConstructor_CRC32_peerNotifySettings,
		Data2:       m.Data2,
	}
}

func (m *TLPeerNotifySettings) SetShowPreviews(v *Bool) { m.Data2.ShowPreviews = v }
func (m *TLPeerNotifySettings) GetShowPreviews() *Bool  { return m.Data2.ShowPreviews }

func (m *TLPeerNotifySettings) SetSilent(v *Bool) { m.Data2.Silent = v }
func (m *TLPeerNotifySettings) GetSilent() *Bool  { return m.Data2.Silent }

func (m *TLPeerNotifySettings) SetMuteUntil(v int32) { m.Data2.MuteUntil = v }
func (m *TLPeerNotifySettings) GetMuteUntil() int32  { return m.Data2.MuteUntil }

func (m *TLPeerNotifySettings) SetSound(v string) { m.Data2.Sound = v }
func (m *TLPeerNotifySettings) GetSound() string  { return m.Data2.Sound }

func NewTLPeerNotifySettings() *TLPeerNotifySettings {
	return &TLPeerNotifySettings{Data2: &PeerNotifySettings_Data{}}
}

func (m *TLPeerNotifySettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerNotifySettings))

	// flags
	var flags uint32 = 0
	if m.GetShowPreviews() != nil {
		flags |= 1 << 0
	}
	if m.GetSilent() != nil {
		flags |= 1 << 1
	}
	if m.GetMuteUntil() != 0 {
		flags |= 1 << 2
	}
	if m.GetSound() != "" {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetShowPreviews() != nil {
		x.Bytes(m.GetShowPreviews().Encode())
	}
	if m.GetSilent() != nil {
		x.Bytes(m.GetSilent().Encode())
	}
	if m.GetMuteUntil() != 0 {
		x.Int(m.GetMuteUntil())
	}
	if m.GetSound() != "" {
		x.String(m.GetSound())
	}

	return x.buf
}

func (m *TLPeerNotifySettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_peerNotifySettings))

	// flags
	var flags uint32 = 0
	if m.GetShowPreviews() != nil {
		flags |= 1 << 0
	}
	if m.GetSilent() != nil {
		flags |= 1 << 1
	}
	if m.GetMuteUntil() != 0 {
		flags |= 1 << 2
	}
	if m.GetSound() != "" {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.GetShowPreviews() != nil {
		x.Bytes(m.GetShowPreviews().EncodeToLayer(layer))
	}
	if m.GetSilent() != nil {
		x.Bytes(m.GetSilent().EncodeToLayer(layer))
	}
	if m.GetMuteUntil() != 0 {
		x.Int(m.GetMuteUntil())
	}
	if m.GetSound() != "" {
		x.String(m.GetSound())
	}

	return x.buf
}

func (m *TLPeerNotifySettings) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m2 := &Bool{}
		m2.Decode(dbuf)
		m.SetShowPreviews(m2)
	}
	if (flags & (1 << 1)) != 0 {
		m3 := &Bool{}
		m3.Decode(dbuf)
		m.SetSilent(m3)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetMuteUntil(dbuf.Int())
	}
	if (flags & (1 << 3)) != 0 {
		m.SetSound(dbuf.String())
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Updates_Difference <--
//  + TL_UpdatesDifferenceEmpty
//  + TL_UpdatesDifference
//  + TL_UpdatesDifferenceSlice
//  + TL_UpdatesDifferenceTooLong
//

func (m *Updates_Difference) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_updates_differenceEmpty:
		t := m.To_UpdatesDifferenceEmpty()
		return t.Encode()
	case TLConstructor_CRC32_updates_difference:
		t := m.To_UpdatesDifference()
		return t.Encode()
	case TLConstructor_CRC32_updates_differenceSlice:
		t := m.To_UpdatesDifferenceSlice()
		return t.Encode()
	case TLConstructor_CRC32_updates_differenceTooLong:
		t := m.To_UpdatesDifferenceTooLong()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates_Difference) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_updates_differenceEmpty:
		t := m.To_UpdatesDifferenceEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updates_difference:
		t := m.To_UpdatesDifference()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updates_differenceSlice:
		t := m.To_UpdatesDifferenceSlice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updates_differenceTooLong:
		t := m.To_UpdatesDifferenceTooLong()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates_Difference) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_updates_differenceEmpty:
		m2 := &TLUpdatesDifferenceEmpty{Data2: &Updates_Difference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updates_difference:
		m2 := &TLUpdatesDifference{Data2: &Updates_Difference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updates_differenceSlice:
		m2 := &TLUpdatesDifferenceSlice{Data2: &Updates_Difference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updates_differenceTooLong:
		m2 := &TLUpdatesDifferenceTooLong{Data2: &Updates_Difference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// updates.differenceEmpty#5d75a138 date:int seq:int = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifferenceEmpty() *TLUpdatesDifferenceEmpty {
	return &TLUpdatesDifferenceEmpty{
		Data2: m.Data2,
	}
}

// updates.difference#f49ca0 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> state:updates.State = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifference() *TLUpdatesDifference {
	return &TLUpdatesDifference{
		Data2: m.Data2,
	}
}

// updates.differenceSlice#a8fb1981 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> intermediate_state:updates.State = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifferenceSlice() *TLUpdatesDifferenceSlice {
	return &TLUpdatesDifferenceSlice{
		Data2: m.Data2,
	}
}

// updates.differenceTooLong#4afe8f6d pts:int = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifferenceTooLong() *TLUpdatesDifferenceTooLong {
	return &TLUpdatesDifferenceTooLong{
		Data2: m.Data2,
	}
}

// updates.differenceEmpty#5d75a138 date:int seq:int = updates.Difference;
func (m *TLUpdatesDifferenceEmpty) To_Updates_Difference() *Updates_Difference {
	return &Updates_Difference{
		Constructor: TLConstructor_CRC32_updates_differenceEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesDifferenceEmpty) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesDifferenceEmpty) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdatesDifferenceEmpty) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesDifferenceEmpty) GetSeq() int32  { return m.Data2.Seq }

func NewTLUpdatesDifferenceEmpty() *TLUpdatesDifferenceEmpty {
	return &TLUpdatesDifferenceEmpty{Data2: &Updates_Difference_Data{}}
}

func (m *TLUpdatesDifferenceEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_differenceEmpty))

	x.Int(m.GetDate())
	x.Int(m.GetSeq())

	return x.buf
}

func (m *TLUpdatesDifferenceEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_differenceEmpty))

	x.Int(m.GetDate())
	x.Int(m.GetSeq())

	return x.buf
}

func (m *TLUpdatesDifferenceEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetDate(dbuf.Int())
	m.SetSeq(dbuf.Int())

	return dbuf.err
}

// updates.difference#f49ca0 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> state:updates.State = updates.Difference;
func (m *TLUpdatesDifference) To_Updates_Difference() *Updates_Difference {
	return &Updates_Difference{
		Constructor: TLConstructor_CRC32_updates_difference,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesDifference) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesDifference) GetNewMessages() []*Message  { return m.Data2.NewMessages }

func (m *TLUpdatesDifference) SetNewEncryptedMessages(v []*EncryptedMessage) {
	m.Data2.NewEncryptedMessages = v
}
func (m *TLUpdatesDifference) GetNewEncryptedMessages() []*EncryptedMessage {
	return m.Data2.NewEncryptedMessages
}

func (m *TLUpdatesDifference) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesDifference) GetOtherUpdates() []*Update  { return m.Data2.OtherUpdates }

func (m *TLUpdatesDifference) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesDifference) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesDifference) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesDifference) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesDifference) SetState(v *Updates_State) { m.Data2.State = v }
func (m *TLUpdatesDifference) GetState() *Updates_State  { return m.Data2.State }

func NewTLUpdatesDifference() *TLUpdatesDifference {
	return &TLUpdatesDifference{Data2: &Updates_Difference_Data{}}
}

func (m *TLUpdatesDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_difference))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewMessages())))
	for _, v := range m.GetNewMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewEncryptedMessages())))
	for _, v := range m.GetNewEncryptedMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetOtherUpdates())))
	for _, v := range m.GetOtherUpdates() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetState().Encode())

	return x.buf
}

func (m *TLUpdatesDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_difference))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewMessages())))
	for _, v := range m.GetNewMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewEncryptedMessages())))
	for _, v := range m.GetNewEncryptedMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetOtherUpdates())))
	for _, v := range m.GetOtherUpdates() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetState().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdatesDifference) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Message, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Message{}
		v1[i].Decode(dbuf)
	}
	m.SetNewMessages(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*EncryptedMessage, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &EncryptedMessage{}
		v2[i].Decode(dbuf)
	}
	m.SetNewEncryptedMessages(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Update, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Update{}
		v3[i].Decode(dbuf)
	}
	m.SetOtherUpdates(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*Chat, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &Chat{}
		v4[i].Decode(dbuf)
	}
	m.SetChats(v4)

	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*User, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &User{}
		v5[i].Decode(dbuf)
	}
	m.SetUsers(v5)

	m6 := &Updates_State{}
	m6.Decode(dbuf)
	m.SetState(m6)

	return dbuf.err
}

// updates.differenceSlice#a8fb1981 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> intermediate_state:updates.State = updates.Difference;
func (m *TLUpdatesDifferenceSlice) To_Updates_Difference() *Updates_Difference {
	return &Updates_Difference{
		Constructor: TLConstructor_CRC32_updates_differenceSlice,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesDifferenceSlice) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesDifferenceSlice) GetNewMessages() []*Message  { return m.Data2.NewMessages }

func (m *TLUpdatesDifferenceSlice) SetNewEncryptedMessages(v []*EncryptedMessage) {
	m.Data2.NewEncryptedMessages = v
}
func (m *TLUpdatesDifferenceSlice) GetNewEncryptedMessages() []*EncryptedMessage {
	return m.Data2.NewEncryptedMessages
}

func (m *TLUpdatesDifferenceSlice) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesDifferenceSlice) GetOtherUpdates() []*Update  { return m.Data2.OtherUpdates }

func (m *TLUpdatesDifferenceSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesDifferenceSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesDifferenceSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesDifferenceSlice) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesDifferenceSlice) SetIntermediateState(v *Updates_State) {
	m.Data2.IntermediateState = v
}
func (m *TLUpdatesDifferenceSlice) GetIntermediateState() *Updates_State {
	return m.Data2.IntermediateState
}

func NewTLUpdatesDifferenceSlice() *TLUpdatesDifferenceSlice {
	return &TLUpdatesDifferenceSlice{Data2: &Updates_Difference_Data{}}
}

func (m *TLUpdatesDifferenceSlice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_differenceSlice))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewMessages())))
	for _, v := range m.GetNewMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewEncryptedMessages())))
	for _, v := range m.GetNewEncryptedMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetOtherUpdates())))
	for _, v := range m.GetOtherUpdates() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.GetIntermediateState().Encode())

	return x.buf
}

func (m *TLUpdatesDifferenceSlice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_differenceSlice))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewMessages())))
	for _, v := range m.GetNewMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewEncryptedMessages())))
	for _, v := range m.GetNewEncryptedMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetOtherUpdates())))
	for _, v := range m.GetOtherUpdates() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.GetIntermediateState().EncodeToLayer(layer))

	return x.buf
}

func (m *TLUpdatesDifferenceSlice) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*Message, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &Message{}
		v1[i].Decode(dbuf)
	}
	m.SetNewMessages(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*EncryptedMessage, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &EncryptedMessage{}
		v2[i].Decode(dbuf)
	}
	m.SetNewEncryptedMessages(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*Update, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &Update{}
		v3[i].Decode(dbuf)
	}
	m.SetOtherUpdates(v3)

	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*Chat, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &Chat{}
		v4[i].Decode(dbuf)
	}
	m.SetChats(v4)

	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*User, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &User{}
		v5[i].Decode(dbuf)
	}
	m.SetUsers(v5)

	m6 := &Updates_State{}
	m6.Decode(dbuf)
	m.SetIntermediateState(m6)

	return dbuf.err
}

// updates.differenceTooLong#4afe8f6d pts:int = updates.Difference;
func (m *TLUpdatesDifferenceTooLong) To_Updates_Difference() *Updates_Difference {
	return &Updates_Difference{
		Constructor: TLConstructor_CRC32_updates_differenceTooLong,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesDifferenceTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesDifferenceTooLong) GetPts() int32  { return m.Data2.Pts }

func NewTLUpdatesDifferenceTooLong() *TLUpdatesDifferenceTooLong {
	return &TLUpdatesDifferenceTooLong{Data2: &Updates_Difference_Data{}}
}

func (m *TLUpdatesDifferenceTooLong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_differenceTooLong))

	x.Int(m.GetPts())

	return x.buf
}

func (m *TLUpdatesDifferenceTooLong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_differenceTooLong))

	x.Int(m.GetPts())

	return x.buf
}

func (m *TLUpdatesDifferenceTooLong) Decode(dbuf *DecodeBuf) error {
	m.SetPts(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ExportedChatInvite <--
//  + TL_ChatInviteEmpty
//  + TL_ChatInviteExported
//

func (m *ExportedChatInvite) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatInviteEmpty:
		t := m.To_ChatInviteEmpty()
		return t.Encode()
	case TLConstructor_CRC32_chatInviteExported:
		t := m.To_ChatInviteExported()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ExportedChatInvite) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatInviteEmpty:
		t := m.To_ChatInviteEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatInviteExported:
		t := m.To_ChatInviteExported()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ExportedChatInvite) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatInviteEmpty:
		m2 := &TLChatInviteEmpty{Data2: &ExportedChatInvite_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatInviteExported:
		m2 := &TLChatInviteExported{Data2: &ExportedChatInvite_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatInviteEmpty#69df3769 = ExportedChatInvite;
func (m *ExportedChatInvite) To_ChatInviteEmpty() *TLChatInviteEmpty {
	return &TLChatInviteEmpty{
		Data2: m.Data2,
	}
}

// chatInviteExported#fc2e05bc link:string = ExportedChatInvite;
func (m *ExportedChatInvite) To_ChatInviteExported() *TLChatInviteExported {
	return &TLChatInviteExported{
		Data2: m.Data2,
	}
}

// chatInviteEmpty#69df3769 = ExportedChatInvite;
func (m *TLChatInviteEmpty) To_ExportedChatInvite() *ExportedChatInvite {
	return &ExportedChatInvite{
		Constructor: TLConstructor_CRC32_chatInviteEmpty,
		Data2:       m.Data2,
	}
}

func NewTLChatInviteEmpty() *TLChatInviteEmpty {
	return &TLChatInviteEmpty{Data2: &ExportedChatInvite_Data{}}
}

func (m *TLChatInviteEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInviteEmpty))

	return x.buf
}

func (m *TLChatInviteEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInviteEmpty))

	return x.buf
}

func (m *TLChatInviteEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// chatInviteExported#fc2e05bc link:string = ExportedChatInvite;
func (m *TLChatInviteExported) To_ExportedChatInvite() *ExportedChatInvite {
	return &ExportedChatInvite{
		Constructor: TLConstructor_CRC32_chatInviteExported,
		Data2:       m.Data2,
	}
}

func (m *TLChatInviteExported) SetLink(v string) { m.Data2.Link = v }
func (m *TLChatInviteExported) GetLink() string  { return m.Data2.Link }

func NewTLChatInviteExported() *TLChatInviteExported {
	return &TLChatInviteExported{Data2: &ExportedChatInvite_Data{}}
}

func (m *TLChatInviteExported) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInviteExported))

	x.String(m.GetLink())

	return x.buf
}

func (m *TLChatInviteExported) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInviteExported))

	x.String(m.GetLink())

	return x.buf
}

func (m *TLChatInviteExported) Decode(dbuf *DecodeBuf) error {
	m.SetLink(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Updates_ChannelDifference <--
//  + TL_UpdatesChannelDifferenceEmpty
//  + TL_UpdatesChannelDifferenceTooLong
//  + TL_UpdatesChannelDifference
//

func (m *Updates_ChannelDifference) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_updates_channelDifferenceEmpty:
		t := m.To_UpdatesChannelDifferenceEmpty()
		return t.Encode()
	case TLConstructor_CRC32_updates_channelDifferenceTooLong:
		t := m.To_UpdatesChannelDifferenceTooLong()
		return t.Encode()
	case TLConstructor_CRC32_updates_channelDifference:
		t := m.To_UpdatesChannelDifference()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates_ChannelDifference) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_updates_channelDifferenceEmpty:
		t := m.To_UpdatesChannelDifferenceEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updates_channelDifferenceTooLong:
		t := m.To_UpdatesChannelDifferenceTooLong()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_updates_channelDifference:
		t := m.To_UpdatesChannelDifference()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Updates_ChannelDifference) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_updates_channelDifferenceEmpty:
		m2 := &TLUpdatesChannelDifferenceEmpty{Data2: &Updates_ChannelDifference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updates_channelDifferenceTooLong:
		m2 := &TLUpdatesChannelDifferenceTooLong{Data2: &Updates_ChannelDifference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_updates_channelDifference:
		m2 := &TLUpdatesChannelDifference{Data2: &Updates_ChannelDifference_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// updates.channelDifferenceEmpty#3e11affb flags:# final:flags.0?true pts:int timeout:flags.1?int = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceEmpty() *TLUpdatesChannelDifferenceEmpty {
	return &TLUpdatesChannelDifferenceEmpty{
		Data2: m.Data2,
	}
}

// updates.channelDifferenceTooLong#6a9d7b35 flags:# final:flags.0?true pts:int timeout:flags.1?int top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceTooLong() *TLUpdatesChannelDifferenceTooLong {
	return &TLUpdatesChannelDifferenceTooLong{
		Data2: m.Data2,
	}
}

// updates.channelDifference#2064674e flags:# final:flags.0?true pts:int timeout:flags.1?int new_messages:Vector<Message> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifference() *TLUpdatesChannelDifference {
	return &TLUpdatesChannelDifference{
		Data2: m.Data2,
	}
}

// updates.channelDifferenceEmpty#3e11affb flags:# final:flags.0?true pts:int timeout:flags.1?int = updates.ChannelDifference;
func (m *TLUpdatesChannelDifferenceEmpty) To_Updates_ChannelDifference() *Updates_ChannelDifference {
	return &Updates_ChannelDifference{
		Constructor: TLConstructor_CRC32_updates_channelDifferenceEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesChannelDifferenceEmpty) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetFinal() bool  { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceEmpty) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesChannelDifferenceEmpty) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetTimeout() int32  { return m.Data2.Timeout }

func NewTLUpdatesChannelDifferenceEmpty() *TLUpdatesChannelDifferenceEmpty {
	return &TLUpdatesChannelDifferenceEmpty{Data2: &Updates_ChannelDifference_Data{}}
}

func (m *TLUpdatesChannelDifferenceEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceEmpty))

	// flags
	var flags uint32 = 0
	if m.GetFinal() == true {
		flags |= 1 << 0
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetPts())
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}

	return x.buf
}

func (m *TLUpdatesChannelDifferenceEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceEmpty))

	// flags
	var flags uint32 = 0
	if m.GetFinal() == true {
		flags |= 1 << 0
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetPts())
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}

	return x.buf
}

func (m *TLUpdatesChannelDifferenceEmpty) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetFinal(true)
	}
	m.SetPts(dbuf.Int())
	if (flags & (1 << 1)) != 0 {
		m.SetTimeout(dbuf.Int())
	}

	return dbuf.err
}

// updates.channelDifferenceTooLong#6a9d7b35 flags:# final:flags.0?true pts:int timeout:flags.1?int top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *TLUpdatesChannelDifferenceTooLong) To_Updates_ChannelDifference() *Updates_ChannelDifference {
	return &Updates_ChannelDifference{
		Constructor: TLConstructor_CRC32_updates_channelDifferenceTooLong,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesChannelDifferenceTooLong) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetFinal() bool  { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesChannelDifferenceTooLong) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetTimeout() int32  { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifferenceTooLong) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetTopMessage() int32  { return m.Data2.TopMessage }

func (m *TLUpdatesChannelDifferenceTooLong) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetReadInboxMaxId() int32  { return m.Data2.ReadInboxMaxId }

func (m *TLUpdatesChannelDifferenceTooLong) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetReadOutboxMaxId() int32  { return m.Data2.ReadOutboxMaxId }

func (m *TLUpdatesChannelDifferenceTooLong) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLUpdatesChannelDifferenceTooLong) SetUnreadMentionsCount(v int32) {
	m.Data2.UnreadMentionsCount = v
}
func (m *TLUpdatesChannelDifferenceTooLong) GetUnreadMentionsCount() int32 {
	return m.Data2.UnreadMentionsCount
}

func (m *TLUpdatesChannelDifferenceTooLong) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLUpdatesChannelDifferenceTooLong) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesChannelDifferenceTooLong) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetUsers() []*User  { return m.Data2.Users }

func NewTLUpdatesChannelDifferenceTooLong() *TLUpdatesChannelDifferenceTooLong {
	return &TLUpdatesChannelDifferenceTooLong{Data2: &Updates_ChannelDifference_Data{}}
}

func (m *TLUpdatesChannelDifferenceTooLong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceTooLong))

	// flags
	var flags uint32 = 0
	if m.GetFinal() == true {
		flags |= 1 << 0
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetPts())
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}
	x.Int(m.GetTopMessage())
	x.Int(m.GetReadInboxMaxId())
	x.Int(m.GetReadOutboxMaxId())
	x.Int(m.GetUnreadCount())
	x.Int(m.GetUnreadMentionsCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUpdatesChannelDifferenceTooLong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceTooLong))

	// flags
	var flags uint32 = 0
	if m.GetFinal() == true {
		flags |= 1 << 0
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetPts())
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}
	x.Int(m.GetTopMessage())
	x.Int(m.GetReadInboxMaxId())
	x.Int(m.GetReadOutboxMaxId())
	x.Int(m.GetUnreadCount())
	x.Int(m.GetUnreadMentionsCount())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetMessages())))
	for _, v := range m.GetMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUpdatesChannelDifferenceTooLong) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetFinal(true)
	}
	m.SetPts(dbuf.Int())
	if (flags & (1 << 1)) != 0 {
		m.SetTimeout(dbuf.Int())
	}
	m.SetTopMessage(dbuf.Int())
	m.SetReadInboxMaxId(dbuf.Int())
	m.SetReadOutboxMaxId(dbuf.Int())
	m.SetUnreadCount(dbuf.Int())
	m.SetUnreadMentionsCount(dbuf.Int())
	c10 := dbuf.Int()
	if c10 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 10, c10)
		return dbuf.err
	}
	l10 := dbuf.Int()
	v10 := make([]*Message, l10)
	for i := int32(0); i < l10; i++ {
		v10[i] = &Message{}
		v10[i].Decode(dbuf)
	}
	m.SetMessages(v10)

	c11 := dbuf.Int()
	if c11 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
		return dbuf.err
	}
	l11 := dbuf.Int()
	v11 := make([]*Chat, l11)
	for i := int32(0); i < l11; i++ {
		v11[i] = &Chat{}
		v11[i].Decode(dbuf)
	}
	m.SetChats(v11)

	c12 := dbuf.Int()
	if c12 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 12, c12)
		return dbuf.err
	}
	l12 := dbuf.Int()
	v12 := make([]*User, l12)
	for i := int32(0); i < l12; i++ {
		v12[i] = &User{}
		v12[i].Decode(dbuf)
	}
	m.SetUsers(v12)

	return dbuf.err
}

// updates.channelDifference#2064674e flags:# final:flags.0?true pts:int timeout:flags.1?int new_messages:Vector<Message> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *TLUpdatesChannelDifference) To_Updates_ChannelDifference() *Updates_ChannelDifference {
	return &Updates_ChannelDifference{
		Constructor: TLConstructor_CRC32_updates_channelDifference,
		Data2:       m.Data2,
	}
}

func (m *TLUpdatesChannelDifference) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifference) GetFinal() bool  { return m.Data2.Final }

func (m *TLUpdatesChannelDifference) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifference) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesChannelDifference) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifference) GetTimeout() int32  { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifference) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesChannelDifference) GetNewMessages() []*Message  { return m.Data2.NewMessages }

func (m *TLUpdatesChannelDifference) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesChannelDifference) GetOtherUpdates() []*Update  { return m.Data2.OtherUpdates }

func (m *TLUpdatesChannelDifference) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifference) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesChannelDifference) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifference) GetUsers() []*User  { return m.Data2.Users }

func NewTLUpdatesChannelDifference() *TLUpdatesChannelDifference {
	return &TLUpdatesChannelDifference{Data2: &Updates_ChannelDifference_Data{}}
}

func (m *TLUpdatesChannelDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_channelDifference))

	// flags
	var flags uint32 = 0
	if m.GetFinal() == true {
		flags |= 1 << 0
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetPts())
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewMessages())))
	for _, v := range m.GetNewMessages() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetOtherUpdates())))
	for _, v := range m.GetOtherUpdates() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUpdatesChannelDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_channelDifference))

	// flags
	var flags uint32 = 0
	if m.GetFinal() == true {
		flags |= 1 << 0
	}
	if m.GetTimeout() != 0 {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.GetPts())
	if m.GetTimeout() != 0 {
		x.Int(m.GetTimeout())
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetNewMessages())))
	for _, v := range m.GetNewMessages() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetOtherUpdates())))
	for _, v := range m.GetOtherUpdates() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUpdatesChannelDifference) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetFinal(true)
	}
	m.SetPts(dbuf.Int())
	if (flags & (1 << 1)) != 0 {
		m.SetTimeout(dbuf.Int())
	}
	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*Message, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &Message{}
		v5[i].Decode(dbuf)
	}
	m.SetNewMessages(v5)

	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	v6 := make([]*Update, l6)
	for i := int32(0); i < l6; i++ {
		v6[i] = &Update{}
		v6[i].Decode(dbuf)
	}
	m.SetOtherUpdates(v6)

	c7 := dbuf.Int()
	if c7 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
		return dbuf.err
	}
	l7 := dbuf.Int()
	v7 := make([]*Chat, l7)
	for i := int32(0); i < l7; i++ {
		v7[i] = &Chat{}
		v7[i].Decode(dbuf)
	}
	m.SetChats(v7)

	c8 := dbuf.Int()
	if c8 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
		return dbuf.err
	}
	l8 := dbuf.Int()
	v8 := make([]*User, l8)
	for i := int32(0); i < l8; i++ {
		v8[i] = &User{}
		v8[i].Decode(dbuf)
	}
	m.SetUsers(v8)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// RichText <--
//  + TL_TextEmpty
//  + TL_TextPlain
//  + TL_TextBold
//  + TL_TextItalic
//  + TL_TextUnderline
//  + TL_TextStrike
//  + TL_TextFixed
//  + TL_TextUrl
//  + TL_TextEmail
//  + TL_TextConcat
//

func (m *RichText) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_textEmpty:
		t := m.To_TextEmpty()
		return t.Encode()
	case TLConstructor_CRC32_textPlain:
		t := m.To_TextPlain()
		return t.Encode()
	case TLConstructor_CRC32_textBold:
		t := m.To_TextBold()
		return t.Encode()
	case TLConstructor_CRC32_textItalic:
		t := m.To_TextItalic()
		return t.Encode()
	case TLConstructor_CRC32_textUnderline:
		t := m.To_TextUnderline()
		return t.Encode()
	case TLConstructor_CRC32_textStrike:
		t := m.To_TextStrike()
		return t.Encode()
	case TLConstructor_CRC32_textFixed:
		t := m.To_TextFixed()
		return t.Encode()
	case TLConstructor_CRC32_textUrl:
		t := m.To_TextUrl()
		return t.Encode()
	case TLConstructor_CRC32_textEmail:
		t := m.To_TextEmail()
		return t.Encode()
	case TLConstructor_CRC32_textConcat:
		t := m.To_TextConcat()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RichText) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_textEmpty:
		t := m.To_TextEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textPlain:
		t := m.To_TextPlain()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textBold:
		t := m.To_TextBold()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textItalic:
		t := m.To_TextItalic()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textUnderline:
		t := m.To_TextUnderline()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textStrike:
		t := m.To_TextStrike()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textFixed:
		t := m.To_TextFixed()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textUrl:
		t := m.To_TextUrl()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textEmail:
		t := m.To_TextEmail()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_textConcat:
		t := m.To_TextConcat()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *RichText) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_textEmpty:
		m2 := &TLTextEmpty{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textPlain:
		m2 := &TLTextPlain{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textBold:
		m2 := &TLTextBold{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textItalic:
		m2 := &TLTextItalic{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textUnderline:
		m2 := &TLTextUnderline{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textStrike:
		m2 := &TLTextStrike{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textFixed:
		m2 := &TLTextFixed{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textUrl:
		m2 := &TLTextUrl{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textEmail:
		m2 := &TLTextEmail{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_textConcat:
		m2 := &TLTextConcat{Data2: &RichText_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// textEmpty#dc3d824f = RichText;
func (m *RichText) To_TextEmpty() *TLTextEmpty {
	return &TLTextEmpty{
		Data2: m.Data2,
	}
}

// textPlain#744694e0 text:string = RichText;
func (m *RichText) To_TextPlain() *TLTextPlain {
	return &TLTextPlain{
		Data2: m.Data2,
	}
}

// textBold#6724abc4 text:RichText = RichText;
func (m *RichText) To_TextBold() *TLTextBold {
	return &TLTextBold{
		Data2: m.Data2,
	}
}

// textItalic#d912a59c text:RichText = RichText;
func (m *RichText) To_TextItalic() *TLTextItalic {
	return &TLTextItalic{
		Data2: m.Data2,
	}
}

// textUnderline#c12622c4 text:RichText = RichText;
func (m *RichText) To_TextUnderline() *TLTextUnderline {
	return &TLTextUnderline{
		Data2: m.Data2,
	}
}

// textStrike#9bf8bb95 text:RichText = RichText;
func (m *RichText) To_TextStrike() *TLTextStrike {
	return &TLTextStrike{
		Data2: m.Data2,
	}
}

// textFixed#6c3f19b9 text:RichText = RichText;
func (m *RichText) To_TextFixed() *TLTextFixed {
	return &TLTextFixed{
		Data2: m.Data2,
	}
}

// textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText;
func (m *RichText) To_TextUrl() *TLTextUrl {
	return &TLTextUrl{
		Data2: m.Data2,
	}
}

// textEmail#de5a0dd6 text:RichText email:string = RichText;
func (m *RichText) To_TextEmail() *TLTextEmail {
	return &TLTextEmail{
		Data2: m.Data2,
	}
}

// textConcat#7e6260d7 texts:Vector<RichText> = RichText;
func (m *RichText) To_TextConcat() *TLTextConcat {
	return &TLTextConcat{
		Data2: m.Data2,
	}
}

// textEmpty#dc3d824f = RichText;
func (m *TLTextEmpty) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textEmpty,
		Data2:       m.Data2,
	}
}

func NewTLTextEmpty() *TLTextEmpty {
	return &TLTextEmpty{Data2: &RichText_Data{}}
}

func (m *TLTextEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textEmpty))

	return x.buf
}

func (m *TLTextEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textEmpty))

	return x.buf
}

func (m *TLTextEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// textPlain#744694e0 text:string = RichText;
func (m *TLTextPlain) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textPlain,
		Data2:       m.Data2,
	}
}

func (m *TLTextPlain) SetText(v string) { m.Data2.Text_1 = v }
func (m *TLTextPlain) GetText() string  { return m.Data2.Text_1 }

func NewTLTextPlain() *TLTextPlain {
	return &TLTextPlain{Data2: &RichText_Data{}}
}

func (m *TLTextPlain) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textPlain))

	x.String(m.GetText())

	return x.buf
}

func (m *TLTextPlain) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textPlain))

	x.String(m.GetText())

	return x.buf
}

func (m *TLTextPlain) Decode(dbuf *DecodeBuf) error {
	m.SetText(dbuf.String())

	return dbuf.err
}

// textBold#6724abc4 text:RichText = RichText;
func (m *TLTextBold) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textBold,
		Data2:       m.Data2,
	}
}

func (m *TLTextBold) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextBold) GetText() *RichText  { return m.Data2.Text_2 }

func NewTLTextBold() *TLTextBold {
	return &TLTextBold{Data2: &RichText_Data{}}
}

func (m *TLTextBold) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textBold))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLTextBold) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textBold))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLTextBold) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// textItalic#d912a59c text:RichText = RichText;
func (m *TLTextItalic) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textItalic,
		Data2:       m.Data2,
	}
}

func (m *TLTextItalic) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextItalic) GetText() *RichText  { return m.Data2.Text_2 }

func NewTLTextItalic() *TLTextItalic {
	return &TLTextItalic{Data2: &RichText_Data{}}
}

func (m *TLTextItalic) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textItalic))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLTextItalic) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textItalic))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLTextItalic) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// textUnderline#c12622c4 text:RichText = RichText;
func (m *TLTextUnderline) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textUnderline,
		Data2:       m.Data2,
	}
}

func (m *TLTextUnderline) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextUnderline) GetText() *RichText  { return m.Data2.Text_2 }

func NewTLTextUnderline() *TLTextUnderline {
	return &TLTextUnderline{Data2: &RichText_Data{}}
}

func (m *TLTextUnderline) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textUnderline))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLTextUnderline) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textUnderline))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLTextUnderline) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// textStrike#9bf8bb95 text:RichText = RichText;
func (m *TLTextStrike) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textStrike,
		Data2:       m.Data2,
	}
}

func (m *TLTextStrike) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextStrike) GetText() *RichText  { return m.Data2.Text_2 }

func NewTLTextStrike() *TLTextStrike {
	return &TLTextStrike{Data2: &RichText_Data{}}
}

func (m *TLTextStrike) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textStrike))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLTextStrike) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textStrike))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLTextStrike) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// textFixed#6c3f19b9 text:RichText = RichText;
func (m *TLTextFixed) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textFixed,
		Data2:       m.Data2,
	}
}

func (m *TLTextFixed) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextFixed) GetText() *RichText  { return m.Data2.Text_2 }

func NewTLTextFixed() *TLTextFixed {
	return &TLTextFixed{Data2: &RichText_Data{}}
}

func (m *TLTextFixed) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textFixed))

	x.Bytes(m.GetText().Encode())

	return x.buf
}

func (m *TLTextFixed) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textFixed))

	x.Bytes(m.GetText().EncodeToLayer(layer))

	return x.buf
}

func (m *TLTextFixed) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)

	return dbuf.err
}

// textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText;
func (m *TLTextUrl) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textUrl,
		Data2:       m.Data2,
	}
}

func (m *TLTextUrl) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextUrl) GetText() *RichText  { return m.Data2.Text_2 }

func (m *TLTextUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLTextUrl) GetUrl() string  { return m.Data2.Url }

func (m *TLTextUrl) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLTextUrl) GetWebpageId() int64  { return m.Data2.WebpageId }

func NewTLTextUrl() *TLTextUrl {
	return &TLTextUrl{Data2: &RichText_Data{}}
}

func (m *TLTextUrl) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textUrl))

	x.Bytes(m.GetText().Encode())
	x.String(m.GetUrl())
	x.Long(m.GetWebpageId())

	return x.buf
}

func (m *TLTextUrl) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textUrl))

	x.Bytes(m.GetText().EncodeToLayer(layer))
	x.String(m.GetUrl())
	x.Long(m.GetWebpageId())

	return x.buf
}

func (m *TLTextUrl) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)
	m.SetUrl(dbuf.String())
	m.SetWebpageId(dbuf.Long())

	return dbuf.err
}

// textEmail#de5a0dd6 text:RichText email:string = RichText;
func (m *TLTextEmail) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textEmail,
		Data2:       m.Data2,
	}
}

func (m *TLTextEmail) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextEmail) GetText() *RichText  { return m.Data2.Text_2 }

func (m *TLTextEmail) SetEmail(v string) { m.Data2.Email = v }
func (m *TLTextEmail) GetEmail() string  { return m.Data2.Email }

func NewTLTextEmail() *TLTextEmail {
	return &TLTextEmail{Data2: &RichText_Data{}}
}

func (m *TLTextEmail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textEmail))

	x.Bytes(m.GetText().Encode())
	x.String(m.GetEmail())

	return x.buf
}

func (m *TLTextEmail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textEmail))

	x.Bytes(m.GetText().EncodeToLayer(layer))
	x.String(m.GetEmail())

	return x.buf
}

func (m *TLTextEmail) Decode(dbuf *DecodeBuf) error {
	m1 := &RichText{}
	m1.Decode(dbuf)
	m.SetText(m1)
	m.SetEmail(dbuf.String())

	return dbuf.err
}

// textConcat#7e6260d7 texts:Vector<RichText> = RichText;
func (m *TLTextConcat) To_RichText() *RichText {
	return &RichText{
		Constructor: TLConstructor_CRC32_textConcat,
		Data2:       m.Data2,
	}
}

func (m *TLTextConcat) SetTexts(v []*RichText) { m.Data2.Texts = v }
func (m *TLTextConcat) GetTexts() []*RichText  { return m.Data2.Texts }

func NewTLTextConcat() *TLTextConcat {
	return &TLTextConcat{Data2: &RichText_Data{}}
}

func (m *TLTextConcat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textConcat))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTexts())))
	for _, v := range m.GetTexts() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLTextConcat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_textConcat))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetTexts())))
	for _, v := range m.GetTexts() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLTextConcat) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*RichText, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &RichText{}
		v1[i].Decode(dbuf)
	}
	m.SetTexts(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputPhoto <--
//  + TL_InputPhotoEmpty
//  + TL_InputPhoto
//  + TL_InputPhotoLayer86
//

func (m *InputPhoto) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputPhotoEmpty:
		t := m.To_InputPhotoEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputPhoto:
		t := m.To_InputPhoto()
		return t.Encode()
	case TLConstructor_CRC32_inputPhotoLayer86:
		t := m.To_InputPhotoLayer86()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPhoto) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputPhotoEmpty:
		t := m.To_InputPhotoEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPhoto:
		t := m.To_InputPhoto()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputPhotoLayer86:
		t := m.To_InputPhotoLayer86()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputPhoto) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputPhotoEmpty:
		m2 := &TLInputPhotoEmpty{Data2: &InputPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPhoto:
		m2 := &TLInputPhoto{Data2: &InputPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputPhotoLayer86:
		m2 := &TLInputPhotoLayer86{Data2: &InputPhoto_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputPhotoEmpty#1cd7bf0d = InputPhoto;
func (m *InputPhoto) To_InputPhotoEmpty() *TLInputPhotoEmpty {
	return &TLInputPhotoEmpty{
		Data2: m.Data2,
	}
}

// inputPhoto#fb95c6c4 id:long access_hash:long = InputPhoto;
func (m *InputPhoto) To_InputPhoto() *TLInputPhoto {
	return &TLInputPhoto{
		Data2: m.Data2,
	}
}

// inputPhoto#3bb3b94a id:long access_hash:long file_reference:bytes = InputPhoto;
func (m *InputPhoto) To_InputPhotoLayer86() *TLInputPhotoLayer86 {
	return &TLInputPhotoLayer86{
		Data2: m.Data2,
	}
}

// inputPhotoEmpty#1cd7bf0d = InputPhoto;
func (m *TLInputPhotoEmpty) To_InputPhoto() *InputPhoto {
	return &InputPhoto{
		Constructor: TLConstructor_CRC32_inputPhotoEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputPhotoEmpty() *TLInputPhotoEmpty {
	return &TLInputPhotoEmpty{Data2: &InputPhoto_Data{}}
}

func (m *TLInputPhotoEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhotoEmpty))

	return x.buf
}

func (m *TLInputPhotoEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhotoEmpty))

	return x.buf
}

func (m *TLInputPhotoEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputPhoto#fb95c6c4 id:long access_hash:long = InputPhoto;
func (m *TLInputPhoto) To_InputPhoto() *InputPhoto {
	return &InputPhoto{
		Constructor: TLConstructor_CRC32_inputPhoto,
		Data2:       m.Data2,
	}
}

func (m *TLInputPhoto) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoto) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhoto) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoto) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputPhoto() *TLInputPhoto {
	return &TLInputPhoto{Data2: &InputPhoto_Data{}}
}

func (m *TLInputPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhoto))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhoto))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputPhoto) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

// inputPhoto#3bb3b94a id:long access_hash:long file_reference:bytes = InputPhoto;
func (m *TLInputPhotoLayer86) To_InputPhoto() *InputPhoto {
	return &InputPhoto{
		Constructor: TLConstructor_CRC32_inputPhotoLayer86,
		Data2:       m.Data2,
	}
}

func (m *TLInputPhotoLayer86) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhotoLayer86) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhotoLayer86) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhotoLayer86) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPhotoLayer86) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhotoLayer86) GetFileReference() []byte  { return m.Data2.FileReference }

func NewTLInputPhotoLayer86() *TLInputPhotoLayer86 {
	return &TLInputPhotoLayer86{Data2: &InputPhoto_Data{}}
}

func (m *TLInputPhotoLayer86) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhotoLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputPhotoLayer86) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputPhotoLayer86))

	x.Long(m.GetId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetFileReference())

	return x.buf
}

func (m *TLInputPhotoLayer86) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())
	m.SetFileReference(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChatInvite <--
//  + TL_ChatInviteAlready
//  + TL_ChatInvite
//

func (m *ChatInvite) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_chatInviteAlready:
		t := m.To_ChatInviteAlready()
		return t.Encode()
	case TLConstructor_CRC32_chatInvite:
		t := m.To_ChatInvite()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatInvite) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_chatInviteAlready:
		t := m.To_ChatInviteAlready()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_chatInvite:
		t := m.To_ChatInvite()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChatInvite) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_chatInviteAlready:
		m2 := &TLChatInviteAlready{Data2: &ChatInvite_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_chatInvite:
		m2 := &TLChatInvite{Data2: &ChatInvite_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// chatInviteAlready#5a686d7c chat:Chat = ChatInvite;
func (m *ChatInvite) To_ChatInviteAlready() *TLChatInviteAlready {
	return &TLChatInviteAlready{
		Data2: m.Data2,
	}
}

// chatInvite#db74f558 flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true title:string photo:ChatPhoto participants_count:int participants:flags.4?Vector<User> = ChatInvite;
func (m *ChatInvite) To_ChatInvite() *TLChatInvite {
	return &TLChatInvite{
		Data2: m.Data2,
	}
}

// chatInviteAlready#5a686d7c chat:Chat = ChatInvite;
func (m *TLChatInviteAlready) To_ChatInvite() *ChatInvite {
	return &ChatInvite{
		Constructor: TLConstructor_CRC32_chatInviteAlready,
		Data2:       m.Data2,
	}
}

func (m *TLChatInviteAlready) SetChat(v *Chat) { m.Data2.Chat = v }
func (m *TLChatInviteAlready) GetChat() *Chat  { return m.Data2.Chat }

func NewTLChatInviteAlready() *TLChatInviteAlready {
	return &TLChatInviteAlready{Data2: &ChatInvite_Data{}}
}

func (m *TLChatInviteAlready) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInviteAlready))

	x.Bytes(m.GetChat().Encode())

	return x.buf
}

func (m *TLChatInviteAlready) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInviteAlready))

	x.Bytes(m.GetChat().EncodeToLayer(layer))

	return x.buf
}

func (m *TLChatInviteAlready) Decode(dbuf *DecodeBuf) error {
	m1 := &Chat{}
	m1.Decode(dbuf)
	m.SetChat(m1)

	return dbuf.err
}

// chatInvite#db74f558 flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true title:string photo:ChatPhoto participants_count:int participants:flags.4?Vector<User> = ChatInvite;
func (m *TLChatInvite) To_ChatInvite() *ChatInvite {
	return &ChatInvite{
		Constructor: TLConstructor_CRC32_chatInvite,
		Data2:       m.Data2,
	}
}

func (m *TLChatInvite) SetChannel(v bool) { m.Data2.Channel = v }
func (m *TLChatInvite) GetChannel() bool  { return m.Data2.Channel }

func (m *TLChatInvite) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChatInvite) GetBroadcast() bool  { return m.Data2.Broadcast }

func (m *TLChatInvite) SetPublic(v bool) { m.Data2.Public = v }
func (m *TLChatInvite) GetPublic() bool  { return m.Data2.Public }

func (m *TLChatInvite) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChatInvite) GetMegagroup() bool  { return m.Data2.Megagroup }

func (m *TLChatInvite) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatInvite) GetTitle() string  { return m.Data2.Title }

func (m *TLChatInvite) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChatInvite) GetPhoto() *ChatPhoto  { return m.Data2.Photo }

func (m *TLChatInvite) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChatInvite) GetParticipantsCount() int32  { return m.Data2.ParticipantsCount }

func (m *TLChatInvite) SetParticipants(v []*User) { m.Data2.Participants = v }
func (m *TLChatInvite) GetParticipants() []*User  { return m.Data2.Participants }

func NewTLChatInvite() *TLChatInvite {
	return &TLChatInvite{Data2: &ChatInvite_Data{}}
}

func (m *TLChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInvite))

	// flags
	var flags uint32 = 0
	if m.GetChannel() == true {
		flags |= 1 << 0
	}
	if m.GetBroadcast() == true {
		flags |= 1 << 1
	}
	if m.GetPublic() == true {
		flags |= 1 << 2
	}
	if m.GetMegagroup() == true {
		flags |= 1 << 3
	}
	if m.GetParticipants() != nil {
		flags |= 1 << 4
	}
	x.UInt(flags)

	x.String(m.GetTitle())
	x.Bytes(m.GetPhoto().Encode())
	x.Int(m.GetParticipantsCount())
	if m.GetParticipants() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetParticipants())))
		for _, v := range m.GetParticipants() {
			x.buf = append(x.buf, (*v).Encode()...)
		}
	}

	return x.buf
}

func (m *TLChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_chatInvite))

	// flags
	var flags uint32 = 0
	if m.GetChannel() == true {
		flags |= 1 << 0
	}
	if m.GetBroadcast() == true {
		flags |= 1 << 1
	}
	if m.GetPublic() == true {
		flags |= 1 << 2
	}
	if m.GetMegagroup() == true {
		flags |= 1 << 3
	}
	if m.GetParticipants() != nil {
		flags |= 1 << 4
	}
	x.UInt(flags)

	x.String(m.GetTitle())
	x.Bytes(m.GetPhoto().EncodeToLayer(layer))
	x.Int(m.GetParticipantsCount())
	if m.GetParticipants() != nil {
		x.Int(int32(TLConstructor_CRC32_vector))
		x.Int(int32(len(m.GetParticipants())))
		for _, v := range m.GetParticipants() {
			x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
		}
	}

	return x.buf
}

func (m *TLChatInvite) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetChannel(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetBroadcast(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetPublic(true)
	}
	if (flags & (1 << 3)) != 0 {
		m.SetMegagroup(true)
	}
	m.SetTitle(dbuf.String())
	m7 := &ChatPhoto{}
	m7.Decode(dbuf)
	m.SetPhoto(m7)
	m.SetParticipantsCount(dbuf.Int())
	if (flags & (1 << 4)) != 0 {
		c9 := dbuf.Int()
		if c9 != int32(TLConstructor_CRC32_vector) {
			dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
			return dbuf.err
		}
		l9 := dbuf.Int()
		v9 := make([]*User, l9)
		for i := int32(0); i < l9; i++ {
			v9[i] = &User{}
			v9[i].Decode(dbuf)
		}
		m.SetParticipants(v9)

	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_MessageEditData <--
//  + TL_MessagesMessageEditData
//

func (m *Messages_MessageEditData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_messageEditData:
		t := m.To_MessagesMessageEditData()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_MessageEditData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_messageEditData:
		t := m.To_MessagesMessageEditData()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_MessageEditData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_messageEditData:
		m2 := &TLMessagesMessageEditData{Data2: &Messages_MessageEditData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.messageEditData#26b5dde6 flags:# caption:flags.0?true = messages.MessageEditData;
func (m *Messages_MessageEditData) To_MessagesMessageEditData() *TLMessagesMessageEditData {
	return &TLMessagesMessageEditData{
		Data2: m.Data2,
	}
}

// messages.messageEditData#26b5dde6 flags:# caption:flags.0?true = messages.MessageEditData;
func (m *TLMessagesMessageEditData) To_Messages_MessageEditData() *Messages_MessageEditData {
	return &Messages_MessageEditData{
		Constructor: TLConstructor_CRC32_messages_messageEditData,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesMessageEditData) SetCaption(v bool) { m.Data2.Caption = v }
func (m *TLMessagesMessageEditData) GetCaption() bool  { return m.Data2.Caption }

func NewTLMessagesMessageEditData() *TLMessagesMessageEditData {
	return &TLMessagesMessageEditData{Data2: &Messages_MessageEditData_Data{}}
}

func (m *TLMessagesMessageEditData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messageEditData))

	// flags
	var flags uint32 = 0
	if m.GetCaption() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLMessagesMessageEditData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_messageEditData))

	// flags
	var flags uint32 = 0
	if m.GetCaption() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLMessagesMessageEditData) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetCaption(true)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Channels_AdminLogResults <--
//  + TL_ChannelsAdminLogResults
//

func (m *Channels_AdminLogResults) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channels_adminLogResults:
		t := m.To_ChannelsAdminLogResults()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Channels_AdminLogResults) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channels_adminLogResults:
		t := m.To_ChannelsAdminLogResults()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Channels_AdminLogResults) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channels_adminLogResults:
		m2 := &TLChannelsAdminLogResults{Data2: &Channels_AdminLogResults_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channels.adminLogResults#ed8af74d events:Vector<ChannelAdminLogEvent> chats:Vector<Chat> users:Vector<User> = channels.AdminLogResults;
func (m *Channels_AdminLogResults) To_ChannelsAdminLogResults() *TLChannelsAdminLogResults {
	return &TLChannelsAdminLogResults{
		Data2: m.Data2,
	}
}

// channels.adminLogResults#ed8af74d events:Vector<ChannelAdminLogEvent> chats:Vector<Chat> users:Vector<User> = channels.AdminLogResults;
func (m *TLChannelsAdminLogResults) To_Channels_AdminLogResults() *Channels_AdminLogResults {
	return &Channels_AdminLogResults{
		Constructor: TLConstructor_CRC32_channels_adminLogResults,
		Data2:       m.Data2,
	}
}

func (m *TLChannelsAdminLogResults) SetEvents(v []*ChannelAdminLogEvent) { m.Data2.Events = v }
func (m *TLChannelsAdminLogResults) GetEvents() []*ChannelAdminLogEvent  { return m.Data2.Events }

func (m *TLChannelsAdminLogResults) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLChannelsAdminLogResults) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLChannelsAdminLogResults) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsAdminLogResults) GetUsers() []*User  { return m.Data2.Users }

func NewTLChannelsAdminLogResults() *TLChannelsAdminLogResults {
	return &TLChannelsAdminLogResults{Data2: &Channels_AdminLogResults_Data{}}
}

func (m *TLChannelsAdminLogResults) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_adminLogResults))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEvents())))
	for _, v := range m.GetEvents() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelsAdminLogResults) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_adminLogResults))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetEvents())))
	for _, v := range m.GetEvents() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetChats())))
	for _, v := range m.GetChats() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetUsers())))
	for _, v := range m.GetUsers() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelsAdminLogResults) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*ChannelAdminLogEvent, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &ChannelAdminLogEvent{}
		v1[i].Decode(dbuf)
	}
	m.SetEvents(v1)

	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*Chat, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &Chat{}
		v2[i].Decode(dbuf)
	}
	m.SetChats(v2)

	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*User, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &User{}
		v3[i].Decode(dbuf)
	}
	m.SetUsers(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureValueError <--
//  + TL_SecureValueErrorData
//  + TL_SecureValueErrorFrontSide
//  + TL_SecureValueErrorReverseSide
//  + TL_SecureValueErrorSelfie
//  + TL_SecureValueErrorFile
//  + TL_SecureValueErrorFiles
//  + TL_SecureValueError
//  + TL_SecureValueErrorTranslationFile
//  + TL_SecureValueErrorTranslationFiles
//

func (m *SecureValueError) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureValueErrorData:
		t := m.To_SecureValueErrorData()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorFrontSide:
		t := m.To_SecureValueErrorFrontSide()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorReverseSide:
		t := m.To_SecureValueErrorReverseSide()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorSelfie:
		t := m.To_SecureValueErrorSelfie()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorFile:
		t := m.To_SecureValueErrorFile()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorFiles:
		t := m.To_SecureValueErrorFiles()
		return t.Encode()
	case TLConstructor_CRC32_secureValueError:
		t := m.To_SecureValueError()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorTranslationFile:
		t := m.To_SecureValueErrorTranslationFile()
		return t.Encode()
	case TLConstructor_CRC32_secureValueErrorTranslationFiles:
		t := m.To_SecureValueErrorTranslationFiles()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValueError) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureValueErrorData:
		t := m.To_SecureValueErrorData()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorFrontSide:
		t := m.To_SecureValueErrorFrontSide()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorReverseSide:
		t := m.To_SecureValueErrorReverseSide()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorSelfie:
		t := m.To_SecureValueErrorSelfie()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorFile:
		t := m.To_SecureValueErrorFile()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorFiles:
		t := m.To_SecureValueErrorFiles()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueError:
		t := m.To_SecureValueError()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorTranslationFile:
		t := m.To_SecureValueErrorTranslationFile()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_secureValueErrorTranslationFiles:
		t := m.To_SecureValueErrorTranslationFiles()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValueError) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureValueErrorData:
		m2 := &TLSecureValueErrorData{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorFrontSide:
		m2 := &TLSecureValueErrorFrontSide{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorReverseSide:
		m2 := &TLSecureValueErrorReverseSide{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorSelfie:
		m2 := &TLSecureValueErrorSelfie{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorFile:
		m2 := &TLSecureValueErrorFile{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorFiles:
		m2 := &TLSecureValueErrorFiles{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueError:
		m2 := &TLSecureValueError{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorTranslationFile:
		m2 := &TLSecureValueErrorTranslationFile{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_secureValueErrorTranslationFiles:
		m2 := &TLSecureValueErrorTranslationFiles{Data2: &SecureValueError_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureValueErrorData#e8a40bd9 type:SecureValueType data_hash:bytes field:string text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorData() *TLSecureValueErrorData {
	return &TLSecureValueErrorData{
		Data2: m.Data2,
	}
}

// secureValueErrorFrontSide#be3dfa type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorFrontSide() *TLSecureValueErrorFrontSide {
	return &TLSecureValueErrorFrontSide{
		Data2: m.Data2,
	}
}

// secureValueErrorReverseSide#868a2aa5 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorReverseSide() *TLSecureValueErrorReverseSide {
	return &TLSecureValueErrorReverseSide{
		Data2: m.Data2,
	}
}

// secureValueErrorSelfie#e537ced6 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorSelfie() *TLSecureValueErrorSelfie {
	return &TLSecureValueErrorSelfie{
		Data2: m.Data2,
	}
}

// secureValueErrorFile#7a700873 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorFile() *TLSecureValueErrorFile {
	return &TLSecureValueErrorFile{
		Data2: m.Data2,
	}
}

// secureValueErrorFiles#666220e9 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorFiles() *TLSecureValueErrorFiles {
	return &TLSecureValueErrorFiles{
		Data2: m.Data2,
	}
}

// secureValueError#869d758f type:SecureValueType hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueError() *TLSecureValueError {
	return &TLSecureValueError{
		Data2: m.Data2,
	}
}

// secureValueErrorTranslationFile#a1144770 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorTranslationFile() *TLSecureValueErrorTranslationFile {
	return &TLSecureValueErrorTranslationFile{
		Data2: m.Data2,
	}
}

// secureValueErrorTranslationFiles#34636dd8 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorTranslationFiles() *TLSecureValueErrorTranslationFiles {
	return &TLSecureValueErrorTranslationFiles{
		Data2: m.Data2,
	}
}

// secureValueErrorData#e8a40bd9 type:SecureValueType data_hash:bytes field:string text:string = SecureValueError;
func (m *TLSecureValueErrorData) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorData,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorData) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorData) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorData) SetDataHash(v []byte) { m.Data2.DataHash = v }
func (m *TLSecureValueErrorData) GetDataHash() []byte  { return m.Data2.DataHash }

func (m *TLSecureValueErrorData) SetField(v string) { m.Data2.Field = v }
func (m *TLSecureValueErrorData) GetField() string  { return m.Data2.Field }

func (m *TLSecureValueErrorData) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorData) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorData() *TLSecureValueErrorData {
	return &TLSecureValueErrorData{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorData))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetDataHash())
	x.String(m.GetField())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorData))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetDataHash())
	x.String(m.GetField())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorData) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetDataHash(dbuf.StringBytes())
	m.SetField(dbuf.String())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorFrontSide#be3dfa type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorFrontSide) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorFrontSide,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorFrontSide) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFrontSide) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorFrontSide) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorFrontSide) GetFileHash() []byte  { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorFrontSide) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFrontSide) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorFrontSide() *TLSecureValueErrorFrontSide {
	return &TLSecureValueErrorFrontSide{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorFrontSide) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorFrontSide))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorFrontSide) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorFrontSide))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorFrontSide) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetFileHash(dbuf.StringBytes())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorReverseSide#868a2aa5 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorReverseSide) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorReverseSide,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorReverseSide) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorReverseSide) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorReverseSide) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorReverseSide) GetFileHash() []byte  { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorReverseSide) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorReverseSide) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorReverseSide() *TLSecureValueErrorReverseSide {
	return &TLSecureValueErrorReverseSide{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorReverseSide) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorReverseSide))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorReverseSide) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorReverseSide))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorReverseSide) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetFileHash(dbuf.StringBytes())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorSelfie#e537ced6 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorSelfie) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorSelfie,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorSelfie) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorSelfie) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorSelfie) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorSelfie) GetFileHash() []byte  { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorSelfie) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorSelfie) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorSelfie() *TLSecureValueErrorSelfie {
	return &TLSecureValueErrorSelfie{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorSelfie) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorSelfie))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorSelfie) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorSelfie))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorSelfie) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetFileHash(dbuf.StringBytes())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorFile#7a700873 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorFile) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorFile,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorFile) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFile) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorFile) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorFile) GetFileHash() []byte  { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorFile) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFile) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorFile() *TLSecureValueErrorFile {
	return &TLSecureValueErrorFile{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorFile))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorFile))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorFile) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetFileHash(dbuf.StringBytes())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorFiles#666220e9 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *TLSecureValueErrorFiles) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorFiles,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorFiles) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFiles) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorFiles) SetFileHash(v [][]byte) { m.Data2.FileHash_6 = v }
func (m *TLSecureValueErrorFiles) GetFileHash() [][]byte  { return m.Data2.FileHash_6 }

func (m *TLSecureValueErrorFiles) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFiles) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorFiles() *TLSecureValueErrorFiles {
	return &TLSecureValueErrorFiles{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorFiles) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorFiles))

	x.Bytes(m.GetType().Encode())

	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorFiles) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorFiles))

	x.Bytes(m.GetType().EncodeToLayer(layer))

	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorFiles) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)

	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueError#869d758f type:SecureValueType hash:bytes text:string = SecureValueError;
func (m *TLSecureValueError) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueError,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueError) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueError) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueError) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValueError) GetHash() []byte  { return m.Data2.Hash }

func (m *TLSecureValueError) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueError) GetText() string  { return m.Data2.Text }

func NewTLSecureValueError() *TLSecureValueError {
	return &TLSecureValueError{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueError) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueError))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueError) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueError))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueError) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetHash(dbuf.StringBytes())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorTranslationFile#a1144770 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorTranslationFile) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorTranslationFile,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorTranslationFile) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorTranslationFile) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorTranslationFile) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorTranslationFile) GetFileHash() []byte  { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorTranslationFile) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorTranslationFile) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorTranslationFile() *TLSecureValueErrorTranslationFile {
	return &TLSecureValueErrorTranslationFile{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorTranslationFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorTranslationFile))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorTranslationFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorTranslationFile))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetFileHash())
	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorTranslationFile) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetFileHash(dbuf.StringBytes())
	m.SetText(dbuf.String())

	return dbuf.err
}

// secureValueErrorTranslationFiles#34636dd8 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *TLSecureValueErrorTranslationFiles) To_SecureValueError() *SecureValueError {
	return &SecureValueError{
		Constructor: TLConstructor_CRC32_secureValueErrorTranslationFiles,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueErrorTranslationFiles) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorTranslationFiles) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorTranslationFiles) SetFileHash(v [][]byte) { m.Data2.FileHash_6 = v }
func (m *TLSecureValueErrorTranslationFiles) GetFileHash() [][]byte  { return m.Data2.FileHash_6 }

func (m *TLSecureValueErrorTranslationFiles) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorTranslationFiles) GetText() string  { return m.Data2.Text }

func NewTLSecureValueErrorTranslationFiles() *TLSecureValueErrorTranslationFiles {
	return &TLSecureValueErrorTranslationFiles{Data2: &SecureValueError_Data{}}
}

func (m *TLSecureValueErrorTranslationFiles) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorTranslationFiles))

	x.Bytes(m.GetType().Encode())

	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorTranslationFiles) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueErrorTranslationFiles))

	x.Bytes(m.GetType().EncodeToLayer(layer))

	x.String(m.GetText())

	return x.buf
}

func (m *TLSecureValueErrorTranslationFiles) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)

	m.SetText(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// MessagesFilter <--
//  + TL_InputMessagesFilterEmpty
//  + TL_InputMessagesFilterPhotos
//  + TL_InputMessagesFilterVideo
//  + TL_InputMessagesFilterPhotoVideo
//  + TL_InputMessagesFilterDocument
//  + TL_InputMessagesFilterUrl
//  + TL_InputMessagesFilterGif
//  + TL_InputMessagesFilterVoice
//  + TL_InputMessagesFilterMusic
//  + TL_InputMessagesFilterChatPhotos
//  + TL_InputMessagesFilterPhoneCalls
//  + TL_InputMessagesFilterRoundVoice
//  + TL_InputMessagesFilterRoundVideo
//  + TL_InputMessagesFilterMyMentions
//  + TL_InputMessagesFilterGeo
//  + TL_InputMessagesFilterContacts
//

func (m *MessagesFilter) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputMessagesFilterEmpty:
		t := m.To_InputMessagesFilterEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterPhotos:
		t := m.To_InputMessagesFilterPhotos()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterVideo:
		t := m.To_InputMessagesFilterVideo()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterPhotoVideo:
		t := m.To_InputMessagesFilterPhotoVideo()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterDocument:
		t := m.To_InputMessagesFilterDocument()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterUrl:
		t := m.To_InputMessagesFilterUrl()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterGif:
		t := m.To_InputMessagesFilterGif()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterVoice:
		t := m.To_InputMessagesFilterVoice()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterMusic:
		t := m.To_InputMessagesFilterMusic()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterChatPhotos:
		t := m.To_InputMessagesFilterChatPhotos()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterPhoneCalls:
		t := m.To_InputMessagesFilterPhoneCalls()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterRoundVoice:
		t := m.To_InputMessagesFilterRoundVoice()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterRoundVideo:
		t := m.To_InputMessagesFilterRoundVideo()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterMyMentions:
		t := m.To_InputMessagesFilterMyMentions()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterGeo:
		t := m.To_InputMessagesFilterGeo()
		return t.Encode()
	case TLConstructor_CRC32_inputMessagesFilterContacts:
		t := m.To_InputMessagesFilterContacts()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessagesFilter) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputMessagesFilterEmpty:
		t := m.To_InputMessagesFilterEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterPhotos:
		t := m.To_InputMessagesFilterPhotos()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterVideo:
		t := m.To_InputMessagesFilterVideo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterPhotoVideo:
		t := m.To_InputMessagesFilterPhotoVideo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterDocument:
		t := m.To_InputMessagesFilterDocument()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterUrl:
		t := m.To_InputMessagesFilterUrl()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterGif:
		t := m.To_InputMessagesFilterGif()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterVoice:
		t := m.To_InputMessagesFilterVoice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterMusic:
		t := m.To_InputMessagesFilterMusic()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterChatPhotos:
		t := m.To_InputMessagesFilterChatPhotos()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterPhoneCalls:
		t := m.To_InputMessagesFilterPhoneCalls()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterRoundVoice:
		t := m.To_InputMessagesFilterRoundVoice()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterRoundVideo:
		t := m.To_InputMessagesFilterRoundVideo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterMyMentions:
		t := m.To_InputMessagesFilterMyMentions()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterGeo:
		t := m.To_InputMessagesFilterGeo()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputMessagesFilterContacts:
		t := m.To_InputMessagesFilterContacts()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *MessagesFilter) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputMessagesFilterEmpty:
		m2 := &TLInputMessagesFilterEmpty{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterPhotos:
		m2 := &TLInputMessagesFilterPhotos{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterVideo:
		m2 := &TLInputMessagesFilterVideo{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterPhotoVideo:
		m2 := &TLInputMessagesFilterPhotoVideo{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterDocument:
		m2 := &TLInputMessagesFilterDocument{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterUrl:
		m2 := &TLInputMessagesFilterUrl{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterGif:
		m2 := &TLInputMessagesFilterGif{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterVoice:
		m2 := &TLInputMessagesFilterVoice{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterMusic:
		m2 := &TLInputMessagesFilterMusic{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterChatPhotos:
		m2 := &TLInputMessagesFilterChatPhotos{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterPhoneCalls:
		m2 := &TLInputMessagesFilterPhoneCalls{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterRoundVoice:
		m2 := &TLInputMessagesFilterRoundVoice{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterRoundVideo:
		m2 := &TLInputMessagesFilterRoundVideo{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterMyMentions:
		m2 := &TLInputMessagesFilterMyMentions{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterGeo:
		m2 := &TLInputMessagesFilterGeo{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputMessagesFilterContacts:
		m2 := &TLInputMessagesFilterContacts{Data2: &MessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputMessagesFilterEmpty#57e2f66c = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterEmpty() *TLInputMessagesFilterEmpty {
	return &TLInputMessagesFilterEmpty{
		Data2: m.Data2,
	}
}

// inputMessagesFilterPhotos#9609a51c = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhotos() *TLInputMessagesFilterPhotos {
	return &TLInputMessagesFilterPhotos{
		Data2: m.Data2,
	}
}

// inputMessagesFilterVideo#9fc00e65 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterVideo() *TLInputMessagesFilterVideo {
	return &TLInputMessagesFilterVideo{
		Data2: m.Data2,
	}
}

// inputMessagesFilterPhotoVideo#56e9f0e4 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhotoVideo() *TLInputMessagesFilterPhotoVideo {
	return &TLInputMessagesFilterPhotoVideo{
		Data2: m.Data2,
	}
}

// inputMessagesFilterDocument#9eddf188 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterDocument() *TLInputMessagesFilterDocument {
	return &TLInputMessagesFilterDocument{
		Data2: m.Data2,
	}
}

// inputMessagesFilterUrl#7ef0dd87 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterUrl() *TLInputMessagesFilterUrl {
	return &TLInputMessagesFilterUrl{
		Data2: m.Data2,
	}
}

// inputMessagesFilterGif#ffc86587 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterGif() *TLInputMessagesFilterGif {
	return &TLInputMessagesFilterGif{
		Data2: m.Data2,
	}
}

// inputMessagesFilterVoice#50f5c392 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterVoice() *TLInputMessagesFilterVoice {
	return &TLInputMessagesFilterVoice{
		Data2: m.Data2,
	}
}

// inputMessagesFilterMusic#3751b49e = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterMusic() *TLInputMessagesFilterMusic {
	return &TLInputMessagesFilterMusic{
		Data2: m.Data2,
	}
}

// inputMessagesFilterChatPhotos#3a20ecb8 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterChatPhotos() *TLInputMessagesFilterChatPhotos {
	return &TLInputMessagesFilterChatPhotos{
		Data2: m.Data2,
	}
}

// inputMessagesFilterPhoneCalls#80c99768 flags:# missed:flags.0?true = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhoneCalls() *TLInputMessagesFilterPhoneCalls {
	return &TLInputMessagesFilterPhoneCalls{
		Data2: m.Data2,
	}
}

// inputMessagesFilterRoundVoice#7a7c17a4 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterRoundVoice() *TLInputMessagesFilterRoundVoice {
	return &TLInputMessagesFilterRoundVoice{
		Data2: m.Data2,
	}
}

// inputMessagesFilterRoundVideo#b549da53 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterRoundVideo() *TLInputMessagesFilterRoundVideo {
	return &TLInputMessagesFilterRoundVideo{
		Data2: m.Data2,
	}
}

// inputMessagesFilterMyMentions#c1f8e69a = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterMyMentions() *TLInputMessagesFilterMyMentions {
	return &TLInputMessagesFilterMyMentions{
		Data2: m.Data2,
	}
}

// inputMessagesFilterGeo#e7026d0d = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterGeo() *TLInputMessagesFilterGeo {
	return &TLInputMessagesFilterGeo{
		Data2: m.Data2,
	}
}

// inputMessagesFilterContacts#e062db83 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterContacts() *TLInputMessagesFilterContacts {
	return &TLInputMessagesFilterContacts{
		Data2: m.Data2,
	}
}

// inputMessagesFilterEmpty#57e2f66c = MessagesFilter;
func (m *TLInputMessagesFilterEmpty) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterEmpty() *TLInputMessagesFilterEmpty {
	return &TLInputMessagesFilterEmpty{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterEmpty))

	return x.buf
}

func (m *TLInputMessagesFilterEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterEmpty))

	return x.buf
}

func (m *TLInputMessagesFilterEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterPhotos#9609a51c = MessagesFilter;
func (m *TLInputMessagesFilterPhotos) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterPhotos,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterPhotos() *TLInputMessagesFilterPhotos {
	return &TLInputMessagesFilterPhotos{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterPhotos) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotos))

	return x.buf
}

func (m *TLInputMessagesFilterPhotos) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotos))

	return x.buf
}

func (m *TLInputMessagesFilterPhotos) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterVideo#9fc00e65 = MessagesFilter;
func (m *TLInputMessagesFilterVideo) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterVideo,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterVideo() *TLInputMessagesFilterVideo {
	return &TLInputMessagesFilterVideo{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterVideo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterVideo))

	return x.buf
}

func (m *TLInputMessagesFilterVideo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterVideo))

	return x.buf
}

func (m *TLInputMessagesFilterVideo) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterPhotoVideo#56e9f0e4 = MessagesFilter;
func (m *TLInputMessagesFilterPhotoVideo) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterPhotoVideo,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterPhotoVideo() *TLInputMessagesFilterPhotoVideo {
	return &TLInputMessagesFilterPhotoVideo{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterPhotoVideo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideo))

	return x.buf
}

func (m *TLInputMessagesFilterPhotoVideo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideo))

	return x.buf
}

func (m *TLInputMessagesFilterPhotoVideo) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterDocument#9eddf188 = MessagesFilter;
func (m *TLInputMessagesFilterDocument) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterDocument,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterDocument() *TLInputMessagesFilterDocument {
	return &TLInputMessagesFilterDocument{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterDocument))

	return x.buf
}

func (m *TLInputMessagesFilterDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterDocument))

	return x.buf
}

func (m *TLInputMessagesFilterDocument) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterUrl#7ef0dd87 = MessagesFilter;
func (m *TLInputMessagesFilterUrl) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterUrl,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterUrl() *TLInputMessagesFilterUrl {
	return &TLInputMessagesFilterUrl{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterUrl) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterUrl))

	return x.buf
}

func (m *TLInputMessagesFilterUrl) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterUrl))

	return x.buf
}

func (m *TLInputMessagesFilterUrl) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterGif#ffc86587 = MessagesFilter;
func (m *TLInputMessagesFilterGif) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterGif,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterGif() *TLInputMessagesFilterGif {
	return &TLInputMessagesFilterGif{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterGif) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterGif))

	return x.buf
}

func (m *TLInputMessagesFilterGif) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterGif))

	return x.buf
}

func (m *TLInputMessagesFilterGif) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterVoice#50f5c392 = MessagesFilter;
func (m *TLInputMessagesFilterVoice) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterVoice,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterVoice() *TLInputMessagesFilterVoice {
	return &TLInputMessagesFilterVoice{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterVoice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterVoice))

	return x.buf
}

func (m *TLInputMessagesFilterVoice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterVoice))

	return x.buf
}

func (m *TLInputMessagesFilterVoice) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterMusic#3751b49e = MessagesFilter;
func (m *TLInputMessagesFilterMusic) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterMusic,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterMusic() *TLInputMessagesFilterMusic {
	return &TLInputMessagesFilterMusic{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterMusic) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterMusic))

	return x.buf
}

func (m *TLInputMessagesFilterMusic) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterMusic))

	return x.buf
}

func (m *TLInputMessagesFilterMusic) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterChatPhotos#3a20ecb8 = MessagesFilter;
func (m *TLInputMessagesFilterChatPhotos) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterChatPhotos,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterChatPhotos() *TLInputMessagesFilterChatPhotos {
	return &TLInputMessagesFilterChatPhotos{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterChatPhotos) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterChatPhotos))

	return x.buf
}

func (m *TLInputMessagesFilterChatPhotos) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterChatPhotos))

	return x.buf
}

func (m *TLInputMessagesFilterChatPhotos) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterPhoneCalls#80c99768 flags:# missed:flags.0?true = MessagesFilter;
func (m *TLInputMessagesFilterPhoneCalls) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterPhoneCalls,
		Data2:       m.Data2,
	}
}

func (m *TLInputMessagesFilterPhoneCalls) SetMissed(v bool) { m.Data2.Missed = v }
func (m *TLInputMessagesFilterPhoneCalls) GetMissed() bool  { return m.Data2.Missed }

func NewTLInputMessagesFilterPhoneCalls() *TLInputMessagesFilterPhoneCalls {
	return &TLInputMessagesFilterPhoneCalls{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterPhoneCalls) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhoneCalls))

	// flags
	var flags uint32 = 0
	if m.GetMissed() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLInputMessagesFilterPhoneCalls) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhoneCalls))

	// flags
	var flags uint32 = 0
	if m.GetMissed() == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLInputMessagesFilterPhoneCalls) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetMissed(true)
	}

	return dbuf.err
}

// inputMessagesFilterRoundVoice#7a7c17a4 = MessagesFilter;
func (m *TLInputMessagesFilterRoundVoice) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterRoundVoice,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterRoundVoice() *TLInputMessagesFilterRoundVoice {
	return &TLInputMessagesFilterRoundVoice{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterRoundVoice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterRoundVoice))

	return x.buf
}

func (m *TLInputMessagesFilterRoundVoice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterRoundVoice))

	return x.buf
}

func (m *TLInputMessagesFilterRoundVoice) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterRoundVideo#b549da53 = MessagesFilter;
func (m *TLInputMessagesFilterRoundVideo) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterRoundVideo,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterRoundVideo() *TLInputMessagesFilterRoundVideo {
	return &TLInputMessagesFilterRoundVideo{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterRoundVideo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterRoundVideo))

	return x.buf
}

func (m *TLInputMessagesFilterRoundVideo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterRoundVideo))

	return x.buf
}

func (m *TLInputMessagesFilterRoundVideo) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterMyMentions#c1f8e69a = MessagesFilter;
func (m *TLInputMessagesFilterMyMentions) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterMyMentions,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterMyMentions() *TLInputMessagesFilterMyMentions {
	return &TLInputMessagesFilterMyMentions{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterMyMentions) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterMyMentions))

	return x.buf
}

func (m *TLInputMessagesFilterMyMentions) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterMyMentions))

	return x.buf
}

func (m *TLInputMessagesFilterMyMentions) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterGeo#e7026d0d = MessagesFilter;
func (m *TLInputMessagesFilterGeo) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterGeo,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterGeo() *TLInputMessagesFilterGeo {
	return &TLInputMessagesFilterGeo{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterGeo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterGeo))

	return x.buf
}

func (m *TLInputMessagesFilterGeo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterGeo))

	return x.buf
}

func (m *TLInputMessagesFilterGeo) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputMessagesFilterContacts#e062db83 = MessagesFilter;
func (m *TLInputMessagesFilterContacts) To_MessagesFilter() *MessagesFilter {
	return &MessagesFilter{
		Constructor: TLConstructor_CRC32_inputMessagesFilterContacts,
		Data2:       m.Data2,
	}
}

func NewTLInputMessagesFilterContacts() *TLInputMessagesFilterContacts {
	return &TLInputMessagesFilterContacts{Data2: &MessagesFilter_Data{}}
}

func (m *TLInputMessagesFilterContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterContacts))

	return x.buf
}

func (m *TLInputMessagesFilterContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputMessagesFilterContacts))

	return x.buf
}

func (m *TLInputMessagesFilterContacts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ContactLink <--
//  + TL_ContactLinkUnknown
//  + TL_ContactLinkNone
//  + TL_ContactLinkHasPhone
//  + TL_ContactLinkContact
//

func (m *ContactLink) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_contactLinkUnknown:
		t := m.To_ContactLinkUnknown()
		return t.Encode()
	case TLConstructor_CRC32_contactLinkNone:
		t := m.To_ContactLinkNone()
		return t.Encode()
	case TLConstructor_CRC32_contactLinkHasPhone:
		t := m.To_ContactLinkHasPhone()
		return t.Encode()
	case TLConstructor_CRC32_contactLinkContact:
		t := m.To_ContactLinkContact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ContactLink) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_contactLinkUnknown:
		t := m.To_ContactLinkUnknown()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contactLinkNone:
		t := m.To_ContactLinkNone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contactLinkHasPhone:
		t := m.To_ContactLinkHasPhone()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_contactLinkContact:
		t := m.To_ContactLinkContact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ContactLink) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_contactLinkUnknown:
		m2 := &TLContactLinkUnknown{Data2: &ContactLink_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contactLinkNone:
		m2 := &TLContactLinkNone{Data2: &ContactLink_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contactLinkHasPhone:
		m2 := &TLContactLinkHasPhone{Data2: &ContactLink_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_contactLinkContact:
		m2 := &TLContactLinkContact{Data2: &ContactLink_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// contactLinkUnknown#5f4f9247 = ContactLink;
func (m *ContactLink) To_ContactLinkUnknown() *TLContactLinkUnknown {
	return &TLContactLinkUnknown{
		Data2: m.Data2,
	}
}

// contactLinkNone#feedd3ad = ContactLink;
func (m *ContactLink) To_ContactLinkNone() *TLContactLinkNone {
	return &TLContactLinkNone{
		Data2: m.Data2,
	}
}

// contactLinkHasPhone#268f3f59 = ContactLink;
func (m *ContactLink) To_ContactLinkHasPhone() *TLContactLinkHasPhone {
	return &TLContactLinkHasPhone{
		Data2: m.Data2,
	}
}

// contactLinkContact#d502c2d0 = ContactLink;
func (m *ContactLink) To_ContactLinkContact() *TLContactLinkContact {
	return &TLContactLinkContact{
		Data2: m.Data2,
	}
}

// contactLinkUnknown#5f4f9247 = ContactLink;
func (m *TLContactLinkUnknown) To_ContactLink() *ContactLink {
	return &ContactLink{
		Constructor: TLConstructor_CRC32_contactLinkUnknown,
		Data2:       m.Data2,
	}
}

func NewTLContactLinkUnknown() *TLContactLinkUnknown {
	return &TLContactLinkUnknown{Data2: &ContactLink_Data{}}
}

func (m *TLContactLinkUnknown) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkUnknown))

	return x.buf
}

func (m *TLContactLinkUnknown) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkUnknown))

	return x.buf
}

func (m *TLContactLinkUnknown) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// contactLinkNone#feedd3ad = ContactLink;
func (m *TLContactLinkNone) To_ContactLink() *ContactLink {
	return &ContactLink{
		Constructor: TLConstructor_CRC32_contactLinkNone,
		Data2:       m.Data2,
	}
}

func NewTLContactLinkNone() *TLContactLinkNone {
	return &TLContactLinkNone{Data2: &ContactLink_Data{}}
}

func (m *TLContactLinkNone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkNone))

	return x.buf
}

func (m *TLContactLinkNone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkNone))

	return x.buf
}

func (m *TLContactLinkNone) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// contactLinkHasPhone#268f3f59 = ContactLink;
func (m *TLContactLinkHasPhone) To_ContactLink() *ContactLink {
	return &ContactLink{
		Constructor: TLConstructor_CRC32_contactLinkHasPhone,
		Data2:       m.Data2,
	}
}

func NewTLContactLinkHasPhone() *TLContactLinkHasPhone {
	return &TLContactLinkHasPhone{Data2: &ContactLink_Data{}}
}

func (m *TLContactLinkHasPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkHasPhone))

	return x.buf
}

func (m *TLContactLinkHasPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkHasPhone))

	return x.buf
}

func (m *TLContactLinkHasPhone) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// contactLinkContact#d502c2d0 = ContactLink;
func (m *TLContactLinkContact) To_ContactLink() *ContactLink {
	return &ContactLink{
		Constructor: TLConstructor_CRC32_contactLinkContact,
		Data2:       m.Data2,
	}
}

func NewTLContactLinkContact() *TLContactLinkContact {
	return &TLContactLinkContact{Data2: &ContactLink_Data{}}
}

func (m *TLContactLinkContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkContact))

	return x.buf
}

func (m *TLContactLinkContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contactLinkContact))

	return x.buf
}

func (m *TLContactLinkContact) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputCheckPasswordSRP <--
//  + TL_InputCheckPasswordEmpty
//  + TL_InputCheckPasswordSRP
//

func (m *InputCheckPasswordSRP) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputCheckPasswordEmpty:
		t := m.To_InputCheckPasswordEmpty()
		return t.Encode()
	case TLConstructor_CRC32_inputCheckPasswordSRP:
		t := m.To_InputCheckPasswordSRP()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputCheckPasswordSRP) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputCheckPasswordEmpty:
		t := m.To_InputCheckPasswordEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_inputCheckPasswordSRP:
		t := m.To_InputCheckPasswordSRP()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputCheckPasswordSRP) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputCheckPasswordEmpty:
		m2 := &TLInputCheckPasswordEmpty{Data2: &InputCheckPasswordSRP_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_inputCheckPasswordSRP:
		m2 := &TLInputCheckPasswordSRP{Data2: &InputCheckPasswordSRP_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputCheckPasswordEmpty#9880f658 = InputCheckPasswordSRP;
func (m *InputCheckPasswordSRP) To_InputCheckPasswordEmpty() *TLInputCheckPasswordEmpty {
	return &TLInputCheckPasswordEmpty{
		Data2: m.Data2,
	}
}

// inputCheckPasswordSRP#d27ff082 srp_id:long A:bytes M1:bytes = InputCheckPasswordSRP;
func (m *InputCheckPasswordSRP) To_InputCheckPasswordSRP() *TLInputCheckPasswordSRP {
	return &TLInputCheckPasswordSRP{
		Data2: m.Data2,
	}
}

// inputCheckPasswordEmpty#9880f658 = InputCheckPasswordSRP;
func (m *TLInputCheckPasswordEmpty) To_InputCheckPasswordSRP() *InputCheckPasswordSRP {
	return &InputCheckPasswordSRP{
		Constructor: TLConstructor_CRC32_inputCheckPasswordEmpty,
		Data2:       m.Data2,
	}
}

func NewTLInputCheckPasswordEmpty() *TLInputCheckPasswordEmpty {
	return &TLInputCheckPasswordEmpty{Data2: &InputCheckPasswordSRP_Data{}}
}

func (m *TLInputCheckPasswordEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputCheckPasswordEmpty))

	return x.buf
}

func (m *TLInputCheckPasswordEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputCheckPasswordEmpty))

	return x.buf
}

func (m *TLInputCheckPasswordEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// inputCheckPasswordSRP#d27ff082 srp_id:long A:bytes M1:bytes = InputCheckPasswordSRP;
func (m *TLInputCheckPasswordSRP) To_InputCheckPasswordSRP() *InputCheckPasswordSRP {
	return &InputCheckPasswordSRP{
		Constructor: TLConstructor_CRC32_inputCheckPasswordSRP,
		Data2:       m.Data2,
	}
}

func (m *TLInputCheckPasswordSRP) SetSrpId(v int64) { m.Data2.SrpId = v }
func (m *TLInputCheckPasswordSRP) GetSrpId() int64  { return m.Data2.SrpId }

func (m *TLInputCheckPasswordSRP) SetA(v []byte) { m.Data2.A = v }
func (m *TLInputCheckPasswordSRP) GetA() []byte  { return m.Data2.A }

func (m *TLInputCheckPasswordSRP) SetM1(v []byte) { m.Data2.M1 = v }
func (m *TLInputCheckPasswordSRP) GetM1() []byte  { return m.Data2.M1 }

func NewTLInputCheckPasswordSRP() *TLInputCheckPasswordSRP {
	return &TLInputCheckPasswordSRP{Data2: &InputCheckPasswordSRP_Data{}}
}

func (m *TLInputCheckPasswordSRP) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputCheckPasswordSRP))

	x.Long(m.GetSrpId())
	x.StringBytes(m.GetA())
	x.StringBytes(m.GetM1())

	return x.buf
}

func (m *TLInputCheckPasswordSRP) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputCheckPasswordSRP))

	x.Long(m.GetSrpId())
	x.StringBytes(m.GetA())
	x.StringBytes(m.GetM1())

	return x.buf
}

func (m *TLInputCheckPasswordSRP) Decode(dbuf *DecodeBuf) error {
	m.SetSrpId(dbuf.Long())
	m.SetA(dbuf.StringBytes())
	m.SetM1(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Null <--
//  + TL_Null
//

func (m *Null) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_null:
		t := m.To_Null()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Null) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_null:
		t := m.To_Null()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Null) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_null:
		m2 := &TLNull{Data2: &Null_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// null#56730bcc = Null;
func (m *Null) To_Null() *TLNull {
	return &TLNull{
		Data2: m.Data2,
	}
}

// null#56730bcc = Null;
func (m *TLNull) To_Null() *Null {
	return &Null{
		Constructor: TLConstructor_CRC32_null,
		Data2:       m.Data2,
	}
}

func NewTLNull() *TLNull {
	return &TLNull{Data2: &Null_Data{}}
}

func (m *TLNull) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_null))

	return x.buf
}

func (m *TLNull) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_null))

	return x.buf
}

func (m *TLNull) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// NearestDc <--
//  + TL_NearestDc
//

func (m *NearestDc) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_nearestDc:
		t := m.To_NearestDc()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *NearestDc) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_nearestDc:
		t := m.To_NearestDc()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *NearestDc) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_nearestDc:
		m2 := &TLNearestDc{Data2: &NearestDc_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// nearestDc#8e1a1775 country:string this_dc:int nearest_dc:int = NearestDc;
func (m *NearestDc) To_NearestDc() *TLNearestDc {
	return &TLNearestDc{
		Data2: m.Data2,
	}
}

// nearestDc#8e1a1775 country:string this_dc:int nearest_dc:int = NearestDc;
func (m *TLNearestDc) To_NearestDc() *NearestDc {
	return &NearestDc{
		Constructor: TLConstructor_CRC32_nearestDc,
		Data2:       m.Data2,
	}
}

func (m *TLNearestDc) SetCountry(v string) { m.Data2.Country = v }
func (m *TLNearestDc) GetCountry() string  { return m.Data2.Country }

func (m *TLNearestDc) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLNearestDc) GetThisDc() int32  { return m.Data2.ThisDc }

func (m *TLNearestDc) SetNearestDc(v int32) { m.Data2.NearestDc = v }
func (m *TLNearestDc) GetNearestDc() int32  { return m.Data2.NearestDc }

func NewTLNearestDc() *TLNearestDc {
	return &TLNearestDc{Data2: &NearestDc_Data{}}
}

func (m *TLNearestDc) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_nearestDc))

	x.String(m.GetCountry())
	x.Int(m.GetThisDc())
	x.Int(m.GetNearestDc())

	return x.buf
}

func (m *TLNearestDc) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_nearestDc))

	x.String(m.GetCountry())
	x.Int(m.GetThisDc())
	x.Int(m.GetNearestDc())

	return x.buf
}

func (m *TLNearestDc) Decode(dbuf *DecodeBuf) error {
	m.SetCountry(dbuf.String())
	m.SetThisDc(dbuf.Int())
	m.SetNearestDc(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// StickerPack <--
//  + TL_StickerPack
//

func (m *StickerPack) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_stickerPack:
		t := m.To_StickerPack()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *StickerPack) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_stickerPack:
		t := m.To_StickerPack()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *StickerPack) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_stickerPack:
		m2 := &TLStickerPack{Data2: &StickerPack_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// stickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack;
func (m *StickerPack) To_StickerPack() *TLStickerPack {
	return &TLStickerPack{
		Data2: m.Data2,
	}
}

// stickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack;
func (m *TLStickerPack) To_StickerPack() *StickerPack {
	return &StickerPack{
		Constructor: TLConstructor_CRC32_stickerPack,
		Data2:       m.Data2,
	}
}

func (m *TLStickerPack) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLStickerPack) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLStickerPack) SetDocuments(v []int64) { m.Data2.Documents = v }
func (m *TLStickerPack) GetDocuments() []int64  { return m.Data2.Documents }

func NewTLStickerPack() *TLStickerPack {
	return &TLStickerPack{Data2: &StickerPack_Data{}}
}

func (m *TLStickerPack) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerPack))

	x.String(m.GetEmoticon())
	x.VectorLong(m.GetDocuments())

	return x.buf
}

func (m *TLStickerPack) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickerPack))

	x.String(m.GetEmoticon())
	x.VectorLong(m.GetDocuments())

	return x.buf
}

func (m *TLStickerPack) Decode(dbuf *DecodeBuf) error {
	m.SetEmoticon(dbuf.String())
	m.SetDocuments(dbuf.VectorLong())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputEncryptedChat <--
//  + TL_InputEncryptedChat
//

func (m *InputEncryptedChat) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputEncryptedChat:
		t := m.To_InputEncryptedChat()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputEncryptedChat) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputEncryptedChat:
		t := m.To_InputEncryptedChat()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputEncryptedChat) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputEncryptedChat:
		m2 := &TLInputEncryptedChat{Data2: &InputEncryptedChat_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputEncryptedChat#f141b5e1 chat_id:int access_hash:long = InputEncryptedChat;
func (m *InputEncryptedChat) To_InputEncryptedChat() *TLInputEncryptedChat {
	return &TLInputEncryptedChat{
		Data2: m.Data2,
	}
}

// inputEncryptedChat#f141b5e1 chat_id:int access_hash:long = InputEncryptedChat;
func (m *TLInputEncryptedChat) To_InputEncryptedChat() *InputEncryptedChat {
	return &InputEncryptedChat{
		Constructor: TLConstructor_CRC32_inputEncryptedChat,
		Data2:       m.Data2,
	}
}

func (m *TLInputEncryptedChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLInputEncryptedChat) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLInputEncryptedChat) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedChat) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputEncryptedChat() *TLInputEncryptedChat {
	return &TLInputEncryptedChat{Data2: &InputEncryptedChat_Data{}}
}

func (m *TLInputEncryptedChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedChat))

	x.Int(m.GetChatId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputEncryptedChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputEncryptedChat))

	x.Int(m.GetChatId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputEncryptedChat) Decode(dbuf *DecodeBuf) error {
	m.SetChatId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// TopPeerCategory <--
//  + TL_TopPeerCategoryBotsPM
//  + TL_TopPeerCategoryBotsInline
//  + TL_TopPeerCategoryCorrespondents
//  + TL_TopPeerCategoryGroups
//  + TL_TopPeerCategoryChannels
//  + TL_TopPeerCategoryPhoneCalls
//

func (m *TopPeerCategory) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_topPeerCategoryBotsPM:
		t := m.To_TopPeerCategoryBotsPM()
		return t.Encode()
	case TLConstructor_CRC32_topPeerCategoryBotsInline:
		t := m.To_TopPeerCategoryBotsInline()
		return t.Encode()
	case TLConstructor_CRC32_topPeerCategoryCorrespondents:
		t := m.To_TopPeerCategoryCorrespondents()
		return t.Encode()
	case TLConstructor_CRC32_topPeerCategoryGroups:
		t := m.To_TopPeerCategoryGroups()
		return t.Encode()
	case TLConstructor_CRC32_topPeerCategoryChannels:
		t := m.To_TopPeerCategoryChannels()
		return t.Encode()
	case TLConstructor_CRC32_topPeerCategoryPhoneCalls:
		t := m.To_TopPeerCategoryPhoneCalls()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *TopPeerCategory) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_topPeerCategoryBotsPM:
		t := m.To_TopPeerCategoryBotsPM()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_topPeerCategoryBotsInline:
		t := m.To_TopPeerCategoryBotsInline()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_topPeerCategoryCorrespondents:
		t := m.To_TopPeerCategoryCorrespondents()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_topPeerCategoryGroups:
		t := m.To_TopPeerCategoryGroups()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_topPeerCategoryChannels:
		t := m.To_TopPeerCategoryChannels()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_topPeerCategoryPhoneCalls:
		t := m.To_TopPeerCategoryPhoneCalls()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *TopPeerCategory) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_topPeerCategoryBotsPM:
		m2 := &TLTopPeerCategoryBotsPM{Data2: &TopPeerCategory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_topPeerCategoryBotsInline:
		m2 := &TLTopPeerCategoryBotsInline{Data2: &TopPeerCategory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_topPeerCategoryCorrespondents:
		m2 := &TLTopPeerCategoryCorrespondents{Data2: &TopPeerCategory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_topPeerCategoryGroups:
		m2 := &TLTopPeerCategoryGroups{Data2: &TopPeerCategory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_topPeerCategoryChannels:
		m2 := &TLTopPeerCategoryChannels{Data2: &TopPeerCategory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_topPeerCategoryPhoneCalls:
		m2 := &TLTopPeerCategoryPhoneCalls{Data2: &TopPeerCategory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// topPeerCategoryBotsPM#ab661b5b = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryBotsPM() *TLTopPeerCategoryBotsPM {
	return &TLTopPeerCategoryBotsPM{
		Data2: m.Data2,
	}
}

// topPeerCategoryBotsInline#148677e2 = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryBotsInline() *TLTopPeerCategoryBotsInline {
	return &TLTopPeerCategoryBotsInline{
		Data2: m.Data2,
	}
}

// topPeerCategoryCorrespondents#637b7ed = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryCorrespondents() *TLTopPeerCategoryCorrespondents {
	return &TLTopPeerCategoryCorrespondents{
		Data2: m.Data2,
	}
}

// topPeerCategoryGroups#bd17a14a = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryGroups() *TLTopPeerCategoryGroups {
	return &TLTopPeerCategoryGroups{
		Data2: m.Data2,
	}
}

// topPeerCategoryChannels#161d9628 = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryChannels() *TLTopPeerCategoryChannels {
	return &TLTopPeerCategoryChannels{
		Data2: m.Data2,
	}
}

// topPeerCategoryPhoneCalls#1e76a78c = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryPhoneCalls() *TLTopPeerCategoryPhoneCalls {
	return &TLTopPeerCategoryPhoneCalls{
		Data2: m.Data2,
	}
}

// topPeerCategoryBotsPM#ab661b5b = TopPeerCategory;
func (m *TLTopPeerCategoryBotsPM) To_TopPeerCategory() *TopPeerCategory {
	return &TopPeerCategory{
		Constructor: TLConstructor_CRC32_topPeerCategoryBotsPM,
		Data2:       m.Data2,
	}
}

func NewTLTopPeerCategoryBotsPM() *TLTopPeerCategoryBotsPM {
	return &TLTopPeerCategoryBotsPM{Data2: &TopPeerCategory_Data{}}
}

func (m *TLTopPeerCategoryBotsPM) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryBotsPM))

	return x.buf
}

func (m *TLTopPeerCategoryBotsPM) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryBotsPM))

	return x.buf
}

func (m *TLTopPeerCategoryBotsPM) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// topPeerCategoryBotsInline#148677e2 = TopPeerCategory;
func (m *TLTopPeerCategoryBotsInline) To_TopPeerCategory() *TopPeerCategory {
	return &TopPeerCategory{
		Constructor: TLConstructor_CRC32_topPeerCategoryBotsInline,
		Data2:       m.Data2,
	}
}

func NewTLTopPeerCategoryBotsInline() *TLTopPeerCategoryBotsInline {
	return &TLTopPeerCategoryBotsInline{Data2: &TopPeerCategory_Data{}}
}

func (m *TLTopPeerCategoryBotsInline) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryBotsInline))

	return x.buf
}

func (m *TLTopPeerCategoryBotsInline) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryBotsInline))

	return x.buf
}

func (m *TLTopPeerCategoryBotsInline) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// topPeerCategoryCorrespondents#637b7ed = TopPeerCategory;
func (m *TLTopPeerCategoryCorrespondents) To_TopPeerCategory() *TopPeerCategory {
	return &TopPeerCategory{
		Constructor: TLConstructor_CRC32_topPeerCategoryCorrespondents,
		Data2:       m.Data2,
	}
}

func NewTLTopPeerCategoryCorrespondents() *TLTopPeerCategoryCorrespondents {
	return &TLTopPeerCategoryCorrespondents{Data2: &TopPeerCategory_Data{}}
}

func (m *TLTopPeerCategoryCorrespondents) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryCorrespondents))

	return x.buf
}

func (m *TLTopPeerCategoryCorrespondents) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryCorrespondents))

	return x.buf
}

func (m *TLTopPeerCategoryCorrespondents) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// topPeerCategoryGroups#bd17a14a = TopPeerCategory;
func (m *TLTopPeerCategoryGroups) To_TopPeerCategory() *TopPeerCategory {
	return &TopPeerCategory{
		Constructor: TLConstructor_CRC32_topPeerCategoryGroups,
		Data2:       m.Data2,
	}
}

func NewTLTopPeerCategoryGroups() *TLTopPeerCategoryGroups {
	return &TLTopPeerCategoryGroups{Data2: &TopPeerCategory_Data{}}
}

func (m *TLTopPeerCategoryGroups) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryGroups))

	return x.buf
}

func (m *TLTopPeerCategoryGroups) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryGroups))

	return x.buf
}

func (m *TLTopPeerCategoryGroups) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// topPeerCategoryChannels#161d9628 = TopPeerCategory;
func (m *TLTopPeerCategoryChannels) To_TopPeerCategory() *TopPeerCategory {
	return &TopPeerCategory{
		Constructor: TLConstructor_CRC32_topPeerCategoryChannels,
		Data2:       m.Data2,
	}
}

func NewTLTopPeerCategoryChannels() *TLTopPeerCategoryChannels {
	return &TLTopPeerCategoryChannels{Data2: &TopPeerCategory_Data{}}
}

func (m *TLTopPeerCategoryChannels) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryChannels))

	return x.buf
}

func (m *TLTopPeerCategoryChannels) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryChannels))

	return x.buf
}

func (m *TLTopPeerCategoryChannels) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// topPeerCategoryPhoneCalls#1e76a78c = TopPeerCategory;
func (m *TLTopPeerCategoryPhoneCalls) To_TopPeerCategory() *TopPeerCategory {
	return &TopPeerCategory{
		Constructor: TLConstructor_CRC32_topPeerCategoryPhoneCalls,
		Data2:       m.Data2,
	}
}

func NewTLTopPeerCategoryPhoneCalls() *TLTopPeerCategoryPhoneCalls {
	return &TLTopPeerCategoryPhoneCalls{Data2: &TopPeerCategory_Data{}}
}

func (m *TLTopPeerCategoryPhoneCalls) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryPhoneCalls))

	return x.buf
}

func (m *TLTopPeerCategoryPhoneCalls) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_topPeerCategoryPhoneCalls))

	return x.buf
}

func (m *TLTopPeerCategoryPhoneCalls) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FeaturedStickers <--
//  + TL_MessagesFeaturedStickersNotModified
//  + TL_MessagesFeaturedStickers
//

func (m *Messages_FeaturedStickers) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_featuredStickersNotModified:
		t := m.To_MessagesFeaturedStickersNotModified()
		return t.Encode()
	case TLConstructor_CRC32_messages_featuredStickers:
		t := m.To_MessagesFeaturedStickers()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FeaturedStickers) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_featuredStickersNotModified:
		t := m.To_MessagesFeaturedStickersNotModified()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_messages_featuredStickers:
		t := m.To_MessagesFeaturedStickers()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_FeaturedStickers) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_featuredStickersNotModified:
		m2 := &TLMessagesFeaturedStickersNotModified{Data2: &Messages_FeaturedStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_messages_featuredStickers:
		m2 := &TLMessagesFeaturedStickers{Data2: &Messages_FeaturedStickers_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.featuredStickersNotModified#4ede3cf = messages.FeaturedStickers;
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickersNotModified() *TLMessagesFeaturedStickersNotModified {
	return &TLMessagesFeaturedStickersNotModified{
		Data2: m.Data2,
	}
}

// messages.featuredStickers#f89d88e5 hash:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickers() *TLMessagesFeaturedStickers {
	return &TLMessagesFeaturedStickers{
		Data2: m.Data2,
	}
}

// messages.featuredStickersNotModified#4ede3cf = messages.FeaturedStickers;
func (m *TLMessagesFeaturedStickersNotModified) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
	return &Messages_FeaturedStickers{
		Constructor: TLConstructor_CRC32_messages_featuredStickersNotModified,
		Data2:       m.Data2,
	}
}

func NewTLMessagesFeaturedStickersNotModified() *TLMessagesFeaturedStickersNotModified {
	return &TLMessagesFeaturedStickersNotModified{Data2: &Messages_FeaturedStickers_Data{}}
}

func (m *TLMessagesFeaturedStickersNotModified) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_featuredStickersNotModified))

	return x.buf
}

func (m *TLMessagesFeaturedStickersNotModified) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_featuredStickersNotModified))

	return x.buf
}

func (m *TLMessagesFeaturedStickersNotModified) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// messages.featuredStickers#f89d88e5 hash:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;
func (m *TLMessagesFeaturedStickers) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
	return &Messages_FeaturedStickers{
		Constructor: TLConstructor_CRC32_messages_featuredStickers,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesFeaturedStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFeaturedStickers) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesFeaturedStickers) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFeaturedStickers) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func (m *TLMessagesFeaturedStickers) SetUnread(v []int64) { m.Data2.Unread = v }
func (m *TLMessagesFeaturedStickers) GetUnread() []int64  { return m.Data2.Unread }

func NewTLMessagesFeaturedStickers() *TLMessagesFeaturedStickers {
	return &TLMessagesFeaturedStickers{Data2: &Messages_FeaturedStickers_Data{}}
}

func (m *TLMessagesFeaturedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_featuredStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.VectorLong(m.GetUnread())

	return x.buf
}

func (m *TLMessagesFeaturedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_featuredStickers))

	x.Int(m.GetHash())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetSets())))
	for _, v := range m.GetSets() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.VectorLong(m.GetUnread())

	return x.buf
}

func (m *TLMessagesFeaturedStickers) Decode(dbuf *DecodeBuf) error {
	m.SetHash(dbuf.Int())
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	v2 := make([]*StickerSetCovered, l2)
	for i := int32(0); i < l2; i++ {
		v2[i] = &StickerSetCovered{}
		v2[i].Decode(dbuf)
	}
	m.SetSets(v2)

	m.SetUnread(dbuf.VectorLong())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SchemeType <--
//  + TL_SchemeType
//

func (m *SchemeType) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_schemeType:
		t := m.To_SchemeType()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SchemeType) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_schemeType:
		t := m.To_SchemeType()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SchemeType) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_schemeType:
		m2 := &TLSchemeType{Data2: &SchemeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// schemeType#a8e1e989 id:int predicate:string params:Vector<SchemeParam> type:string = SchemeType;
func (m *SchemeType) To_SchemeType() *TLSchemeType {
	return &TLSchemeType{
		Data2: m.Data2,
	}
}

// schemeType#a8e1e989 id:int predicate:string params:Vector<SchemeParam> type:string = SchemeType;
func (m *TLSchemeType) To_SchemeType() *SchemeType {
	return &SchemeType{
		Constructor: TLConstructor_CRC32_schemeType,
		Data2:       m.Data2,
	}
}

func (m *TLSchemeType) SetId(v int32) { m.Data2.Id = v }
func (m *TLSchemeType) GetId() int32  { return m.Data2.Id }

func (m *TLSchemeType) SetPredicate(v string) { m.Data2.Predicate = v }
func (m *TLSchemeType) GetPredicate() string  { return m.Data2.Predicate }

func (m *TLSchemeType) SetParams(v []*SchemeParam) { m.Data2.Params = v }
func (m *TLSchemeType) GetParams() []*SchemeParam  { return m.Data2.Params }

func (m *TLSchemeType) SetType(v string) { m.Data2.Type = v }
func (m *TLSchemeType) GetType() string  { return m.Data2.Type }

func NewTLSchemeType() *TLSchemeType {
	return &TLSchemeType{Data2: &SchemeType_Data{}}
}

func (m *TLSchemeType) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeType))

	x.Int(m.GetId())
	x.String(m.GetPredicate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParams())))
	for _, v := range m.GetParams() {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.String(m.GetType())

	return x.buf
}

func (m *TLSchemeType) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_schemeType))

	x.Int(m.GetId())
	x.String(m.GetPredicate())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetParams())))
	for _, v := range m.GetParams() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.String(m.GetType())

	return x.buf
}

func (m *TLSchemeType) Decode(dbuf *DecodeBuf) error {
	m.SetId(dbuf.Int())
	m.SetPredicate(dbuf.String())
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*SchemeParam, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &SchemeParam{}
		v3[i].Decode(dbuf)
	}
	m.SetParams(v3)

	m.SetType(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// CdnPublicKey <--
//  + TL_CdnPublicKey
//

func (m *CdnPublicKey) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_cdnPublicKey:
		t := m.To_CdnPublicKey()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *CdnPublicKey) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_cdnPublicKey:
		t := m.To_CdnPublicKey()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *CdnPublicKey) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_cdnPublicKey:
		m2 := &TLCdnPublicKey{Data2: &CdnPublicKey_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// cdnPublicKey#c982eaba dc_id:int public_key:string = CdnPublicKey;
func (m *CdnPublicKey) To_CdnPublicKey() *TLCdnPublicKey {
	return &TLCdnPublicKey{
		Data2: m.Data2,
	}
}

// cdnPublicKey#c982eaba dc_id:int public_key:string = CdnPublicKey;
func (m *TLCdnPublicKey) To_CdnPublicKey() *CdnPublicKey {
	return &CdnPublicKey{
		Constructor: TLConstructor_CRC32_cdnPublicKey,
		Data2:       m.Data2,
	}
}

func (m *TLCdnPublicKey) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLCdnPublicKey) GetDcId() int32  { return m.Data2.DcId }

func (m *TLCdnPublicKey) SetPublicKey(v string) { m.Data2.PublicKey = v }
func (m *TLCdnPublicKey) GetPublicKey() string  { return m.Data2.PublicKey }

func NewTLCdnPublicKey() *TLCdnPublicKey {
	return &TLCdnPublicKey{Data2: &CdnPublicKey_Data{}}
}

func (m *TLCdnPublicKey) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_cdnPublicKey))

	x.Int(m.GetDcId())
	x.String(m.GetPublicKey())

	return x.buf
}

func (m *TLCdnPublicKey) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_cdnPublicKey))

	x.Int(m.GetDcId())
	x.String(m.GetPublicKey())

	return x.buf
}

func (m *TLCdnPublicKey) Decode(dbuf *DecodeBuf) error {
	m.SetDcId(dbuf.Int())
	m.SetPublicKey(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SavedContact <--
//  + TL_SavedPhoneContact
//

func (m *SavedContact) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_savedPhoneContact:
		t := m.To_SavedPhoneContact()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SavedContact) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_savedPhoneContact:
		t := m.To_SavedPhoneContact()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SavedContact) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_savedPhoneContact:
		m2 := &TLSavedPhoneContact{Data2: &SavedContact_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// savedPhoneContact#1142bd56 phone:string first_name:string last_name:string date:int = SavedContact;
func (m *SavedContact) To_SavedPhoneContact() *TLSavedPhoneContact {
	return &TLSavedPhoneContact{
		Data2: m.Data2,
	}
}

// savedPhoneContact#1142bd56 phone:string first_name:string last_name:string date:int = SavedContact;
func (m *TLSavedPhoneContact) To_SavedContact() *SavedContact {
	return &SavedContact{
		Constructor: TLConstructor_CRC32_savedPhoneContact,
		Data2:       m.Data2,
	}
}

func (m *TLSavedPhoneContact) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLSavedPhoneContact) GetPhone() string  { return m.Data2.Phone }

func (m *TLSavedPhoneContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLSavedPhoneContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLSavedPhoneContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLSavedPhoneContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLSavedPhoneContact) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSavedPhoneContact) GetDate() int32  { return m.Data2.Date }

func NewTLSavedPhoneContact() *TLSavedPhoneContact {
	return &TLSavedPhoneContact{Data2: &SavedContact_Data{}}
}

func (m *TLSavedPhoneContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_savedPhoneContact))

	x.String(m.GetPhone())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLSavedPhoneContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_savedPhoneContact))

	x.String(m.GetPhone())
	x.String(m.GetFirstName())
	x.String(m.GetLastName())
	x.Int(m.GetDate())

	return x.buf
}

func (m *TLSavedPhoneContact) Decode(dbuf *DecodeBuf) error {
	m.SetPhone(dbuf.String())
	m.SetFirstName(dbuf.String())
	m.SetLastName(dbuf.String())
	m.SetDate(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Bool <--
//  + TL_BoolFalse
//  + TL_BoolTrue
//

func (m *Bool) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_boolFalse:
		t := m.To_BoolFalse()
		return t.Encode()
	case TLConstructor_CRC32_boolTrue:
		t := m.To_BoolTrue()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Bool) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_boolFalse:
		t := m.To_BoolFalse()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_boolTrue:
		t := m.To_BoolTrue()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Bool) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_boolFalse:
		m2 := &TLBoolFalse{Data2: &Bool_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_boolTrue:
		m2 := &TLBoolTrue{Data2: &Bool_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// boolFalse#bc799737 = Bool;
func (m *Bool) To_BoolFalse() *TLBoolFalse {
	return &TLBoolFalse{
		Data2: m.Data2,
	}
}

// boolTrue#997275b5 = Bool;
func (m *Bool) To_BoolTrue() *TLBoolTrue {
	return &TLBoolTrue{
		Data2: m.Data2,
	}
}

// boolFalse#bc799737 = Bool;
func (m *TLBoolFalse) To_Bool() *Bool {
	return &Bool{
		Constructor: TLConstructor_CRC32_boolFalse,
		Data2:       m.Data2,
	}
}

func NewTLBoolFalse() *TLBoolFalse {
	return &TLBoolFalse{Data2: &Bool_Data{}}
}

func (m *TLBoolFalse) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_boolFalse))

	return x.buf
}

func (m *TLBoolFalse) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_boolFalse))

	return x.buf
}

func (m *TLBoolFalse) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// boolTrue#997275b5 = Bool;
func (m *TLBoolTrue) To_Bool() *Bool {
	return &Bool{
		Constructor: TLConstructor_CRC32_boolTrue,
		Data2:       m.Data2,
	}
}

func NewTLBoolTrue() *TLBoolTrue {
	return &TLBoolTrue{Data2: &Bool_Data{}}
}

func (m *TLBoolTrue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_boolTrue))

	return x.buf
}

func (m *TLBoolTrue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_boolTrue))

	return x.buf
}

func (m *TLBoolTrue) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedHistory <--
//  + TL_MessagesAffectedHistory
//

func (m *Messages_AffectedHistory) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_affectedHistory:
		t := m.To_MessagesAffectedHistory()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_AffectedHistory) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_affectedHistory:
		t := m.To_MessagesAffectedHistory()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_AffectedHistory) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_affectedHistory:
		m2 := &TLMessagesAffectedHistory{Data2: &Messages_AffectedHistory_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.affectedHistory#b45c69d1 pts:int pts_count:int offset:int = messages.AffectedHistory;
func (m *Messages_AffectedHistory) To_MessagesAffectedHistory() *TLMessagesAffectedHistory {
	return &TLMessagesAffectedHistory{
		Data2: m.Data2,
	}
}

// messages.affectedHistory#b45c69d1 pts:int pts_count:int offset:int = messages.AffectedHistory;
func (m *TLMessagesAffectedHistory) To_Messages_AffectedHistory() *Messages_AffectedHistory {
	return &Messages_AffectedHistory{
		Constructor: TLConstructor_CRC32_messages_affectedHistory,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesAffectedHistory) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedHistory) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesAffectedHistory) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedHistory) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLMessagesAffectedHistory) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessagesAffectedHistory) GetOffset() int32  { return m.Data2.Offset }

func NewTLMessagesAffectedHistory() *TLMessagesAffectedHistory {
	return &TLMessagesAffectedHistory{Data2: &Messages_AffectedHistory_Data{}}
}

func (m *TLMessagesAffectedHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_affectedHistory))

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetOffset())

	return x.buf
}

func (m *TLMessagesAffectedHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_affectedHistory))

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())
	x.Int(m.GetOffset())

	return x.buf
}

func (m *TLMessagesAffectedHistory) Decode(dbuf *DecodeBuf) error {
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())
	m.SetOffset(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputBotInlineMessageID <--
//  + TL_InputBotInlineMessageID
//

func (m *InputBotInlineMessageID) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputBotInlineMessageID:
		t := m.To_InputBotInlineMessageID()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputBotInlineMessageID) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputBotInlineMessageID:
		t := m.To_InputBotInlineMessageID()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputBotInlineMessageID) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputBotInlineMessageID:
		m2 := &TLInputBotInlineMessageID{Data2: &InputBotInlineMessageID_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;
func (m *InputBotInlineMessageID) To_InputBotInlineMessageID() *TLInputBotInlineMessageID {
	return &TLInputBotInlineMessageID{
		Data2: m.Data2,
	}
}

// inputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;
func (m *TLInputBotInlineMessageID) To_InputBotInlineMessageID() *InputBotInlineMessageID {
	return &InputBotInlineMessageID{
		Constructor: TLConstructor_CRC32_inputBotInlineMessageID,
		Data2:       m.Data2,
	}
}

func (m *TLInputBotInlineMessageID) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLInputBotInlineMessageID) GetDcId() int32  { return m.Data2.DcId }

func (m *TLInputBotInlineMessageID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputBotInlineMessageID) GetId() int64  { return m.Data2.Id }

func (m *TLInputBotInlineMessageID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputBotInlineMessageID) GetAccessHash() int64  { return m.Data2.AccessHash }

func NewTLInputBotInlineMessageID() *TLInputBotInlineMessageID {
	return &TLInputBotInlineMessageID{Data2: &InputBotInlineMessageID_Data{}}
}

func (m *TLInputBotInlineMessageID) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageID))

	x.Int(m.GetDcId())
	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputBotInlineMessageID) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageID))

	x.Int(m.GetDcId())
	x.Long(m.GetId())
	x.Long(m.GetAccessHash())

	return x.buf
}

func (m *TLInputBotInlineMessageID) Decode(dbuf *DecodeBuf) error {
	m.SetDcId(dbuf.Int())
	m.SetId(dbuf.Long())
	m.SetAccessHash(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Help_TermsOfServiceUpdate <--
//  + TL_HelpTermsOfServiceUpdateEmpty
//  + TL_HelpTermsOfServiceUpdate
//

func (m *Help_TermsOfServiceUpdate) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_help_termsOfServiceUpdateEmpty:
		t := m.To_HelpTermsOfServiceUpdateEmpty()
		return t.Encode()
	case TLConstructor_CRC32_help_termsOfServiceUpdate:
		t := m.To_HelpTermsOfServiceUpdate()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_TermsOfServiceUpdate) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_help_termsOfServiceUpdateEmpty:
		t := m.To_HelpTermsOfServiceUpdateEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_help_termsOfServiceUpdate:
		t := m.To_HelpTermsOfServiceUpdate()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Help_TermsOfServiceUpdate) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_help_termsOfServiceUpdateEmpty:
		m2 := &TLHelpTermsOfServiceUpdateEmpty{Data2: &Help_TermsOfServiceUpdate_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_help_termsOfServiceUpdate:
		m2 := &TLHelpTermsOfServiceUpdate{Data2: &Help_TermsOfServiceUpdate_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// help.termsOfServiceUpdateEmpty#e3309f7f expires:int = help.TermsOfServiceUpdate;
func (m *Help_TermsOfServiceUpdate) To_HelpTermsOfServiceUpdateEmpty() *TLHelpTermsOfServiceUpdateEmpty {
	return &TLHelpTermsOfServiceUpdateEmpty{
		Data2: m.Data2,
	}
}

// help.termsOfServiceUpdate#28ecf961 expires:int terms_of_service:help.TermsOfService = help.TermsOfServiceUpdate;
func (m *Help_TermsOfServiceUpdate) To_HelpTermsOfServiceUpdate() *TLHelpTermsOfServiceUpdate {
	return &TLHelpTermsOfServiceUpdate{
		Data2: m.Data2,
	}
}

// help.termsOfServiceUpdateEmpty#e3309f7f expires:int = help.TermsOfServiceUpdate;
func (m *TLHelpTermsOfServiceUpdateEmpty) To_Help_TermsOfServiceUpdate() *Help_TermsOfServiceUpdate {
	return &Help_TermsOfServiceUpdate{
		Constructor: TLConstructor_CRC32_help_termsOfServiceUpdateEmpty,
		Data2:       m.Data2,
	}
}

func (m *TLHelpTermsOfServiceUpdateEmpty) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpTermsOfServiceUpdateEmpty) GetExpires() int32  { return m.Data2.Expires }

func NewTLHelpTermsOfServiceUpdateEmpty() *TLHelpTermsOfServiceUpdateEmpty {
	return &TLHelpTermsOfServiceUpdateEmpty{Data2: &Help_TermsOfServiceUpdate_Data{}}
}

func (m *TLHelpTermsOfServiceUpdateEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_termsOfServiceUpdateEmpty))

	x.Int(m.GetExpires())

	return x.buf
}

func (m *TLHelpTermsOfServiceUpdateEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_termsOfServiceUpdateEmpty))

	x.Int(m.GetExpires())

	return x.buf
}

func (m *TLHelpTermsOfServiceUpdateEmpty) Decode(dbuf *DecodeBuf) error {
	m.SetExpires(dbuf.Int())

	return dbuf.err
}

// help.termsOfServiceUpdate#28ecf961 expires:int terms_of_service:help.TermsOfService = help.TermsOfServiceUpdate;
func (m *TLHelpTermsOfServiceUpdate) To_Help_TermsOfServiceUpdate() *Help_TermsOfServiceUpdate {
	return &Help_TermsOfServiceUpdate{
		Constructor: TLConstructor_CRC32_help_termsOfServiceUpdate,
		Data2:       m.Data2,
	}
}

func (m *TLHelpTermsOfServiceUpdate) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpTermsOfServiceUpdate) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpTermsOfServiceUpdate) SetTermsOfService(v *Help_TermsOfService) {
	m.Data2.TermsOfService = v
}
func (m *TLHelpTermsOfServiceUpdate) GetTermsOfService() *Help_TermsOfService {
	return m.Data2.TermsOfService
}

func NewTLHelpTermsOfServiceUpdate() *TLHelpTermsOfServiceUpdate {
	return &TLHelpTermsOfServiceUpdate{Data2: &Help_TermsOfServiceUpdate_Data{}}
}

func (m *TLHelpTermsOfServiceUpdate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_termsOfServiceUpdate))

	x.Int(m.GetExpires())
	x.Bytes(m.GetTermsOfService().Encode())

	return x.buf
}

func (m *TLHelpTermsOfServiceUpdate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_termsOfServiceUpdate))

	x.Int(m.GetExpires())
	x.Bytes(m.GetTermsOfService().EncodeToLayer(layer))

	return x.buf
}

func (m *TLHelpTermsOfServiceUpdate) Decode(dbuf *DecodeBuf) error {
	m.SetExpires(dbuf.Int())
	m2 := &Help_TermsOfService{}
	m2.Decode(dbuf)
	m.SetTermsOfService(m2)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// InputWebDocument <--
//  + TL_InputWebDocument
//

func (m *InputWebDocument) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_inputWebDocument:
		t := m.To_InputWebDocument()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputWebDocument) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_inputWebDocument:
		t := m.To_InputWebDocument()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *InputWebDocument) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_inputWebDocument:
		m2 := &TLInputWebDocument{Data2: &InputWebDocument_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// inputWebDocument#9bed434d url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = InputWebDocument;
func (m *InputWebDocument) To_InputWebDocument() *TLInputWebDocument {
	return &TLInputWebDocument{
		Data2: m.Data2,
	}
}

// inputWebDocument#9bed434d url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = InputWebDocument;
func (m *TLInputWebDocument) To_InputWebDocument() *InputWebDocument {
	return &InputWebDocument{
		Constructor: TLConstructor_CRC32_inputWebDocument,
		Data2:       m.Data2,
	}
}

func (m *TLInputWebDocument) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputWebDocument) GetUrl() string  { return m.Data2.Url }

func (m *TLInputWebDocument) SetSize(v int32) { m.Data2.Size = v }
func (m *TLInputWebDocument) GetSize() int32  { return m.Data2.Size }

func (m *TLInputWebDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputWebDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLInputWebDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputWebDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func NewTLInputWebDocument() *TLInputWebDocument {
	return &TLInputWebDocument{Data2: &InputWebDocument_Data{}}
}

func (m *TLInputWebDocument) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputWebDocument))

	x.String(m.GetUrl())
	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLInputWebDocument) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_inputWebDocument))

	x.String(m.GetUrl())
	x.Int(m.GetSize())
	x.String(m.GetMimeType())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetAttributes())))
	for _, v := range m.GetAttributes() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLInputWebDocument) Decode(dbuf *DecodeBuf) error {
	m.SetUrl(dbuf.String())
	m.SetSize(dbuf.Int())
	m.SetMimeType(dbuf.String())
	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	v4 := make([]*DocumentAttribute, l4)
	for i := int32(0); i < l4; i++ {
		v4[i] = &DocumentAttribute{}
		v4[i].Decode(dbuf)
	}
	m.SetAttributes(v4)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// SecureValueHash <--
//  + TL_SecureValueHash
//

func (m *SecureValueHash) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_secureValueHash:
		t := m.To_SecureValueHash()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValueHash) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_secureValueHash:
		t := m.To_SecureValueHash()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *SecureValueHash) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_secureValueHash:
		m2 := &TLSecureValueHash{Data2: &SecureValueHash_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// secureValueHash#ed1ecdb0 type:SecureValueType hash:bytes = SecureValueHash;
func (m *SecureValueHash) To_SecureValueHash() *TLSecureValueHash {
	return &TLSecureValueHash{
		Data2: m.Data2,
	}
}

// secureValueHash#ed1ecdb0 type:SecureValueType hash:bytes = SecureValueHash;
func (m *TLSecureValueHash) To_SecureValueHash() *SecureValueHash {
	return &SecureValueHash{
		Constructor: TLConstructor_CRC32_secureValueHash,
		Data2:       m.Data2,
	}
}

func (m *TLSecureValueHash) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueHash) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValueHash) GetHash() []byte  { return m.Data2.Hash }

func NewTLSecureValueHash() *TLSecureValueHash {
	return &TLSecureValueHash{Data2: &SecureValueHash_Data{}}
}

func (m *TLSecureValueHash) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueHash))

	x.Bytes(m.GetType().Encode())
	x.StringBytes(m.GetHash())

	return x.buf
}

func (m *TLSecureValueHash) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_secureValueHash))

	x.Bytes(m.GetType().EncodeToLayer(layer))
	x.StringBytes(m.GetHash())

	return x.buf
}

func (m *TLSecureValueHash) Decode(dbuf *DecodeBuf) error {
	m1 := &SecureValueType{}
	m1.Decode(dbuf)
	m.SetType(m1)
	m.SetHash(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedMessages <--
//  + TL_MessagesAffectedMessages
//

func (m *Messages_AffectedMessages) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_messages_affectedMessages:
		t := m.To_MessagesAffectedMessages()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_AffectedMessages) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_messages_affectedMessages:
		t := m.To_MessagesAffectedMessages()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Messages_AffectedMessages) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_messages_affectedMessages:
		m2 := &TLMessagesAffectedMessages{Data2: &Messages_AffectedMessages_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// messages.affectedMessages#84d19185 pts:int pts_count:int = messages.AffectedMessages;
func (m *Messages_AffectedMessages) To_MessagesAffectedMessages() *TLMessagesAffectedMessages {
	return &TLMessagesAffectedMessages{
		Data2: m.Data2,
	}
}

// messages.affectedMessages#84d19185 pts:int pts_count:int = messages.AffectedMessages;
func (m *TLMessagesAffectedMessages) To_Messages_AffectedMessages() *Messages_AffectedMessages {
	return &Messages_AffectedMessages{
		Constructor: TLConstructor_CRC32_messages_affectedMessages,
		Data2:       m.Data2,
	}
}

func (m *TLMessagesAffectedMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesAffectedMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func NewTLMessagesAffectedMessages() *TLMessagesAffectedMessages {
	return &TLMessagesAffectedMessages{Data2: &Messages_AffectedMessages_Data{}}
}

func (m *TLMessagesAffectedMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_affectedMessages))

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLMessagesAffectedMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_affectedMessages))

	x.Int(m.GetPts())
	x.Int(m.GetPtsCount())

	return x.buf
}

func (m *TLMessagesAffectedMessages) Decode(dbuf *DecodeBuf) error {
	m.SetPts(dbuf.Int())
	m.SetPtsCount(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ReplyMarkup <--
//  + TL_ReplyKeyboardHide
//  + TL_ReplyKeyboardForceReply
//  + TL_ReplyKeyboardMarkup
//  + TL_ReplyInlineMarkup
//

func (m *ReplyMarkup) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_replyKeyboardHide:
		t := m.To_ReplyKeyboardHide()
		return t.Encode()
	case TLConstructor_CRC32_replyKeyboardForceReply:
		t := m.To_ReplyKeyboardForceReply()
		return t.Encode()
	case TLConstructor_CRC32_replyKeyboardMarkup:
		t := m.To_ReplyKeyboardMarkup()
		return t.Encode()
	case TLConstructor_CRC32_replyInlineMarkup:
		t := m.To_ReplyInlineMarkup()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ReplyMarkup) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_replyKeyboardHide:
		t := m.To_ReplyKeyboardHide()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_replyKeyboardForceReply:
		t := m.To_ReplyKeyboardForceReply()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_replyKeyboardMarkup:
		t := m.To_ReplyKeyboardMarkup()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_replyInlineMarkup:
		t := m.To_ReplyInlineMarkup()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ReplyMarkup) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_replyKeyboardHide:
		m2 := &TLReplyKeyboardHide{Data2: &ReplyMarkup_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_replyKeyboardForceReply:
		m2 := &TLReplyKeyboardForceReply{Data2: &ReplyMarkup_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_replyKeyboardMarkup:
		m2 := &TLReplyKeyboardMarkup{Data2: &ReplyMarkup_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_replyInlineMarkup:
		m2 := &TLReplyInlineMarkup{Data2: &ReplyMarkup_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// replyKeyboardHide#a03e5b85 flags:# selective:flags.2?true = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyKeyboardHide() *TLReplyKeyboardHide {
	return &TLReplyKeyboardHide{
		Data2: m.Data2,
	}
}

// replyKeyboardForceReply#f4108aa0 flags:# single_use:flags.1?true selective:flags.2?true = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyKeyboardForceReply() *TLReplyKeyboardForceReply {
	return &TLReplyKeyboardForceReply{
		Data2: m.Data2,
	}
}

// replyKeyboardMarkup#3502758c flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyKeyboardMarkup() *TLReplyKeyboardMarkup {
	return &TLReplyKeyboardMarkup{
		Data2: m.Data2,
	}
}

// replyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyInlineMarkup() *TLReplyInlineMarkup {
	return &TLReplyInlineMarkup{
		Data2: m.Data2,
	}
}

// replyKeyboardHide#a03e5b85 flags:# selective:flags.2?true = ReplyMarkup;
func (m *TLReplyKeyboardHide) To_ReplyMarkup() *ReplyMarkup {
	return &ReplyMarkup{
		Constructor: TLConstructor_CRC32_replyKeyboardHide,
		Data2:       m.Data2,
	}
}

func (m *TLReplyKeyboardHide) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardHide) GetSelective() bool  { return m.Data2.Selective }

func NewTLReplyKeyboardHide() *TLReplyKeyboardHide {
	return &TLReplyKeyboardHide{Data2: &ReplyMarkup_Data{}}
}

func (m *TLReplyKeyboardHide) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyKeyboardHide))

	// flags
	var flags uint32 = 0
	if m.GetSelective() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLReplyKeyboardHide) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyKeyboardHide))

	// flags
	var flags uint32 = 0
	if m.GetSelective() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLReplyKeyboardHide) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 2)) != 0 {
		m.SetSelective(true)
	}

	return dbuf.err
}

// replyKeyboardForceReply#f4108aa0 flags:# single_use:flags.1?true selective:flags.2?true = ReplyMarkup;
func (m *TLReplyKeyboardForceReply) To_ReplyMarkup() *ReplyMarkup {
	return &ReplyMarkup{
		Constructor: TLConstructor_CRC32_replyKeyboardForceReply,
		Data2:       m.Data2,
	}
}

func (m *TLReplyKeyboardForceReply) SetSingleUse(v bool) { m.Data2.SingleUse = v }
func (m *TLReplyKeyboardForceReply) GetSingleUse() bool  { return m.Data2.SingleUse }

func (m *TLReplyKeyboardForceReply) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardForceReply) GetSelective() bool  { return m.Data2.Selective }

func NewTLReplyKeyboardForceReply() *TLReplyKeyboardForceReply {
	return &TLReplyKeyboardForceReply{Data2: &ReplyMarkup_Data{}}
}

func (m *TLReplyKeyboardForceReply) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyKeyboardForceReply))

	// flags
	var flags uint32 = 0
	if m.GetSingleUse() == true {
		flags |= 1 << 1
	}
	if m.GetSelective() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLReplyKeyboardForceReply) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyKeyboardForceReply))

	// flags
	var flags uint32 = 0
	if m.GetSingleUse() == true {
		flags |= 1 << 1
	}
	if m.GetSelective() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLReplyKeyboardForceReply) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetSingleUse(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetSelective(true)
	}

	return dbuf.err
}

// replyKeyboardMarkup#3502758c flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *TLReplyKeyboardMarkup) To_ReplyMarkup() *ReplyMarkup {
	return &ReplyMarkup{
		Constructor: TLConstructor_CRC32_replyKeyboardMarkup,
		Data2:       m.Data2,
	}
}

func (m *TLReplyKeyboardMarkup) SetResize(v bool) { m.Data2.Resize = v }
func (m *TLReplyKeyboardMarkup) GetResize() bool  { return m.Data2.Resize }

func (m *TLReplyKeyboardMarkup) SetSingleUse(v bool) { m.Data2.SingleUse = v }
func (m *TLReplyKeyboardMarkup) GetSingleUse() bool  { return m.Data2.SingleUse }

func (m *TLReplyKeyboardMarkup) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardMarkup) GetSelective() bool  { return m.Data2.Selective }

func (m *TLReplyKeyboardMarkup) SetRows(v []*KeyboardButtonRow) { m.Data2.Rows = v }
func (m *TLReplyKeyboardMarkup) GetRows() []*KeyboardButtonRow  { return m.Data2.Rows }

func NewTLReplyKeyboardMarkup() *TLReplyKeyboardMarkup {
	return &TLReplyKeyboardMarkup{Data2: &ReplyMarkup_Data{}}
}

func (m *TLReplyKeyboardMarkup) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyKeyboardMarkup))

	// flags
	var flags uint32 = 0
	if m.GetResize() == true {
		flags |= 1 << 0
	}
	if m.GetSingleUse() == true {
		flags |= 1 << 1
	}
	if m.GetSelective() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRows())))
	for _, v := range m.GetRows() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLReplyKeyboardMarkup) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyKeyboardMarkup))

	// flags
	var flags uint32 = 0
	if m.GetResize() == true {
		flags |= 1 << 0
	}
	if m.GetSingleUse() == true {
		flags |= 1 << 1
	}
	if m.GetSelective() == true {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRows())))
	for _, v := range m.GetRows() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLReplyKeyboardMarkup) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.SetResize(true)
	}
	if (flags & (1 << 1)) != 0 {
		m.SetSingleUse(true)
	}
	if (flags & (1 << 2)) != 0 {
		m.SetSelective(true)
	}
	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	v5 := make([]*KeyboardButtonRow, l5)
	for i := int32(0); i < l5; i++ {
		v5[i] = &KeyboardButtonRow{}
		v5[i].Decode(dbuf)
	}
	m.SetRows(v5)

	return dbuf.err
}

// replyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *TLReplyInlineMarkup) To_ReplyMarkup() *ReplyMarkup {
	return &ReplyMarkup{
		Constructor: TLConstructor_CRC32_replyInlineMarkup,
		Data2:       m.Data2,
	}
}

func (m *TLReplyInlineMarkup) SetRows(v []*KeyboardButtonRow) { m.Data2.Rows = v }
func (m *TLReplyInlineMarkup) GetRows() []*KeyboardButtonRow  { return m.Data2.Rows }

func NewTLReplyInlineMarkup() *TLReplyInlineMarkup {
	return &TLReplyInlineMarkup{Data2: &ReplyMarkup_Data{}}
}

func (m *TLReplyInlineMarkup) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyInlineMarkup))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRows())))
	for _, v := range m.GetRows() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLReplyInlineMarkup) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_replyInlineMarkup))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRows())))
	for _, v := range m.GetRows() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLReplyInlineMarkup) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	v1 := make([]*KeyboardButtonRow, l1)
	for i := int32(0); i < l1; i++ {
		v1[i] = &KeyboardButtonRow{}
		v1[i].Decode(dbuf)
	}
	m.SetRows(v1)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ChannelMessagesFilter <--
//  + TL_ChannelMessagesFilterEmpty
//  + TL_ChannelMessagesFilter
//

func (m *ChannelMessagesFilter) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_channelMessagesFilterEmpty:
		t := m.To_ChannelMessagesFilterEmpty()
		return t.Encode()
	case TLConstructor_CRC32_channelMessagesFilter:
		t := m.To_ChannelMessagesFilter()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelMessagesFilter) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_channelMessagesFilterEmpty:
		t := m.To_ChannelMessagesFilterEmpty()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_channelMessagesFilter:
		t := m.To_ChannelMessagesFilter()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ChannelMessagesFilter) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_channelMessagesFilterEmpty:
		m2 := &TLChannelMessagesFilterEmpty{Data2: &ChannelMessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_channelMessagesFilter:
		m2 := &TLChannelMessagesFilter{Data2: &ChannelMessagesFilter_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// channelMessagesFilterEmpty#94d42ee7 = ChannelMessagesFilter;
func (m *ChannelMessagesFilter) To_ChannelMessagesFilterEmpty() *TLChannelMessagesFilterEmpty {
	return &TLChannelMessagesFilterEmpty{
		Data2: m.Data2,
	}
}

// channelMessagesFilter#cd77d957 flags:# exclude_new_messages:flags.1?true ranges:Vector<MessageRange> = ChannelMessagesFilter;
func (m *ChannelMessagesFilter) To_ChannelMessagesFilter() *TLChannelMessagesFilter {
	return &TLChannelMessagesFilter{
		Data2: m.Data2,
	}
}

// channelMessagesFilterEmpty#94d42ee7 = ChannelMessagesFilter;
func (m *TLChannelMessagesFilterEmpty) To_ChannelMessagesFilter() *ChannelMessagesFilter {
	return &ChannelMessagesFilter{
		Constructor: TLConstructor_CRC32_channelMessagesFilterEmpty,
		Data2:       m.Data2,
	}
}

func NewTLChannelMessagesFilterEmpty() *TLChannelMessagesFilterEmpty {
	return &TLChannelMessagesFilterEmpty{Data2: &ChannelMessagesFilter_Data{}}
}

func (m *TLChannelMessagesFilterEmpty) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelMessagesFilterEmpty))

	return x.buf
}

func (m *TLChannelMessagesFilterEmpty) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelMessagesFilterEmpty))

	return x.buf
}

func (m *TLChannelMessagesFilterEmpty) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// channelMessagesFilter#cd77d957 flags:# exclude_new_messages:flags.1?true ranges:Vector<MessageRange> = ChannelMessagesFilter;
func (m *TLChannelMessagesFilter) To_ChannelMessagesFilter() *ChannelMessagesFilter {
	return &ChannelMessagesFilter{
		Constructor: TLConstructor_CRC32_channelMessagesFilter,
		Data2:       m.Data2,
	}
}

func (m *TLChannelMessagesFilter) SetExcludeNewMessages(v bool) { m.Data2.ExcludeNewMessages = v }
func (m *TLChannelMessagesFilter) GetExcludeNewMessages() bool  { return m.Data2.ExcludeNewMessages }

func (m *TLChannelMessagesFilter) SetRanges(v []*MessageRange) { m.Data2.Ranges = v }
func (m *TLChannelMessagesFilter) GetRanges() []*MessageRange  { return m.Data2.Ranges }

func NewTLChannelMessagesFilter() *TLChannelMessagesFilter {
	return &TLChannelMessagesFilter{Data2: &ChannelMessagesFilter_Data{}}
}

func (m *TLChannelMessagesFilter) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelMessagesFilter))

	// flags
	var flags uint32 = 0
	if m.GetExcludeNewMessages() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRanges())))
	for _, v := range m.GetRanges() {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelMessagesFilter) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channelMessagesFilter))

	// flags
	var flags uint32 = 0
	if m.GetExcludeNewMessages() == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.GetRanges())))
	for _, v := range m.GetRanges() {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelMessagesFilter) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.SetExcludeNewMessages(true)
	}
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	v3 := make([]*MessageRange, l3)
	for i := int32(0); i < l3; i++ {
		v3[i] = &MessageRange{}
		v3[i].Decode(dbuf)
	}
	m.SetRanges(v3)

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ExportedMessageLink <--
//  + TL_ExportedMessageLink
//

func (m *ExportedMessageLink) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_exportedMessageLink:
		t := m.To_ExportedMessageLink()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ExportedMessageLink) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_exportedMessageLink:
		t := m.To_ExportedMessageLink()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ExportedMessageLink) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_exportedMessageLink:
		m2 := &TLExportedMessageLink{Data2: &ExportedMessageLink_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// exportedMessageLink#5dab1af4 link:string html:string = ExportedMessageLink;
func (m *ExportedMessageLink) To_ExportedMessageLink() *TLExportedMessageLink {
	return &TLExportedMessageLink{
		Data2: m.Data2,
	}
}

// exportedMessageLink#5dab1af4 link:string html:string = ExportedMessageLink;
func (m *TLExportedMessageLink) To_ExportedMessageLink() *ExportedMessageLink {
	return &ExportedMessageLink{
		Constructor: TLConstructor_CRC32_exportedMessageLink,
		Data2:       m.Data2,
	}
}

func (m *TLExportedMessageLink) SetLink(v string) { m.Data2.Link = v }
func (m *TLExportedMessageLink) GetLink() string  { return m.Data2.Link }

func (m *TLExportedMessageLink) SetHtml(v string) { m.Data2.Html = v }
func (m *TLExportedMessageLink) GetHtml() string  { return m.Data2.Html }

func NewTLExportedMessageLink() *TLExportedMessageLink {
	return &TLExportedMessageLink{Data2: &ExportedMessageLink_Data{}}
}

func (m *TLExportedMessageLink) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_exportedMessageLink))

	x.String(m.GetLink())
	x.String(m.GetHtml())

	return x.buf
}

func (m *TLExportedMessageLink) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_exportedMessageLink))

	x.String(m.GetLink())
	x.String(m.GetHtml())

	return x.buf
}

func (m *TLExportedMessageLink) Decode(dbuf *DecodeBuf) error {
	m.SetLink(dbuf.String())
	m.SetHtml(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Auth_CodeType <--
//  + TL_AuthCodeTypeSms
//  + TL_AuthCodeTypeCall
//  + TL_AuthCodeTypeFlashCall
//

func (m *Auth_CodeType) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_auth_codeTypeSms:
		t := m.To_AuthCodeTypeSms()
		return t.Encode()
	case TLConstructor_CRC32_auth_codeTypeCall:
		t := m.To_AuthCodeTypeCall()
		return t.Encode()
	case TLConstructor_CRC32_auth_codeTypeFlashCall:
		t := m.To_AuthCodeTypeFlashCall()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_CodeType) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_auth_codeTypeSms:
		t := m.To_AuthCodeTypeSms()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_auth_codeTypeCall:
		t := m.To_AuthCodeTypeCall()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_auth_codeTypeFlashCall:
		t := m.To_AuthCodeTypeFlashCall()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Auth_CodeType) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_auth_codeTypeSms:
		m2 := &TLAuthCodeTypeSms{Data2: &Auth_CodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_auth_codeTypeCall:
		m2 := &TLAuthCodeTypeCall{Data2: &Auth_CodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_auth_codeTypeFlashCall:
		m2 := &TLAuthCodeTypeFlashCall{Data2: &Auth_CodeType_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// auth.codeTypeSms#72a3158c = auth.CodeType;
func (m *Auth_CodeType) To_AuthCodeTypeSms() *TLAuthCodeTypeSms {
	return &TLAuthCodeTypeSms{
		Data2: m.Data2,
	}
}

// auth.codeTypeCall#741cd3e3 = auth.CodeType;
func (m *Auth_CodeType) To_AuthCodeTypeCall() *TLAuthCodeTypeCall {
	return &TLAuthCodeTypeCall{
		Data2: m.Data2,
	}
}

// auth.codeTypeFlashCall#226ccefb = auth.CodeType;
func (m *Auth_CodeType) To_AuthCodeTypeFlashCall() *TLAuthCodeTypeFlashCall {
	return &TLAuthCodeTypeFlashCall{
		Data2: m.Data2,
	}
}

// auth.codeTypeSms#72a3158c = auth.CodeType;
func (m *TLAuthCodeTypeSms) To_Auth_CodeType() *Auth_CodeType {
	return &Auth_CodeType{
		Constructor: TLConstructor_CRC32_auth_codeTypeSms,
		Data2:       m.Data2,
	}
}

func NewTLAuthCodeTypeSms() *TLAuthCodeTypeSms {
	return &TLAuthCodeTypeSms{Data2: &Auth_CodeType_Data{}}
}

func (m *TLAuthCodeTypeSms) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_codeTypeSms))

	return x.buf
}

func (m *TLAuthCodeTypeSms) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_codeTypeSms))

	return x.buf
}

func (m *TLAuthCodeTypeSms) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// auth.codeTypeCall#741cd3e3 = auth.CodeType;
func (m *TLAuthCodeTypeCall) To_Auth_CodeType() *Auth_CodeType {
	return &Auth_CodeType{
		Constructor: TLConstructor_CRC32_auth_codeTypeCall,
		Data2:       m.Data2,
	}
}

func NewTLAuthCodeTypeCall() *TLAuthCodeTypeCall {
	return &TLAuthCodeTypeCall{Data2: &Auth_CodeType_Data{}}
}

func (m *TLAuthCodeTypeCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_codeTypeCall))

	return x.buf
}

func (m *TLAuthCodeTypeCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_codeTypeCall))

	return x.buf
}

func (m *TLAuthCodeTypeCall) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

// auth.codeTypeFlashCall#226ccefb = auth.CodeType;
func (m *TLAuthCodeTypeFlashCall) To_Auth_CodeType() *Auth_CodeType {
	return &Auth_CodeType{
		Constructor: TLConstructor_CRC32_auth_codeTypeFlashCall,
		Data2:       m.Data2,
	}
}

func NewTLAuthCodeTypeFlashCall() *TLAuthCodeTypeFlashCall {
	return &TLAuthCodeTypeFlashCall{Data2: &Auth_CodeType_Data{}}
}

func (m *TLAuthCodeTypeFlashCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_codeTypeFlashCall))

	return x.buf
}

func (m *TLAuthCodeTypeFlashCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_codeTypeFlashCall))

	return x.buf
}

func (m *TLAuthCodeTypeFlashCall) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ServerConnected <--
//  + TL_SyncSessionServerConnected
//

func (m *ServerConnected) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_sync_sessionServerConnected:
		t := m.To_SyncSessionServerConnected()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ServerConnected) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_sync_sessionServerConnected:
		t := m.To_SyncSessionServerConnected()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ServerConnected) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_sync_sessionServerConnected:
		m2 := &TLSyncSessionServerConnected{Data2: &ServerConnected_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// sync.sessionServerConnected session_server_id:int server_name:string = ServerConnected;
func (m *ServerConnected) To_SyncSessionServerConnected() *TLSyncSessionServerConnected {
	return &TLSyncSessionServerConnected{
		Data2: m.Data2,
	}
}

// sync.sessionServerConnected session_server_id:int server_name:string = ServerConnected;
func (m *TLSyncSessionServerConnected) To_ServerConnected() *ServerConnected {
	return &ServerConnected{
		Constructor: TLConstructor_CRC32_sync_sessionServerConnected,
		Data2:       m.Data2,
	}
}

func (m *TLSyncSessionServerConnected) SetSessionServerId(v int32) { m.Data2.SessionServerId = v }
func (m *TLSyncSessionServerConnected) GetSessionServerId() int32  { return m.Data2.SessionServerId }

func (m *TLSyncSessionServerConnected) SetServerName(v string) { m.Data2.ServerName = v }
func (m *TLSyncSessionServerConnected) GetServerName() string  { return m.Data2.ServerName }

func NewTLSyncSessionServerConnected() *TLSyncSessionServerConnected {
	return &TLSyncSessionServerConnected{Data2: &ServerConnected_Data{}}
}

func (m *TLSyncSessionServerConnected) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_sessionServerConnected))

	x.Int(m.GetSessionServerId())
	x.String(m.GetServerName())

	return x.buf
}

func (m *TLSyncSessionServerConnected) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_sessionServerConnected))

	x.Int(m.GetSessionServerId())
	x.String(m.GetServerName())

	return x.buf
}

func (m *TLSyncSessionServerConnected) Decode(dbuf *DecodeBuf) error {
	m.SetSessionServerId(dbuf.Int())
	m.SetServerName(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// PushData <--
//  + TL_SyncPushUpdatesData
//  + TL_SyncPushRpcResultData
//

func (m *PushData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_sync_pushUpdatesData:
		t := m.To_SyncPushUpdatesData()
		return t.Encode()
	case TLConstructor_CRC32_sync_pushRpcResultData:
		t := m.To_SyncPushRpcResultData()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PushData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_sync_pushUpdatesData:
		t := m.To_SyncPushUpdatesData()
		return t.EncodeToLayer(layer)
	case TLConstructor_CRC32_sync_pushRpcResultData:
		t := m.To_SyncPushRpcResultData()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *PushData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_sync_pushUpdatesData:
		m2 := &TLSyncPushUpdatesData{Data2: &PushData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2
	case TLConstructor_CRC32_sync_pushRpcResultData:
		m2 := &TLSyncPushRpcResultData{Data2: &PushData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// sync.pushUpdatesData auth_key_id:long updates:Updates = PushData;
func (m *PushData) To_SyncPushUpdatesData() *TLSyncPushUpdatesData {
	return &TLSyncPushUpdatesData{
		Data2: m.Data2,
	}
}

// sync.pushRpcResultData auth_key_id:long client_req_msg_id:long result:bytes = PushData;
func (m *PushData) To_SyncPushRpcResultData() *TLSyncPushRpcResultData {
	return &TLSyncPushRpcResultData{
		Data2: m.Data2,
	}
}

// sync.pushUpdatesData auth_key_id:long updates:Updates = PushData;
func (m *TLSyncPushUpdatesData) To_PushData() *PushData {
	return &PushData{
		Constructor: TLConstructor_CRC32_sync_pushUpdatesData,
		Data2:       m.Data2,
	}
}

func (m *TLSyncPushUpdatesData) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLSyncPushUpdatesData) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLSyncPushUpdatesData) SetUpdates(v *Updates) { m.Data2.Updates = v }
func (m *TLSyncPushUpdatesData) GetUpdates() *Updates  { return m.Data2.Updates }

func NewTLSyncPushUpdatesData() *TLSyncPushUpdatesData {
	return &TLSyncPushUpdatesData{Data2: &PushData_Data{}}
}

func (m *TLSyncPushUpdatesData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushUpdatesData))

	x.Long(m.GetAuthKeyId())
	x.Bytes(m.GetUpdates().Encode())

	return x.buf
}

func (m *TLSyncPushUpdatesData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushUpdatesData))

	x.Long(m.GetAuthKeyId())
	x.Bytes(m.GetUpdates().EncodeToLayer(layer))

	return x.buf
}

func (m *TLSyncPushUpdatesData) Decode(dbuf *DecodeBuf) error {
	m.SetAuthKeyId(dbuf.Long())
	m2 := &Updates{}
	m2.Decode(dbuf)
	m.SetUpdates(m2)

	return dbuf.err
}

// sync.pushRpcResultData auth_key_id:long client_req_msg_id:long result:bytes = PushData;
func (m *TLSyncPushRpcResultData) To_PushData() *PushData {
	return &PushData{
		Constructor: TLConstructor_CRC32_sync_pushRpcResultData,
		Data2:       m.Data2,
	}
}

func (m *TLSyncPushRpcResultData) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLSyncPushRpcResultData) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLSyncPushRpcResultData) SetClientReqMsgId(v int64) { m.Data2.ClientReqMsgId = v }
func (m *TLSyncPushRpcResultData) GetClientReqMsgId() int64  { return m.Data2.ClientReqMsgId }

func (m *TLSyncPushRpcResultData) SetResult(v []byte) { m.Data2.Result = v }
func (m *TLSyncPushRpcResultData) GetResult() []byte  { return m.Data2.Result }

func NewTLSyncPushRpcResultData() *TLSyncPushRpcResultData {
	return &TLSyncPushRpcResultData{Data2: &PushData_Data{}}
}

func (m *TLSyncPushRpcResultData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushRpcResultData))

	x.Long(m.GetAuthKeyId())
	x.Long(m.GetClientReqMsgId())
	x.StringBytes(m.GetResult())

	return x.buf
}

func (m *TLSyncPushRpcResultData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushRpcResultData))

	x.Long(m.GetAuthKeyId())
	x.Long(m.GetClientReqMsgId())
	x.StringBytes(m.GetResult())

	return x.buf
}

func (m *TLSyncPushRpcResultData) Decode(dbuf *DecodeBuf) error {
	m.SetAuthKeyId(dbuf.Long())
	m.SetClientReqMsgId(dbuf.Long())
	m.SetResult(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Int32 <--
//  + TL_Int32
//

func (m *Int32) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_int32:
		t := m.To_Int32()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Int32) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_int32:
		t := m.To_Int32()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Int32) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_int32:
		m2 := &TLInt32{Data2: &Int32_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// int32 v:int = Int32;
func (m *Int32) To_Int32() *TLInt32 {
	return &TLInt32{
		Data2: m.Data2,
	}
}

// int32 v:int = Int32;
func (m *TLInt32) To_Int32() *Int32 {
	return &Int32{
		Constructor: TLConstructor_CRC32_int32,
		Data2:       m.Data2,
	}
}

func (m *TLInt32) SetV(v int32) { m.Data2.V = v }
func (m *TLInt32) GetV() int32  { return m.Data2.V }

func NewTLInt32() *TLInt32 {
	return &TLInt32{Data2: &Int32_Data{}}
}

func (m *TLInt32) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_int32))

	x.Int(m.GetV())

	return x.buf
}

func (m *TLInt32) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_int32))

	x.Int(m.GetV())

	return x.buf
}

func (m *TLInt32) Decode(dbuf *DecodeBuf) error {
	m.SetV(dbuf.Int())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// Int64 <--
//  + TL_Long
//

func (m *Int64) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_long:
		t := m.To_Long()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Int64) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_long:
		t := m.To_Long()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *Int64) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_long:
		m2 := &TLLong{Data2: &Int64_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// long v:long = Int64;
func (m *Int64) To_Long() *TLLong {
	return &TLLong{
		Data2: m.Data2,
	}
}

// long v:long = Int64;
func (m *TLLong) To_Int64() *Int64 {
	return &Int64{
		Constructor: TLConstructor_CRC32_long,
		Data2:       m.Data2,
	}
}

func (m *TLLong) SetV(v int64) { m.Data2.V = v }
func (m *TLLong) GetV() int64  { return m.Data2.V }

func NewTLLong() *TLLong {
	return &TLLong{Data2: &Int64_Data{}}
}

func (m *TLLong) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_long))

	x.Long(m.GetV())

	return x.buf
}

func (m *TLLong) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_long))

	x.Long(m.GetV())

	return x.buf
}

func (m *TLLong) Decode(dbuf *DecodeBuf) error {
	m.SetV(dbuf.Long())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// AuthKeyInfo <--
//  + TL_AuthKeyInfo
//

func (m *AuthKeyInfo) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_authKeyInfo:
		t := m.To_AuthKeyInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AuthKeyInfo) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_authKeyInfo:
		t := m.To_AuthKeyInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AuthKeyInfo) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_authKeyInfo:
		m2 := &TLAuthKeyInfo{Data2: &AuthKeyInfo_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// authKeyInfo flags:# auth_key_id:long auth_key:bytes future_salt:flags.0?FutureSalt= AuthKeyInfo;
func (m *AuthKeyInfo) To_AuthKeyInfo() *TLAuthKeyInfo {
	return &TLAuthKeyInfo{
		Data2: m.Data2,
	}
}

// authKeyInfo flags:# auth_key_id:long auth_key:bytes future_salt:flags.0?FutureSalt= AuthKeyInfo;
func (m *TLAuthKeyInfo) To_AuthKeyInfo() *AuthKeyInfo {
	return &AuthKeyInfo{
		Constructor: TLConstructor_CRC32_authKeyInfo,
		Data2:       m.Data2,
	}
}

func (m *TLAuthKeyInfo) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLAuthKeyInfo) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLAuthKeyInfo) SetAuthKey(v []byte) { m.Data2.AuthKey = v }
func (m *TLAuthKeyInfo) GetAuthKey() []byte  { return m.Data2.AuthKey }

func (m *TLAuthKeyInfo) SetFutureSalt(v *FutureSalt) { m.Data2.FutureSalt = v }
func (m *TLAuthKeyInfo) GetFutureSalt() *FutureSalt  { return m.Data2.FutureSalt }

func NewTLAuthKeyInfo() *TLAuthKeyInfo {
	return &TLAuthKeyInfo{Data2: &AuthKeyInfo_Data{}}
}

func (m *TLAuthKeyInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_authKeyInfo))

	// flags
	var flags uint32 = 0
	if m.GetFutureSalt() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetAuthKeyId())
	x.StringBytes(m.GetAuthKey())
	if m.GetFutureSalt() != nil {
		x.Bytes(m.GetFutureSalt().Encode())
	}

	return x.buf
}

func (m *TLAuthKeyInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_authKeyInfo))

	// flags
	var flags uint32 = 0
	if m.GetFutureSalt() != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.GetAuthKeyId())
	x.StringBytes(m.GetAuthKey())
	if m.GetFutureSalt() != nil {
		x.Bytes(m.GetFutureSalt().EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAuthKeyInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetAuthKeyId(dbuf.Long())
	m.SetAuthKey(dbuf.StringBytes())
	if (flags & (1 << 0)) != 0 {
		m4 := &FutureSalt{}
		m4.Decode(dbuf)
		m.SetFutureSalt(m4)
	}

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ClientSession <--
//  + TL_ClientSessionInfo
//

func (m *ClientSession) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_clientSessionInfo:
		t := m.To_ClientSessionInfo()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ClientSession) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_clientSessionInfo:
		t := m.To_ClientSessionInfo()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ClientSession) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_clientSessionInfo:
		m2 := &TLClientSessionInfo{Data2: &ClientSession_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// clientSessionInfo auth_key_id:long ip:string layer:int api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string = ClientSession;
func (m *ClientSession) To_ClientSessionInfo() *TLClientSessionInfo {
	return &TLClientSessionInfo{
		Data2: m.Data2,
	}
}

// clientSessionInfo auth_key_id:long ip:string layer:int api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string = ClientSession;
func (m *TLClientSessionInfo) To_ClientSession() *ClientSession {
	return &ClientSession{
		Constructor: TLConstructor_CRC32_clientSessionInfo,
		Data2:       m.Data2,
	}
}

func (m *TLClientSessionInfo) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLClientSessionInfo) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLClientSessionInfo) SetIp(v string) { m.Data2.Ip = v }
func (m *TLClientSessionInfo) GetIp() string  { return m.Data2.Ip }

func (m *TLClientSessionInfo) SetLayer(v int32) { m.Data2.Layer = v }
func (m *TLClientSessionInfo) GetLayer() int32  { return m.Data2.Layer }

func (m *TLClientSessionInfo) SetApiId(v int32) { m.Data2.ApiId = v }
func (m *TLClientSessionInfo) GetApiId() int32  { return m.Data2.ApiId }

func (m *TLClientSessionInfo) SetDeviceModel(v string) { m.Data2.DeviceModel = v }
func (m *TLClientSessionInfo) GetDeviceModel() string  { return m.Data2.DeviceModel }

func (m *TLClientSessionInfo) SetSystemVersion(v string) { m.Data2.SystemVersion = v }
func (m *TLClientSessionInfo) GetSystemVersion() string  { return m.Data2.SystemVersion }

func (m *TLClientSessionInfo) SetAppVersion(v string) { m.Data2.AppVersion = v }
func (m *TLClientSessionInfo) GetAppVersion() string  { return m.Data2.AppVersion }

func (m *TLClientSessionInfo) SetSystemLangCode(v string) { m.Data2.SystemLangCode = v }
func (m *TLClientSessionInfo) GetSystemLangCode() string  { return m.Data2.SystemLangCode }

func (m *TLClientSessionInfo) SetLangPack(v string) { m.Data2.LangPack = v }
func (m *TLClientSessionInfo) GetLangPack() string  { return m.Data2.LangPack }

func (m *TLClientSessionInfo) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLClientSessionInfo) GetLangCode() string  { return m.Data2.LangCode }

func NewTLClientSessionInfo() *TLClientSessionInfo {
	return &TLClientSessionInfo{Data2: &ClientSession_Data{}}
}

func (m *TLClientSessionInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_clientSessionInfo))

	x.Long(m.GetAuthKeyId())
	x.String(m.GetIp())
	x.Int(m.GetLayer())
	x.Int(m.GetApiId())
	x.String(m.GetDeviceModel())
	x.String(m.GetSystemVersion())
	x.String(m.GetAppVersion())
	x.String(m.GetSystemLangCode())
	x.String(m.GetLangPack())
	x.String(m.GetLangCode())

	return x.buf
}

func (m *TLClientSessionInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_clientSessionInfo))

	x.Long(m.GetAuthKeyId())
	x.String(m.GetIp())
	x.Int(m.GetLayer())
	x.Int(m.GetApiId())
	x.String(m.GetDeviceModel())
	x.String(m.GetSystemVersion())
	x.String(m.GetAppVersion())
	x.String(m.GetSystemLangCode())
	x.String(m.GetLangPack())
	x.String(m.GetLangCode())

	return x.buf
}

func (m *TLClientSessionInfo) Decode(dbuf *DecodeBuf) error {
	m.SetAuthKeyId(dbuf.Long())
	m.SetIp(dbuf.String())
	m.SetLayer(dbuf.Int())
	m.SetApiId(dbuf.Int())
	m.SetDeviceModel(dbuf.String())
	m.SetSystemVersion(dbuf.String())
	m.SetAppVersion(dbuf.String())
	m.SetSystemLangCode(dbuf.String())
	m.SetLangPack(dbuf.String())
	m.SetLangCode(dbuf.String())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// AttachData <--
//  + TL_AttachData
//

func (m *AttachData) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_attachData:
		t := m.To_AttachData()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AttachData) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_attachData:
		t := m.To_AttachData()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *AttachData) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_attachData:
		m2 := &TLAttachData{Data2: &AttachData_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// attachData flags:# auth_key_id:long session_id:long message_id:long layer:int user_id:int access_hash:long attach_data:bytes = AttachData;
func (m *AttachData) To_AttachData() *TLAttachData {
	return &TLAttachData{
		Data2: m.Data2,
	}
}

// attachData flags:# auth_key_id:long session_id:long message_id:long layer:int user_id:int access_hash:long attach_data:bytes = AttachData;
func (m *TLAttachData) To_AttachData() *AttachData {
	return &AttachData{
		Constructor: TLConstructor_CRC32_attachData,
		Data2:       m.Data2,
	}
}

func (m *TLAttachData) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLAttachData) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLAttachData) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLAttachData) GetSessionId() int64  { return m.Data2.SessionId }

func (m *TLAttachData) SetMessageId(v int64) { m.Data2.MessageId = v }
func (m *TLAttachData) GetMessageId() int64  { return m.Data2.MessageId }

func (m *TLAttachData) SetLayer(v int32) { m.Data2.Layer = v }
func (m *TLAttachData) GetLayer() int32  { return m.Data2.Layer }

func (m *TLAttachData) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLAttachData) GetUserId() int32  { return m.Data2.UserId }

func (m *TLAttachData) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLAttachData) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLAttachData) SetAttachData(v []byte) { m.Data2.AttachData = v }
func (m *TLAttachData) GetAttachData() []byte  { return m.Data2.AttachData }

func NewTLAttachData() *TLAttachData {
	return &TLAttachData{Data2: &AttachData_Data{}}
}

func (m *TLAttachData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_attachData))

	// flags
	var flags uint32 = 0
	x.UInt(flags)

	x.Long(m.GetAuthKeyId())
	x.Long(m.GetSessionId())
	x.Long(m.GetMessageId())
	x.Int(m.GetLayer())
	x.Int(m.GetUserId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetAttachData())

	return x.buf
}

func (m *TLAttachData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_attachData))

	// flags
	var flags uint32 = 0
	x.UInt(flags)

	x.Long(m.GetAuthKeyId())
	x.Long(m.GetSessionId())
	x.Long(m.GetMessageId())
	x.Int(m.GetLayer())
	x.Int(m.GetUserId())
	x.Long(m.GetAccessHash())
	x.StringBytes(m.GetAttachData())

	return x.buf
}

func (m *TLAttachData) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.SetAuthKeyId(dbuf.Long())
	m.SetSessionId(dbuf.Long())
	m.SetMessageId(dbuf.Long())
	m.SetLayer(dbuf.Int())
	m.SetUserId(dbuf.Int())
	m.SetAccessHash(dbuf.Long())
	m.SetAttachData(dbuf.StringBytes())

	return dbuf.err
}

///////////////////////////////////////////////////////////////////////////////
// ConnectToServer <--
//  + TL_SyncConnectToSessionServer
//

func (m *ConnectToServer) Encode() []byte {
	switch m.GetConstructor() {
	case TLConstructor_CRC32_sync_connectToSessionServer:
		t := m.To_SyncConnectToSessionServer()
		return t.Encode()

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ConnectToServer) EncodeToLayer(layer int) []byte {
	classId := getConstructorByLayer(m.GetConstructor(), layer)
	switch classId {
	case TLConstructor_CRC32_sync_connectToSessionServer:
		t := m.To_SyncConnectToSessionServer()
		return t.EncodeToLayer(layer)

	default:
		glog.Error("Constructor error: ", m.GetConstructor())
		return nil
	}
}

func (m *ConnectToServer) Decode(dbuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dbuf.Int())
	switch m.Constructor {
	case TLConstructor_CRC32_sync_connectToSessionServer:
		m2 := &TLSyncConnectToSessionServer{Data2: &ConnectToServer_Data{}}
		m2.Decode(dbuf)
		m.Data2 = m2.Data2

	default:
		return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
	}
	return dbuf.err
}

// sync.connectToSessionServer sync_server_id:int = ConnectToServer;
func (m *ConnectToServer) To_SyncConnectToSessionServer() *TLSyncConnectToSessionServer {
	return &TLSyncConnectToSessionServer{
		Data2: m.Data2,
	}
}

// sync.connectToSessionServer sync_server_id:int = ConnectToServer;
func (m *TLSyncConnectToSessionServer) To_ConnectToServer() *ConnectToServer {
	return &ConnectToServer{
		Constructor: TLConstructor_CRC32_sync_connectToSessionServer,
		Data2:       m.Data2,
	}
}

func (m *TLSyncConnectToSessionServer) SetSyncServerId(v int32) { m.Data2.SyncServerId = v }
func (m *TLSyncConnectToSessionServer) GetSyncServerId() int32  { return m.Data2.SyncServerId }

func NewTLSyncConnectToSessionServer() *TLSyncConnectToSessionServer {
	return &TLSyncConnectToSessionServer{Data2: &ConnectToServer_Data{}}
}

func (m *TLSyncConnectToSessionServer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_connectToSessionServer))

	x.Int(m.GetSyncServerId())

	return x.buf
}

func (m *TLSyncConnectToSessionServer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_connectToSessionServer))

	x.Int(m.GetSyncServerId())

	return x.buf
}

func (m *TLSyncConnectToSessionServer) Decode(dbuf *DecodeBuf) error {
	m.SetSyncServerId(dbuf.Int())

	return dbuf.err
}

func NewTLReqPq() *TLReqPq {
	return &TLReqPq{}
}

func (m *TLReqPq) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_req_pq))

	x.Bytes(m.Nonce)

	return x.buf
}

func (m *TLReqPq) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_req_pq))

	x.Bytes(m.Nonce)

	return x.buf
}

func (m *TLReqPq) Decode(dbuf *DecodeBuf) error {
	m.Nonce = dbuf.Bytes(16)

	return dbuf.err
}

func NewTLReqPqMulti() *TLReqPqMulti {
	return &TLReqPqMulti{}
}

func (m *TLReqPqMulti) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_req_pq_multi))

	x.Bytes(m.Nonce)

	return x.buf
}

func (m *TLReqPqMulti) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_req_pq_multi))

	x.Bytes(m.Nonce)

	return x.buf
}

func (m *TLReqPqMulti) Decode(dbuf *DecodeBuf) error {
	m.Nonce = dbuf.Bytes(16)

	return dbuf.err
}

func NewTLReq_DHParams() *TLReq_DHParams {
	return &TLReq_DHParams{}
}

func (m *TLReq_DHParams) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_req_DH_params))

	x.Bytes(m.Nonce)
	x.Bytes(m.ServerNonce)
	x.String(m.P)
	x.String(m.Q)
	x.Long(m.PublicKeyFingerprint)
	x.String(m.EncryptedData)

	return x.buf
}

func (m *TLReq_DHParams) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_req_DH_params))

	x.Bytes(m.Nonce)
	x.Bytes(m.ServerNonce)
	x.String(m.P)
	x.String(m.Q)
	x.Long(m.PublicKeyFingerprint)
	x.String(m.EncryptedData)

	return x.buf
}

func (m *TLReq_DHParams) Decode(dbuf *DecodeBuf) error {
	m.Nonce = dbuf.Bytes(16)
	m.ServerNonce = dbuf.Bytes(16)
	m.P = dbuf.String()
	m.Q = dbuf.String()
	m.PublicKeyFingerprint = dbuf.Long()
	m.EncryptedData = dbuf.String()

	return dbuf.err
}

func NewTLSetClient_DHParams() *TLSetClient_DHParams {
	return &TLSetClient_DHParams{}
}

func (m *TLSetClient_DHParams) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_set_client_DH_params))

	x.Bytes(m.Nonce)
	x.Bytes(m.ServerNonce)
	x.String(m.EncryptedData)

	return x.buf
}

func (m *TLSetClient_DHParams) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_set_client_DH_params))

	x.Bytes(m.Nonce)
	x.Bytes(m.ServerNonce)
	x.String(m.EncryptedData)

	return x.buf
}

func (m *TLSetClient_DHParams) Decode(dbuf *DecodeBuf) error {
	m.Nonce = dbuf.Bytes(16)
	m.ServerNonce = dbuf.Bytes(16)
	m.EncryptedData = dbuf.String()

	return dbuf.err
}

func NewTLDestroyAuthKey() *TLDestroyAuthKey {
	return &TLDestroyAuthKey{}
}

func (m *TLDestroyAuthKey) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key))

	return x.buf
}

func (m *TLDestroyAuthKey) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_auth_key))

	return x.buf
}

func (m *TLDestroyAuthKey) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLRpcDropAnswer() *TLRpcDropAnswer {
	return &TLRpcDropAnswer{}
}

func (m *TLRpcDropAnswer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_drop_answer))

	x.Long(m.ReqMsgId)

	return x.buf
}

func (m *TLRpcDropAnswer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_rpc_drop_answer))

	x.Long(m.ReqMsgId)

	return x.buf
}

func (m *TLRpcDropAnswer) Decode(dbuf *DecodeBuf) error {
	m.ReqMsgId = dbuf.Long()

	return dbuf.err
}

func NewTLGetFutureSalts() *TLGetFutureSalts {
	return &TLGetFutureSalts{}
}

func (m *TLGetFutureSalts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_get_future_salts))

	x.Int(m.Num)

	return x.buf
}

func (m *TLGetFutureSalts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_get_future_salts))

	x.Int(m.Num)

	return x.buf
}

func (m *TLGetFutureSalts) Decode(dbuf *DecodeBuf) error {
	m.Num = dbuf.Int()

	return dbuf.err
}

func NewTLPing() *TLPing {
	return &TLPing{}
}

func (m *TLPing) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ping))

	x.Long(m.PingId)

	return x.buf
}

func (m *TLPing) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ping))

	x.Long(m.PingId)

	return x.buf
}

func (m *TLPing) Decode(dbuf *DecodeBuf) error {
	m.PingId = dbuf.Long()

	return dbuf.err
}

func NewTLPingDelayDisconnect() *TLPingDelayDisconnect {
	return &TLPingDelayDisconnect{}
}

func (m *TLPingDelayDisconnect) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ping_delay_disconnect))

	x.Long(m.PingId)
	x.Int(m.DisconnectDelay)

	return x.buf
}

func (m *TLPingDelayDisconnect) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_ping_delay_disconnect))

	x.Long(m.PingId)
	x.Int(m.DisconnectDelay)

	return x.buf
}

func (m *TLPingDelayDisconnect) Decode(dbuf *DecodeBuf) error {
	m.PingId = dbuf.Long()
	m.DisconnectDelay = dbuf.Int()

	return dbuf.err
}

func NewTLDestroySession() *TLDestroySession {
	return &TLDestroySession{}
}

func (m *TLDestroySession) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_session))

	x.Long(m.SessionId)

	return x.buf
}

func (m *TLDestroySession) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_destroy_session))

	x.Long(m.SessionId)

	return x.buf
}

func (m *TLDestroySession) Decode(dbuf *DecodeBuf) error {
	m.SessionId = dbuf.Long()

	return dbuf.err
}

func NewTLContestSaveDeveloperInfo() *TLContestSaveDeveloperInfo {
	return &TLContestSaveDeveloperInfo{}
}

func (m *TLContestSaveDeveloperInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contest_saveDeveloperInfo))

	x.Int(m.VkId)
	x.String(m.Name)
	x.String(m.PhoneNumber)
	x.Int(m.Age)
	x.String(m.City)

	return x.buf
}

func (m *TLContestSaveDeveloperInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contest_saveDeveloperInfo))

	x.Int(m.VkId)
	x.String(m.Name)
	x.String(m.PhoneNumber)
	x.Int(m.Age)
	x.String(m.City)

	return x.buf
}

func (m *TLContestSaveDeveloperInfo) Decode(dbuf *DecodeBuf) error {
	m.VkId = dbuf.Int()
	m.Name = dbuf.String()
	m.PhoneNumber = dbuf.String()
	m.Age = dbuf.Int()
	m.City = dbuf.String()

	return dbuf.err
}

func NewTLLangpackGetLanguagesLayer70() *TLLangpackGetLanguagesLayer70 {
	return &TLLangpackGetLanguagesLayer70{}
}

func (m *TLLangpackGetLanguagesLayer70) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLanguagesLayer70))

	return x.buf
}

func (m *TLLangpackGetLanguagesLayer70) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLanguagesLayer70))

	return x.buf
}

func (m *TLLangpackGetLanguagesLayer70) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetScheme() *TLHelpGetScheme {
	return &TLHelpGetScheme{}
}

func (m *TLHelpGetScheme) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getScheme))

	x.Int(m.Version)

	return x.buf
}

func (m *TLHelpGetScheme) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getScheme))

	x.Int(m.Version)

	return x.buf
}

func (m *TLHelpGetScheme) Decode(dbuf *DecodeBuf) error {
	m.Version = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesReadHistoryLayer2() *TLMessagesReadHistoryLayer2 {
	return &TLMessagesReadHistoryLayer2{}
}

func (m *TLMessagesReadHistoryLayer2) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readHistoryLayer2))

	x.Bytes(m.Peer.Encode())
	x.Int(m.MaxId)
	x.Int(m.Offset)

	return x.buf
}

func (m *TLMessagesReadHistoryLayer2) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readHistoryLayer2))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.MaxId)
	x.Int(m.Offset)

	return x.buf
}

func (m *TLMessagesReadHistoryLayer2) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.MaxId = dbuf.Int()
	m.Offset = dbuf.Int()

	return dbuf.err
}

func NewTLHelpGetInviteTextLayer46() *TLHelpGetInviteTextLayer46 {
	return &TLHelpGetInviteTextLayer46{}
}

func (m *TLHelpGetInviteTextLayer46) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getInviteTextLayer46))

	x.String(m.LangCode)

	return x.buf
}

func (m *TLHelpGetInviteTextLayer46) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getInviteTextLayer46))

	x.String(m.LangCode)

	return x.buf
}

func (m *TLHelpGetInviteTextLayer46) Decode(dbuf *DecodeBuf) error {
	m.LangCode = dbuf.String()

	return dbuf.err
}

func NewTLHelpGetAppUpdateLayer46() *TLHelpGetAppUpdateLayer46 {
	return &TLHelpGetAppUpdateLayer46{}
}

func (m *TLHelpGetAppUpdateLayer46) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getAppUpdateLayer46))

	x.String(m.DeviceModel)
	x.String(m.SystemVersion)
	x.String(m.AppVersion)
	x.String(m.LangCode)

	return x.buf
}

func (m *TLHelpGetAppUpdateLayer46) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getAppUpdateLayer46))

	x.String(m.DeviceModel)
	x.String(m.SystemVersion)
	x.String(m.AppVersion)
	x.String(m.LangCode)

	return x.buf
}

func (m *TLHelpGetAppUpdateLayer46) Decode(dbuf *DecodeBuf) error {
	m.DeviceModel = dbuf.String()
	m.SystemVersion = dbuf.String()
	m.AppVersion = dbuf.String()
	m.LangCode = dbuf.String()

	return dbuf.err
}

func NewTLUpdatesGetChannelDifferenceLayer46() *TLUpdatesGetChannelDifferenceLayer46 {
	return &TLUpdatesGetChannelDifferenceLayer46{}
}

func (m *TLUpdatesGetChannelDifferenceLayer46) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getChannelDifferenceLayer46))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Filter.Encode())
	x.Int(m.Pts)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUpdatesGetChannelDifferenceLayer46) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getChannelDifferenceLayer46))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Filter.EncodeToLayer(layer))
	x.Int(m.Pts)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUpdatesGetChannelDifferenceLayer46) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &ChannelMessagesFilter{}
	m2.Decode(dbuf)
	m.Filter = m2
	m.Pts = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLAuthSendCodeLayer51() *TLAuthSendCodeLayer51 {
	return &TLAuthSendCodeLayer51{}
}

func (m *TLAuthSendCodeLayer51) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sendCodeLayer51))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.Encode())
	}
	x.Int(m.ApiId)
	x.String(m.ApiHash)
	x.String(m.LangCode)

	return x.buf
}

func (m *TLAuthSendCodeLayer51) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sendCodeLayer51))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.EncodeToLayer(layer))
	}
	x.Int(m.ApiId)
	x.String(m.ApiHash)
	x.String(m.LangCode)

	return x.buf
}

func (m *TLAuthSendCodeLayer51) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.AllowFlashcall = true
	}
	m.PhoneNumber = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &Bool{}
		m4.Decode(dbuf)
		m.CurrentNumber = m4
	}
	m.ApiId = dbuf.Int()
	m.ApiHash = dbuf.String()
	m.LangCode = dbuf.String()

	return dbuf.err
}

func NewTLMessagesGetHistoryLayer51() *TLMessagesGetHistoryLayer51 {
	return &TLMessagesGetHistoryLayer51{}
}

func (m *TLMessagesGetHistoryLayer51) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getHistoryLayer51))

	x.Bytes(m.Peer.Encode())
	x.Int(m.OffsetId)
	x.Int(m.OffsetDate)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)

	return x.buf
}

func (m *TLMessagesGetHistoryLayer51) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getHistoryLayer51))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.OffsetId)
	x.Int(m.OffsetDate)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)

	return x.buf
}

func (m *TLMessagesGetHistoryLayer51) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.OffsetId = dbuf.Int()
	m.OffsetDate = dbuf.Int()
	m.AddOffset = dbuf.Int()
	m.Limit = dbuf.Int()
	m.MaxId = dbuf.Int()
	m.MinId = dbuf.Int()

	return dbuf.err
}

func NewTLInitConnectionLayer68() *TLInitConnectionLayer68 {
	return &TLInitConnectionLayer68{}
}

func (m *TLInitConnectionLayer68) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_initConnectionLayer68))

	x.Int(m.ApiId)
	x.String(m.DeviceModel)
	x.String(m.SystemVersion)
	x.String(m.AppVersion)
	x.String(m.SystemLangCode)
	x.String(m.LangPack)
	x.String(m.LangCode)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInitConnectionLayer68) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_initConnectionLayer68))

	x.Int(m.ApiId)
	x.String(m.DeviceModel)
	x.String(m.SystemVersion)
	x.String(m.AppVersion)
	x.String(m.SystemLangCode)
	x.String(m.LangPack)
	x.String(m.LangCode)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInitConnectionLayer68) Decode(dbuf *DecodeBuf) error {
	m.ApiId = dbuf.Int()
	m.DeviceModel = dbuf.String()
	m.SystemVersion = dbuf.String()
	m.AppVersion = dbuf.String()
	m.SystemLangCode = dbuf.String()
	m.LangPack = dbuf.String()
	m.LangCode = dbuf.String()
	o8 := dbuf.Object()
	if o8 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o8)
		return dbuf.err
	}
	m.Query = o8.Encode()

	return dbuf.err
}

func NewTLMessagesSearchLayer68() *TLMessagesSearchLayer68 {
	return &TLMessagesSearchLayer68{}
}

func (m *TLMessagesSearchLayer68) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchLayer68))

	// flags
	var flags uint32 = 0
	if m.FromId != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	x.String(m.Q)
	if m.FromId != nil {
		x.Bytes(m.FromId.Encode())
	}
	x.Bytes(m.Filter.Encode())
	x.Int(m.MinDate)
	x.Int(m.MaxDate)
	x.Int(m.Offset)
	x.Int(m.MaxId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesSearchLayer68) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchLayer68))

	// flags
	var flags uint32 = 0
	if m.FromId != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.String(m.Q)
	if m.FromId != nil {
		x.Bytes(m.FromId.EncodeToLayer(layer))
	}
	x.Bytes(m.Filter.EncodeToLayer(layer))
	x.Int(m.MinDate)
	x.Int(m.MaxDate)
	x.Int(m.Offset)
	x.Int(m.MaxId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesSearchLayer68) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputPeer{}
	m2.Decode(dbuf)
	m.Peer = m2
	m.Q = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &InputUser{}
		m4.Decode(dbuf)
		m.FromId = m4
	}
	m5 := &MessagesFilter{}
	m5.Decode(dbuf)
	m.Filter = m5
	m.MinDate = dbuf.Int()
	m.MaxDate = dbuf.Int()
	m.Offset = dbuf.Int()
	m.MaxId = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLAccountRegisterDeviceLayer71() *TLAccountRegisterDeviceLayer71 {
	return &TLAccountRegisterDeviceLayer71{}
}

func (m *TLAccountRegisterDeviceLayer71) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_registerDeviceLayer71))

	x.Int(m.TokenType)
	x.String(m.Token)

	return x.buf
}

func (m *TLAccountRegisterDeviceLayer71) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_registerDeviceLayer71))

	x.Int(m.TokenType)
	x.String(m.Token)

	return x.buf
}

func (m *TLAccountRegisterDeviceLayer71) Decode(dbuf *DecodeBuf) error {
	m.TokenType = dbuf.Int()
	m.Token = dbuf.String()

	return dbuf.err
}

func NewTLAccountUnregisterDeviceLayer71() *TLAccountUnregisterDeviceLayer71 {
	return &TLAccountUnregisterDeviceLayer71{}
}

func (m *TLAccountUnregisterDeviceLayer71) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_unregisterDeviceLayer71))

	x.Int(m.TokenType)
	x.String(m.Token)

	return x.buf
}

func (m *TLAccountUnregisterDeviceLayer71) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_unregisterDeviceLayer71))

	x.Int(m.TokenType)
	x.String(m.Token)

	return x.buf
}

func (m *TLAccountUnregisterDeviceLayer71) Decode(dbuf *DecodeBuf) error {
	m.TokenType = dbuf.Int()
	m.Token = dbuf.String()

	return dbuf.err
}

func NewTLMessagesGetMessagesLayer71() *TLMessagesGetMessagesLayer71 {
	return &TLMessagesGetMessagesLayer71{}
}

func (m *TLMessagesGetMessagesLayer71) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessagesLayer71))

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesGetMessagesLayer71) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessagesLayer71))

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesGetMessagesLayer71) Decode(dbuf *DecodeBuf) error {
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLLangpackGetLangPackLayer71() *TLLangpackGetLangPackLayer71 {
	return &TLLangpackGetLangPackLayer71{}
}

func (m *TLLangpackGetLangPackLayer71) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLangPackLayer71))

	x.String(m.LangCode)

	return x.buf
}

func (m *TLLangpackGetLangPackLayer71) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLangPackLayer71))

	x.String(m.LangCode)

	return x.buf
}

func (m *TLLangpackGetLangPackLayer71) Decode(dbuf *DecodeBuf) error {
	m.LangCode = dbuf.String()

	return dbuf.err
}

func NewTLInvokeAfterMsg() *TLInvokeAfterMsg {
	return &TLInvokeAfterMsg{}
}

func (m *TLInvokeAfterMsg) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeAfterMsg))

	x.Long(m.MsgId)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeAfterMsg) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeAfterMsg))

	x.Long(m.MsgId)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeAfterMsg) Decode(dbuf *DecodeBuf) error {
	m.MsgId = dbuf.Long()
	o2 := dbuf.Object()
	if o2 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o2)
		return dbuf.err
	}
	m.Query = o2.Encode()

	return dbuf.err
}

func NewTLInvokeAfterMsgs() *TLInvokeAfterMsgs {
	return &TLInvokeAfterMsgs{}
}

func (m *TLInvokeAfterMsgs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeAfterMsgs))

	x.VectorLong(m.MsgIds)

	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeAfterMsgs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeAfterMsgs))

	x.VectorLong(m.MsgIds)

	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeAfterMsgs) Decode(dbuf *DecodeBuf) error {
	m.MsgIds = dbuf.VectorLong()
	o2 := dbuf.Object()
	if o2 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o2)
		return dbuf.err
	}
	m.Query = o2.Encode()

	return dbuf.err
}

func NewTLInitConnection() *TLInitConnection {
	return &TLInitConnection{}
}

func (m *TLInitConnection) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_initConnection))

	// flags
	var flags uint32 = 0
	if m.Proxy != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.ApiId)
	x.String(m.DeviceModel)
	x.String(m.SystemVersion)
	x.String(m.AppVersion)
	x.String(m.SystemLangCode)
	x.String(m.LangPack)
	x.String(m.LangCode)
	if m.Proxy != nil {
		x.Bytes(m.Proxy.Encode())
	}
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInitConnection) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_initConnection))

	// flags
	var flags uint32 = 0
	if m.Proxy != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.ApiId)
	x.String(m.DeviceModel)
	x.String(m.SystemVersion)
	x.String(m.AppVersion)
	x.String(m.SystemLangCode)
	x.String(m.LangPack)
	x.String(m.LangCode)
	if m.Proxy != nil {
		x.Bytes(m.Proxy.EncodeToLayer(layer))
	}
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInitConnection) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.ApiId = dbuf.Int()
	m.DeviceModel = dbuf.String()
	m.SystemVersion = dbuf.String()
	m.AppVersion = dbuf.String()
	m.SystemLangCode = dbuf.String()
	m.LangPack = dbuf.String()
	m.LangCode = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m9 := &InputClientProxy{}
		m9.Decode(dbuf)
		m.Proxy = m9
	}
	o10 := dbuf.Object()
	if o10 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o10)
		return dbuf.err
	}
	m.Query = o10.Encode()

	return dbuf.err
}

func NewTLInvokeWithLayer() *TLInvokeWithLayer {
	return &TLInvokeWithLayer{}
}

func (m *TLInvokeWithLayer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithLayer))

	x.Int(m.Layer)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithLayer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithLayer))

	x.Int(m.Layer)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithLayer) Decode(dbuf *DecodeBuf) error {
	m.Layer = dbuf.Int()
	o2 := dbuf.Object()
	if o2 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o2)
		return dbuf.err
	}
	m.Query = o2.Encode()

	return dbuf.err
}

func NewTLInvokeWithoutUpdates() *TLInvokeWithoutUpdates {
	return &TLInvokeWithoutUpdates{}
}

func (m *TLInvokeWithoutUpdates) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithoutUpdates))

	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithoutUpdates) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithoutUpdates))

	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithoutUpdates) Decode(dbuf *DecodeBuf) error {
	o1 := dbuf.Object()
	if o1 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o1)
		return dbuf.err
	}
	m.Query = o1.Encode()

	return dbuf.err
}

func NewTLInvokeWithMessagesRange() *TLInvokeWithMessagesRange {
	return &TLInvokeWithMessagesRange{}
}

func (m *TLInvokeWithMessagesRange) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithMessagesRange))

	x.Bytes(m.Range.Encode())
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithMessagesRange) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithMessagesRange))

	x.Bytes(m.Range.EncodeToLayer(layer))
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithMessagesRange) Decode(dbuf *DecodeBuf) error {
	m1 := &MessageRange{}
	m1.Decode(dbuf)
	m.Range = m1
	o2 := dbuf.Object()
	if o2 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o2)
		return dbuf.err
	}
	m.Query = o2.Encode()

	return dbuf.err
}

func NewTLInvokeWithTakeout() *TLInvokeWithTakeout {
	return &TLInvokeWithTakeout{}
}

func (m *TLInvokeWithTakeout) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithTakeout))

	x.Long(m.TakeoutId)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithTakeout) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_invokeWithTakeout))

	x.Long(m.TakeoutId)
	x.Bytes(m.Query)

	return x.buf
}

func (m *TLInvokeWithTakeout) Decode(dbuf *DecodeBuf) error {
	m.TakeoutId = dbuf.Long()
	o2 := dbuf.Object()
	if o2 == nil {
		dbuf.err = fmt.Errorf("o%d dbuf.Object is nil", o2)
		return dbuf.err
	}
	m.Query = o2.Encode()

	return dbuf.err
}

func NewTLAuthSendCode() *TLAuthSendCode {
	return &TLAuthSendCode{}
}

func (m *TLAuthSendCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sendCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.Encode())
	}
	x.Int(m.ApiId)
	x.String(m.ApiHash)

	return x.buf
}

func (m *TLAuthSendCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_sendCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.EncodeToLayer(layer))
	}
	x.Int(m.ApiId)
	x.String(m.ApiHash)

	return x.buf
}

func (m *TLAuthSendCode) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.AllowFlashcall = true
	}
	m.PhoneNumber = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &Bool{}
		m4.Decode(dbuf)
		m.CurrentNumber = m4
	}
	m.ApiId = dbuf.Int()
	m.ApiHash = dbuf.String()

	return dbuf.err
}

func NewTLAuthSignUp() *TLAuthSignUp {
	return &TLAuthSignUp{}
}

func (m *TLAuthSignUp) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_signUp))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)
	x.String(m.FirstName)
	x.String(m.LastName)

	return x.buf
}

func (m *TLAuthSignUp) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_signUp))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)
	x.String(m.FirstName)
	x.String(m.LastName)

	return x.buf
}

func (m *TLAuthSignUp) Decode(dbuf *DecodeBuf) error {
	m.PhoneNumber = dbuf.String()
	m.PhoneCodeHash = dbuf.String()
	m.PhoneCode = dbuf.String()
	m.FirstName = dbuf.String()
	m.LastName = dbuf.String()

	return dbuf.err
}

func NewTLAuthSignIn() *TLAuthSignIn {
	return &TLAuthSignIn{}
}

func (m *TLAuthSignIn) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_signIn))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAuthSignIn) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_signIn))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAuthSignIn) Decode(dbuf *DecodeBuf) error {
	m.PhoneNumber = dbuf.String()
	m.PhoneCodeHash = dbuf.String()
	m.PhoneCode = dbuf.String()

	return dbuf.err
}

func NewTLAuthLogOut() *TLAuthLogOut {
	return &TLAuthLogOut{}
}

func (m *TLAuthLogOut) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_logOut))

	return x.buf
}

func (m *TLAuthLogOut) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_logOut))

	return x.buf
}

func (m *TLAuthLogOut) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAuthResetAuthorizations() *TLAuthResetAuthorizations {
	return &TLAuthResetAuthorizations{}
}

func (m *TLAuthResetAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_resetAuthorizations))

	return x.buf
}

func (m *TLAuthResetAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_resetAuthorizations))

	return x.buf
}

func (m *TLAuthResetAuthorizations) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAuthExportAuthorization() *TLAuthExportAuthorization {
	return &TLAuthExportAuthorization{}
}

func (m *TLAuthExportAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_exportAuthorization))

	x.Int(m.DcId)

	return x.buf
}

func (m *TLAuthExportAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_exportAuthorization))

	x.Int(m.DcId)

	return x.buf
}

func (m *TLAuthExportAuthorization) Decode(dbuf *DecodeBuf) error {
	m.DcId = dbuf.Int()

	return dbuf.err
}

func NewTLAuthImportAuthorization() *TLAuthImportAuthorization {
	return &TLAuthImportAuthorization{}
}

func (m *TLAuthImportAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_importAuthorization))

	x.Int(m.Id)
	x.StringBytes(m.Bytes)

	return x.buf
}

func (m *TLAuthImportAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_importAuthorization))

	x.Int(m.Id)
	x.StringBytes(m.Bytes)

	return x.buf
}

func (m *TLAuthImportAuthorization) Decode(dbuf *DecodeBuf) error {
	m.Id = dbuf.Int()
	m.Bytes = dbuf.StringBytes()

	return dbuf.err
}

func NewTLAuthBindTempAuthKey() *TLAuthBindTempAuthKey {
	return &TLAuthBindTempAuthKey{}
}

func (m *TLAuthBindTempAuthKey) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_bindTempAuthKey))

	x.Long(m.PermAuthKeyId)
	x.Long(m.Nonce)
	x.Int(m.ExpiresAt)
	x.StringBytes(m.EncryptedMessage)

	return x.buf
}

func (m *TLAuthBindTempAuthKey) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_bindTempAuthKey))

	x.Long(m.PermAuthKeyId)
	x.Long(m.Nonce)
	x.Int(m.ExpiresAt)
	x.StringBytes(m.EncryptedMessage)

	return x.buf
}

func (m *TLAuthBindTempAuthKey) Decode(dbuf *DecodeBuf) error {
	m.PermAuthKeyId = dbuf.Long()
	m.Nonce = dbuf.Long()
	m.ExpiresAt = dbuf.Int()
	m.EncryptedMessage = dbuf.StringBytes()

	return dbuf.err
}

func NewTLAuthImportBotAuthorization() *TLAuthImportBotAuthorization {
	return &TLAuthImportBotAuthorization{}
}

func (m *TLAuthImportBotAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_importBotAuthorization))

	x.Int(m.Flags)
	x.Int(m.ApiId)
	x.String(m.ApiHash)
	x.String(m.BotAuthToken)

	return x.buf
}

func (m *TLAuthImportBotAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_importBotAuthorization))

	x.Int(m.Flags)
	x.Int(m.ApiId)
	x.String(m.ApiHash)
	x.String(m.BotAuthToken)

	return x.buf
}

func (m *TLAuthImportBotAuthorization) Decode(dbuf *DecodeBuf) error {
	m.Flags = dbuf.Int()
	m.ApiId = dbuf.Int()
	m.ApiHash = dbuf.String()
	m.BotAuthToken = dbuf.String()

	return dbuf.err
}

func NewTLAuthCheckPassword() *TLAuthCheckPassword {
	return &TLAuthCheckPassword{}
}

func (m *TLAuthCheckPassword) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_checkPassword))

	x.Bytes(m.Password.Encode())

	return x.buf
}

func (m *TLAuthCheckPassword) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_checkPassword))

	x.Bytes(m.Password.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAuthCheckPassword) Decode(dbuf *DecodeBuf) error {
	m1 := &InputCheckPasswordSRP{}
	m1.Decode(dbuf)
	m.Password = m1

	return dbuf.err
}

func NewTLAuthRequestPasswordRecovery() *TLAuthRequestPasswordRecovery {
	return &TLAuthRequestPasswordRecovery{}
}

func (m *TLAuthRequestPasswordRecovery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_requestPasswordRecovery))

	return x.buf
}

func (m *TLAuthRequestPasswordRecovery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_requestPasswordRecovery))

	return x.buf
}

func (m *TLAuthRequestPasswordRecovery) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAuthRecoverPassword() *TLAuthRecoverPassword {
	return &TLAuthRecoverPassword{}
}

func (m *TLAuthRecoverPassword) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_recoverPassword))

	x.String(m.Code)

	return x.buf
}

func (m *TLAuthRecoverPassword) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_recoverPassword))

	x.String(m.Code)

	return x.buf
}

func (m *TLAuthRecoverPassword) Decode(dbuf *DecodeBuf) error {
	m.Code = dbuf.String()

	return dbuf.err
}

func NewTLAuthResendCode() *TLAuthResendCode {
	return &TLAuthResendCode{}
}

func (m *TLAuthResendCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_resendCode))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)

	return x.buf
}

func (m *TLAuthResendCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_resendCode))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)

	return x.buf
}

func (m *TLAuthResendCode) Decode(dbuf *DecodeBuf) error {
	m.PhoneNumber = dbuf.String()
	m.PhoneCodeHash = dbuf.String()

	return dbuf.err
}

func NewTLAuthCancelCode() *TLAuthCancelCode {
	return &TLAuthCancelCode{}
}

func (m *TLAuthCancelCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_cancelCode))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)

	return x.buf
}

func (m *TLAuthCancelCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_cancelCode))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)

	return x.buf
}

func (m *TLAuthCancelCode) Decode(dbuf *DecodeBuf) error {
	m.PhoneNumber = dbuf.String()
	m.PhoneCodeHash = dbuf.String()

	return dbuf.err
}

func NewTLAuthDropTempAuthKeys() *TLAuthDropTempAuthKeys {
	return &TLAuthDropTempAuthKeys{}
}

func (m *TLAuthDropTempAuthKeys) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_dropTempAuthKeys))

	x.VectorLong(m.ExceptAuthKeys)

	return x.buf
}

func (m *TLAuthDropTempAuthKeys) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_auth_dropTempAuthKeys))

	x.VectorLong(m.ExceptAuthKeys)

	return x.buf
}

func (m *TLAuthDropTempAuthKeys) Decode(dbuf *DecodeBuf) error {
	m.ExceptAuthKeys = dbuf.VectorLong()

	return dbuf.err
}

func NewTLAccountRegisterDevice() *TLAccountRegisterDevice {
	return &TLAccountRegisterDevice{}
}

func (m *TLAccountRegisterDevice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_registerDevice))

	x.Int(m.TokenType)
	x.String(m.Token)
	x.Bytes(m.AppSandbox.Encode())
	x.StringBytes(m.Secret)
	x.VectorInt(m.OtherUids)

	return x.buf
}

func (m *TLAccountRegisterDevice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_registerDevice))

	x.Int(m.TokenType)
	x.String(m.Token)
	x.Bytes(m.AppSandbox.EncodeToLayer(layer))
	x.StringBytes(m.Secret)
	x.VectorInt(m.OtherUids)

	return x.buf
}

func (m *TLAccountRegisterDevice) Decode(dbuf *DecodeBuf) error {
	m.TokenType = dbuf.Int()
	m.Token = dbuf.String()
	m3 := &Bool{}
	m3.Decode(dbuf)
	m.AppSandbox = m3
	m.Secret = dbuf.StringBytes()
	m.OtherUids = dbuf.VectorInt()

	return dbuf.err
}

func NewTLAccountUnregisterDevice() *TLAccountUnregisterDevice {
	return &TLAccountUnregisterDevice{}
}

func (m *TLAccountUnregisterDevice) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_unregisterDevice))

	x.Int(m.TokenType)
	x.String(m.Token)
	x.VectorInt(m.OtherUids)

	return x.buf
}

func (m *TLAccountUnregisterDevice) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_unregisterDevice))

	x.Int(m.TokenType)
	x.String(m.Token)
	x.VectorInt(m.OtherUids)

	return x.buf
}

func (m *TLAccountUnregisterDevice) Decode(dbuf *DecodeBuf) error {
	m.TokenType = dbuf.Int()
	m.Token = dbuf.String()
	m.OtherUids = dbuf.VectorInt()

	return dbuf.err
}

func NewTLAccountUpdateNotifySettings() *TLAccountUpdateNotifySettings {
	return &TLAccountUpdateNotifySettings{}
}

func (m *TLAccountUpdateNotifySettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateNotifySettings))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.Settings.Encode())

	return x.buf
}

func (m *TLAccountUpdateNotifySettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateNotifySettings))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.Settings.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountUpdateNotifySettings) Decode(dbuf *DecodeBuf) error {
	m1 := &InputNotifyPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &InputPeerNotifySettings{}
	m2.Decode(dbuf)
	m.Settings = m2

	return dbuf.err
}

func NewTLAccountGetNotifySettings() *TLAccountGetNotifySettings {
	return &TLAccountGetNotifySettings{}
}

func (m *TLAccountGetNotifySettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getNotifySettings))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLAccountGetNotifySettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getNotifySettings))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountGetNotifySettings) Decode(dbuf *DecodeBuf) error {
	m1 := &InputNotifyPeer{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLAccountResetNotifySettings() *TLAccountResetNotifySettings {
	return &TLAccountResetNotifySettings{}
}

func (m *TLAccountResetNotifySettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetNotifySettings))

	return x.buf
}

func (m *TLAccountResetNotifySettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetNotifySettings))

	return x.buf
}

func (m *TLAccountResetNotifySettings) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountUpdateProfile() *TLAccountUpdateProfile {
	return &TLAccountUpdateProfile{}
}

func (m *TLAccountUpdateProfile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateProfile))

	// flags
	var flags uint32 = 0
	if m.FirstName != "" {
		flags |= 1 << 0
	}
	if m.LastName != "" {
		flags |= 1 << 1
	}
	if m.About != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	if m.FirstName != "" {
		x.String(m.FirstName)
	}
	if m.LastName != "" {
		x.String(m.LastName)
	}
	if m.About != "" {
		x.String(m.About)
	}

	return x.buf
}

func (m *TLAccountUpdateProfile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateProfile))

	// flags
	var flags uint32 = 0
	if m.FirstName != "" {
		flags |= 1 << 0
	}
	if m.LastName != "" {
		flags |= 1 << 1
	}
	if m.About != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLAccountUpdateProfile) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.FirstName = dbuf.String()
	}
	if (flags & (1 << 1)) != 0 {
		m.LastName = dbuf.String()
	}
	if (flags & (1 << 2)) != 0 {
		m.About = dbuf.String()
	}

	return dbuf.err
}

func NewTLAccountUpdateStatus() *TLAccountUpdateStatus {
	return &TLAccountUpdateStatus{}
}

func (m *TLAccountUpdateStatus) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateStatus))

	x.Bytes(m.Offline.Encode())

	return x.buf
}

func (m *TLAccountUpdateStatus) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateStatus))

	x.Bytes(m.Offline.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountUpdateStatus) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.Offline = m1

	return dbuf.err
}

func NewTLAccountGetWallPapers() *TLAccountGetWallPapers {
	return &TLAccountGetWallPapers{}
}

func (m *TLAccountGetWallPapers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getWallPapers))

	return x.buf
}

func (m *TLAccountGetWallPapers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getWallPapers))

	return x.buf
}

func (m *TLAccountGetWallPapers) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountReportPeer() *TLAccountReportPeer {
	return &TLAccountReportPeer{}
}

func (m *TLAccountReportPeer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_reportPeer))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.Reason.Encode())

	return x.buf
}

func (m *TLAccountReportPeer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_reportPeer))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.Reason.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountReportPeer) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &ReportReason{}
	m2.Decode(dbuf)
	m.Reason = m2

	return dbuf.err
}

func NewTLAccountCheckUsername() *TLAccountCheckUsername {
	return &TLAccountCheckUsername{}
}

func (m *TLAccountCheckUsername) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_checkUsername))

	x.String(m.Username)

	return x.buf
}

func (m *TLAccountCheckUsername) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_checkUsername))

	x.String(m.Username)

	return x.buf
}

func (m *TLAccountCheckUsername) Decode(dbuf *DecodeBuf) error {
	m.Username = dbuf.String()

	return dbuf.err
}

func NewTLAccountUpdateUsername() *TLAccountUpdateUsername {
	return &TLAccountUpdateUsername{}
}

func (m *TLAccountUpdateUsername) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateUsername))

	x.String(m.Username)

	return x.buf
}

func (m *TLAccountUpdateUsername) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateUsername))

	x.String(m.Username)

	return x.buf
}

func (m *TLAccountUpdateUsername) Decode(dbuf *DecodeBuf) error {
	m.Username = dbuf.String()

	return dbuf.err
}

func NewTLAccountGetPrivacy() *TLAccountGetPrivacy {
	return &TLAccountGetPrivacy{}
}

func (m *TLAccountGetPrivacy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getPrivacy))

	x.Bytes(m.Key.Encode())

	return x.buf
}

func (m *TLAccountGetPrivacy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getPrivacy))

	x.Bytes(m.Key.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountGetPrivacy) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPrivacyKey{}
	m1.Decode(dbuf)
	m.Key = m1

	return dbuf.err
}

func NewTLAccountSetPrivacy() *TLAccountSetPrivacy {
	return &TLAccountSetPrivacy{}
}

func (m *TLAccountSetPrivacy) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_setPrivacy))

	x.Bytes(m.Key.Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Rules)))
	for _, v := range m.Rules {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccountSetPrivacy) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_setPrivacy))

	x.Bytes(m.Key.EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Rules)))
	for _, v := range m.Rules {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccountSetPrivacy) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPrivacyKey{}
	m1.Decode(dbuf)
	m.Key = m1
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	m.Rules = make([]*InputPrivacyRule, l2)
	for i := int32(0); i < l2; i++ {
		m.Rules[i] = &InputPrivacyRule{}
		(*m.Rules[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLAccountDeleteAccount() *TLAccountDeleteAccount {
	return &TLAccountDeleteAccount{}
}

func (m *TLAccountDeleteAccount) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_deleteAccount))

	x.String(m.Reason)

	return x.buf
}

func (m *TLAccountDeleteAccount) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_deleteAccount))

	x.String(m.Reason)

	return x.buf
}

func (m *TLAccountDeleteAccount) Decode(dbuf *DecodeBuf) error {
	m.Reason = dbuf.String()

	return dbuf.err
}

func NewTLAccountGetAccountTTL() *TLAccountGetAccountTTL {
	return &TLAccountGetAccountTTL{}
}

func (m *TLAccountGetAccountTTL) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAccountTTL))

	return x.buf
}

func (m *TLAccountGetAccountTTL) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAccountTTL))

	return x.buf
}

func (m *TLAccountGetAccountTTL) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountSetAccountTTL() *TLAccountSetAccountTTL {
	return &TLAccountSetAccountTTL{}
}

func (m *TLAccountSetAccountTTL) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_setAccountTTL))

	x.Bytes(m.Ttl.Encode())

	return x.buf
}

func (m *TLAccountSetAccountTTL) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_setAccountTTL))

	x.Bytes(m.Ttl.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountSetAccountTTL) Decode(dbuf *DecodeBuf) error {
	m1 := &AccountDaysTTL{}
	m1.Decode(dbuf)
	m.Ttl = m1

	return dbuf.err
}

func NewTLAccountSendChangePhoneCode() *TLAccountSendChangePhoneCode {
	return &TLAccountSendChangePhoneCode{}
}

func (m *TLAccountSendChangePhoneCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendChangePhoneCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.Encode())
	}

	return x.buf
}

func (m *TLAccountSendChangePhoneCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendChangePhoneCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAccountSendChangePhoneCode) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.AllowFlashcall = true
	}
	m.PhoneNumber = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &Bool{}
		m4.Decode(dbuf)
		m.CurrentNumber = m4
	}

	return dbuf.err
}

func NewTLAccountChangePhone() *TLAccountChangePhone {
	return &TLAccountChangePhone{}
}

func (m *TLAccountChangePhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_changePhone))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAccountChangePhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_changePhone))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAccountChangePhone) Decode(dbuf *DecodeBuf) error {
	m.PhoneNumber = dbuf.String()
	m.PhoneCodeHash = dbuf.String()
	m.PhoneCode = dbuf.String()

	return dbuf.err
}

func NewTLAccountUpdateDeviceLocked() *TLAccountUpdateDeviceLocked {
	return &TLAccountUpdateDeviceLocked{}
}

func (m *TLAccountUpdateDeviceLocked) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateDeviceLocked))

	x.Int(m.Period)

	return x.buf
}

func (m *TLAccountUpdateDeviceLocked) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updateDeviceLocked))

	x.Int(m.Period)

	return x.buf
}

func (m *TLAccountUpdateDeviceLocked) Decode(dbuf *DecodeBuf) error {
	m.Period = dbuf.Int()

	return dbuf.err
}

func NewTLAccountGetAuthorizations() *TLAccountGetAuthorizations {
	return &TLAccountGetAuthorizations{}
}

func (m *TLAccountGetAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAuthorizations))

	return x.buf
}

func (m *TLAccountGetAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAuthorizations))

	return x.buf
}

func (m *TLAccountGetAuthorizations) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountResetAuthorization() *TLAccountResetAuthorization {
	return &TLAccountResetAuthorization{}
}

func (m *TLAccountResetAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetAuthorization))

	x.Long(m.Hash)

	return x.buf
}

func (m *TLAccountResetAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetAuthorization))

	x.Long(m.Hash)

	return x.buf
}

func (m *TLAccountResetAuthorization) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Long()

	return dbuf.err
}

func NewTLAccountGetPassword() *TLAccountGetPassword {
	return &TLAccountGetPassword{}
}

func (m *TLAccountGetPassword) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getPassword))

	return x.buf
}

func (m *TLAccountGetPassword) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getPassword))

	return x.buf
}

func (m *TLAccountGetPassword) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountGetPasswordSettings() *TLAccountGetPasswordSettings {
	return &TLAccountGetPasswordSettings{}
}

func (m *TLAccountGetPasswordSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getPasswordSettings))

	x.Bytes(m.Password.Encode())

	return x.buf
}

func (m *TLAccountGetPasswordSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getPasswordSettings))

	x.Bytes(m.Password.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountGetPasswordSettings) Decode(dbuf *DecodeBuf) error {
	m1 := &InputCheckPasswordSRP{}
	m1.Decode(dbuf)
	m.Password = m1

	return dbuf.err
}

func NewTLAccountUpdatePasswordSettings() *TLAccountUpdatePasswordSettings {
	return &TLAccountUpdatePasswordSettings{}
}

func (m *TLAccountUpdatePasswordSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updatePasswordSettings))

	x.Bytes(m.Password.Encode())
	x.Bytes(m.NewSettings.Encode())

	return x.buf
}

func (m *TLAccountUpdatePasswordSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_updatePasswordSettings))

	x.Bytes(m.Password.EncodeToLayer(layer))
	x.Bytes(m.NewSettings.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountUpdatePasswordSettings) Decode(dbuf *DecodeBuf) error {
	m1 := &InputCheckPasswordSRP{}
	m1.Decode(dbuf)
	m.Password = m1
	m2 := &Account_PasswordInputSettings{}
	m2.Decode(dbuf)
	m.NewSettings = m2

	return dbuf.err
}

func NewTLAccountSendConfirmPhoneCode() *TLAccountSendConfirmPhoneCode {
	return &TLAccountSendConfirmPhoneCode{}
}

func (m *TLAccountSendConfirmPhoneCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendConfirmPhoneCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.Hash)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.Encode())
	}

	return x.buf
}

func (m *TLAccountSendConfirmPhoneCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendConfirmPhoneCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.Hash)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAccountSendConfirmPhoneCode) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.AllowFlashcall = true
	}
	m.Hash = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &Bool{}
		m4.Decode(dbuf)
		m.CurrentNumber = m4
	}

	return dbuf.err
}

func NewTLAccountConfirmPhone() *TLAccountConfirmPhone {
	return &TLAccountConfirmPhone{}
}

func (m *TLAccountConfirmPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_confirmPhone))

	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAccountConfirmPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_confirmPhone))

	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAccountConfirmPhone) Decode(dbuf *DecodeBuf) error {
	m.PhoneCodeHash = dbuf.String()
	m.PhoneCode = dbuf.String()

	return dbuf.err
}

func NewTLAccountGetTmpPassword() *TLAccountGetTmpPassword {
	return &TLAccountGetTmpPassword{}
}

func (m *TLAccountGetTmpPassword) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getTmpPassword))

	x.Bytes(m.Password.Encode())
	x.Int(m.Period)

	return x.buf
}

func (m *TLAccountGetTmpPassword) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getTmpPassword))

	x.Bytes(m.Password.EncodeToLayer(layer))
	x.Int(m.Period)

	return x.buf
}

func (m *TLAccountGetTmpPassword) Decode(dbuf *DecodeBuf) error {
	m1 := &InputCheckPasswordSRP{}
	m1.Decode(dbuf)
	m.Password = m1
	m.Period = dbuf.Int()

	return dbuf.err
}

func NewTLAccountGetWebAuthorizations() *TLAccountGetWebAuthorizations {
	return &TLAccountGetWebAuthorizations{}
}

func (m *TLAccountGetWebAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getWebAuthorizations))

	return x.buf
}

func (m *TLAccountGetWebAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getWebAuthorizations))

	return x.buf
}

func (m *TLAccountGetWebAuthorizations) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountResetWebAuthorization() *TLAccountResetWebAuthorization {
	return &TLAccountResetWebAuthorization{}
}

func (m *TLAccountResetWebAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetWebAuthorization))

	x.Long(m.Hash)

	return x.buf
}

func (m *TLAccountResetWebAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetWebAuthorization))

	x.Long(m.Hash)

	return x.buf
}

func (m *TLAccountResetWebAuthorization) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Long()

	return dbuf.err
}

func NewTLAccountResetWebAuthorizations() *TLAccountResetWebAuthorizations {
	return &TLAccountResetWebAuthorizations{}
}

func (m *TLAccountResetWebAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetWebAuthorizations))

	return x.buf
}

func (m *TLAccountResetWebAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_resetWebAuthorizations))

	return x.buf
}

func (m *TLAccountResetWebAuthorizations) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountGetAllSecureValues() *TLAccountGetAllSecureValues {
	return &TLAccountGetAllSecureValues{}
}

func (m *TLAccountGetAllSecureValues) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAllSecureValues))

	return x.buf
}

func (m *TLAccountGetAllSecureValues) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAllSecureValues))

	return x.buf
}

func (m *TLAccountGetAllSecureValues) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLAccountGetSecureValue() *TLAccountGetSecureValue {
	return &TLAccountGetSecureValue{}
}

func (m *TLAccountGetSecureValue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getSecureValue))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Types)))
	for _, v := range m.Types {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccountGetSecureValue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getSecureValue))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Types)))
	for _, v := range m.Types {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccountGetSecureValue) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Types = make([]*SecureValueType, l1)
	for i := int32(0); i < l1; i++ {
		m.Types[i] = &SecureValueType{}
		(*m.Types[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLAccountSaveSecureValue() *TLAccountSaveSecureValue {
	return &TLAccountSaveSecureValue{}
}

func (m *TLAccountSaveSecureValue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_saveSecureValue))

	x.Bytes(m.Value.Encode())
	x.Long(m.SecureSecretId)

	return x.buf
}

func (m *TLAccountSaveSecureValue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_saveSecureValue))

	x.Bytes(m.Value.EncodeToLayer(layer))
	x.Long(m.SecureSecretId)

	return x.buf
}

func (m *TLAccountSaveSecureValue) Decode(dbuf *DecodeBuf) error {
	m1 := &InputSecureValue{}
	m1.Decode(dbuf)
	m.Value = m1
	m.SecureSecretId = dbuf.Long()

	return dbuf.err
}

func NewTLAccountDeleteSecureValue() *TLAccountDeleteSecureValue {
	return &TLAccountDeleteSecureValue{}
}

func (m *TLAccountDeleteSecureValue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_deleteSecureValue))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Types)))
	for _, v := range m.Types {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLAccountDeleteSecureValue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_deleteSecureValue))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Types)))
	for _, v := range m.Types {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLAccountDeleteSecureValue) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Types = make([]*SecureValueType, l1)
	for i := int32(0); i < l1; i++ {
		m.Types[i] = &SecureValueType{}
		(*m.Types[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLAccountGetAuthorizationForm() *TLAccountGetAuthorizationForm {
	return &TLAccountGetAuthorizationForm{}
}

func (m *TLAccountGetAuthorizationForm) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAuthorizationForm))

	x.Int(m.BotId)
	x.String(m.Scope)
	x.String(m.PublicKey)

	return x.buf
}

func (m *TLAccountGetAuthorizationForm) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_getAuthorizationForm))

	x.Int(m.BotId)
	x.String(m.Scope)
	x.String(m.PublicKey)

	return x.buf
}

func (m *TLAccountGetAuthorizationForm) Decode(dbuf *DecodeBuf) error {
	m.BotId = dbuf.Int()
	m.Scope = dbuf.String()
	m.PublicKey = dbuf.String()

	return dbuf.err
}

func NewTLAccountAcceptAuthorization() *TLAccountAcceptAuthorization {
	return &TLAccountAcceptAuthorization{}
}

func (m *TLAccountAcceptAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_acceptAuthorization))

	x.Int(m.BotId)
	x.String(m.Scope)
	x.String(m.PublicKey)
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.ValueHashes)))
	for _, v := range m.ValueHashes {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Bytes(m.Credentials.Encode())

	return x.buf
}

func (m *TLAccountAcceptAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_acceptAuthorization))

	x.Int(m.BotId)
	x.String(m.Scope)
	x.String(m.PublicKey)
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.ValueHashes)))
	for _, v := range m.ValueHashes {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Bytes(m.Credentials.EncodeToLayer(layer))

	return x.buf
}

func (m *TLAccountAcceptAuthorization) Decode(dbuf *DecodeBuf) error {
	m.BotId = dbuf.Int()
	m.Scope = dbuf.String()
	m.PublicKey = dbuf.String()
	c4 := dbuf.Int()
	if c4 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
		return dbuf.err
	}
	l4 := dbuf.Int()
	m.ValueHashes = make([]*SecureValueHash, l4)
	for i := int32(0); i < l4; i++ {
		m.ValueHashes[i] = &SecureValueHash{}
		(*m.ValueHashes[i]).Decode(dbuf)
	}
	m5 := &SecureCredentialsEncrypted{}
	m5.Decode(dbuf)
	m.Credentials = m5

	return dbuf.err
}

func NewTLAccountSendVerifyPhoneCode() *TLAccountSendVerifyPhoneCode {
	return &TLAccountSendVerifyPhoneCode{}
}

func (m *TLAccountSendVerifyPhoneCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendVerifyPhoneCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.Encode())
	}

	return x.buf
}

func (m *TLAccountSendVerifyPhoneCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendVerifyPhoneCode))

	// flags
	var flags uint32 = 0
	if m.AllowFlashcall == true {
		flags |= 1 << 0
	}
	if m.CurrentNumber != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.PhoneNumber)
	if m.CurrentNumber != nil {
		x.Bytes(m.CurrentNumber.EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLAccountSendVerifyPhoneCode) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.AllowFlashcall = true
	}
	m.PhoneNumber = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &Bool{}
		m4.Decode(dbuf)
		m.CurrentNumber = m4
	}

	return dbuf.err
}

func NewTLAccountVerifyPhone() *TLAccountVerifyPhone {
	return &TLAccountVerifyPhone{}
}

func (m *TLAccountVerifyPhone) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_verifyPhone))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAccountVerifyPhone) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_verifyPhone))

	x.String(m.PhoneNumber)
	x.String(m.PhoneCodeHash)
	x.String(m.PhoneCode)

	return x.buf
}

func (m *TLAccountVerifyPhone) Decode(dbuf *DecodeBuf) error {
	m.PhoneNumber = dbuf.String()
	m.PhoneCodeHash = dbuf.String()
	m.PhoneCode = dbuf.String()

	return dbuf.err
}

func NewTLAccountSendVerifyEmailCode() *TLAccountSendVerifyEmailCode {
	return &TLAccountSendVerifyEmailCode{}
}

func (m *TLAccountSendVerifyEmailCode) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendVerifyEmailCode))

	x.String(m.Email)

	return x.buf
}

func (m *TLAccountSendVerifyEmailCode) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_sendVerifyEmailCode))

	x.String(m.Email)

	return x.buf
}

func (m *TLAccountSendVerifyEmailCode) Decode(dbuf *DecodeBuf) error {
	m.Email = dbuf.String()

	return dbuf.err
}

func NewTLAccountVerifyEmail() *TLAccountVerifyEmail {
	return &TLAccountVerifyEmail{}
}

func (m *TLAccountVerifyEmail) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_verifyEmail))

	x.String(m.Email)
	x.String(m.Code)

	return x.buf
}

func (m *TLAccountVerifyEmail) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_verifyEmail))

	x.String(m.Email)
	x.String(m.Code)

	return x.buf
}

func (m *TLAccountVerifyEmail) Decode(dbuf *DecodeBuf) error {
	m.Email = dbuf.String()
	m.Code = dbuf.String()

	return dbuf.err
}

func NewTLAccountInitTakeoutSession() *TLAccountInitTakeoutSession {
	return &TLAccountInitTakeoutSession{}
}

func (m *TLAccountInitTakeoutSession) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_initTakeoutSession))

	// flags
	var flags uint32 = 0
	if m.Contacts == true {
		flags |= 1 << 0
	}
	if m.MessageUsers == true {
		flags |= 1 << 1
	}
	if m.MessageChats == true {
		flags |= 1 << 2
	}
	if m.MessageMegagroups == true {
		flags |= 1 << 3
	}
	if m.MessageChannels == true {
		flags |= 1 << 4
	}
	if m.Files == true {
		flags |= 1 << 5
	}
	if m.FileMaxSize != 0 {
		flags |= 1 << 5
	}
	x.UInt(flags)

	if m.FileMaxSize != 0 {
		x.Int(m.FileMaxSize)
	}

	return x.buf
}

func (m *TLAccountInitTakeoutSession) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_initTakeoutSession))

	// flags
	var flags uint32 = 0
	if m.Contacts == true {
		flags |= 1 << 0
	}
	if m.MessageUsers == true {
		flags |= 1 << 1
	}
	if m.MessageChats == true {
		flags |= 1 << 2
	}
	if m.MessageMegagroups == true {
		flags |= 1 << 3
	}
	if m.MessageChannels == true {
		flags |= 1 << 4
	}
	if m.Files == true {
		flags |= 1 << 5
	}
	if m.FileMaxSize != 0 {
		flags |= 1 << 5
	}
	x.UInt(flags)

	if m.FileMaxSize != 0 {
		x.Int(m.FileMaxSize)
	}

	return x.buf
}

func (m *TLAccountInitTakeoutSession) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Contacts = true
	}
	if (flags & (1 << 1)) != 0 {
		m.MessageUsers = true
	}
	if (flags & (1 << 2)) != 0 {
		m.MessageChats = true
	}
	if (flags & (1 << 3)) != 0 {
		m.MessageMegagroups = true
	}
	if (flags & (1 << 4)) != 0 {
		m.MessageChannels = true
	}
	if (flags & (1 << 5)) != 0 {
		m.Files = true
	}
	if (flags & (1 << 5)) != 0 {
		m.FileMaxSize = dbuf.Int()
	}

	return dbuf.err
}

func NewTLAccountFinishTakeoutSession() *TLAccountFinishTakeoutSession {
	return &TLAccountFinishTakeoutSession{}
}

func (m *TLAccountFinishTakeoutSession) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_finishTakeoutSession))

	// flags
	var flags uint32 = 0
	if m.Success == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLAccountFinishTakeoutSession) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_account_finishTakeoutSession))

	// flags
	var flags uint32 = 0
	if m.Success == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLAccountFinishTakeoutSession) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Success = true
	}

	return dbuf.err
}

func NewTLUsersGetUsers() *TLUsersGetUsers {
	return &TLUsersGetUsers{}
}

func (m *TLUsersGetUsers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_users_getUsers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUsersGetUsers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_users_getUsers))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUsersGetUsers) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Id = make([]*InputUser, l1)
	for i := int32(0); i < l1; i++ {
		m.Id[i] = &InputUser{}
		(*m.Id[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLUsersGetFullUser() *TLUsersGetFullUser {
	return &TLUsersGetFullUser{}
}

func (m *TLUsersGetFullUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_users_getFullUser))

	x.Bytes(m.Id.Encode())

	return x.buf
}

func (m *TLUsersGetFullUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_users_getFullUser))

	x.Bytes(m.Id.EncodeToLayer(layer))

	return x.buf
}

func (m *TLUsersGetFullUser) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.Id = m1

	return dbuf.err
}

func NewTLUsersSetSecureValueErrors() *TLUsersSetSecureValueErrors {
	return &TLUsersSetSecureValueErrors{}
}

func (m *TLUsersSetSecureValueErrors) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_users_setSecureValueErrors))

	x.Bytes(m.Id.Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Errors)))
	for _, v := range m.Errors {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLUsersSetSecureValueErrors) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_users_setSecureValueErrors))

	x.Bytes(m.Id.EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Errors)))
	for _, v := range m.Errors {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLUsersSetSecureValueErrors) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.Id = m1
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	m.Errors = make([]*SecureValueError, l2)
	for i := int32(0); i < l2; i++ {
		m.Errors[i] = &SecureValueError{}
		(*m.Errors[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLContactsGetStatuses() *TLContactsGetStatuses {
	return &TLContactsGetStatuses{}
}

func (m *TLContactsGetStatuses) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getStatuses))

	return x.buf
}

func (m *TLContactsGetStatuses) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getStatuses))

	return x.buf
}

func (m *TLContactsGetStatuses) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLContactsGetContacts() *TLContactsGetContacts {
	return &TLContactsGetContacts{}
}

func (m *TLContactsGetContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getContacts))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLContactsGetContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getContacts))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLContactsGetContacts) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLContactsImportContacts() *TLContactsImportContacts {
	return &TLContactsImportContacts{}
}

func (m *TLContactsImportContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_importContacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Contacts)))
	for _, v := range m.Contacts {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsImportContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_importContacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Contacts)))
	for _, v := range m.Contacts {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsImportContacts) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Contacts = make([]*InputContact, l1)
	for i := int32(0); i < l1; i++ {
		m.Contacts[i] = &InputContact{}
		(*m.Contacts[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLContactsDeleteContact() *TLContactsDeleteContact {
	return &TLContactsDeleteContact{}
}

func (m *TLContactsDeleteContact) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_deleteContact))

	x.Bytes(m.Id.Encode())

	return x.buf
}

func (m *TLContactsDeleteContact) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_deleteContact))

	x.Bytes(m.Id.EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactsDeleteContact) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.Id = m1

	return dbuf.err
}

func NewTLContactsDeleteContacts() *TLContactsDeleteContacts {
	return &TLContactsDeleteContacts{}
}

func (m *TLContactsDeleteContacts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_deleteContacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLContactsDeleteContacts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_deleteContacts))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLContactsDeleteContacts) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Id = make([]*InputUser, l1)
	for i := int32(0); i < l1; i++ {
		m.Id[i] = &InputUser{}
		(*m.Id[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLContactsBlock() *TLContactsBlock {
	return &TLContactsBlock{}
}

func (m *TLContactsBlock) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_block))

	x.Bytes(m.Id.Encode())

	return x.buf
}

func (m *TLContactsBlock) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_block))

	x.Bytes(m.Id.EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactsBlock) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.Id = m1

	return dbuf.err
}

func NewTLContactsUnblock() *TLContactsUnblock {
	return &TLContactsUnblock{}
}

func (m *TLContactsUnblock) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_unblock))

	x.Bytes(m.Id.Encode())

	return x.buf
}

func (m *TLContactsUnblock) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_unblock))

	x.Bytes(m.Id.EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactsUnblock) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.Id = m1

	return dbuf.err
}

func NewTLContactsGetBlocked() *TLContactsGetBlocked {
	return &TLContactsGetBlocked{}
}

func (m *TLContactsGetBlocked) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getBlocked))

	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLContactsGetBlocked) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getBlocked))

	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLContactsGetBlocked) Decode(dbuf *DecodeBuf) error {
	m.Offset = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLContactsExportCard() *TLContactsExportCard {
	return &TLContactsExportCard{}
}

func (m *TLContactsExportCard) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_exportCard))

	return x.buf
}

func (m *TLContactsExportCard) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_exportCard))

	return x.buf
}

func (m *TLContactsExportCard) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLContactsImportCard() *TLContactsImportCard {
	return &TLContactsImportCard{}
}

func (m *TLContactsImportCard) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_importCard))

	x.VectorInt(m.ExportCard)

	return x.buf
}

func (m *TLContactsImportCard) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_importCard))

	x.VectorInt(m.ExportCard)

	return x.buf
}

func (m *TLContactsImportCard) Decode(dbuf *DecodeBuf) error {
	m.ExportCard = dbuf.VectorInt()

	return dbuf.err
}

func NewTLContactsSearch() *TLContactsSearch {
	return &TLContactsSearch{}
}

func (m *TLContactsSearch) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_search))

	x.String(m.Q)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLContactsSearch) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_search))

	x.String(m.Q)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLContactsSearch) Decode(dbuf *DecodeBuf) error {
	m.Q = dbuf.String()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLContactsResolveUsername() *TLContactsResolveUsername {
	return &TLContactsResolveUsername{}
}

func (m *TLContactsResolveUsername) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resolveUsername))

	x.String(m.Username)

	return x.buf
}

func (m *TLContactsResolveUsername) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resolveUsername))

	x.String(m.Username)

	return x.buf
}

func (m *TLContactsResolveUsername) Decode(dbuf *DecodeBuf) error {
	m.Username = dbuf.String()

	return dbuf.err
}

func NewTLContactsGetTopPeers() *TLContactsGetTopPeers {
	return &TLContactsGetTopPeers{}
}

func (m *TLContactsGetTopPeers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getTopPeers))

	// flags
	var flags uint32 = 0
	if m.Correspondents == true {
		flags |= 1 << 0
	}
	if m.BotsPm == true {
		flags |= 1 << 1
	}
	if m.BotsInline == true {
		flags |= 1 << 2
	}
	if m.PhoneCalls == true {
		flags |= 1 << 3
	}
	if m.Groups == true {
		flags |= 1 << 10
	}
	if m.Channels == true {
		flags |= 1 << 15
	}
	x.UInt(flags)

	x.Int(m.Offset)
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLContactsGetTopPeers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getTopPeers))

	// flags
	var flags uint32 = 0
	if m.Correspondents == true {
		flags |= 1 << 0
	}
	if m.BotsPm == true {
		flags |= 1 << 1
	}
	if m.BotsInline == true {
		flags |= 1 << 2
	}
	if m.PhoneCalls == true {
		flags |= 1 << 3
	}
	if m.Groups == true {
		flags |= 1 << 10
	}
	if m.Channels == true {
		flags |= 1 << 15
	}
	x.UInt(flags)

	x.Int(m.Offset)
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLContactsGetTopPeers) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Correspondents = true
	}
	if (flags & (1 << 1)) != 0 {
		m.BotsPm = true
	}
	if (flags & (1 << 2)) != 0 {
		m.BotsInline = true
	}
	if (flags & (1 << 3)) != 0 {
		m.PhoneCalls = true
	}
	if (flags & (1 << 10)) != 0 {
		m.Groups = true
	}
	if (flags & (1 << 15)) != 0 {
		m.Channels = true
	}
	m.Offset = dbuf.Int()
	m.Limit = dbuf.Int()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLContactsResetTopPeerRating() *TLContactsResetTopPeerRating {
	return &TLContactsResetTopPeerRating{}
}

func (m *TLContactsResetTopPeerRating) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resetTopPeerRating))

	x.Bytes(m.Category.Encode())
	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLContactsResetTopPeerRating) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resetTopPeerRating))

	x.Bytes(m.Category.EncodeToLayer(layer))
	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactsResetTopPeerRating) Decode(dbuf *DecodeBuf) error {
	m1 := &TopPeerCategory{}
	m1.Decode(dbuf)
	m.Category = m1
	m2 := &InputPeer{}
	m2.Decode(dbuf)
	m.Peer = m2

	return dbuf.err
}

func NewTLContactsResetSaved() *TLContactsResetSaved {
	return &TLContactsResetSaved{}
}

func (m *TLContactsResetSaved) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resetSaved))

	return x.buf
}

func (m *TLContactsResetSaved) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_resetSaved))

	return x.buf
}

func (m *TLContactsResetSaved) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLContactsGetSaved() *TLContactsGetSaved {
	return &TLContactsGetSaved{}
}

func (m *TLContactsGetSaved) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getSaved))

	return x.buf
}

func (m *TLContactsGetSaved) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_getSaved))

	return x.buf
}

func (m *TLContactsGetSaved) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLContactsToggleTopPeers() *TLContactsToggleTopPeers {
	return &TLContactsToggleTopPeers{}
}

func (m *TLContactsToggleTopPeers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_toggleTopPeers))

	x.Bytes(m.Enabled.Encode())

	return x.buf
}

func (m *TLContactsToggleTopPeers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_contacts_toggleTopPeers))

	x.Bytes(m.Enabled.EncodeToLayer(layer))

	return x.buf
}

func (m *TLContactsToggleTopPeers) Decode(dbuf *DecodeBuf) error {
	m1 := &Bool{}
	m1.Decode(dbuf)
	m.Enabled = m1

	return dbuf.err
}

func NewTLMessagesGetMessages() *TLMessagesGetMessages {
	return &TLMessagesGetMessages{}
}

func (m *TLMessagesGetMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessages))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesGetMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessages))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesGetMessages) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Id = make([]*InputMessage, l1)
	for i := int32(0); i < l1; i++ {
		m.Id[i] = &InputMessage{}
		(*m.Id[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLMessagesGetDialogs() *TLMessagesGetDialogs {
	return &TLMessagesGetDialogs{}
}

func (m *TLMessagesGetDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDialogs))

	// flags
	var flags uint32 = 0
	if m.ExcludePinned == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.OffsetDate)
	x.Int(m.OffsetId)
	x.Bytes(m.OffsetPeer.Encode())
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDialogs))

	// flags
	var flags uint32 = 0
	if m.ExcludePinned == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.OffsetDate)
	x.Int(m.OffsetId)
	x.Bytes(m.OffsetPeer.EncodeToLayer(layer))
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetDialogs) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.ExcludePinned = true
	}
	m.OffsetDate = dbuf.Int()
	m.OffsetId = dbuf.Int()
	m5 := &InputPeer{}
	m5.Decode(dbuf)
	m.OffsetPeer = m5
	m.Limit = dbuf.Int()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetHistory() *TLMessagesGetHistory {
	return &TLMessagesGetHistory{}
}

func (m *TLMessagesGetHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getHistory))

	x.Bytes(m.Peer.Encode())
	x.Int(m.OffsetId)
	x.Int(m.OffsetDate)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getHistory))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.OffsetId)
	x.Int(m.OffsetDate)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetHistory) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.OffsetId = dbuf.Int()
	m.OffsetDate = dbuf.Int()
	m.AddOffset = dbuf.Int()
	m.Limit = dbuf.Int()
	m.MaxId = dbuf.Int()
	m.MinId = dbuf.Int()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSearch() *TLMessagesSearch {
	return &TLMessagesSearch{}
}

func (m *TLMessagesSearch) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_search))

	// flags
	var flags uint32 = 0
	if m.FromId != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	x.String(m.Q)
	if m.FromId != nil {
		x.Bytes(m.FromId.Encode())
	}
	x.Bytes(m.Filter.Encode())
	x.Int(m.MinDate)
	x.Int(m.MaxDate)
	x.Int(m.OffsetId)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesSearch) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_search))

	// flags
	var flags uint32 = 0
	if m.FromId != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.String(m.Q)
	if m.FromId != nil {
		x.Bytes(m.FromId.EncodeToLayer(layer))
	}
	x.Bytes(m.Filter.EncodeToLayer(layer))
	x.Int(m.MinDate)
	x.Int(m.MaxDate)
	x.Int(m.OffsetId)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesSearch) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputPeer{}
	m2.Decode(dbuf)
	m.Peer = m2
	m.Q = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &InputUser{}
		m4.Decode(dbuf)
		m.FromId = m4
	}
	m5 := &MessagesFilter{}
	m5.Decode(dbuf)
	m.Filter = m5
	m.MinDate = dbuf.Int()
	m.MaxDate = dbuf.Int()
	m.OffsetId = dbuf.Int()
	m.AddOffset = dbuf.Int()
	m.Limit = dbuf.Int()
	m.MaxId = dbuf.Int()
	m.MinId = dbuf.Int()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesReadHistory() *TLMessagesReadHistory {
	return &TLMessagesReadHistory{}
}

func (m *TLMessagesReadHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readHistory))

	x.Bytes(m.Peer.Encode())
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLMessagesReadHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readHistory))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLMessagesReadHistory) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.MaxId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesDeleteHistory() *TLMessagesDeleteHistory {
	return &TLMessagesDeleteHistory{}
}

func (m *TLMessagesDeleteHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_deleteHistory))

	// flags
	var flags uint32 = 0
	if m.JustClear == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLMessagesDeleteHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_deleteHistory))

	// flags
	var flags uint32 = 0
	if m.JustClear == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLMessagesDeleteHistory) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.JustClear = true
	}
	m3 := &InputPeer{}
	m3.Decode(dbuf)
	m.Peer = m3
	m.MaxId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesDeleteMessages() *TLMessagesDeleteMessages {
	return &TLMessagesDeleteMessages{}
}

func (m *TLMessagesDeleteMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_deleteMessages))

	// flags
	var flags uint32 = 0
	if m.Revoke == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesDeleteMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_deleteMessages))

	// flags
	var flags uint32 = 0
	if m.Revoke == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesDeleteMessages) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Revoke = true
	}
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLMessagesReceivedMessages() *TLMessagesReceivedMessages {
	return &TLMessagesReceivedMessages{}
}

func (m *TLMessagesReceivedMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_receivedMessages))

	x.Int(m.MaxId)

	return x.buf
}

func (m *TLMessagesReceivedMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_receivedMessages))

	x.Int(m.MaxId)

	return x.buf
}

func (m *TLMessagesReceivedMessages) Decode(dbuf *DecodeBuf) error {
	m.MaxId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSetTyping() *TLMessagesSetTyping {
	return &TLMessagesSetTyping{}
}

func (m *TLMessagesSetTyping) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setTyping))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.Action.Encode())

	return x.buf
}

func (m *TLMessagesSetTyping) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setTyping))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.Action.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesSetTyping) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &SendMessageAction{}
	m2.Decode(dbuf)
	m.Action = m2

	return dbuf.err
}

func NewTLMessagesSendMessage() *TLMessagesSendMessage {
	return &TLMessagesSendMessage{}
}

func (m *TLMessagesSendMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendMessage))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.String(m.Message)
	x.Long(m.RandomId)
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.Encode())
	}
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesSendMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendMessage))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.String(m.Message)
	x.Long(m.RandomId)
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.EncodeToLayer(layer))
	}
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesSendMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.NoWebpage = true
	}
	if (flags & (1 << 5)) != 0 {
		m.Silent = true
	}
	if (flags & (1 << 6)) != 0 {
		m.Background = true
	}
	if (flags & (1 << 7)) != 0 {
		m.ClearDraft = true
	}
	m6 := &InputPeer{}
	m6.Decode(dbuf)
	m.Peer = m6
	if (flags & (1 << 0)) != 0 {
		m.ReplyToMsgId = dbuf.Int()
	}
	m.Message = dbuf.String()
	m.RandomId = dbuf.Long()
	if (flags & (1 << 2)) != 0 {
		m10 := &ReplyMarkup{}
		m10.Decode(dbuf)
		m.ReplyMarkup = m10
	}
	if (flags & (1 << 3)) != 0 {

	}

	return dbuf.err
}

func NewTLMessagesSendMedia() *TLMessagesSendMedia {
	return &TLMessagesSendMedia{}
}

func (m *TLMessagesSendMedia) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendMedia))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Bytes(m.Media.Encode())
	x.String(m.Message)
	x.Long(m.RandomId)
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.Encode())
	}
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesSendMedia) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendMedia))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Bytes(m.Media.EncodeToLayer(layer))
	x.String(m.Message)
	x.Long(m.RandomId)
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.EncodeToLayer(layer))
	}
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesSendMedia) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 5)) != 0 {
		m.Silent = true
	}
	if (flags & (1 << 6)) != 0 {
		m.Background = true
	}
	if (flags & (1 << 7)) != 0 {
		m.ClearDraft = true
	}
	m5 := &InputPeer{}
	m5.Decode(dbuf)
	m.Peer = m5
	if (flags & (1 << 0)) != 0 {
		m.ReplyToMsgId = dbuf.Int()
	}
	m7 := &InputMedia{}
	m7.Decode(dbuf)
	m.Media = m7
	m.Message = dbuf.String()
	m.RandomId = dbuf.Long()
	if (flags & (1 << 2)) != 0 {
		m10 := &ReplyMarkup{}
		m10.Decode(dbuf)
		m.ReplyMarkup = m10
	}
	if (flags & (1 << 3)) != 0 {

	}

	return dbuf.err
}

func NewTLMessagesForwardMessages() *TLMessagesForwardMessages {
	return &TLMessagesForwardMessages{}
}

func (m *TLMessagesForwardMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_forwardMessages))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.WithMyScore == true {
		flags |= 1 << 8
	}
	if m.Grouped == true {
		flags |= 1 << 9
	}
	x.UInt(flags)

	x.Bytes(m.FromPeer.Encode())
	x.VectorInt(m.Id)

	x.VectorLong(m.RandomId)

	x.Bytes(m.ToPeer.Encode())

	return x.buf
}

func (m *TLMessagesForwardMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_forwardMessages))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.WithMyScore == true {
		flags |= 1 << 8
	}
	if m.Grouped == true {
		flags |= 1 << 9
	}
	x.UInt(flags)

	x.Bytes(m.FromPeer.EncodeToLayer(layer))
	x.VectorInt(m.Id)

	x.VectorLong(m.RandomId)

	x.Bytes(m.ToPeer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesForwardMessages) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 5)) != 0 {
		m.Silent = true
	}
	if (flags & (1 << 6)) != 0 {
		m.Background = true
	}
	if (flags & (1 << 8)) != 0 {
		m.WithMyScore = true
	}
	if (flags & (1 << 9)) != 0 {
		m.Grouped = true
	}
	m6 := &InputPeer{}
	m6.Decode(dbuf)
	m.FromPeer = m6
	m.Id = dbuf.VectorInt()
	m.RandomId = dbuf.VectorLong()
	m9 := &InputPeer{}
	m9.Decode(dbuf)
	m.ToPeer = m9

	return dbuf.err
}

func NewTLMessagesReportSpam() *TLMessagesReportSpam {
	return &TLMessagesReportSpam{}
}

func (m *TLMessagesReportSpam) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reportSpam))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesReportSpam) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reportSpam))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesReportSpam) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLMessagesHideReportSpam() *TLMessagesHideReportSpam {
	return &TLMessagesHideReportSpam{}
}

func (m *TLMessagesHideReportSpam) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_hideReportSpam))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesHideReportSpam) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_hideReportSpam))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesHideReportSpam) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLMessagesGetPeerSettings() *TLMessagesGetPeerSettings {
	return &TLMessagesGetPeerSettings{}
}

func (m *TLMessagesGetPeerSettings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getPeerSettings))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesGetPeerSettings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getPeerSettings))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesGetPeerSettings) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLMessagesReport() *TLMessagesReport {
	return &TLMessagesReport{}
}

func (m *TLMessagesReport) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_report))

	x.Bytes(m.Peer.Encode())
	x.VectorInt(m.Id)

	x.Bytes(m.Reason.Encode())

	return x.buf
}

func (m *TLMessagesReport) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_report))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.VectorInt(m.Id)

	x.Bytes(m.Reason.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesReport) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Id = dbuf.VectorInt()
	m3 := &ReportReason{}
	m3.Decode(dbuf)
	m.Reason = m3

	return dbuf.err
}

func NewTLMessagesGetChats() *TLMessagesGetChats {
	return &TLMessagesGetChats{}
}

func (m *TLMessagesGetChats) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getChats))

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesGetChats) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getChats))

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesGetChats) Decode(dbuf *DecodeBuf) error {
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLMessagesGetFullChat() *TLMessagesGetFullChat {
	return &TLMessagesGetFullChat{}
}

func (m *TLMessagesGetFullChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getFullChat))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesGetFullChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getFullChat))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesGetFullChat) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesEditChatTitle() *TLMessagesEditChatTitle {
	return &TLMessagesEditChatTitle{}
}

func (m *TLMessagesEditChatTitle) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editChatTitle))

	x.Int(m.ChatId)
	x.String(m.Title)

	return x.buf
}

func (m *TLMessagesEditChatTitle) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editChatTitle))

	x.Int(m.ChatId)
	x.String(m.Title)

	return x.buf
}

func (m *TLMessagesEditChatTitle) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()
	m.Title = dbuf.String()

	return dbuf.err
}

func NewTLMessagesEditChatPhoto() *TLMessagesEditChatPhoto {
	return &TLMessagesEditChatPhoto{}
}

func (m *TLMessagesEditChatPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editChatPhoto))

	x.Int(m.ChatId)
	x.Bytes(m.Photo.Encode())

	return x.buf
}

func (m *TLMessagesEditChatPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editChatPhoto))

	x.Int(m.ChatId)
	x.Bytes(m.Photo.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesEditChatPhoto) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()
	m2 := &InputChatPhoto{}
	m2.Decode(dbuf)
	m.Photo = m2

	return dbuf.err
}

func NewTLMessagesAddChatUser() *TLMessagesAddChatUser {
	return &TLMessagesAddChatUser{}
}

func (m *TLMessagesAddChatUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_addChatUser))

	x.Int(m.ChatId)
	x.Bytes(m.UserId.Encode())
	x.Int(m.FwdLimit)

	return x.buf
}

func (m *TLMessagesAddChatUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_addChatUser))

	x.Int(m.ChatId)
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.FwdLimit)

	return x.buf
}

func (m *TLMessagesAddChatUser) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2
	m.FwdLimit = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesDeleteChatUser() *TLMessagesDeleteChatUser {
	return &TLMessagesDeleteChatUser{}
}

func (m *TLMessagesDeleteChatUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_deleteChatUser))

	x.Int(m.ChatId)
	x.Bytes(m.UserId.Encode())

	return x.buf
}

func (m *TLMessagesDeleteChatUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_deleteChatUser))

	x.Int(m.ChatId)
	x.Bytes(m.UserId.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesDeleteChatUser) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2

	return dbuf.err
}

func NewTLMessagesCreateChat() *TLMessagesCreateChat {
	return &TLMessagesCreateChat{}
}

func (m *TLMessagesCreateChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_createChat))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Users)))
	for _, v := range m.Users {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.String(m.Title)

	return x.buf
}

func (m *TLMessagesCreateChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_createChat))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Users)))
	for _, v := range m.Users {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.String(m.Title)

	return x.buf
}

func (m *TLMessagesCreateChat) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Users = make([]*InputUser, l1)
	for i := int32(0); i < l1; i++ {
		m.Users[i] = &InputUser{}
		(*m.Users[i]).Decode(dbuf)
	}
	m.Title = dbuf.String()

	return dbuf.err
}

func NewTLMessagesGetDhConfig() *TLMessagesGetDhConfig {
	return &TLMessagesGetDhConfig{}
}

func (m *TLMessagesGetDhConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDhConfig))

	x.Int(m.Version)
	x.Int(m.RandomLength)

	return x.buf
}

func (m *TLMessagesGetDhConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDhConfig))

	x.Int(m.Version)
	x.Int(m.RandomLength)

	return x.buf
}

func (m *TLMessagesGetDhConfig) Decode(dbuf *DecodeBuf) error {
	m.Version = dbuf.Int()
	m.RandomLength = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesRequestEncryption() *TLMessagesRequestEncryption {
	return &TLMessagesRequestEncryption{}
}

func (m *TLMessagesRequestEncryption) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_requestEncryption))

	x.Bytes(m.UserId.Encode())
	x.Int(m.RandomId)
	x.StringBytes(m.GA)

	return x.buf
}

func (m *TLMessagesRequestEncryption) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_requestEncryption))

	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.RandomId)
	x.StringBytes(m.GA)

	return x.buf
}

func (m *TLMessagesRequestEncryption) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.UserId = m1
	m.RandomId = dbuf.Int()
	m.GA = dbuf.StringBytes()

	return dbuf.err
}

func NewTLMessagesAcceptEncryption() *TLMessagesAcceptEncryption {
	return &TLMessagesAcceptEncryption{}
}

func (m *TLMessagesAcceptEncryption) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_acceptEncryption))

	x.Bytes(m.Peer.Encode())
	x.StringBytes(m.GB)
	x.Long(m.KeyFingerprint)

	return x.buf
}

func (m *TLMessagesAcceptEncryption) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_acceptEncryption))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.StringBytes(m.GB)
	x.Long(m.KeyFingerprint)

	return x.buf
}

func (m *TLMessagesAcceptEncryption) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.GB = dbuf.StringBytes()
	m.KeyFingerprint = dbuf.Long()

	return dbuf.err
}

func NewTLMessagesDiscardEncryption() *TLMessagesDiscardEncryption {
	return &TLMessagesDiscardEncryption{}
}

func (m *TLMessagesDiscardEncryption) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_discardEncryption))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesDiscardEncryption) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_discardEncryption))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesDiscardEncryption) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSetEncryptedTyping() *TLMessagesSetEncryptedTyping {
	return &TLMessagesSetEncryptedTyping{}
}

func (m *TLMessagesSetEncryptedTyping) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setEncryptedTyping))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.Typing.Encode())

	return x.buf
}

func (m *TLMessagesSetEncryptedTyping) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setEncryptedTyping))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.Typing.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesSetEncryptedTyping) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Typing = m2

	return dbuf.err
}

func NewTLMessagesReadEncryptedHistory() *TLMessagesReadEncryptedHistory {
	return &TLMessagesReadEncryptedHistory{}
}

func (m *TLMessagesReadEncryptedHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readEncryptedHistory))

	x.Bytes(m.Peer.Encode())
	x.Int(m.MaxDate)

	return x.buf
}

func (m *TLMessagesReadEncryptedHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readEncryptedHistory))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.MaxDate)

	return x.buf
}

func (m *TLMessagesReadEncryptedHistory) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.MaxDate = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSendEncrypted() *TLMessagesSendEncrypted {
	return &TLMessagesSendEncrypted{}
}

func (m *TLMessagesSendEncrypted) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendEncrypted))

	x.Bytes(m.Peer.Encode())
	x.Long(m.RandomId)
	x.StringBytes(m.Data)

	return x.buf
}

func (m *TLMessagesSendEncrypted) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendEncrypted))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Long(m.RandomId)
	x.StringBytes(m.Data)

	return x.buf
}

func (m *TLMessagesSendEncrypted) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.RandomId = dbuf.Long()
	m.Data = dbuf.StringBytes()

	return dbuf.err
}

func NewTLMessagesSendEncryptedFile() *TLMessagesSendEncryptedFile {
	return &TLMessagesSendEncryptedFile{}
}

func (m *TLMessagesSendEncryptedFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedFile))

	x.Bytes(m.Peer.Encode())
	x.Long(m.RandomId)
	x.StringBytes(m.Data)
	x.Bytes(m.File.Encode())

	return x.buf
}

func (m *TLMessagesSendEncryptedFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedFile))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Long(m.RandomId)
	x.StringBytes(m.Data)
	x.Bytes(m.File.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesSendEncryptedFile) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.RandomId = dbuf.Long()
	m.Data = dbuf.StringBytes()
	m4 := &InputEncryptedFile{}
	m4.Decode(dbuf)
	m.File = m4

	return dbuf.err
}

func NewTLMessagesSendEncryptedService() *TLMessagesSendEncryptedService {
	return &TLMessagesSendEncryptedService{}
}

func (m *TLMessagesSendEncryptedService) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedService))

	x.Bytes(m.Peer.Encode())
	x.Long(m.RandomId)
	x.StringBytes(m.Data)

	return x.buf
}

func (m *TLMessagesSendEncryptedService) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedService))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Long(m.RandomId)
	x.StringBytes(m.Data)

	return x.buf
}

func (m *TLMessagesSendEncryptedService) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.RandomId = dbuf.Long()
	m.Data = dbuf.StringBytes()

	return dbuf.err
}

func NewTLMessagesReceivedQueue() *TLMessagesReceivedQueue {
	return &TLMessagesReceivedQueue{}
}

func (m *TLMessagesReceivedQueue) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_receivedQueue))

	x.Int(m.MaxQts)

	return x.buf
}

func (m *TLMessagesReceivedQueue) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_receivedQueue))

	x.Int(m.MaxQts)

	return x.buf
}

func (m *TLMessagesReceivedQueue) Decode(dbuf *DecodeBuf) error {
	m.MaxQts = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesReportEncryptedSpam() *TLMessagesReportEncryptedSpam {
	return &TLMessagesReportEncryptedSpam{}
}

func (m *TLMessagesReportEncryptedSpam) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reportEncryptedSpam))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesReportEncryptedSpam) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reportEncryptedSpam))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesReportEncryptedSpam) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLMessagesReadMessageContents() *TLMessagesReadMessageContents {
	return &TLMessagesReadMessageContents{}
}

func (m *TLMessagesReadMessageContents) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readMessageContents))

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesReadMessageContents) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readMessageContents))

	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLMessagesReadMessageContents) Decode(dbuf *DecodeBuf) error {
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLMessagesGetStickers() *TLMessagesGetStickers {
	return &TLMessagesGetStickers{}
}

func (m *TLMessagesGetStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getStickers))

	x.String(m.Emoticon)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getStickers))

	x.String(m.Emoticon)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetStickers) Decode(dbuf *DecodeBuf) error {
	m.Emoticon = dbuf.String()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetAllStickers() *TLMessagesGetAllStickers {
	return &TLMessagesGetAllStickers{}
}

func (m *TLMessagesGetAllStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAllStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetAllStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAllStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetAllStickers) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetWebPagePreview() *TLMessagesGetWebPagePreview {
	return &TLMessagesGetWebPagePreview{}
}

func (m *TLMessagesGetWebPagePreview) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getWebPagePreview))

	// flags
	var flags uint32 = 0
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.String(m.Message)
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesGetWebPagePreview) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getWebPagePreview))

	// flags
	var flags uint32 = 0
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.String(m.Message)
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesGetWebPagePreview) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.Message = dbuf.String()
	if (flags & (1 << 3)) != 0 {

	}

	return dbuf.err
}

func NewTLMessagesExportChatInvite() *TLMessagesExportChatInvite {
	return &TLMessagesExportChatInvite{}
}

func (m *TLMessagesExportChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_exportChatInvite))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesExportChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_exportChatInvite))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesExportChatInvite) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesCheckChatInvite() *TLMessagesCheckChatInvite {
	return &TLMessagesCheckChatInvite{}
}

func (m *TLMessagesCheckChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_checkChatInvite))

	x.String(m.Hash)

	return x.buf
}

func (m *TLMessagesCheckChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_checkChatInvite))

	x.String(m.Hash)

	return x.buf
}

func (m *TLMessagesCheckChatInvite) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.String()

	return dbuf.err
}

func NewTLMessagesImportChatInvite() *TLMessagesImportChatInvite {
	return &TLMessagesImportChatInvite{}
}

func (m *TLMessagesImportChatInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_importChatInvite))

	x.String(m.Hash)

	return x.buf
}

func (m *TLMessagesImportChatInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_importChatInvite))

	x.String(m.Hash)

	return x.buf
}

func (m *TLMessagesImportChatInvite) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.String()

	return dbuf.err
}

func NewTLMessagesGetStickerSet() *TLMessagesGetStickerSet {
	return &TLMessagesGetStickerSet{}
}

func (m *TLMessagesGetStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getStickerSet))

	x.Bytes(m.Stickerset.Encode())

	return x.buf
}

func (m *TLMessagesGetStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getStickerSet))

	x.Bytes(m.Stickerset.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesGetStickerSet) Decode(dbuf *DecodeBuf) error {
	m1 := &InputStickerSet{}
	m1.Decode(dbuf)
	m.Stickerset = m1

	return dbuf.err
}

func NewTLMessagesInstallStickerSet() *TLMessagesInstallStickerSet {
	return &TLMessagesInstallStickerSet{}
}

func (m *TLMessagesInstallStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_installStickerSet))

	x.Bytes(m.Stickerset.Encode())
	x.Bytes(m.Archived.Encode())

	return x.buf
}

func (m *TLMessagesInstallStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_installStickerSet))

	x.Bytes(m.Stickerset.EncodeToLayer(layer))
	x.Bytes(m.Archived.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesInstallStickerSet) Decode(dbuf *DecodeBuf) error {
	m1 := &InputStickerSet{}
	m1.Decode(dbuf)
	m.Stickerset = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Archived = m2

	return dbuf.err
}

func NewTLMessagesUninstallStickerSet() *TLMessagesUninstallStickerSet {
	return &TLMessagesUninstallStickerSet{}
}

func (m *TLMessagesUninstallStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_uninstallStickerSet))

	x.Bytes(m.Stickerset.Encode())

	return x.buf
}

func (m *TLMessagesUninstallStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_uninstallStickerSet))

	x.Bytes(m.Stickerset.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesUninstallStickerSet) Decode(dbuf *DecodeBuf) error {
	m1 := &InputStickerSet{}
	m1.Decode(dbuf)
	m.Stickerset = m1

	return dbuf.err
}

func NewTLMessagesStartBot() *TLMessagesStartBot {
	return &TLMessagesStartBot{}
}

func (m *TLMessagesStartBot) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_startBot))

	x.Bytes(m.Bot.Encode())
	x.Bytes(m.Peer.Encode())
	x.Long(m.RandomId)
	x.String(m.StartParam)

	return x.buf
}

func (m *TLMessagesStartBot) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_startBot))

	x.Bytes(m.Bot.EncodeToLayer(layer))
	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Long(m.RandomId)
	x.String(m.StartParam)

	return x.buf
}

func (m *TLMessagesStartBot) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.Bot = m1
	m2 := &InputPeer{}
	m2.Decode(dbuf)
	m.Peer = m2
	m.RandomId = dbuf.Long()
	m.StartParam = dbuf.String()

	return dbuf.err
}

func NewTLMessagesGetMessagesViews() *TLMessagesGetMessagesViews {
	return &TLMessagesGetMessagesViews{}
}

func (m *TLMessagesGetMessagesViews) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessagesViews))

	x.Bytes(m.Peer.Encode())
	x.VectorInt(m.Id)

	x.Bytes(m.Increment.Encode())

	return x.buf
}

func (m *TLMessagesGetMessagesViews) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessagesViews))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.VectorInt(m.Id)

	x.Bytes(m.Increment.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesGetMessagesViews) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Id = dbuf.VectorInt()
	m3 := &Bool{}
	m3.Decode(dbuf)
	m.Increment = m3

	return dbuf.err
}

func NewTLMessagesToggleChatAdmins() *TLMessagesToggleChatAdmins {
	return &TLMessagesToggleChatAdmins{}
}

func (m *TLMessagesToggleChatAdmins) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_toggleChatAdmins))

	x.Int(m.ChatId)
	x.Bytes(m.Enabled.Encode())

	return x.buf
}

func (m *TLMessagesToggleChatAdmins) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_toggleChatAdmins))

	x.Int(m.ChatId)
	x.Bytes(m.Enabled.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesToggleChatAdmins) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Enabled = m2

	return dbuf.err
}

func NewTLMessagesEditChatAdmin() *TLMessagesEditChatAdmin {
	return &TLMessagesEditChatAdmin{}
}

func (m *TLMessagesEditChatAdmin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editChatAdmin))

	x.Int(m.ChatId)
	x.Bytes(m.UserId.Encode())
	x.Bytes(m.IsAdmin.Encode())

	return x.buf
}

func (m *TLMessagesEditChatAdmin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editChatAdmin))

	x.Int(m.ChatId)
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Bytes(m.IsAdmin.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesEditChatAdmin) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2
	m3 := &Bool{}
	m3.Decode(dbuf)
	m.IsAdmin = m3

	return dbuf.err
}

func NewTLMessagesMigrateChat() *TLMessagesMigrateChat {
	return &TLMessagesMigrateChat{}
}

func (m *TLMessagesMigrateChat) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_migrateChat))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesMigrateChat) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_migrateChat))

	x.Int(m.ChatId)

	return x.buf
}

func (m *TLMessagesMigrateChat) Decode(dbuf *DecodeBuf) error {
	m.ChatId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSearchGlobal() *TLMessagesSearchGlobal {
	return &TLMessagesSearchGlobal{}
}

func (m *TLMessagesSearchGlobal) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchGlobal))

	x.String(m.Q)
	x.Int(m.OffsetDate)
	x.Bytes(m.OffsetPeer.Encode())
	x.Int(m.OffsetId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesSearchGlobal) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchGlobal))

	x.String(m.Q)
	x.Int(m.OffsetDate)
	x.Bytes(m.OffsetPeer.EncodeToLayer(layer))
	x.Int(m.OffsetId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesSearchGlobal) Decode(dbuf *DecodeBuf) error {
	m.Q = dbuf.String()
	m.OffsetDate = dbuf.Int()
	m3 := &InputPeer{}
	m3.Decode(dbuf)
	m.OffsetPeer = m3
	m.OffsetId = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesReorderStickerSets() *TLMessagesReorderStickerSets {
	return &TLMessagesReorderStickerSets{}
}

func (m *TLMessagesReorderStickerSets) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reorderStickerSets))

	// flags
	var flags uint32 = 0
	if m.Masks == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.VectorLong(m.Order)

	return x.buf
}

func (m *TLMessagesReorderStickerSets) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reorderStickerSets))

	// flags
	var flags uint32 = 0
	if m.Masks == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.VectorLong(m.Order)

	return x.buf
}

func (m *TLMessagesReorderStickerSets) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Masks = true
	}
	m.Order = dbuf.VectorLong()

	return dbuf.err
}

func NewTLMessagesGetDocumentByHash() *TLMessagesGetDocumentByHash {
	return &TLMessagesGetDocumentByHash{}
}

func (m *TLMessagesGetDocumentByHash) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDocumentByHash))

	x.StringBytes(m.Sha256)
	x.Int(m.Size)
	x.String(m.MimeType)

	return x.buf
}

func (m *TLMessagesGetDocumentByHash) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDocumentByHash))

	x.StringBytes(m.Sha256)
	x.Int(m.Size)
	x.String(m.MimeType)

	return x.buf
}

func (m *TLMessagesGetDocumentByHash) Decode(dbuf *DecodeBuf) error {
	m.Sha256 = dbuf.StringBytes()
	m.Size = dbuf.Int()
	m.MimeType = dbuf.String()

	return dbuf.err
}

func NewTLMessagesSearchGifs() *TLMessagesSearchGifs {
	return &TLMessagesSearchGifs{}
}

func (m *TLMessagesSearchGifs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchGifs))

	x.String(m.Q)
	x.Int(m.Offset)

	return x.buf
}

func (m *TLMessagesSearchGifs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchGifs))

	x.String(m.Q)
	x.Int(m.Offset)

	return x.buf
}

func (m *TLMessagesSearchGifs) Decode(dbuf *DecodeBuf) error {
	m.Q = dbuf.String()
	m.Offset = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetSavedGifs() *TLMessagesGetSavedGifs {
	return &TLMessagesGetSavedGifs{}
}

func (m *TLMessagesGetSavedGifs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getSavedGifs))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetSavedGifs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getSavedGifs))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetSavedGifs) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSaveGif() *TLMessagesSaveGif {
	return &TLMessagesSaveGif{}
}

func (m *TLMessagesSaveGif) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_saveGif))

	x.Bytes(m.Id.Encode())
	x.Bytes(m.Unsave.Encode())

	return x.buf
}

func (m *TLMessagesSaveGif) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_saveGif))

	x.Bytes(m.Id.EncodeToLayer(layer))
	x.Bytes(m.Unsave.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesSaveGif) Decode(dbuf *DecodeBuf) error {
	m1 := &InputDocument{}
	m1.Decode(dbuf)
	m.Id = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Unsave = m2

	return dbuf.err
}

func NewTLMessagesGetInlineBotResults() *TLMessagesGetInlineBotResults {
	return &TLMessagesGetInlineBotResults{}
}

func (m *TLMessagesGetInlineBotResults) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getInlineBotResults))

	// flags
	var flags uint32 = 0
	if m.GeoPoint != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Bot.Encode())
	x.Bytes(m.Peer.Encode())
	if m.GeoPoint != nil {
		x.Bytes(m.GeoPoint.Encode())
	}
	x.String(m.Query)
	x.String(m.Offset)

	return x.buf
}

func (m *TLMessagesGetInlineBotResults) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getInlineBotResults))

	// flags
	var flags uint32 = 0
	if m.GeoPoint != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Bot.EncodeToLayer(layer))
	x.Bytes(m.Peer.EncodeToLayer(layer))
	if m.GeoPoint != nil {
		x.Bytes(m.GeoPoint.EncodeToLayer(layer))
	}
	x.String(m.Query)
	x.String(m.Offset)

	return x.buf
}

func (m *TLMessagesGetInlineBotResults) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.Bot = m2
	m3 := &InputPeer{}
	m3.Decode(dbuf)
	m.Peer = m3
	if (flags & (1 << 0)) != 0 {
		m4 := &InputGeoPoint{}
		m4.Decode(dbuf)
		m.GeoPoint = m4
	}
	m.Query = dbuf.String()
	m.Offset = dbuf.String()

	return dbuf.err
}

func NewTLMessagesSetInlineBotResults() *TLMessagesSetInlineBotResults {
	return &TLMessagesSetInlineBotResults{}
}

func (m *TLMessagesSetInlineBotResults) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setInlineBotResults))

	// flags
	var flags uint32 = 0
	if m.Gallery == true {
		flags |= 1 << 0
	}
	if m.Private == true {
		flags |= 1 << 1
	}
	if m.NextOffset != "" {
		flags |= 1 << 2
	}
	if m.SwitchPm != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Long(m.QueryId)
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Results)))
	for _, v := range m.Results {
		x.buf = append(x.buf, (*v).Encode()...)
	}
	x.Int(m.CacheTime)
	if m.NextOffset != "" {
		x.String(m.NextOffset)
	}
	if m.SwitchPm != nil {
		x.Bytes(m.SwitchPm.Encode())
	}

	return x.buf
}

func (m *TLMessagesSetInlineBotResults) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setInlineBotResults))

	// flags
	var flags uint32 = 0
	if m.Gallery == true {
		flags |= 1 << 0
	}
	if m.Private == true {
		flags |= 1 << 1
	}
	if m.NextOffset != "" {
		flags |= 1 << 2
	}
	if m.SwitchPm != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	x.Long(m.QueryId)
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Results)))
	for _, v := range m.Results {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}
	x.Int(m.CacheTime)

	if m.SwitchPm != nil {
		x.Bytes(m.SwitchPm.EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLMessagesSetInlineBotResults) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Gallery = true
	}
	if (flags & (1 << 1)) != 0 {
		m.Private = true
	}
	m.QueryId = dbuf.Long()
	c5 := dbuf.Int()
	if c5 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
		return dbuf.err
	}
	l5 := dbuf.Int()
	m.Results = make([]*InputBotInlineResult, l5)
	for i := int32(0); i < l5; i++ {
		m.Results[i] = &InputBotInlineResult{}
		(*m.Results[i]).Decode(dbuf)
	}
	m.CacheTime = dbuf.Int()
	if (flags & (1 << 2)) != 0 {
		m.NextOffset = dbuf.String()
	}
	if (flags & (1 << 3)) != 0 {
		m8 := &InlineBotSwitchPM{}
		m8.Decode(dbuf)
		m.SwitchPm = m8
	}

	return dbuf.err
}

func NewTLMessagesSendInlineBotResult() *TLMessagesSendInlineBotResult {
	return &TLMessagesSendInlineBotResult{}
}

func (m *TLMessagesSendInlineBotResult) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendInlineBotResult))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Long(m.RandomId)
	x.Long(m.QueryId)
	x.String(m.Id)

	return x.buf
}

func (m *TLMessagesSendInlineBotResult) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendInlineBotResult))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Long(m.RandomId)
	x.Long(m.QueryId)
	x.String(m.Id)

	return x.buf
}

func (m *TLMessagesSendInlineBotResult) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 5)) != 0 {
		m.Silent = true
	}
	if (flags & (1 << 6)) != 0 {
		m.Background = true
	}
	if (flags & (1 << 7)) != 0 {
		m.ClearDraft = true
	}
	m5 := &InputPeer{}
	m5.Decode(dbuf)
	m.Peer = m5
	if (flags & (1 << 0)) != 0 {
		m.ReplyToMsgId = dbuf.Int()
	}
	m.RandomId = dbuf.Long()
	m.QueryId = dbuf.Long()
	m.Id = dbuf.String()

	return dbuf.err
}

func NewTLMessagesGetMessageEditData() *TLMessagesGetMessageEditData {
	return &TLMessagesGetMessageEditData{}
}

func (m *TLMessagesGetMessageEditData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessageEditData))

	x.Bytes(m.Peer.Encode())
	x.Int(m.Id)

	return x.buf
}

func (m *TLMessagesGetMessageEditData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMessageEditData))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Id)

	return x.buf
}

func (m *TLMessagesGetMessageEditData) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Id = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesEditMessage() *TLMessagesEditMessage {
	return &TLMessagesEditMessage{}
}

func (m *TLMessagesEditMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editMessage))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.StopGeoLive == true {
		flags |= 1 << 12
	}
	if m.Message != "" {
		flags |= 1 << 11
	}
	if m.Media != nil {
		flags |= 1 << 14
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	if m.GeoPoint != nil {
		flags |= 1 << 13
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	x.Int(m.Id)
	if m.Message != "" {
		x.String(m.Message)
	}
	if m.Media != nil {
		x.Bytes(m.Media.Encode())
	}
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.Encode())
	}
	if m.Entities != nil {

	}
	if m.GeoPoint != nil {
		x.Bytes(m.GeoPoint.Encode())
	}

	return x.buf
}

func (m *TLMessagesEditMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editMessage))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.StopGeoLive == true {
		flags |= 1 << 12
	}
	if m.Message != "" {
		flags |= 1 << 11
	}
	if m.Media != nil {
		flags |= 1 << 14
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	if m.GeoPoint != nil {
		flags |= 1 << 13
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Id)

	if m.Media != nil {
		x.Bytes(m.Media.EncodeToLayer(layer))
	}
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.EncodeToLayer(layer))
	}
	if m.Entities != nil {

	}
	if m.GeoPoint != nil {
		x.Bytes(m.GeoPoint.EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLMessagesEditMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.NoWebpage = true
	}
	if (flags & (1 << 12)) != 0 {
		m.StopGeoLive = true
	}
	m4 := &InputPeer{}
	m4.Decode(dbuf)
	m.Peer = m4
	m.Id = dbuf.Int()
	if (flags & (1 << 11)) != 0 {
		m.Message = dbuf.String()
	}
	if (flags & (1 << 14)) != 0 {
		m7 := &InputMedia{}
		m7.Decode(dbuf)
		m.Media = m7
	}
	if (flags & (1 << 2)) != 0 {
		m8 := &ReplyMarkup{}
		m8.Decode(dbuf)
		m.ReplyMarkup = m8
	}
	if (flags & (1 << 3)) != 0 {

	}
	if (flags & (1 << 13)) != 0 {
		m10 := &InputGeoPoint{}
		m10.Decode(dbuf)
		m.GeoPoint = m10
	}

	return dbuf.err
}

func NewTLMessagesEditInlineBotMessage() *TLMessagesEditInlineBotMessage {
	return &TLMessagesEditInlineBotMessage{}
}

func (m *TLMessagesEditInlineBotMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editInlineBotMessage))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.StopGeoLive == true {
		flags |= 1 << 12
	}
	if m.Message != "" {
		flags |= 1 << 11
	}
	if m.Media != nil {
		flags |= 1 << 14
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	if m.GeoPoint != nil {
		flags |= 1 << 13
	}
	x.UInt(flags)

	x.Bytes(m.Id.Encode())
	if m.Message != "" {
		x.String(m.Message)
	}
	if m.Media != nil {
		x.Bytes(m.Media.Encode())
	}
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.Encode())
	}
	if m.Entities != nil {

	}
	if m.GeoPoint != nil {
		x.Bytes(m.GeoPoint.Encode())
	}

	return x.buf
}

func (m *TLMessagesEditInlineBotMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_editInlineBotMessage))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.StopGeoLive == true {
		flags |= 1 << 12
	}
	if m.Message != "" {
		flags |= 1 << 11
	}
	if m.Media != nil {
		flags |= 1 << 14
	}
	if m.ReplyMarkup != nil {
		flags |= 1 << 2
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	if m.GeoPoint != nil {
		flags |= 1 << 13
	}
	x.UInt(flags)

	x.Bytes(m.Id.EncodeToLayer(layer))

	if m.Media != nil {
		x.Bytes(m.Media.EncodeToLayer(layer))
	}
	if m.ReplyMarkup != nil {
		x.Bytes(m.ReplyMarkup.EncodeToLayer(layer))
	}
	if m.Entities != nil {

	}
	if m.GeoPoint != nil {
		x.Bytes(m.GeoPoint.EncodeToLayer(layer))
	}

	return x.buf
}

func (m *TLMessagesEditInlineBotMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.NoWebpage = true
	}
	if (flags & (1 << 12)) != 0 {
		m.StopGeoLive = true
	}
	m4 := &InputBotInlineMessageID{}
	m4.Decode(dbuf)
	m.Id = m4
	if (flags & (1 << 11)) != 0 {
		m.Message = dbuf.String()
	}
	if (flags & (1 << 14)) != 0 {
		m6 := &InputMedia{}
		m6.Decode(dbuf)
		m.Media = m6
	}
	if (flags & (1 << 2)) != 0 {
		m7 := &ReplyMarkup{}
		m7.Decode(dbuf)
		m.ReplyMarkup = m7
	}
	if (flags & (1 << 3)) != 0 {

	}
	if (flags & (1 << 13)) != 0 {
		m9 := &InputGeoPoint{}
		m9.Decode(dbuf)
		m.GeoPoint = m9
	}

	return dbuf.err
}

func NewTLMessagesGetBotCallbackAnswer() *TLMessagesGetBotCallbackAnswer {
	return &TLMessagesGetBotCallbackAnswer{}
}

func (m *TLMessagesGetBotCallbackAnswer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getBotCallbackAnswer))

	// flags
	var flags uint32 = 0
	if m.Game == true {
		flags |= 1 << 1
	}
	if m.Data != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	x.Int(m.MsgId)
	if m.Data != nil {
		x.StringBytes(m.Data)
	}

	return x.buf
}

func (m *TLMessagesGetBotCallbackAnswer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getBotCallbackAnswer))

	// flags
	var flags uint32 = 0
	if m.Game == true {
		flags |= 1 << 1
	}
	if m.Data != nil {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.MsgId)
	if m.Data != nil {
		x.StringBytes(m.Data)
	}

	return x.buf
}

func (m *TLMessagesGetBotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.Game = true
	}
	m3 := &InputPeer{}
	m3.Decode(dbuf)
	m.Peer = m3
	m.MsgId = dbuf.Int()
	if (flags & (1 << 0)) != 0 {
		m.Data = dbuf.StringBytes()
	}

	return dbuf.err
}

func NewTLMessagesSetBotCallbackAnswer() *TLMessagesSetBotCallbackAnswer {
	return &TLMessagesSetBotCallbackAnswer{}
}

func (m *TLMessagesSetBotCallbackAnswer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setBotCallbackAnswer))

	// flags
	var flags uint32 = 0
	if m.Alert == true {
		flags |= 1 << 1
	}
	if m.Message != "" {
		flags |= 1 << 0
	}
	if m.Url != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Long(m.QueryId)
	if m.Message != "" {
		x.String(m.Message)
	}
	if m.Url != "" {
		x.String(m.Url)
	}
	x.Int(m.CacheTime)

	return x.buf
}

func (m *TLMessagesSetBotCallbackAnswer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setBotCallbackAnswer))

	// flags
	var flags uint32 = 0
	if m.Alert == true {
		flags |= 1 << 1
	}
	if m.Message != "" {
		flags |= 1 << 0
	}
	if m.Url != "" {
		flags |= 1 << 2
	}
	x.UInt(flags)

	x.Long(m.QueryId)

	x.Int(m.CacheTime)

	return x.buf
}

func (m *TLMessagesSetBotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.Alert = true
	}
	m.QueryId = dbuf.Long()
	if (flags & (1 << 0)) != 0 {
		m.Message = dbuf.String()
	}
	if (flags & (1 << 2)) != 0 {
		m.Url = dbuf.String()
	}
	m.CacheTime = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetPeerDialogs() *TLMessagesGetPeerDialogs {
	return &TLMessagesGetPeerDialogs{}
}

func (m *TLMessagesGetPeerDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getPeerDialogs))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Peers)))
	for _, v := range m.Peers {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesGetPeerDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getPeerDialogs))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Peers)))
	for _, v := range m.Peers {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesGetPeerDialogs) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Peers = make([]*InputDialogPeer, l1)
	for i := int32(0); i < l1; i++ {
		m.Peers[i] = &InputDialogPeer{}
		(*m.Peers[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLMessagesSaveDraft() *TLMessagesSaveDraft {
	return &TLMessagesSaveDraft{}
}

func (m *TLMessagesSaveDraft) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_saveDraft))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Bytes(m.Peer.Encode())
	x.String(m.Message)
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesSaveDraft) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_saveDraft))

	// flags
	var flags uint32 = 0
	if m.NoWebpage == true {
		flags |= 1 << 1
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	if m.Entities != nil {
		flags |= 1 << 3
	}
	x.UInt(flags)

	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.String(m.Message)
	if m.Entities != nil {

	}

	return x.buf
}

func (m *TLMessagesSaveDraft) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.NoWebpage = true
	}
	if (flags & (1 << 0)) != 0 {
		m.ReplyToMsgId = dbuf.Int()
	}
	m4 := &InputPeer{}
	m4.Decode(dbuf)
	m.Peer = m4
	m.Message = dbuf.String()
	if (flags & (1 << 3)) != 0 {

	}

	return dbuf.err
}

func NewTLMessagesGetAllDrafts() *TLMessagesGetAllDrafts {
	return &TLMessagesGetAllDrafts{}
}

func (m *TLMessagesGetAllDrafts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAllDrafts))

	return x.buf
}

func (m *TLMessagesGetAllDrafts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAllDrafts))

	return x.buf
}

func (m *TLMessagesGetAllDrafts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLMessagesGetFeaturedStickers() *TLMessagesGetFeaturedStickers {
	return &TLMessagesGetFeaturedStickers{}
}

func (m *TLMessagesGetFeaturedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getFeaturedStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetFeaturedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getFeaturedStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetFeaturedStickers) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesReadFeaturedStickers() *TLMessagesReadFeaturedStickers {
	return &TLMessagesReadFeaturedStickers{}
}

func (m *TLMessagesReadFeaturedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readFeaturedStickers))

	x.VectorLong(m.Id)

	return x.buf
}

func (m *TLMessagesReadFeaturedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readFeaturedStickers))

	x.VectorLong(m.Id)

	return x.buf
}

func (m *TLMessagesReadFeaturedStickers) Decode(dbuf *DecodeBuf) error {
	m.Id = dbuf.VectorLong()

	return dbuf.err
}

func NewTLMessagesGetRecentStickers() *TLMessagesGetRecentStickers {
	return &TLMessagesGetRecentStickers{}
}

func (m *TLMessagesGetRecentStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getRecentStickers))

	// flags
	var flags uint32 = 0
	if m.Attached == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetRecentStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getRecentStickers))

	// flags
	var flags uint32 = 0
	if m.Attached == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetRecentStickers) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Attached = true
	}
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSaveRecentSticker() *TLMessagesSaveRecentSticker {
	return &TLMessagesSaveRecentSticker{}
}

func (m *TLMessagesSaveRecentSticker) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_saveRecentSticker))

	// flags
	var flags uint32 = 0
	if m.Attached == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Id.Encode())
	x.Bytes(m.Unsave.Encode())

	return x.buf
}

func (m *TLMessagesSaveRecentSticker) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_saveRecentSticker))

	// flags
	var flags uint32 = 0
	if m.Attached == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Id.EncodeToLayer(layer))
	x.Bytes(m.Unsave.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesSaveRecentSticker) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Attached = true
	}
	m3 := &InputDocument{}
	m3.Decode(dbuf)
	m.Id = m3
	m4 := &Bool{}
	m4.Decode(dbuf)
	m.Unsave = m4

	return dbuf.err
}

func NewTLMessagesClearRecentStickers() *TLMessagesClearRecentStickers {
	return &TLMessagesClearRecentStickers{}
}

func (m *TLMessagesClearRecentStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_clearRecentStickers))

	// flags
	var flags uint32 = 0
	if m.Attached == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLMessagesClearRecentStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_clearRecentStickers))

	// flags
	var flags uint32 = 0
	if m.Attached == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLMessagesClearRecentStickers) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Attached = true
	}

	return dbuf.err
}

func NewTLMessagesGetArchivedStickers() *TLMessagesGetArchivedStickers {
	return &TLMessagesGetArchivedStickers{}
}

func (m *TLMessagesGetArchivedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getArchivedStickers))

	// flags
	var flags uint32 = 0
	if m.Masks == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.OffsetId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesGetArchivedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getArchivedStickers))

	// flags
	var flags uint32 = 0
	if m.Masks == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.OffsetId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesGetArchivedStickers) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Masks = true
	}
	m.OffsetId = dbuf.Long()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetMaskStickers() *TLMessagesGetMaskStickers {
	return &TLMessagesGetMaskStickers{}
}

func (m *TLMessagesGetMaskStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMaskStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetMaskStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getMaskStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetMaskStickers) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetAttachedStickers() *TLMessagesGetAttachedStickers {
	return &TLMessagesGetAttachedStickers{}
}

func (m *TLMessagesGetAttachedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAttachedStickers))

	x.Bytes(m.Media.Encode())

	return x.buf
}

func (m *TLMessagesGetAttachedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAttachedStickers))

	x.Bytes(m.Media.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesGetAttachedStickers) Decode(dbuf *DecodeBuf) error {
	m1 := &InputStickeredMedia{}
	m1.Decode(dbuf)
	m.Media = m1

	return dbuf.err
}

func NewTLMessagesSetGameScore() *TLMessagesSetGameScore {
	return &TLMessagesSetGameScore{}
}

func (m *TLMessagesSetGameScore) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setGameScore))

	// flags
	var flags uint32 = 0
	if m.EditMessage == true {
		flags |= 1 << 0
	}
	if m.Force == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	x.Int(m.Id)
	x.Bytes(m.UserId.Encode())
	x.Int(m.Score)

	return x.buf
}

func (m *TLMessagesSetGameScore) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setGameScore))

	// flags
	var flags uint32 = 0
	if m.EditMessage == true {
		flags |= 1 << 0
	}
	if m.Force == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Id)
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.Score)

	return x.buf
}

func (m *TLMessagesSetGameScore) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.EditMessage = true
	}
	if (flags & (1 << 1)) != 0 {
		m.Force = true
	}
	m4 := &InputPeer{}
	m4.Decode(dbuf)
	m.Peer = m4
	m.Id = dbuf.Int()
	m6 := &InputUser{}
	m6.Decode(dbuf)
	m.UserId = m6
	m.Score = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSetInlineGameScore() *TLMessagesSetInlineGameScore {
	return &TLMessagesSetInlineGameScore{}
}

func (m *TLMessagesSetInlineGameScore) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setInlineGameScore))

	// flags
	var flags uint32 = 0
	if m.EditMessage == true {
		flags |= 1 << 0
	}
	if m.Force == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.Id.Encode())
	x.Bytes(m.UserId.Encode())
	x.Int(m.Score)

	return x.buf
}

func (m *TLMessagesSetInlineGameScore) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setInlineGameScore))

	// flags
	var flags uint32 = 0
	if m.EditMessage == true {
		flags |= 1 << 0
	}
	if m.Force == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.Id.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.Score)

	return x.buf
}

func (m *TLMessagesSetInlineGameScore) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.EditMessage = true
	}
	if (flags & (1 << 1)) != 0 {
		m.Force = true
	}
	m4 := &InputBotInlineMessageID{}
	m4.Decode(dbuf)
	m.Id = m4
	m5 := &InputUser{}
	m5.Decode(dbuf)
	m.UserId = m5
	m.Score = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetGameHighScores() *TLMessagesGetGameHighScores {
	return &TLMessagesGetGameHighScores{}
}

func (m *TLMessagesGetGameHighScores) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getGameHighScores))

	x.Bytes(m.Peer.Encode())
	x.Int(m.Id)
	x.Bytes(m.UserId.Encode())

	return x.buf
}

func (m *TLMessagesGetGameHighScores) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getGameHighScores))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Id)
	x.Bytes(m.UserId.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesGetGameHighScores) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Id = dbuf.Int()
	m3 := &InputUser{}
	m3.Decode(dbuf)
	m.UserId = m3

	return dbuf.err
}

func NewTLMessagesGetInlineGameHighScores() *TLMessagesGetInlineGameHighScores {
	return &TLMessagesGetInlineGameHighScores{}
}

func (m *TLMessagesGetInlineGameHighScores) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getInlineGameHighScores))

	x.Bytes(m.Id.Encode())
	x.Bytes(m.UserId.Encode())

	return x.buf
}

func (m *TLMessagesGetInlineGameHighScores) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getInlineGameHighScores))

	x.Bytes(m.Id.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesGetInlineGameHighScores) Decode(dbuf *DecodeBuf) error {
	m1 := &InputBotInlineMessageID{}
	m1.Decode(dbuf)
	m.Id = m1
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2

	return dbuf.err
}

func NewTLMessagesGetCommonChats() *TLMessagesGetCommonChats {
	return &TLMessagesGetCommonChats{}
}

func (m *TLMessagesGetCommonChats) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getCommonChats))

	x.Bytes(m.UserId.Encode())
	x.Int(m.MaxId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesGetCommonChats) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getCommonChats))

	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.MaxId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLMessagesGetCommonChats) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.UserId = m1
	m.MaxId = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetAllChats() *TLMessagesGetAllChats {
	return &TLMessagesGetAllChats{}
}

func (m *TLMessagesGetAllChats) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAllChats))

	x.VectorInt(m.ExceptIds)

	return x.buf
}

func (m *TLMessagesGetAllChats) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getAllChats))

	x.VectorInt(m.ExceptIds)

	return x.buf
}

func (m *TLMessagesGetAllChats) Decode(dbuf *DecodeBuf) error {
	m.ExceptIds = dbuf.VectorInt()

	return dbuf.err
}

func NewTLMessagesGetWebPage() *TLMessagesGetWebPage {
	return &TLMessagesGetWebPage{}
}

func (m *TLMessagesGetWebPage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getWebPage))

	x.String(m.Url)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetWebPage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getWebPage))

	x.String(m.Url)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetWebPage) Decode(dbuf *DecodeBuf) error {
	m.Url = dbuf.String()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesToggleDialogPin() *TLMessagesToggleDialogPin {
	return &TLMessagesToggleDialogPin{}
}

func (m *TLMessagesToggleDialogPin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_toggleDialogPin))

	// flags
	var flags uint32 = 0
	if m.Pinned == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesToggleDialogPin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_toggleDialogPin))

	// flags
	var flags uint32 = 0
	if m.Pinned == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesToggleDialogPin) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Pinned = true
	}
	m3 := &InputDialogPeer{}
	m3.Decode(dbuf)
	m.Peer = m3

	return dbuf.err
}

func NewTLMessagesReorderPinnedDialogs() *TLMessagesReorderPinnedDialogs {
	return &TLMessagesReorderPinnedDialogs{}
}

func (m *TLMessagesReorderPinnedDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reorderPinnedDialogs))

	// flags
	var flags uint32 = 0
	if m.Force == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Order)))
	for _, v := range m.Order {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesReorderPinnedDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_reorderPinnedDialogs))

	// flags
	var flags uint32 = 0
	if m.Force == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Order)))
	for _, v := range m.Order {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesReorderPinnedDialogs) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Force = true
	}
	c3 := dbuf.Int()
	if c3 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
		return dbuf.err
	}
	l3 := dbuf.Int()
	m.Order = make([]*InputDialogPeer, l3)
	for i := int32(0); i < l3; i++ {
		m.Order[i] = &InputDialogPeer{}
		(*m.Order[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLMessagesGetPinnedDialogs() *TLMessagesGetPinnedDialogs {
	return &TLMessagesGetPinnedDialogs{}
}

func (m *TLMessagesGetPinnedDialogs) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getPinnedDialogs))

	return x.buf
}

func (m *TLMessagesGetPinnedDialogs) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getPinnedDialogs))

	return x.buf
}

func (m *TLMessagesGetPinnedDialogs) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLMessagesSetBotShippingResults() *TLMessagesSetBotShippingResults {
	return &TLMessagesSetBotShippingResults{}
}

func (m *TLMessagesSetBotShippingResults) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setBotShippingResults))

	// flags
	var flags uint32 = 0
	if m.Error != "" {
		flags |= 1 << 0
	}
	if m.ShippingOptions != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.QueryId)
	if m.Error != "" {
		x.String(m.Error)
	}
	if m.ShippingOptions != nil {

	}

	return x.buf
}

func (m *TLMessagesSetBotShippingResults) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setBotShippingResults))

	// flags
	var flags uint32 = 0
	if m.Error != "" {
		flags |= 1 << 0
	}
	if m.ShippingOptions != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Long(m.QueryId)

	if m.ShippingOptions != nil {

	}

	return x.buf
}

func (m *TLMessagesSetBotShippingResults) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.QueryId = dbuf.Long()
	if (flags & (1 << 0)) != 0 {
		m.Error = dbuf.String()
	}
	if (flags & (1 << 1)) != 0 {

	}

	return dbuf.err
}

func NewTLMessagesSetBotPrecheckoutResults() *TLMessagesSetBotPrecheckoutResults {
	return &TLMessagesSetBotPrecheckoutResults{}
}

func (m *TLMessagesSetBotPrecheckoutResults) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setBotPrecheckoutResults))

	// flags
	var flags uint32 = 0
	if m.Success == true {
		flags |= 1 << 1
	}
	if m.Error != "" {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.QueryId)
	if m.Error != "" {
		x.String(m.Error)
	}

	return x.buf
}

func (m *TLMessagesSetBotPrecheckoutResults) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_setBotPrecheckoutResults))

	// flags
	var flags uint32 = 0
	if m.Success == true {
		flags |= 1 << 1
	}
	if m.Error != "" {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.QueryId)

	return x.buf
}

func (m *TLMessagesSetBotPrecheckoutResults) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 1)) != 0 {
		m.Success = true
	}
	m.QueryId = dbuf.Long()
	if (flags & (1 << 0)) != 0 {
		m.Error = dbuf.String()
	}

	return dbuf.err
}

func NewTLMessagesUploadMedia() *TLMessagesUploadMedia {
	return &TLMessagesUploadMedia{}
}

func (m *TLMessagesUploadMedia) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_uploadMedia))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.Media.Encode())

	return x.buf
}

func (m *TLMessagesUploadMedia) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_uploadMedia))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.Media.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesUploadMedia) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &InputMedia{}
	m2.Decode(dbuf)
	m.Media = m2

	return dbuf.err
}

func NewTLMessagesSendScreenshotNotification() *TLMessagesSendScreenshotNotification {
	return &TLMessagesSendScreenshotNotification{}
}

func (m *TLMessagesSendScreenshotNotification) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendScreenshotNotification))

	x.Bytes(m.Peer.Encode())
	x.Int(m.ReplyToMsgId)
	x.Long(m.RandomId)

	return x.buf
}

func (m *TLMessagesSendScreenshotNotification) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendScreenshotNotification))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.ReplyToMsgId)
	x.Long(m.RandomId)

	return x.buf
}

func (m *TLMessagesSendScreenshotNotification) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.ReplyToMsgId = dbuf.Int()
	m.RandomId = dbuf.Long()

	return dbuf.err
}

func NewTLMessagesGetFavedStickers() *TLMessagesGetFavedStickers {
	return &TLMessagesGetFavedStickers{}
}

func (m *TLMessagesGetFavedStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getFavedStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetFavedStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getFavedStickers))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetFavedStickers) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesFaveSticker() *TLMessagesFaveSticker {
	return &TLMessagesFaveSticker{}
}

func (m *TLMessagesFaveSticker) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_faveSticker))

	x.Bytes(m.Id.Encode())
	x.Bytes(m.Unfave.Encode())

	return x.buf
}

func (m *TLMessagesFaveSticker) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_faveSticker))

	x.Bytes(m.Id.EncodeToLayer(layer))
	x.Bytes(m.Unfave.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesFaveSticker) Decode(dbuf *DecodeBuf) error {
	m1 := &InputDocument{}
	m1.Decode(dbuf)
	m.Id = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Unfave = m2

	return dbuf.err
}

func NewTLMessagesGetUnreadMentions() *TLMessagesGetUnreadMentions {
	return &TLMessagesGetUnreadMentions{}
}

func (m *TLMessagesGetUnreadMentions) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getUnreadMentions))

	x.Bytes(m.Peer.Encode())
	x.Int(m.OffsetId)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)

	return x.buf
}

func (m *TLMessagesGetUnreadMentions) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getUnreadMentions))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.OffsetId)
	x.Int(m.AddOffset)
	x.Int(m.Limit)
	x.Int(m.MaxId)
	x.Int(m.MinId)

	return x.buf
}

func (m *TLMessagesGetUnreadMentions) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.OffsetId = dbuf.Int()
	m.AddOffset = dbuf.Int()
	m.Limit = dbuf.Int()
	m.MaxId = dbuf.Int()
	m.MinId = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesReadMentions() *TLMessagesReadMentions {
	return &TLMessagesReadMentions{}
}

func (m *TLMessagesReadMentions) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readMentions))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesReadMentions) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_readMentions))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesReadMentions) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLMessagesGetRecentLocations() *TLMessagesGetRecentLocations {
	return &TLMessagesGetRecentLocations{}
}

func (m *TLMessagesGetRecentLocations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getRecentLocations))

	x.Bytes(m.Peer.Encode())
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetRecentLocations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getRecentLocations))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesGetRecentLocations) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPeer{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Limit = dbuf.Int()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesSendMultiMedia() *TLMessagesSendMultiMedia {
	return &TLMessagesSendMultiMedia{}
}

func (m *TLMessagesSendMultiMedia) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendMultiMedia))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.MultiMedia)))
	for _, v := range m.MultiMedia {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLMessagesSendMultiMedia) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_sendMultiMedia))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 5
	}
	if m.Background == true {
		flags |= 1 << 6
	}
	if m.ClearDraft == true {
		flags |= 1 << 7
	}
	if m.ReplyToMsgId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))
	if m.ReplyToMsgId != 0 {
		x.Int(m.ReplyToMsgId)
	}
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.MultiMedia)))
	for _, v := range m.MultiMedia {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLMessagesSendMultiMedia) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 5)) != 0 {
		m.Silent = true
	}
	if (flags & (1 << 6)) != 0 {
		m.Background = true
	}
	if (flags & (1 << 7)) != 0 {
		m.ClearDraft = true
	}
	m5 := &InputPeer{}
	m5.Decode(dbuf)
	m.Peer = m5
	if (flags & (1 << 0)) != 0 {
		m.ReplyToMsgId = dbuf.Int()
	}
	c7 := dbuf.Int()
	if c7 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
		return dbuf.err
	}
	l7 := dbuf.Int()
	m.MultiMedia = make([]*InputSingleMedia, l7)
	for i := int32(0); i < l7; i++ {
		m.MultiMedia[i] = &InputSingleMedia{}
		(*m.MultiMedia[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLMessagesUploadEncryptedFile() *TLMessagesUploadEncryptedFile {
	return &TLMessagesUploadEncryptedFile{}
}

func (m *TLMessagesUploadEncryptedFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_uploadEncryptedFile))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.File.Encode())

	return x.buf
}

func (m *TLMessagesUploadEncryptedFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_uploadEncryptedFile))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.File.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesUploadEncryptedFile) Decode(dbuf *DecodeBuf) error {
	m1 := &InputEncryptedChat{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &InputEncryptedFile{}
	m2.Decode(dbuf)
	m.File = m2

	return dbuf.err
}

func NewTLMessagesSearchStickerSets() *TLMessagesSearchStickerSets {
	return &TLMessagesSearchStickerSets{}
}

func (m *TLMessagesSearchStickerSets) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchStickerSets))

	// flags
	var flags uint32 = 0
	if m.ExcludeFeatured == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.Q)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesSearchStickerSets) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_searchStickerSets))

	// flags
	var flags uint32 = 0
	if m.ExcludeFeatured == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.String(m.Q)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLMessagesSearchStickerSets) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.ExcludeFeatured = true
	}
	m.Q = dbuf.String()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLMessagesGetSplitRanges() *TLMessagesGetSplitRanges {
	return &TLMessagesGetSplitRanges{}
}

func (m *TLMessagesGetSplitRanges) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getSplitRanges))

	return x.buf
}

func (m *TLMessagesGetSplitRanges) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getSplitRanges))

	return x.buf
}

func (m *TLMessagesGetSplitRanges) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLMessagesMarkDialogUnread() *TLMessagesMarkDialogUnread {
	return &TLMessagesMarkDialogUnread{}
}

func (m *TLMessagesMarkDialogUnread) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_markDialogUnread))

	// flags
	var flags uint32 = 0
	if m.Unread == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLMessagesMarkDialogUnread) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_markDialogUnread))

	// flags
	var flags uint32 = 0
	if m.Unread == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLMessagesMarkDialogUnread) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Unread = true
	}
	m3 := &InputDialogPeer{}
	m3.Decode(dbuf)
	m.Peer = m3

	return dbuf.err
}

func NewTLMessagesGetDialogUnreadMarks() *TLMessagesGetDialogUnreadMarks {
	return &TLMessagesGetDialogUnreadMarks{}
}

func (m *TLMessagesGetDialogUnreadMarks) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDialogUnreadMarks))

	return x.buf
}

func (m *TLMessagesGetDialogUnreadMarks) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_getDialogUnreadMarks))

	return x.buf
}

func (m *TLMessagesGetDialogUnreadMarks) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLMessagesClearAllDrafts() *TLMessagesClearAllDrafts {
	return &TLMessagesClearAllDrafts{}
}

func (m *TLMessagesClearAllDrafts) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_clearAllDrafts))

	return x.buf
}

func (m *TLMessagesClearAllDrafts) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_messages_clearAllDrafts))

	return x.buf
}

func (m *TLMessagesClearAllDrafts) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLUpdatesGetState() *TLUpdatesGetState {
	return &TLUpdatesGetState{}
}

func (m *TLUpdatesGetState) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getState))

	return x.buf
}

func (m *TLUpdatesGetState) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getState))

	return x.buf
}

func (m *TLUpdatesGetState) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLUpdatesGetDifference() *TLUpdatesGetDifference {
	return &TLUpdatesGetDifference{}
}

func (m *TLUpdatesGetDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getDifference))

	// flags
	var flags uint32 = 0
	if m.PtsTotalLimit != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.Pts)
	if m.PtsTotalLimit != 0 {
		x.Int(m.PtsTotalLimit)
	}
	x.Int(m.Date)
	x.Int(m.Qts)

	return x.buf
}

func (m *TLUpdatesGetDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getDifference))

	// flags
	var flags uint32 = 0
	if m.PtsTotalLimit != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.Pts)
	if m.PtsTotalLimit != 0 {
		x.Int(m.PtsTotalLimit)
	}
	x.Int(m.Date)
	x.Int(m.Qts)

	return x.buf
}

func (m *TLUpdatesGetDifference) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.Pts = dbuf.Int()
	if (flags & (1 << 0)) != 0 {
		m.PtsTotalLimit = dbuf.Int()
	}
	m.Date = dbuf.Int()
	m.Qts = dbuf.Int()

	return dbuf.err
}

func NewTLUpdatesGetChannelDifference() *TLUpdatesGetChannelDifference {
	return &TLUpdatesGetChannelDifference{}
}

func (m *TLUpdatesGetChannelDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getChannelDifference))

	// flags
	var flags uint32 = 0
	if m.Force == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Filter.Encode())
	x.Int(m.Pts)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUpdatesGetChannelDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_updates_getChannelDifference))

	// flags
	var flags uint32 = 0
	if m.Force == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Filter.EncodeToLayer(layer))
	x.Int(m.Pts)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUpdatesGetChannelDifference) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Force = true
	}
	m3 := &InputChannel{}
	m3.Decode(dbuf)
	m.Channel = m3
	m4 := &ChannelMessagesFilter{}
	m4.Decode(dbuf)
	m.Filter = m4
	m.Pts = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLPhotosUpdateProfilePhoto() *TLPhotosUpdateProfilePhoto {
	return &TLPhotosUpdateProfilePhoto{}
}

func (m *TLPhotosUpdateProfilePhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_updateProfilePhoto))

	x.Bytes(m.Id.Encode())

	return x.buf
}

func (m *TLPhotosUpdateProfilePhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_updateProfilePhoto))

	x.Bytes(m.Id.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhotosUpdateProfilePhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoto{}
	m1.Decode(dbuf)
	m.Id = m1

	return dbuf.err
}

func NewTLPhotosUploadProfilePhoto() *TLPhotosUploadProfilePhoto {
	return &TLPhotosUploadProfilePhoto{}
}

func (m *TLPhotosUploadProfilePhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_uploadProfilePhoto))

	x.Bytes(m.File.Encode())

	return x.buf
}

func (m *TLPhotosUploadProfilePhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_uploadProfilePhoto))

	x.Bytes(m.File.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhotosUploadProfilePhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &InputFile{}
	m1.Decode(dbuf)
	m.File = m1

	return dbuf.err
}

func NewTLPhotosDeletePhotos() *TLPhotosDeletePhotos {
	return &TLPhotosDeletePhotos{}
}

func (m *TLPhotosDeletePhotos) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_deletePhotos))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLPhotosDeletePhotos) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_deletePhotos))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLPhotosDeletePhotos) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Id = make([]*InputPhoto, l1)
	for i := int32(0); i < l1; i++ {
		m.Id[i] = &InputPhoto{}
		(*m.Id[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLPhotosGetUserPhotos() *TLPhotosGetUserPhotos {
	return &TLPhotosGetUserPhotos{}
}

func (m *TLPhotosGetUserPhotos) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_getUserPhotos))

	x.Bytes(m.UserId.Encode())
	x.Int(m.Offset)
	x.Long(m.MaxId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLPhotosGetUserPhotos) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_photos_getUserPhotos))

	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.Offset)
	x.Long(m.MaxId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLPhotosGetUserPhotos) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.UserId = m1
	m.Offset = dbuf.Int()
	m.MaxId = dbuf.Long()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLUploadSaveFilePart() *TLUploadSaveFilePart {
	return &TLUploadSaveFilePart{}
}

func (m *TLUploadSaveFilePart) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_saveFilePart))

	x.Long(m.FileId)
	x.Int(m.FilePart)
	x.StringBytes(m.Bytes)

	return x.buf
}

func (m *TLUploadSaveFilePart) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_saveFilePart))

	x.Long(m.FileId)
	x.Int(m.FilePart)
	x.StringBytes(m.Bytes)

	return x.buf
}

func (m *TLUploadSaveFilePart) Decode(dbuf *DecodeBuf) error {
	m.FileId = dbuf.Long()
	m.FilePart = dbuf.Int()
	m.Bytes = dbuf.StringBytes()

	return dbuf.err
}

func NewTLUploadGetFile() *TLUploadGetFile {
	return &TLUploadGetFile{}
}

func (m *TLUploadGetFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getFile))

	x.Bytes(m.Location.Encode())
	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUploadGetFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getFile))

	x.Bytes(m.Location.EncodeToLayer(layer))
	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUploadGetFile) Decode(dbuf *DecodeBuf) error {
	m1 := &InputFileLocation{}
	m1.Decode(dbuf)
	m.Location = m1
	m.Offset = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLUploadSaveBigFilePart() *TLUploadSaveBigFilePart {
	return &TLUploadSaveBigFilePart{}
}

func (m *TLUploadSaveBigFilePart) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_saveBigFilePart))

	x.Long(m.FileId)
	x.Int(m.FilePart)
	x.Int(m.FileTotalParts)
	x.StringBytes(m.Bytes)

	return x.buf
}

func (m *TLUploadSaveBigFilePart) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_saveBigFilePart))

	x.Long(m.FileId)
	x.Int(m.FilePart)
	x.Int(m.FileTotalParts)
	x.StringBytes(m.Bytes)

	return x.buf
}

func (m *TLUploadSaveBigFilePart) Decode(dbuf *DecodeBuf) error {
	m.FileId = dbuf.Long()
	m.FilePart = dbuf.Int()
	m.FileTotalParts = dbuf.Int()
	m.Bytes = dbuf.StringBytes()

	return dbuf.err
}

func NewTLUploadGetWebFile() *TLUploadGetWebFile {
	return &TLUploadGetWebFile{}
}

func (m *TLUploadGetWebFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getWebFile))

	x.Bytes(m.Location.Encode())
	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUploadGetWebFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getWebFile))

	x.Bytes(m.Location.EncodeToLayer(layer))
	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUploadGetWebFile) Decode(dbuf *DecodeBuf) error {
	m1 := &InputWebFileLocation{}
	m1.Decode(dbuf)
	m.Location = m1
	m.Offset = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLUploadGetCdnFile() *TLUploadGetCdnFile {
	return &TLUploadGetCdnFile{}
}

func (m *TLUploadGetCdnFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getCdnFile))

	x.StringBytes(m.FileToken)
	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUploadGetCdnFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getCdnFile))

	x.StringBytes(m.FileToken)
	x.Int(m.Offset)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLUploadGetCdnFile) Decode(dbuf *DecodeBuf) error {
	m.FileToken = dbuf.StringBytes()
	m.Offset = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLUploadReuploadCdnFile() *TLUploadReuploadCdnFile {
	return &TLUploadReuploadCdnFile{}
}

func (m *TLUploadReuploadCdnFile) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_reuploadCdnFile))

	x.StringBytes(m.FileToken)
	x.StringBytes(m.RequestToken)

	return x.buf
}

func (m *TLUploadReuploadCdnFile) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_reuploadCdnFile))

	x.StringBytes(m.FileToken)
	x.StringBytes(m.RequestToken)

	return x.buf
}

func (m *TLUploadReuploadCdnFile) Decode(dbuf *DecodeBuf) error {
	m.FileToken = dbuf.StringBytes()
	m.RequestToken = dbuf.StringBytes()

	return dbuf.err
}

func NewTLUploadGetCdnFileHashes() *TLUploadGetCdnFileHashes {
	return &TLUploadGetCdnFileHashes{}
}

func (m *TLUploadGetCdnFileHashes) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getCdnFileHashes))

	x.StringBytes(m.FileToken)
	x.Int(m.Offset)

	return x.buf
}

func (m *TLUploadGetCdnFileHashes) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getCdnFileHashes))

	x.StringBytes(m.FileToken)
	x.Int(m.Offset)

	return x.buf
}

func (m *TLUploadGetCdnFileHashes) Decode(dbuf *DecodeBuf) error {
	m.FileToken = dbuf.StringBytes()
	m.Offset = dbuf.Int()

	return dbuf.err
}

func NewTLUploadGetFileHashes() *TLUploadGetFileHashes {
	return &TLUploadGetFileHashes{}
}

func (m *TLUploadGetFileHashes) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getFileHashes))

	x.Bytes(m.Location.Encode())
	x.Int(m.Offset)

	return x.buf
}

func (m *TLUploadGetFileHashes) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_upload_getFileHashes))

	x.Bytes(m.Location.EncodeToLayer(layer))
	x.Int(m.Offset)

	return x.buf
}

func (m *TLUploadGetFileHashes) Decode(dbuf *DecodeBuf) error {
	m1 := &InputFileLocation{}
	m1.Decode(dbuf)
	m.Location = m1
	m.Offset = dbuf.Int()

	return dbuf.err
}

func NewTLHelpGetConfig() *TLHelpGetConfig {
	return &TLHelpGetConfig{}
}

func (m *TLHelpGetConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getConfig))

	return x.buf
}

func (m *TLHelpGetConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getConfig))

	return x.buf
}

func (m *TLHelpGetConfig) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetNearestDc() *TLHelpGetNearestDc {
	return &TLHelpGetNearestDc{}
}

func (m *TLHelpGetNearestDc) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getNearestDc))

	return x.buf
}

func (m *TLHelpGetNearestDc) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getNearestDc))

	return x.buf
}

func (m *TLHelpGetNearestDc) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetAppUpdate() *TLHelpGetAppUpdate {
	return &TLHelpGetAppUpdate{}
}

func (m *TLHelpGetAppUpdate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getAppUpdate))

	x.String(m.Source)

	return x.buf
}

func (m *TLHelpGetAppUpdate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getAppUpdate))

	x.String(m.Source)

	return x.buf
}

func (m *TLHelpGetAppUpdate) Decode(dbuf *DecodeBuf) error {
	m.Source = dbuf.String()

	return dbuf.err
}

func NewTLHelpSaveAppLog() *TLHelpSaveAppLog {
	return &TLHelpSaveAppLog{}
}

func (m *TLHelpSaveAppLog) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_saveAppLog))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Events)))
	for _, v := range m.Events {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLHelpSaveAppLog) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_saveAppLog))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Events)))
	for _, v := range m.Events {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLHelpSaveAppLog) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Events = make([]*InputAppEvent, l1)
	for i := int32(0); i < l1; i++ {
		m.Events[i] = &InputAppEvent{}
		(*m.Events[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLHelpGetInviteText() *TLHelpGetInviteText {
	return &TLHelpGetInviteText{}
}

func (m *TLHelpGetInviteText) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getInviteText))

	return x.buf
}

func (m *TLHelpGetInviteText) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getInviteText))

	return x.buf
}

func (m *TLHelpGetInviteText) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetSupport() *TLHelpGetSupport {
	return &TLHelpGetSupport{}
}

func (m *TLHelpGetSupport) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getSupport))

	return x.buf
}

func (m *TLHelpGetSupport) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getSupport))

	return x.buf
}

func (m *TLHelpGetSupport) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetAppChangelog() *TLHelpGetAppChangelog {
	return &TLHelpGetAppChangelog{}
}

func (m *TLHelpGetAppChangelog) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getAppChangelog))

	x.String(m.PrevAppVersion)

	return x.buf
}

func (m *TLHelpGetAppChangelog) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getAppChangelog))

	x.String(m.PrevAppVersion)

	return x.buf
}

func (m *TLHelpGetAppChangelog) Decode(dbuf *DecodeBuf) error {
	m.PrevAppVersion = dbuf.String()

	return dbuf.err
}

func NewTLHelpSetBotUpdatesStatus() *TLHelpSetBotUpdatesStatus {
	return &TLHelpSetBotUpdatesStatus{}
}

func (m *TLHelpSetBotUpdatesStatus) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_setBotUpdatesStatus))

	x.Int(m.PendingUpdatesCount)
	x.String(m.Message)

	return x.buf
}

func (m *TLHelpSetBotUpdatesStatus) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_setBotUpdatesStatus))

	x.Int(m.PendingUpdatesCount)
	x.String(m.Message)

	return x.buf
}

func (m *TLHelpSetBotUpdatesStatus) Decode(dbuf *DecodeBuf) error {
	m.PendingUpdatesCount = dbuf.Int()
	m.Message = dbuf.String()

	return dbuf.err
}

func NewTLHelpGetCdnConfig() *TLHelpGetCdnConfig {
	return &TLHelpGetCdnConfig{}
}

func (m *TLHelpGetCdnConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getCdnConfig))

	return x.buf
}

func (m *TLHelpGetCdnConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getCdnConfig))

	return x.buf
}

func (m *TLHelpGetCdnConfig) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetRecentMeUrls() *TLHelpGetRecentMeUrls {
	return &TLHelpGetRecentMeUrls{}
}

func (m *TLHelpGetRecentMeUrls) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getRecentMeUrls))

	x.String(m.Referer)

	return x.buf
}

func (m *TLHelpGetRecentMeUrls) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getRecentMeUrls))

	x.String(m.Referer)

	return x.buf
}

func (m *TLHelpGetRecentMeUrls) Decode(dbuf *DecodeBuf) error {
	m.Referer = dbuf.String()

	return dbuf.err
}

func NewTLHelpGetProxyData() *TLHelpGetProxyData {
	return &TLHelpGetProxyData{}
}

func (m *TLHelpGetProxyData) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getProxyData))

	return x.buf
}

func (m *TLHelpGetProxyData) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getProxyData))

	return x.buf
}

func (m *TLHelpGetProxyData) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpGetTermsOfServiceUpdate() *TLHelpGetTermsOfServiceUpdate {
	return &TLHelpGetTermsOfServiceUpdate{}
}

func (m *TLHelpGetTermsOfServiceUpdate) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getTermsOfServiceUpdate))

	return x.buf
}

func (m *TLHelpGetTermsOfServiceUpdate) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getTermsOfServiceUpdate))

	return x.buf
}

func (m *TLHelpGetTermsOfServiceUpdate) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLHelpAcceptTermsOfService() *TLHelpAcceptTermsOfService {
	return &TLHelpAcceptTermsOfService{}
}

func (m *TLHelpAcceptTermsOfService) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_acceptTermsOfService))

	x.Bytes(m.Id.Encode())

	return x.buf
}

func (m *TLHelpAcceptTermsOfService) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_acceptTermsOfService))

	x.Bytes(m.Id.EncodeToLayer(layer))

	return x.buf
}

func (m *TLHelpAcceptTermsOfService) Decode(dbuf *DecodeBuf) error {
	m1 := &DataJSON{}
	m1.Decode(dbuf)
	m.Id = m1

	return dbuf.err
}

func NewTLHelpGetDeepLinkInfo() *TLHelpGetDeepLinkInfo {
	return &TLHelpGetDeepLinkInfo{}
}

func (m *TLHelpGetDeepLinkInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getDeepLinkInfo))

	x.String(m.Path)

	return x.buf
}

func (m *TLHelpGetDeepLinkInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getDeepLinkInfo))

	x.String(m.Path)

	return x.buf
}

func (m *TLHelpGetDeepLinkInfo) Decode(dbuf *DecodeBuf) error {
	m.Path = dbuf.String()

	return dbuf.err
}

func NewTLHelpGetPassportConfig() *TLHelpGetPassportConfig {
	return &TLHelpGetPassportConfig{}
}

func (m *TLHelpGetPassportConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getPassportConfig))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLHelpGetPassportConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_help_getPassportConfig))

	x.Int(m.Hash)

	return x.buf
}

func (m *TLHelpGetPassportConfig) Decode(dbuf *DecodeBuf) error {
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLChannelsReadHistory() *TLChannelsReadHistory {
	return &TLChannelsReadHistory{}
}

func (m *TLChannelsReadHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_readHistory))

	x.Bytes(m.Channel.Encode())
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLChannelsReadHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_readHistory))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLChannelsReadHistory) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.MaxId = dbuf.Int()

	return dbuf.err
}

func NewTLChannelsDeleteMessages() *TLChannelsDeleteMessages {
	return &TLChannelsDeleteMessages{}
}

func (m *TLChannelsDeleteMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteMessages))

	x.Bytes(m.Channel.Encode())
	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLChannelsDeleteMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteMessages))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLChannelsDeleteMessages) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLChannelsDeleteUserHistory() *TLChannelsDeleteUserHistory {
	return &TLChannelsDeleteUserHistory{}
}

func (m *TLChannelsDeleteUserHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteUserHistory))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.UserId.Encode())

	return x.buf
}

func (m *TLChannelsDeleteUserHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteUserHistory))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsDeleteUserHistory) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2

	return dbuf.err
}

func NewTLChannelsReportSpam() *TLChannelsReportSpam {
	return &TLChannelsReportSpam{}
}

func (m *TLChannelsReportSpam) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_reportSpam))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.UserId.Encode())
	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLChannelsReportSpam) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_reportSpam))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLChannelsReportSpam) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLChannelsGetMessages() *TLChannelsGetMessages {
	return &TLChannelsGetMessages{}
}

func (m *TLChannelsGetMessages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getMessages))

	x.Bytes(m.Channel.Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelsGetMessages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getMessages))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelsGetMessages) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	m.Id = make([]*InputMessage, l2)
	for i := int32(0); i < l2; i++ {
		m.Id[i] = &InputMessage{}
		(*m.Id[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLChannelsGetParticipants() *TLChannelsGetParticipants {
	return &TLChannelsGetParticipants{}
}

func (m *TLChannelsGetParticipants) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getParticipants))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Filter.Encode())
	x.Int(m.Offset)
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLChannelsGetParticipants) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getParticipants))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Filter.EncodeToLayer(layer))
	x.Int(m.Offset)
	x.Int(m.Limit)
	x.Int(m.Hash)

	return x.buf
}

func (m *TLChannelsGetParticipants) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &ChannelParticipantsFilter{}
	m2.Decode(dbuf)
	m.Filter = m2
	m.Offset = dbuf.Int()
	m.Limit = dbuf.Int()
	m.Hash = dbuf.Int()

	return dbuf.err
}

func NewTLChannelsGetParticipant() *TLChannelsGetParticipant {
	return &TLChannelsGetParticipant{}
}

func (m *TLChannelsGetParticipant) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getParticipant))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.UserId.Encode())

	return x.buf
}

func (m *TLChannelsGetParticipant) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getParticipant))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsGetParticipant) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2

	return dbuf.err
}

func NewTLChannelsGetChannels() *TLChannelsGetChannels {
	return &TLChannelsGetChannels{}
}

func (m *TLChannelsGetChannels) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getChannels))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelsGetChannels) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getChannels))

	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Id)))
	for _, v := range m.Id {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelsGetChannels) Decode(dbuf *DecodeBuf) error {
	c1 := dbuf.Int()
	if c1 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
		return dbuf.err
	}
	l1 := dbuf.Int()
	m.Id = make([]*InputChannel, l1)
	for i := int32(0); i < l1; i++ {
		m.Id[i] = &InputChannel{}
		(*m.Id[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLChannelsGetFullChannel() *TLChannelsGetFullChannel {
	return &TLChannelsGetFullChannel{}
}

func (m *TLChannelsGetFullChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getFullChannel))

	x.Bytes(m.Channel.Encode())

	return x.buf
}

func (m *TLChannelsGetFullChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getFullChannel))

	x.Bytes(m.Channel.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsGetFullChannel) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1

	return dbuf.err
}

func NewTLChannelsCreateChannel() *TLChannelsCreateChannel {
	return &TLChannelsCreateChannel{}
}

func (m *TLChannelsCreateChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_createChannel))

	// flags
	var flags uint32 = 0
	if m.Broadcast == true {
		flags |= 1 << 0
	}
	if m.Megagroup == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.String(m.Title)
	x.String(m.About)

	return x.buf
}

func (m *TLChannelsCreateChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_createChannel))

	// flags
	var flags uint32 = 0
	if m.Broadcast == true {
		flags |= 1 << 0
	}
	if m.Megagroup == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.String(m.Title)
	x.String(m.About)

	return x.buf
}

func (m *TLChannelsCreateChannel) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Broadcast = true
	}
	if (flags & (1 << 1)) != 0 {
		m.Megagroup = true
	}
	m.Title = dbuf.String()
	m.About = dbuf.String()

	return dbuf.err
}

func NewTLChannelsEditAbout() *TLChannelsEditAbout {
	return &TLChannelsEditAbout{}
}

func (m *TLChannelsEditAbout) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editAbout))

	x.Bytes(m.Channel.Encode())
	x.String(m.About)

	return x.buf
}

func (m *TLChannelsEditAbout) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editAbout))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.String(m.About)

	return x.buf
}

func (m *TLChannelsEditAbout) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.About = dbuf.String()

	return dbuf.err
}

func NewTLChannelsEditAdmin() *TLChannelsEditAdmin {
	return &TLChannelsEditAdmin{}
}

func (m *TLChannelsEditAdmin) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editAdmin))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.UserId.Encode())
	x.Bytes(m.AdminRights.Encode())

	return x.buf
}

func (m *TLChannelsEditAdmin) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editAdmin))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Bytes(m.AdminRights.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsEditAdmin) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2
	m3 := &ChannelAdminRights{}
	m3.Decode(dbuf)
	m.AdminRights = m3

	return dbuf.err
}

func NewTLChannelsEditTitle() *TLChannelsEditTitle {
	return &TLChannelsEditTitle{}
}

func (m *TLChannelsEditTitle) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editTitle))

	x.Bytes(m.Channel.Encode())
	x.String(m.Title)

	return x.buf
}

func (m *TLChannelsEditTitle) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editTitle))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.String(m.Title)

	return x.buf
}

func (m *TLChannelsEditTitle) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.Title = dbuf.String()

	return dbuf.err
}

func NewTLChannelsEditPhoto() *TLChannelsEditPhoto {
	return &TLChannelsEditPhoto{}
}

func (m *TLChannelsEditPhoto) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editPhoto))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Photo.Encode())

	return x.buf
}

func (m *TLChannelsEditPhoto) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editPhoto))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Photo.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsEditPhoto) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputChatPhoto{}
	m2.Decode(dbuf)
	m.Photo = m2

	return dbuf.err
}

func NewTLChannelsCheckUsername() *TLChannelsCheckUsername {
	return &TLChannelsCheckUsername{}
}

func (m *TLChannelsCheckUsername) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_checkUsername))

	x.Bytes(m.Channel.Encode())
	x.String(m.Username)

	return x.buf
}

func (m *TLChannelsCheckUsername) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_checkUsername))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.String(m.Username)

	return x.buf
}

func (m *TLChannelsCheckUsername) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.Username = dbuf.String()

	return dbuf.err
}

func NewTLChannelsUpdateUsername() *TLChannelsUpdateUsername {
	return &TLChannelsUpdateUsername{}
}

func (m *TLChannelsUpdateUsername) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_updateUsername))

	x.Bytes(m.Channel.Encode())
	x.String(m.Username)

	return x.buf
}

func (m *TLChannelsUpdateUsername) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_updateUsername))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.String(m.Username)

	return x.buf
}

func (m *TLChannelsUpdateUsername) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.Username = dbuf.String()

	return dbuf.err
}

func NewTLChannelsJoinChannel() *TLChannelsJoinChannel {
	return &TLChannelsJoinChannel{}
}

func (m *TLChannelsJoinChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_joinChannel))

	x.Bytes(m.Channel.Encode())

	return x.buf
}

func (m *TLChannelsJoinChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_joinChannel))

	x.Bytes(m.Channel.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsJoinChannel) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1

	return dbuf.err
}

func NewTLChannelsLeaveChannel() *TLChannelsLeaveChannel {
	return &TLChannelsLeaveChannel{}
}

func (m *TLChannelsLeaveChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_leaveChannel))

	x.Bytes(m.Channel.Encode())

	return x.buf
}

func (m *TLChannelsLeaveChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_leaveChannel))

	x.Bytes(m.Channel.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsLeaveChannel) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1

	return dbuf.err
}

func NewTLChannelsInviteToChannel() *TLChannelsInviteToChannel {
	return &TLChannelsInviteToChannel{}
}

func (m *TLChannelsInviteToChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_inviteToChannel))

	x.Bytes(m.Channel.Encode())
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Users)))
	for _, v := range m.Users {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLChannelsInviteToChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_inviteToChannel))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Users)))
	for _, v := range m.Users {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLChannelsInviteToChannel) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	c2 := dbuf.Int()
	if c2 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
		return dbuf.err
	}
	l2 := dbuf.Int()
	m.Users = make([]*InputUser, l2)
	for i := int32(0); i < l2; i++ {
		m.Users[i] = &InputUser{}
		(*m.Users[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLChannelsExportInvite() *TLChannelsExportInvite {
	return &TLChannelsExportInvite{}
}

func (m *TLChannelsExportInvite) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_exportInvite))

	x.Bytes(m.Channel.Encode())

	return x.buf
}

func (m *TLChannelsExportInvite) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_exportInvite))

	x.Bytes(m.Channel.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsExportInvite) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1

	return dbuf.err
}

func NewTLChannelsDeleteChannel() *TLChannelsDeleteChannel {
	return &TLChannelsDeleteChannel{}
}

func (m *TLChannelsDeleteChannel) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteChannel))

	x.Bytes(m.Channel.Encode())

	return x.buf
}

func (m *TLChannelsDeleteChannel) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteChannel))

	x.Bytes(m.Channel.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsDeleteChannel) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1

	return dbuf.err
}

func NewTLChannelsToggleInvites() *TLChannelsToggleInvites {
	return &TLChannelsToggleInvites{}
}

func (m *TLChannelsToggleInvites) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_toggleInvites))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Enabled.Encode())

	return x.buf
}

func (m *TLChannelsToggleInvites) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_toggleInvites))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Enabled.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsToggleInvites) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Enabled = m2

	return dbuf.err
}

func NewTLChannelsExportMessageLink() *TLChannelsExportMessageLink {
	return &TLChannelsExportMessageLink{}
}

func (m *TLChannelsExportMessageLink) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_exportMessageLink))

	x.Bytes(m.Channel.Encode())
	x.Int(m.Id)
	x.Bytes(m.Grouped.Encode())

	return x.buf
}

func (m *TLChannelsExportMessageLink) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_exportMessageLink))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Int(m.Id)
	x.Bytes(m.Grouped.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsExportMessageLink) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.Id = dbuf.Int()
	m3 := &Bool{}
	m3.Decode(dbuf)
	m.Grouped = m3

	return dbuf.err
}

func NewTLChannelsToggleSignatures() *TLChannelsToggleSignatures {
	return &TLChannelsToggleSignatures{}
}

func (m *TLChannelsToggleSignatures) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_toggleSignatures))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Enabled.Encode())

	return x.buf
}

func (m *TLChannelsToggleSignatures) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_toggleSignatures))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Enabled.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsToggleSignatures) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Enabled = m2

	return dbuf.err
}

func NewTLChannelsUpdatePinnedMessage() *TLChannelsUpdatePinnedMessage {
	return &TLChannelsUpdatePinnedMessage{}
}

func (m *TLChannelsUpdatePinnedMessage) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_updatePinnedMessage))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Channel.Encode())
	x.Int(m.Id)

	return x.buf
}

func (m *TLChannelsUpdatePinnedMessage) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_updatePinnedMessage))

	// flags
	var flags uint32 = 0
	if m.Silent == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Int(m.Id)

	return x.buf
}

func (m *TLChannelsUpdatePinnedMessage) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Silent = true
	}
	m3 := &InputChannel{}
	m3.Decode(dbuf)
	m.Channel = m3
	m.Id = dbuf.Int()

	return dbuf.err
}

func NewTLChannelsGetAdminedPublicChannels() *TLChannelsGetAdminedPublicChannels {
	return &TLChannelsGetAdminedPublicChannels{}
}

func (m *TLChannelsGetAdminedPublicChannels) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getAdminedPublicChannels))

	return x.buf
}

func (m *TLChannelsGetAdminedPublicChannels) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getAdminedPublicChannels))

	return x.buf
}

func (m *TLChannelsGetAdminedPublicChannels) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLChannelsEditBanned() *TLChannelsEditBanned {
	return &TLChannelsEditBanned{}
}

func (m *TLChannelsEditBanned) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editBanned))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.UserId.Encode())
	x.Bytes(m.BannedRights.Encode())

	return x.buf
}

func (m *TLChannelsEditBanned) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_editBanned))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Bytes(m.BannedRights.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsEditBanned) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputUser{}
	m2.Decode(dbuf)
	m.UserId = m2
	m3 := &ChannelBannedRights{}
	m3.Decode(dbuf)
	m.BannedRights = m3

	return dbuf.err
}

func NewTLChannelsGetAdminLog() *TLChannelsGetAdminLog {
	return &TLChannelsGetAdminLog{}
}

func (m *TLChannelsGetAdminLog) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getAdminLog))

	// flags
	var flags uint32 = 0
	if m.EventsFilter != nil {
		flags |= 1 << 0
	}
	if m.Admins != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.Channel.Encode())
	x.String(m.Q)
	if m.EventsFilter != nil {
		x.Bytes(m.EventsFilter.Encode())
	}
	if m.Admins != nil {

	}
	x.Long(m.MaxId)
	x.Long(m.MinId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLChannelsGetAdminLog) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getAdminLog))

	// flags
	var flags uint32 = 0
	if m.EventsFilter != nil {
		flags |= 1 << 0
	}
	if m.Admins != nil {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.String(m.Q)
	if m.EventsFilter != nil {
		x.Bytes(m.EventsFilter.EncodeToLayer(layer))
	}
	if m.Admins != nil {

	}
	x.Long(m.MaxId)
	x.Long(m.MinId)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLChannelsGetAdminLog) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m2 := &InputChannel{}
	m2.Decode(dbuf)
	m.Channel = m2
	m.Q = dbuf.String()
	if (flags & (1 << 0)) != 0 {
		m4 := &ChannelAdminLogEventsFilter{}
		m4.Decode(dbuf)
		m.EventsFilter = m4
	}
	if (flags & (1 << 1)) != 0 {

	}
	m.MaxId = dbuf.Long()
	m.MinId = dbuf.Long()
	m.Limit = dbuf.Int()

	return dbuf.err
}

func NewTLChannelsSetStickers() *TLChannelsSetStickers {
	return &TLChannelsSetStickers{}
}

func (m *TLChannelsSetStickers) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_setStickers))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Stickerset.Encode())

	return x.buf
}

func (m *TLChannelsSetStickers) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_setStickers))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Stickerset.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsSetStickers) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &InputStickerSet{}
	m2.Decode(dbuf)
	m.Stickerset = m2

	return dbuf.err
}

func NewTLChannelsReadMessageContents() *TLChannelsReadMessageContents {
	return &TLChannelsReadMessageContents{}
}

func (m *TLChannelsReadMessageContents) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_readMessageContents))

	x.Bytes(m.Channel.Encode())
	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLChannelsReadMessageContents) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_readMessageContents))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.VectorInt(m.Id)

	return x.buf
}

func (m *TLChannelsReadMessageContents) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.Id = dbuf.VectorInt()

	return dbuf.err
}

func NewTLChannelsDeleteHistory() *TLChannelsDeleteHistory {
	return &TLChannelsDeleteHistory{}
}

func (m *TLChannelsDeleteHistory) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteHistory))

	x.Bytes(m.Channel.Encode())
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLChannelsDeleteHistory) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_deleteHistory))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Int(m.MaxId)

	return x.buf
}

func (m *TLChannelsDeleteHistory) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m.MaxId = dbuf.Int()

	return dbuf.err
}

func NewTLChannelsTogglePreHistoryHidden() *TLChannelsTogglePreHistoryHidden {
	return &TLChannelsTogglePreHistoryHidden{}
}

func (m *TLChannelsTogglePreHistoryHidden) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_togglePreHistoryHidden))

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Enabled.Encode())

	return x.buf
}

func (m *TLChannelsTogglePreHistoryHidden) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_togglePreHistoryHidden))

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Enabled.EncodeToLayer(layer))

	return x.buf
}

func (m *TLChannelsTogglePreHistoryHidden) Decode(dbuf *DecodeBuf) error {
	m1 := &InputChannel{}
	m1.Decode(dbuf)
	m.Channel = m1
	m2 := &Bool{}
	m2.Decode(dbuf)
	m.Enabled = m2

	return dbuf.err
}

func NewTLChannelsGetLeftChannels() *TLChannelsGetLeftChannels {
	return &TLChannelsGetLeftChannels{}
}

func (m *TLChannelsGetLeftChannels) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getLeftChannels))

	x.Int(m.Offset)

	return x.buf
}

func (m *TLChannelsGetLeftChannels) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_channels_getLeftChannels))

	x.Int(m.Offset)

	return x.buf
}

func (m *TLChannelsGetLeftChannels) Decode(dbuf *DecodeBuf) error {
	m.Offset = dbuf.Int()

	return dbuf.err
}

func NewTLBotsSendCustomRequest() *TLBotsSendCustomRequest {
	return &TLBotsSendCustomRequest{}
}

func (m *TLBotsSendCustomRequest) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bots_sendCustomRequest))

	x.String(m.CustomMethod)
	x.Bytes(m.Params.Encode())

	return x.buf
}

func (m *TLBotsSendCustomRequest) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bots_sendCustomRequest))

	x.String(m.CustomMethod)
	x.Bytes(m.Params.EncodeToLayer(layer))

	return x.buf
}

func (m *TLBotsSendCustomRequest) Decode(dbuf *DecodeBuf) error {
	m.CustomMethod = dbuf.String()
	m2 := &DataJSON{}
	m2.Decode(dbuf)
	m.Params = m2

	return dbuf.err
}

func NewTLBotsAnswerWebhookJSONQuery() *TLBotsAnswerWebhookJSONQuery {
	return &TLBotsAnswerWebhookJSONQuery{}
}

func (m *TLBotsAnswerWebhookJSONQuery) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bots_answerWebhookJSONQuery))

	x.Long(m.QueryId)
	x.Bytes(m.Data.Encode())

	return x.buf
}

func (m *TLBotsAnswerWebhookJSONQuery) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_bots_answerWebhookJSONQuery))

	x.Long(m.QueryId)
	x.Bytes(m.Data.EncodeToLayer(layer))

	return x.buf
}

func (m *TLBotsAnswerWebhookJSONQuery) Decode(dbuf *DecodeBuf) error {
	m.QueryId = dbuf.Long()
	m2 := &DataJSON{}
	m2.Decode(dbuf)
	m.Data = m2

	return dbuf.err
}

func NewTLPaymentsGetPaymentForm() *TLPaymentsGetPaymentForm {
	return &TLPaymentsGetPaymentForm{}
}

func (m *TLPaymentsGetPaymentForm) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_getPaymentForm))

	x.Int(m.MsgId)

	return x.buf
}

func (m *TLPaymentsGetPaymentForm) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_getPaymentForm))

	x.Int(m.MsgId)

	return x.buf
}

func (m *TLPaymentsGetPaymentForm) Decode(dbuf *DecodeBuf) error {
	m.MsgId = dbuf.Int()

	return dbuf.err
}

func NewTLPaymentsGetPaymentReceipt() *TLPaymentsGetPaymentReceipt {
	return &TLPaymentsGetPaymentReceipt{}
}

func (m *TLPaymentsGetPaymentReceipt) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_getPaymentReceipt))

	x.Int(m.MsgId)

	return x.buf
}

func (m *TLPaymentsGetPaymentReceipt) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_getPaymentReceipt))

	x.Int(m.MsgId)

	return x.buf
}

func (m *TLPaymentsGetPaymentReceipt) Decode(dbuf *DecodeBuf) error {
	m.MsgId = dbuf.Int()

	return dbuf.err
}

func NewTLPaymentsValidateRequestedInfo() *TLPaymentsValidateRequestedInfo {
	return &TLPaymentsValidateRequestedInfo{}
}

func (m *TLPaymentsValidateRequestedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_validateRequestedInfo))

	// flags
	var flags uint32 = 0
	if m.Save == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.MsgId)
	x.Bytes(m.Info.Encode())

	return x.buf
}

func (m *TLPaymentsValidateRequestedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_validateRequestedInfo))

	// flags
	var flags uint32 = 0
	if m.Save == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.MsgId)
	x.Bytes(m.Info.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPaymentsValidateRequestedInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Save = true
	}
	m.MsgId = dbuf.Int()
	m4 := &PaymentRequestedInfo{}
	m4.Decode(dbuf)
	m.Info = m4

	return dbuf.err
}

func NewTLPaymentsSendPaymentForm() *TLPaymentsSendPaymentForm {
	return &TLPaymentsSendPaymentForm{}
}

func (m *TLPaymentsSendPaymentForm) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_sendPaymentForm))

	// flags
	var flags uint32 = 0
	if m.RequestedInfoId != "" {
		flags |= 1 << 0
	}
	if m.ShippingOptionId != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.MsgId)
	if m.RequestedInfoId != "" {
		x.String(m.RequestedInfoId)
	}
	if m.ShippingOptionId != "" {
		x.String(m.ShippingOptionId)
	}
	x.Bytes(m.Credentials.Encode())

	return x.buf
}

func (m *TLPaymentsSendPaymentForm) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_sendPaymentForm))

	// flags
	var flags uint32 = 0
	if m.RequestedInfoId != "" {
		flags |= 1 << 0
	}
	if m.ShippingOptionId != "" {
		flags |= 1 << 1
	}
	x.UInt(flags)

	x.Int(m.MsgId)

	x.Bytes(m.Credentials.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPaymentsSendPaymentForm) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.MsgId = dbuf.Int()
	if (flags & (1 << 0)) != 0 {
		m.RequestedInfoId = dbuf.String()
	}
	if (flags & (1 << 1)) != 0 {
		m.ShippingOptionId = dbuf.String()
	}
	m5 := &InputPaymentCredentials{}
	m5.Decode(dbuf)
	m.Credentials = m5

	return dbuf.err
}

func NewTLPaymentsGetSavedInfo() *TLPaymentsGetSavedInfo {
	return &TLPaymentsGetSavedInfo{}
}

func (m *TLPaymentsGetSavedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_getSavedInfo))

	return x.buf
}

func (m *TLPaymentsGetSavedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_getSavedInfo))

	return x.buf
}

func (m *TLPaymentsGetSavedInfo) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLPaymentsClearSavedInfo() *TLPaymentsClearSavedInfo {
	return &TLPaymentsClearSavedInfo{}
}

func (m *TLPaymentsClearSavedInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_clearSavedInfo))

	// flags
	var flags uint32 = 0
	if m.Credentials == true {
		flags |= 1 << 0
	}
	if m.Info == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLPaymentsClearSavedInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_payments_clearSavedInfo))

	// flags
	var flags uint32 = 0
	if m.Credentials == true {
		flags |= 1 << 0
	}
	if m.Info == true {
		flags |= 1 << 1
	}
	x.UInt(flags)

	return x.buf
}

func (m *TLPaymentsClearSavedInfo) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Credentials = true
	}
	if (flags & (1 << 1)) != 0 {
		m.Info = true
	}

	return dbuf.err
}

func NewTLStickersCreateStickerSet() *TLStickersCreateStickerSet {
	return &TLStickersCreateStickerSet{}
}

func (m *TLStickersCreateStickerSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_createStickerSet))

	// flags
	var flags uint32 = 0
	if m.Masks == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.UserId.Encode())
	x.String(m.Title)
	x.String(m.ShortName)
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Stickers)))
	for _, v := range m.Stickers {
		x.buf = append(x.buf, (*v).Encode()...)
	}

	return x.buf
}

func (m *TLStickersCreateStickerSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_createStickerSet))

	// flags
	var flags uint32 = 0
	if m.Masks == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.String(m.Title)
	x.String(m.ShortName)
	x.Int(int32(TLConstructor_CRC32_vector))
	x.Int(int32(len(m.Stickers)))
	for _, v := range m.Stickers {
		x.buf = append(x.buf, (*v).EncodeToLayer(layer)...)
	}

	return x.buf
}

func (m *TLStickersCreateStickerSet) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	if (flags & (1 << 0)) != 0 {
		m.Masks = true
	}
	m3 := &InputUser{}
	m3.Decode(dbuf)
	m.UserId = m3
	m.Title = dbuf.String()
	m.ShortName = dbuf.String()
	c6 := dbuf.Int()
	if c6 != int32(TLConstructor_CRC32_vector) {
		dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
		return dbuf.err
	}
	l6 := dbuf.Int()
	m.Stickers = make([]*InputStickerSetItem, l6)
	for i := int32(0); i < l6; i++ {
		m.Stickers[i] = &InputStickerSetItem{}
		(*m.Stickers[i]).Decode(dbuf)
	}

	return dbuf.err
}

func NewTLStickersRemoveStickerFromSet() *TLStickersRemoveStickerFromSet {
	return &TLStickersRemoveStickerFromSet{}
}

func (m *TLStickersRemoveStickerFromSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_removeStickerFromSet))

	x.Bytes(m.Sticker.Encode())

	return x.buf
}

func (m *TLStickersRemoveStickerFromSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_removeStickerFromSet))

	x.Bytes(m.Sticker.EncodeToLayer(layer))

	return x.buf
}

func (m *TLStickersRemoveStickerFromSet) Decode(dbuf *DecodeBuf) error {
	m1 := &InputDocument{}
	m1.Decode(dbuf)
	m.Sticker = m1

	return dbuf.err
}

func NewTLStickersChangeStickerPosition() *TLStickersChangeStickerPosition {
	return &TLStickersChangeStickerPosition{}
}

func (m *TLStickersChangeStickerPosition) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_changeStickerPosition))

	x.Bytes(m.Sticker.Encode())
	x.Int(m.Position)

	return x.buf
}

func (m *TLStickersChangeStickerPosition) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_changeStickerPosition))

	x.Bytes(m.Sticker.EncodeToLayer(layer))
	x.Int(m.Position)

	return x.buf
}

func (m *TLStickersChangeStickerPosition) Decode(dbuf *DecodeBuf) error {
	m1 := &InputDocument{}
	m1.Decode(dbuf)
	m.Sticker = m1
	m.Position = dbuf.Int()

	return dbuf.err
}

func NewTLStickersAddStickerToSet() *TLStickersAddStickerToSet {
	return &TLStickersAddStickerToSet{}
}

func (m *TLStickersAddStickerToSet) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_addStickerToSet))

	x.Bytes(m.Stickerset.Encode())
	x.Bytes(m.Sticker.Encode())

	return x.buf
}

func (m *TLStickersAddStickerToSet) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_stickers_addStickerToSet))

	x.Bytes(m.Stickerset.EncodeToLayer(layer))
	x.Bytes(m.Sticker.EncodeToLayer(layer))

	return x.buf
}

func (m *TLStickersAddStickerToSet) Decode(dbuf *DecodeBuf) error {
	m1 := &InputStickerSet{}
	m1.Decode(dbuf)
	m.Stickerset = m1
	m2 := &InputStickerSetItem{}
	m2.Decode(dbuf)
	m.Sticker = m2

	return dbuf.err
}

func NewTLPhoneGetCallConfig() *TLPhoneGetCallConfig {
	return &TLPhoneGetCallConfig{}
}

func (m *TLPhoneGetCallConfig) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_getCallConfig))

	return x.buf
}

func (m *TLPhoneGetCallConfig) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_getCallConfig))

	return x.buf
}

func (m *TLPhoneGetCallConfig) Decode(dbuf *DecodeBuf) error {

	return dbuf.err
}

func NewTLPhoneRequestCall() *TLPhoneRequestCall {
	return &TLPhoneRequestCall{}
}

func (m *TLPhoneRequestCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_requestCall))

	x.Bytes(m.UserId.Encode())
	x.Int(m.RandomId)
	x.StringBytes(m.GAHash)
	x.Bytes(m.Protocol.Encode())

	return x.buf
}

func (m *TLPhoneRequestCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_requestCall))

	x.Bytes(m.UserId.EncodeToLayer(layer))
	x.Int(m.RandomId)
	x.StringBytes(m.GAHash)
	x.Bytes(m.Protocol.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneRequestCall) Decode(dbuf *DecodeBuf) error {
	m1 := &InputUser{}
	m1.Decode(dbuf)
	m.UserId = m1
	m.RandomId = dbuf.Int()
	m.GAHash = dbuf.StringBytes()
	m4 := &PhoneCallProtocol{}
	m4.Decode(dbuf)
	m.Protocol = m4

	return dbuf.err
}

func NewTLPhoneAcceptCall() *TLPhoneAcceptCall {
	return &TLPhoneAcceptCall{}
}

func (m *TLPhoneAcceptCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_acceptCall))

	x.Bytes(m.Peer.Encode())
	x.StringBytes(m.GB)
	x.Bytes(m.Protocol.Encode())

	return x.buf
}

func (m *TLPhoneAcceptCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_acceptCall))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.StringBytes(m.GB)
	x.Bytes(m.Protocol.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneAcceptCall) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoneCall{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.GB = dbuf.StringBytes()
	m3 := &PhoneCallProtocol{}
	m3.Decode(dbuf)
	m.Protocol = m3

	return dbuf.err
}

func NewTLPhoneConfirmCall() *TLPhoneConfirmCall {
	return &TLPhoneConfirmCall{}
}

func (m *TLPhoneConfirmCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_confirmCall))

	x.Bytes(m.Peer.Encode())
	x.StringBytes(m.GA)
	x.Long(m.KeyFingerprint)
	x.Bytes(m.Protocol.Encode())

	return x.buf
}

func (m *TLPhoneConfirmCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_confirmCall))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.StringBytes(m.GA)
	x.Long(m.KeyFingerprint)
	x.Bytes(m.Protocol.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneConfirmCall) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoneCall{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.GA = dbuf.StringBytes()
	m.KeyFingerprint = dbuf.Long()
	m4 := &PhoneCallProtocol{}
	m4.Decode(dbuf)
	m.Protocol = m4

	return dbuf.err
}

func NewTLPhoneReceivedCall() *TLPhoneReceivedCall {
	return &TLPhoneReceivedCall{}
}

func (m *TLPhoneReceivedCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_receivedCall))

	x.Bytes(m.Peer.Encode())

	return x.buf
}

func (m *TLPhoneReceivedCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_receivedCall))

	x.Bytes(m.Peer.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneReceivedCall) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoneCall{}
	m1.Decode(dbuf)
	m.Peer = m1

	return dbuf.err
}

func NewTLPhoneDiscardCall() *TLPhoneDiscardCall {
	return &TLPhoneDiscardCall{}
}

func (m *TLPhoneDiscardCall) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_discardCall))

	x.Bytes(m.Peer.Encode())
	x.Int(m.Duration)
	x.Bytes(m.Reason.Encode())
	x.Long(m.ConnectionId)

	return x.buf
}

func (m *TLPhoneDiscardCall) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_discardCall))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Duration)
	x.Bytes(m.Reason.EncodeToLayer(layer))
	x.Long(m.ConnectionId)

	return x.buf
}

func (m *TLPhoneDiscardCall) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoneCall{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Duration = dbuf.Int()
	m3 := &PhoneCallDiscardReason{}
	m3.Decode(dbuf)
	m.Reason = m3
	m.ConnectionId = dbuf.Long()

	return dbuf.err
}

func NewTLPhoneSetCallRating() *TLPhoneSetCallRating {
	return &TLPhoneSetCallRating{}
}

func (m *TLPhoneSetCallRating) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_setCallRating))

	x.Bytes(m.Peer.Encode())
	x.Int(m.Rating)
	x.String(m.Comment)

	return x.buf
}

func (m *TLPhoneSetCallRating) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_setCallRating))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Int(m.Rating)
	x.String(m.Comment)

	return x.buf
}

func (m *TLPhoneSetCallRating) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoneCall{}
	m1.Decode(dbuf)
	m.Peer = m1
	m.Rating = dbuf.Int()
	m.Comment = dbuf.String()

	return dbuf.err
}

func NewTLPhoneSaveCallDebug() *TLPhoneSaveCallDebug {
	return &TLPhoneSaveCallDebug{}
}

func (m *TLPhoneSaveCallDebug) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_saveCallDebug))

	x.Bytes(m.Peer.Encode())
	x.Bytes(m.Debug.Encode())

	return x.buf
}

func (m *TLPhoneSaveCallDebug) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_phone_saveCallDebug))

	x.Bytes(m.Peer.EncodeToLayer(layer))
	x.Bytes(m.Debug.EncodeToLayer(layer))

	return x.buf
}

func (m *TLPhoneSaveCallDebug) Decode(dbuf *DecodeBuf) error {
	m1 := &InputPhoneCall{}
	m1.Decode(dbuf)
	m.Peer = m1
	m2 := &DataJSON{}
	m2.Decode(dbuf)
	m.Debug = m2

	return dbuf.err
}

func NewTLLangpackGetLangPack() *TLLangpackGetLangPack {
	return &TLLangpackGetLangPack{}
}

func (m *TLLangpackGetLangPack) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLangPack))

	x.String(m.LangPack)
	x.String(m.LangCode)

	return x.buf
}

func (m *TLLangpackGetLangPack) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLangPack))

	x.String(m.LangPack)
	x.String(m.LangCode)

	return x.buf
}

func (m *TLLangpackGetLangPack) Decode(dbuf *DecodeBuf) error {
	m.LangPack = dbuf.String()
	m.LangCode = dbuf.String()

	return dbuf.err
}

func NewTLLangpackGetStrings() *TLLangpackGetStrings {
	return &TLLangpackGetStrings{}
}

func (m *TLLangpackGetStrings) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getStrings))

	x.String(m.LangPack)
	x.String(m.LangCode)
	x.VectorString(m.Keys)

	return x.buf
}

func (m *TLLangpackGetStrings) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getStrings))

	x.String(m.LangPack)
	x.String(m.LangCode)
	x.VectorString(m.Keys)

	return x.buf
}

func (m *TLLangpackGetStrings) Decode(dbuf *DecodeBuf) error {
	m.LangPack = dbuf.String()
	m.LangCode = dbuf.String()
	m.Keys = dbuf.VectorString()

	return dbuf.err
}

func NewTLLangpackGetDifference() *TLLangpackGetDifference {
	return &TLLangpackGetDifference{}
}

func (m *TLLangpackGetDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getDifference))

	x.Int(m.FromVersion)

	return x.buf
}

func (m *TLLangpackGetDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getDifference))

	x.Int(m.FromVersion)

	return x.buf
}

func (m *TLLangpackGetDifference) Decode(dbuf *DecodeBuf) error {
	m.FromVersion = dbuf.Int()

	return dbuf.err
}

func NewTLLangpackGetLanguages() *TLLangpackGetLanguages {
	return &TLLangpackGetLanguages{}
}

func (m *TLLangpackGetLanguages) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLanguages))

	x.String(m.LangPack)

	return x.buf
}

func (m *TLLangpackGetLanguages) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_langpack_getLanguages))

	x.String(m.LangPack)

	return x.buf
}

func (m *TLLangpackGetLanguages) Decode(dbuf *DecodeBuf) error {
	m.LangPack = dbuf.String()

	return dbuf.err
}

func NewTLSessionSetClientSessionInfo() *TLSessionSetClientSessionInfo {
	return &TLSessionSetClientSessionInfo{}
}

func (m *TLSessionSetClientSessionInfo) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_setClientSessionInfo))

	x.Bytes(m.Session.Encode())

	return x.buf
}

func (m *TLSessionSetClientSessionInfo) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_setClientSessionInfo))

	x.Bytes(m.Session.EncodeToLayer(layer))

	return x.buf
}

func (m *TLSessionSetClientSessionInfo) Decode(dbuf *DecodeBuf) error {
	m1 := &ClientSession{}
	m1.Decode(dbuf)
	m.Session = m1

	return dbuf.err
}

func NewTLSessionGetAuthorizations() *TLSessionGetAuthorizations {
	return &TLSessionGetAuthorizations{}
}

func (m *TLSessionGetAuthorizations) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_getAuthorizations))

	x.Int(m.UserId)

	return x.buf
}

func (m *TLSessionGetAuthorizations) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_getAuthorizations))

	x.Int(m.UserId)

	return x.buf
}

func (m *TLSessionGetAuthorizations) Decode(dbuf *DecodeBuf) error {
	m.UserId = dbuf.Int()

	return dbuf.err
}

func NewTLSessionResetAuthorization() *TLSessionResetAuthorization {
	return &TLSessionResetAuthorization{}
}

func (m *TLSessionResetAuthorization) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_resetAuthorization))

	x.Int(m.UserId)
	x.Long(m.Hash)

	return x.buf
}

func (m *TLSessionResetAuthorization) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_resetAuthorization))

	x.Int(m.UserId)
	x.Long(m.Hash)

	return x.buf
}

func (m *TLSessionResetAuthorization) Decode(dbuf *DecodeBuf) error {
	m.UserId = dbuf.Int()
	m.Hash = dbuf.Long()

	return dbuf.err
}

func NewTLSessionGetLayer() *TLSessionGetLayer {
	return &TLSessionGetLayer{}
}

func (m *TLSessionGetLayer) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_getLayer))

	x.Long(m.AuthKeyId)

	return x.buf
}

func (m *TLSessionGetLayer) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_getLayer))

	x.Long(m.AuthKeyId)

	return x.buf
}

func (m *TLSessionGetLayer) Decode(dbuf *DecodeBuf) error {
	m.AuthKeyId = dbuf.Long()

	return dbuf.err
}

func NewTLSessionGetUserId() *TLSessionGetUserId {
	return &TLSessionGetUserId{}
}

func (m *TLSessionGetUserId) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_getUserId))

	x.Long(m.AuthKeyId)

	return x.buf
}

func (m *TLSessionGetUserId) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_getUserId))

	x.Long(m.AuthKeyId)

	return x.buf
}

func (m *TLSessionGetUserId) Decode(dbuf *DecodeBuf) error {
	m.AuthKeyId = dbuf.Long()

	return dbuf.err
}

func NewTLSessionQueryAuthKey() *TLSessionQueryAuthKey {
	return &TLSessionQueryAuthKey{}
}

func (m *TLSessionQueryAuthKey) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_queryAuthKey))

	x.Long(m.AuthKeyId)

	return x.buf
}

func (m *TLSessionQueryAuthKey) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_queryAuthKey))

	x.Long(m.AuthKeyId)

	return x.buf
}

func (m *TLSessionQueryAuthKey) Decode(dbuf *DecodeBuf) error {
	m.AuthKeyId = dbuf.Long()

	return dbuf.err
}

func NewTLSessionSetAuthKey() *TLSessionSetAuthKey {
	return &TLSessionSetAuthKey{}
}

func (m *TLSessionSetAuthKey) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_setAuthKey))

	x.Bytes(m.AuthKey.Encode())

	return x.buf
}

func (m *TLSessionSetAuthKey) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_setAuthKey))

	x.Bytes(m.AuthKey.EncodeToLayer(layer))

	return x.buf
}

func (m *TLSessionSetAuthKey) Decode(dbuf *DecodeBuf) error {
	m1 := &AuthKeyInfo{}
	m1.Decode(dbuf)
	m.AuthKey = m1

	return dbuf.err
}

func NewTLSessionBindAuthKeyUser() *TLSessionBindAuthKeyUser {
	return &TLSessionBindAuthKeyUser{}
}

func (m *TLSessionBindAuthKeyUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_bindAuthKeyUser))

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	return x.buf
}

func (m *TLSessionBindAuthKeyUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_bindAuthKeyUser))

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	return x.buf
}

func (m *TLSessionBindAuthKeyUser) Decode(dbuf *DecodeBuf) error {
	m.AuthKeyId = dbuf.Long()
	m.UserId = dbuf.Int()

	return dbuf.err
}

func NewTLSessionUnbindAuthKeyUser() *TLSessionUnbindAuthKeyUser {
	return &TLSessionUnbindAuthKeyUser{}
}

func (m *TLSessionUnbindAuthKeyUser) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_unbindAuthKeyUser))

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	return x.buf
}

func (m *TLSessionUnbindAuthKeyUser) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_session_unbindAuthKeyUser))

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	return x.buf
}

func (m *TLSessionUnbindAuthKeyUser) Decode(dbuf *DecodeBuf) error {
	m.AuthKeyId = dbuf.Long()
	m.UserId = dbuf.Int()

	return dbuf.err
}

func NewTLSyncSyncUpdates() *TLSyncSyncUpdates {
	return &TLSyncSyncUpdates{}
}

func (m *TLSyncSyncUpdates) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_syncUpdates))

	// flags
	var flags uint32 = 0
	if m.ServerId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.UserId)
	x.Long(m.AuthKeyId)
	if m.ServerId != 0 {
		x.Int(m.ServerId)
	}
	x.Bytes(m.Updates.Encode())

	return x.buf
}

func (m *TLSyncSyncUpdates) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_syncUpdates))

	// flags
	var flags uint32 = 0
	if m.ServerId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.UserId)
	x.Long(m.AuthKeyId)
	if m.ServerId != 0 {
		x.Int(m.ServerId)
	}
	x.Bytes(m.Updates.EncodeToLayer(layer))

	return x.buf
}

func (m *TLSyncSyncUpdates) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.UserId = dbuf.Int()
	m.AuthKeyId = dbuf.Long()
	if (flags & (1 << 0)) != 0 {
		m.ServerId = dbuf.Int()
	}
	m5 := &Updates{}
	m5.Decode(dbuf)
	m.Updates = m5

	return dbuf.err
}

func NewTLSyncPushUpdates() *TLSyncPushUpdates {
	return &TLSyncPushUpdates{}
}

func (m *TLSyncPushUpdates) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushUpdates))

	x.Int(m.UserId)
	x.Bytes(m.Updates.Encode())

	return x.buf
}

func (m *TLSyncPushUpdates) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushUpdates))

	x.Int(m.UserId)
	x.Bytes(m.Updates.EncodeToLayer(layer))

	return x.buf
}

func (m *TLSyncPushUpdates) Decode(dbuf *DecodeBuf) error {
	m.UserId = dbuf.Int()
	m2 := &Updates{}
	m2.Decode(dbuf)
	m.Updates = m2

	return dbuf.err
}

func NewTLSyncSyncChannelUpdates() *TLSyncSyncChannelUpdates {
	return &TLSyncSyncChannelUpdates{}
}

func (m *TLSyncSyncChannelUpdates) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_syncChannelUpdates))

	// flags
	var flags uint32 = 0
	if m.ServerId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.ChannelId)
	x.Int(m.UserId)
	x.Long(m.AuthKeyId)
	if m.ServerId != 0 {
		x.Int(m.ServerId)
	}
	x.Bytes(m.Updates.Encode())

	return x.buf
}

func (m *TLSyncSyncChannelUpdates) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_syncChannelUpdates))

	// flags
	var flags uint32 = 0
	if m.ServerId != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Int(m.ChannelId)
	x.Int(m.UserId)
	x.Long(m.AuthKeyId)
	if m.ServerId != 0 {
		x.Int(m.ServerId)
	}
	x.Bytes(m.Updates.EncodeToLayer(layer))

	return x.buf
}

func (m *TLSyncSyncChannelUpdates) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.ChannelId = dbuf.Int()
	m.UserId = dbuf.Int()
	m.AuthKeyId = dbuf.Long()
	if (flags & (1 << 0)) != 0 {
		m.ServerId = dbuf.Int()
	}
	m6 := &Updates{}
	m6.Decode(dbuf)
	m.Updates = m6

	return dbuf.err
}

func NewTLSyncPushChannelUpdates() *TLSyncPushChannelUpdates {
	return &TLSyncPushChannelUpdates{}
}

func (m *TLSyncPushChannelUpdates) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushChannelUpdates))

	x.Int(m.ChannelId)
	x.Int(m.UserId)
	x.Bytes(m.Updates.Encode())

	return x.buf
}

func (m *TLSyncPushChannelUpdates) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushChannelUpdates))

	x.Int(m.ChannelId)
	x.Int(m.UserId)
	x.Bytes(m.Updates.EncodeToLayer(layer))

	return x.buf
}

func (m *TLSyncPushChannelUpdates) Decode(dbuf *DecodeBuf) error {
	m.ChannelId = dbuf.Int()
	m.UserId = dbuf.Int()
	m3 := &Updates{}
	m3.Decode(dbuf)
	m.Updates = m3

	return dbuf.err
}

func NewTLSyncPushRpcResult() *TLSyncPushRpcResult {
	return &TLSyncPushRpcResult{}
}

func (m *TLSyncPushRpcResult) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushRpcResult))

	x.Int(m.ServerId)
	x.Long(m.AuthKeyId)
	x.Long(m.ReqMsgId)
	x.StringBytes(m.Result)

	return x.buf
}

func (m *TLSyncPushRpcResult) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_pushRpcResult))

	x.Int(m.ServerId)
	x.Long(m.AuthKeyId)
	x.Long(m.ReqMsgId)
	x.StringBytes(m.Result)

	return x.buf
}

func (m *TLSyncPushRpcResult) Decode(dbuf *DecodeBuf) error {
	m.ServerId = dbuf.Int()
	m.AuthKeyId = dbuf.Long()
	m.ReqMsgId = dbuf.Long()
	m.Result = dbuf.StringBytes()

	return dbuf.err
}

func NewTLSyncGetState() *TLSyncGetState {
	return &TLSyncGetState{}
}

func (m *TLSyncGetState) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_getState))

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	return x.buf
}

func (m *TLSyncGetState) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_getState))

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	return x.buf
}

func (m *TLSyncGetState) Decode(dbuf *DecodeBuf) error {
	m.AuthKeyId = dbuf.Long()
	m.UserId = dbuf.Int()

	return dbuf.err
}

func NewTLSyncGetDifference() *TLSyncGetDifference {
	return &TLSyncGetDifference{}
}

func (m *TLSyncGetDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_getDifference))

	// flags
	var flags uint32 = 0
	if m.PtsTotalLimit != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)
	x.Int(m.Pts)
	if m.PtsTotalLimit != 0 {
		x.Int(m.PtsTotalLimit)
	}
	x.Int(m.Date)
	x.Int(m.Qts)

	return x.buf
}

func (m *TLSyncGetDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_getDifference))

	// flags
	var flags uint32 = 0
	if m.PtsTotalLimit != 0 {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)
	x.Int(m.Pts)
	if m.PtsTotalLimit != 0 {
		x.Int(m.PtsTotalLimit)
	}
	x.Int(m.Date)
	x.Int(m.Qts)

	return x.buf
}

func (m *TLSyncGetDifference) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.AuthKeyId = dbuf.Long()
	m.UserId = dbuf.Int()
	m.Pts = dbuf.Int()
	if (flags & (1 << 0)) != 0 {
		m.PtsTotalLimit = dbuf.Int()
	}
	m.Date = dbuf.Int()
	m.Qts = dbuf.Int()

	return dbuf.err
}

func NewTLSyncGetChannelDifference() *TLSyncGetChannelDifference {
	return &TLSyncGetChannelDifference{}
}

func (m *TLSyncGetChannelDifference) Encode() []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_getChannelDifference))

	// flags
	var flags uint32 = 0
	if m.Force == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	x.Bytes(m.Channel.Encode())
	x.Bytes(m.Filter.Encode())
	x.Int(m.Pts)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLSyncGetChannelDifference) EncodeToLayer(layer int) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(TLConstructor_CRC32_sync_getChannelDifference))

	// flags
	var flags uint32 = 0
	if m.Force == true {
		flags |= 1 << 0
	}
	x.UInt(flags)

	x.Long(m.AuthKeyId)
	x.Int(m.UserId)

	x.Bytes(m.Channel.EncodeToLayer(layer))
	x.Bytes(m.Filter.EncodeToLayer(layer))
	x.Int(m.Pts)
	x.Int(m.Limit)

	return x.buf
}

func (m *TLSyncGetChannelDifference) Decode(dbuf *DecodeBuf) error {
	flags := dbuf.UInt()
	_ = flags
	m.AuthKeyId = dbuf.Long()
	m.UserId = dbuf.Int()
	if (flags & (1 << 0)) != 0 {
		m.Force = true
	}
	m5 := &InputChannel{}
	m5.Decode(dbuf)
	m.Channel = m5
	m6 := &ChannelMessagesFilter{}
	m6.Decode(dbuf)
	m.Filter = m6
	m.Pts = dbuf.Int()
	m.Limit = dbuf.Int()

	return dbuf.err
}
