/*
 * WARNING! All changes made in this file will be lost!
 * Created from 'scheme.tl' by 'mtprotoc'
 *
 *  Copyright (c) 2018, https://github.com/nebulaim
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mtproto;

option java_package = "com.nebulaim.engine.mtproto";
option java_outer_classname = "MTProto";
option optimize_for = CODE_SIZE;

import "schema.tl.crc32.proto";
import "schema.tl.core_types.proto";
import "schema.tl.transport.proto";
import "schema.tl.sync.proto";


///////////////////////////////////////////////////////////////////////////////
// AttachData <--
//  + TL_attachData
//
message AttachData_Data {
    int64 auth_key_id = 1;
    int64 session_id = 2;
    int64 message_id = 3;
    int32 layer = 4;
    int32 user_id = 5;
    int64 access_hash = 6;
    bytes attach_data = 7;
}

message AttachData {
    TLConstructor constructor = 1;
    AttachData_Data data2 = 2;
}

// attachData flags:# auth_key_id:long session_id:long message_id:long layer:int user_id:int access_hash:long attach_data:bytes = AttachData;
message TL_attachData {
    AttachData_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// ConnectToServer <--
//  + TL_sync_connectToSessionServer
//
message ConnectToServer_Data {
    int32 sync_server_id = 1;
}

message ConnectToServer {
    TLConstructor constructor = 1;
    ConnectToServer_Data data2 = 2;
}

// sync.connectToSessionServer sync_server_id:int = ConnectToServer;
message TL_sync_connectToSessionServer {
    ConnectToServer_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// ServerConnected <--
//  + TL_sync_sessionServerConnected
//
message ServerConnected_Data {
    int32 session_server_id = 1;
    string server_name = 2;
}

message ServerConnected {
    TLConstructor constructor = 1;
    ServerConnected_Data data2 = 2;
}

// sync.sessionServerConnected session_server_id:int server_name:string = ServerConnected;
message TL_sync_sessionServerConnected {
    ServerConnected_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// PushData <--
//  + TL_sync_pushUpdatesData
//  + TL_sync_pushRpcResultData
//
message PushData_Data {
    int64 auth_key_id = 1;
    Updates updates = 2;
    int64 client_req_msg_id = 3;
    bytes result = 4;
}

message PushData {
    TLConstructor constructor = 1;
    PushData_Data data2 = 2;
}

// sync.pushUpdatesData auth_key_id:long updates:Updates = PushData;
message TL_sync_pushUpdatesData {
    PushData_Data data2 = 2;
}

// sync.pushRpcResultData auth_key_id:long client_req_msg_id:long result:bytes = PushData;
message TL_sync_pushRpcResultData {
    PushData_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// Int32 <--
//  + TL_int32
//
message Int32_Data {
    int32 v = 1;
}

message Int32 {
    TLConstructor constructor = 1;
    Int32_Data data2 = 2;
}

// int32 v:int = Int32;
message TL_int32 {
    Int32_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// Int64 <--
//  + TL_long
//
message Int64_Data {
    int64 v = 1;
}

message Int64 {
    TLConstructor constructor = 1;
    Int64_Data data2 = 2;
}

// long v:long = Int64;
message TL_long {
    Int64_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// AuthKeyInfo <--
//  + TL_authKeyInfo
//
message AuthKeyInfo_Data {
    int64 auth_key_id = 1;
    bytes auth_key = 2;
    FutureSalt future_salt = 3;
}

message AuthKeyInfo {
    TLConstructor constructor = 1;
    AuthKeyInfo_Data data2 = 2;
}

// authKeyInfo flags:# auth_key_id:long auth_key:bytes future_salt:flags.0?FutureSalt= AuthKeyInfo;
message TL_authKeyInfo {
    AuthKeyInfo_Data data2 = 2;
}


///////////////////////////////////////////////////////////////////////////////
// ClientSession <--
//  + TL_clientSessionInfo
//
message ClientSession_Data {
    int64 auth_key_id = 1;
    string ip = 2;
    int32 layer = 3;
    int32 api_id = 4;
    string device_model = 5;
    string system_version = 6;
    string app_version = 7;
    string system_lang_code = 8;
    string lang_pack = 9;
    string lang_code = 10;
}

message ClientSession {
    TLConstructor constructor = 1;
    ClientSession_Data data2 = 2;
}

// clientSessionInfo auth_key_id:long ip:string layer:int api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string = ClientSession;
message TL_clientSessionInfo {
    ClientSession_Data data2 = 2;
}




///////////////////////////////////////////////////////////////////////////////
// session.setClientSessionInfo session:ClientSession = Bool;
message TL_session_setClientSessionInfo {
    ClientSession session = 1;
}

///////////////////////////////////////////////////////////////////////////////
// session.getAuthorizations user_id:int = account.Authorizations;
message TL_session_getAuthorizations {
    int32 user_id = 1;
}

///////////////////////////////////////////////////////////////////////////////
// session.resetAuthorization user_id:int hash:long = Bool;
message TL_session_resetAuthorization {
    int32 user_id = 1;
    int64 hash = 2;
}

///////////////////////////////////////////////////////////////////////////////
// session.getLayer auth_key_id:long = Int32;
message TL_session_getLayer {
    int64 auth_key_id = 1;
}

///////////////////////////////////////////////////////////////////////////////
// session.getUserId auth_key_id:long = Int32;
message TL_session_getUserId {
    int64 auth_key_id = 1;
}

///////////////////////////////////////////////////////////////////////////////
// session.queryAuthKey auth_key_id:long = AuthKeyInfo;
message TL_session_queryAuthKey {
    int64 auth_key_id = 1;
}

///////////////////////////////////////////////////////////////////////////////
// session.setAuthKey auth_key:AuthKeyInfo = Bool;
message TL_session_setAuthKey {
    AuthKeyInfo auth_key = 1;
}

///////////////////////////////////////////////////////////////////////////////
// session.bindAuthKeyUser auth_key_id:long user_id:int = Bool;
message TL_session_bindAuthKeyUser {
    int64 auth_key_id = 1;
    int32 user_id = 2;
}

///////////////////////////////////////////////////////////////////////////////
// session.unbindAuthKeyUser auth_key_id:long user_id:int = Bool;
message TL_session_unbindAuthKeyUser {
    int64 auth_key_id = 1;
    int32 user_id = 2;
}

///////////////////////////////////////////////////////////////////////////////
// sync.syncUpdates flags:# user_id:int auth_key_id:long server_id:flags.0?int updates:Updates = Bool;
message TL_sync_syncUpdates {
    int32 user_id = 2;
    int64 auth_key_id = 3;
    int32 server_id = 4;
    Updates updates = 5;
}

///////////////////////////////////////////////////////////////////////////////
// sync.pushUpdates user_id:int updates:Updates = Bool;
message TL_sync_pushUpdates {
    int32 user_id = 1;
    Updates updates = 2;
}

///////////////////////////////////////////////////////////////////////////////
// sync.syncChannelUpdates flags:# channel_id:int user_id:int auth_key_id:long server_id:flags.0?int updates:Updates = Bool;
message TL_sync_syncChannelUpdates {
    int32 channel_id = 2;
    int32 user_id = 3;
    int64 auth_key_id = 4;
    int32 server_id = 5;
    Updates updates = 6;
}

///////////////////////////////////////////////////////////////////////////////
// sync.pushChannelUpdates channel_id:int user_id:int updates:Updates = Bool;
message TL_sync_pushChannelUpdates {
    int32 channel_id = 1;
    int32 user_id = 2;
    Updates updates = 3;
}

///////////////////////////////////////////////////////////////////////////////
// sync.pushRpcResult server_id:int auth_key_id:long req_msg_id:long result:bytes = Bool;
message TL_sync_pushRpcResult {
    int32 server_id = 1;
    int64 auth_key_id = 2;
    int64 req_msg_id = 3;
    bytes result = 4;
}

///////////////////////////////////////////////////////////////////////////////
// sync.getState auth_key_id:long user_id:int = updates.State;
message TL_sync_getState {
    int64 auth_key_id = 1;
    int32 user_id = 2;
}

///////////////////////////////////////////////////////////////////////////////
// sync.getDifference flags:# auth_key_id:long user_id:int pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
message TL_sync_getDifference {
    int64 auth_key_id = 2;
    int32 user_id = 3;
    int32 pts = 4;
    int32 pts_total_limit = 5;
    int32 date = 6;
    int32 qts = 7;
}

///////////////////////////////////////////////////////////////////////////////
// sync.getChannelDifference flags:# auth_key_id:long user_id:int force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
message TL_sync_getChannelDifference {
    int64 auth_key_id = 2;
    int32 user_id = 3;
    bool force = 4;
    InputChannel channel = 5;
    ChannelMessagesFilter filter = 6;
    int32 pts = 7;
    int32 limit = 8;
}


///////////////////////////////////////////////////////////////////////////////
// Vector api result type


///////////////////////////////////////////////////////////////////////////////
// rpc

service RPCSession {
    // session.setClientSessionInfo session:ClientSession = Bool;
    rpc session_setClientSessionInfo(TL_session_setClientSessionInfo) returns (Bool) {}
    // session.getAuthorizations user_id:int = account.Authorizations;
    rpc session_getAuthorizations(TL_session_getAuthorizations) returns (account_Authorizations) {}
    // session.resetAuthorization user_id:int hash:long = Bool;
    rpc session_resetAuthorization(TL_session_resetAuthorization) returns (Bool) {}
    // session.getLayer auth_key_id:long = Int32;
    rpc session_getLayer(TL_session_getLayer) returns (Int32) {}
    // session.getUserId auth_key_id:long = Int32;
    rpc session_getUserId(TL_session_getUserId) returns (Int32) {}
    // session.queryAuthKey auth_key_id:long = AuthKeyInfo;
    rpc session_queryAuthKey(TL_session_queryAuthKey) returns (AuthKeyInfo) {}
    // session.setAuthKey auth_key:AuthKeyInfo = Bool;
    rpc session_setAuthKey(TL_session_setAuthKey) returns (Bool) {}
    // session.bindAuthKeyUser auth_key_id:long user_id:int = Bool;
    rpc session_bindAuthKeyUser(TL_session_bindAuthKeyUser) returns (Bool) {}
    // session.unbindAuthKeyUser auth_key_id:long user_id:int = Bool;
    rpc session_unbindAuthKeyUser(TL_session_unbindAuthKeyUser) returns (Bool) {}
}

service RPCSync {
    // sync.syncUpdates flags:# user_id:int auth_key_id:long server_id:flags.0?int updates:Updates = Bool;
    rpc sync_syncUpdates(TL_sync_syncUpdates) returns (Bool) {}
    // sync.pushUpdates user_id:int updates:Updates = Bool;
    rpc sync_pushUpdates(TL_sync_pushUpdates) returns (Bool) {}
    // sync.syncChannelUpdates flags:# channel_id:int user_id:int auth_key_id:long server_id:flags.0?int updates:Updates = Bool;
    rpc sync_syncChannelUpdates(TL_sync_syncChannelUpdates) returns (Bool) {}
    // sync.pushChannelUpdates channel_id:int user_id:int updates:Updates = Bool;
    rpc sync_pushChannelUpdates(TL_sync_pushChannelUpdates) returns (Bool) {}
    // sync.pushRpcResult server_id:int auth_key_id:long req_msg_id:long result:bytes = Bool;
    rpc sync_pushRpcResult(TL_sync_pushRpcResult) returns (Bool) {}
    // sync.getState auth_key_id:long user_id:int = updates.State;
    rpc sync_getState(TL_sync_getState) returns (updates_State) {}
    // sync.getDifference flags:# auth_key_id:long user_id:int pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
    rpc sync_getDifference(TL_sync_getDifference) returns (updates_Difference) {}
    // sync.getChannelDifference flags:# auth_key_id:long user_id:int force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
    rpc sync_getChannelDifference(TL_sync_getChannelDifference) returns (updates_ChannelDifference) {}
}

