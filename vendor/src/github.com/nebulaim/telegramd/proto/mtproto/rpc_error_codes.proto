/*
 *  Copyright (c) 2017, https://github.com/nebulaim
 *  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mtproto;

option java_package = "com.nebulaim.engine.mtproto";
option java_outer_classname = "MTProto";
option optimize_for = CODE_SIZE;

enum TLRpcErrorCodes {
    //	Error handling
    //
    //	There will be errors when working with the API, and they must be correctly handled on the client.
    //
    //	An error is characterized by several parameters:
    //
    //	Error Code
    //	Similar to HTTP status. Contains information on the type of error that occurred: for example,
    //	a data input error, privacy error, or server error. This is a required parameter.
    //
    //	Error Type
    //	A string literal in the form of /[A-Z_0-9]+/, which summarizes the problem. For example, AUTH_KEY_UNREGISTERED.
    //	This is an optional parameter.
    //
    //	Error Description
    //	May contain more detailed information on the error and how to resolve it,
    //	for example: authorization required, use auth.* methods. Please note that the description text is subject to change,
    //	one should avoid tying application logic to these messages. This is an optional parameter.
    //
    //	Error Constructors
    //	There should be a way to handle errors that are returned in rpc_error constructors.
    //
    //	If an error constructor does not differentiate between type and description
    //	but instead contains a single field called error_message (as in the example above),
    //	it must be split into 2 components, for example, using the following regular expression: /^([A-Z_0-9]+)(: (.+))?/.
    //
    // Protobuf3 enum first is 0
    ERROR_CODE_OK = 0;

    // 303 ERROR_SEE_OTHER
    //
    // The request must be repeated, but directed to a different data center.
    //
    // FILE_MIGRATE_X: the file to be accessed is currently stored in a different data center.
    // PHONE_MIGRATE_X: the phone number a user is trying to use for authorization is associated with a different data center.
    // NETWORK_MIGRATE_X: the source IP address is associated with a different data center (for registration)
    // USER_MIGRATE_X: the user whose identity is being used to execute
    // 				   queries is associated with a different data center (for registration)
    //
    // In all these cases, the error description’s string literal
    // 		contains the number of the data center (instead of the X) to which the repeated query must be sent.
    // More information about redirects between data centers »
    //
    FILE_MIGRATE_X = 303000;
    PHONE_MIGRATE_X = 303001;
    NETWORK_MIGRATE_X = 303002;
    USER_MIGRATE_X = 303003;

    ERROR_SEE_OTHER = 303;

    // 400 BAD_REQUEST
    //
    // The query contains errors. In the event that a request was created using a form
    // and contains user generated data,
    // the user should be notified that the data must be corrected before the query is repeated.
    //
    //
    // Examples of Errors:
    //	FIRSTNAME_INVALID: The first name is invalid
    //	LASTNAME_INVALID: The last name is invalid
    //	PHONE_NUMBER_INVALID: The phone number is invalid
    //	PHONE_CODE_HASH_EMPTY: phone_code_hash is missing
    //	PHONE_CODE_EMPTY: phone_code is missing
    //	PHONE_CODE_EXPIRED: The confirmation code has expired
    //	API_ID_INVALID: The api_id/api_hash combination is invalid
    //	PHONE_NUMBER_OCCUPIED: The phone number is already in use
    //	PHONE_NUMBER_UNOCCUPIED: The phone number is not yet being used
    //	USERS_TOO_FEW: Not enough users (to create a chat, for example)
    //	USERS_TOO_MUCH: The maximum number of users has been exceeded (to create a chat, for example)
    //	TYPE_CONSTRUCTOR_INVALID: The type constructor is invalid
    //	FILE_PART_INVALID: The file part number is invalid
    //	FILE_PARTS_INVALID: The number of file parts is invalid
    //	FILE_PART_Х_MISSING: Part X (where X is a number) of the file is missing from storage
    //	MD5_CHECKSUM_INVALID: The MD5 checksums do not match
    //	PHOTO_INVALID_DIMENSIONS: The photo dimensions are invalid
    //	FIELD_NAME_INVALID: The field with the name FIELD_NAME is invalid
    //	FIELD_NAME_EMPTY: The field with the name FIELD_NAME is missing
    //	MSG_WAIT_FAILED: A waiting call returned an error
    //
    FIRSTNAME_INVALID = 400000;
    LASTNAME_INVALID = 400001;
    PHONE_NUMBER_INVALID = 400002;
    PHONE_CODE_HASH_EMPTY = 400003;
    PHONE_CODE_EMPTY = 400004;
    PHONE_CODE_EXPIRED = 400005;
    API_ID_INVALID = 400006;
    PHONE_NUMBER_OCCUPIED = 400007;
    PHONE_NUMBER_UNOCCUPIED = 400008;
    USERS_TOO_FEW = 400009;
    USERS_TOO_MUCH = 400010;
    TYPE_CONSTRUCTOR_INVALID = 400011;
    FILE_PART_INVALID = 400012;
    FILE_PART_X_MISSING = 400013;
    MD5_CHECKSUM_INVALID = 400014;
    PHOTO_INVALID_DIMENSIONS = 400015;
    FIELD_NAME_INVALID = 400016;
    FIELD_NAME_EMPTY = 400017;
    MSG_WAIT_FAILED = 400018;
    // PHONE_NUMBER_BANNED = 4000;
    // android client code:
    //    if (error.code == 400 && "PARTICIPANT_VERSION_OUTDATED".equals(error.text)) {
    //        callFailed(VoIPController.ERROR_PEER_OUTDATED);
    PARTICIPANT_VERSION_OUTDATED = 400019;
    USER_RESTRICTED = 400020;
    NAME_NOT_MODIFIED = 400021;
    USER_NOT_MUTUAL_CONTACT = 400022;
    BOT_GROUPS_BLOCKED = 400023;


    FILE_REFERENCE_X = 400500;
    FILE_TOKEN_INVALID = 400501;
    REQUEST_TOKEN_INVALID = 400502;

    //
    PHONE_CODE_INVALID = 400025;
    PHONE_NUMBER_BANNED = 400030;
    SESSION_PASSWORD_NEEDED = 400040;

    // password
    CODE_INVALID = 400050;
    PASSWORD_HASH_INVALID  = 400051;
    NEW_PASSWORD_BAD = 400052;
    NEW_SALT_INVALID = 400053;
    EMAIL_INVALID = 400054;
    EMAIL_UNCONFIRMED = 400055;

    // username
    USERNAME_INVALID = 400060;
    USERNAME_OCCUPIED = 400061;
    USERNAMES_UNAVAILABLE = 400062;
    USERNAME_NOT_MODIFIED = 400063;
    USERNAME_NOT_OCCUPIED = 400064;

    // chat
    CHAT_ID_INVALID = 400070;
    CHAT_NOT_MODIFIED = 400071;
    PARTICIPANT_NOT_EXISTS = 400072;
    NO_EDIT_CHAT_PERMISSION = 400073;
    CHAT_TITLE_NOT_MODIFIED = 400074;
    NO_CHAT_TITLE = 400075;
    CHAT_ABOUT_NOT_MODIFIED = 400076;
    CHAT_ADMIN_REQUIRED = 400077;
    PARTICIPANT_EXISTED = 400078;

    // channel
    CHANNEL_PRIVATE = 400080;
    CHANNEL_PUBLIC_GROUP_NA = 400081;
    USER_BANNED_IN_CHANNEL = 400082;
    CHANNELS_ADMIN_PUBLIC_TOO_MUCH = 40083;
    CHANNELS_TOO_MUCH = 400084;
    NO_INVITE_CHANNEL_PERMISSION = 400085;

    // invite, user banned.
    INVITE_HASH_EXPIRED = 400090;
    INVITE_HASH_INVALID = 400091;

    // access
    ACCESS_HASH_INVALID = 400200;
    INPUT_CHANNEL_EMPTY = 400201;
    USER_NOT_PARTICIPANT = 400202;
    PEER_ID_INVALID = 400203;
    CHANNEL_ID_INVALID = 400204;

    // message
    MESSAGE_ID_INVALID = 400210;
    MESSAGE_EDIT_TIME_EXPIRED = 400211;
    MESSAGE_NOT_MODIFIED = 400212;
    MESSAGE_EMPTY = 400213;

    // USER_PRIVACY_RESTRICTED = 400300;
    // PARTICIPANT_VERSION_OUTDATED = 400301;

    USER_LEFT_CHAT = 400300;
    USER_KICKED = 400301;
    USER_ALREADY_PARTICIPANT = 400302;

    BAD_REQUEST = 400;

    // There was an unauthorized attempt to use functionality available only to authorized users.
    //
    // Examples of Errors:
    //	AUTH_KEY_UNREGISTERED: The key is not registered in the system
    //	AUTH_KEY_INVALID: The key is invalid
    //	USER_DEACTIVATED: The user has been deleted/deactivated
    //	SESSION_REVOKED: The authorization has been invalidated, because of the user terminating all sessions
    //	SESSION_EXPIRED: The authorization has expired
    //	ACTIVE_USER_REQUIRED: The method is only available to already activated users
    //	AUTH_KEY_PERM_EMPTY: The method is unavailble for temporary authorization key, not bound to permanent
    //
    AUTH_KEY_UNREGISTERED = 401000;
    AUTH_KEY_INVALID = 401001;
    USER_DEACTIVATED = 401002;
    SESSION_REVOKED = 401003;
    SESSION_EXPIRED = 401004;
    ACTIVE_USER_REQUIRED = 401005;
    AUTH_KEY_PERM_EMPTY = 401006;

    // Only a small portion of the API methods are available to unauthorized users:
    //
    // auth.sendCode
    // auth.sendCall
    // auth.checkPhone
    // auth.signUp
    // auth.signIn
    // auth.importAuthorization
    // help.getConfig
    // help.getNearestDc
    //
    // Other methods will result in an error: 401 UNAUTHORIZED.
    UNAUTHORIZED = 401;

    // Privacy violation. For example, an attempt to write a message to someone who has blacklisted the current user.
    //
    //
    // android client code:
    //    } else if(error.code==403 && "USER_PRIVACY_RESTRICTED".equals(error.text)){
    //        callFailed(VoIPController.ERROR_PRIVACY);
    USER_PRIVACY_RESTRICTED = 403001;
    CALL_PROTOCOL_LAYER_INVALID = 403002;

    FORBIDDEN = 403;

    // 406
    // android client code:
    // }else if(error.code==406){
    //     callFailed(VoIPController.ERROR_LOCALIZED);
    ERROR_LOCALIZED = 406000;

    LOCALIZED = 406;

    // The maximum allowed number of attempts to invoke the given method with the given input parameters has been exceeded.
    // For example, in an attempt to request a large number of text messages (SMS) for the same phone number.
    //
    // Error Example:
    // FLOOD_WAIT_X: A wait of X seconds is required (where X is a number)
    //
    FLOOD_WAIT_X = 420000;

    // PEER_FLOOD
    // FLOOD_WAIT
    FLOOD = 420;


    // An internal server error occurred while a request was being processed;
    // for example, there was a disruption while accessing a database or file storage.
    //
    // If a client receives a 500 error, or you believe this error should not have occurred,
    // please collect as much information as possible about the query and error and send it to the developers.
    INTERNAL = 500;
    INTERNAL_SERVER_ERROR = 500000;

    // If a server returns an error with a code other than the ones listed above,
    // it may be considered the same as a 500 error and treated as an internal server error.
    //
    OTHER = 501;

    //    // OFFSET_INVALID
    //    // RETRY_LIMIT
    //    // FILE_TOKEN_INVALID
    //    // REQUEST_TOKEN_INVALID
    //
    //    // CHANNEL_PRIVATE
    //    // CHANNEL_PUBLIC_GROUP_NA
    //    // USER_BANNED_IN_CHANNEL
    //
    //
    //    // MESSAGE_NOT_MODIFIED
    //
    //    // USERS_TOO_MUCH
    //
    //    // -1000
    //
    //    /////////////////////////////////////////////////////////////
    //     // android client code:
    //       } else if (request instanceof TLRPC.TL_auth_resendCode) {
    //        if (error.text.contains("PHONE_NUMBER_INVALID")) {
    //            showSimpleAlert(fragment, LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
    //        } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
    //            showSimpleAlert(fragment, LocaleController.getString("InvalidCode", R.string.InvalidCode));
    //        } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
    //            showSimpleAlert(fragment, LocaleController.getString("CodeExpired", R.string.CodeExpired));
    //        } else if (error.text.startsWith("FLOOD_WAIT")) {
    //            showSimpleAlert(fragment, LocaleController.getString("FloodWait", R.string.FloodWait));
    //        } else if (error.code != -1000) {
    //            showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
    //        }
    //
    //     /////////////////////////////////////////////////////////////
    //        } else if (request instanceof TLRPC.TL_updateUserName) {
    //            switch (error.text) {
    //                case "USERNAME_INVALID":
    //                    showSimpleAlert(fragment, LocaleController.getString("UsernameInvalid", R.string.UsernameInvalid));
    //                    break;
    //                case "USERNAME_OCCUPIED":
    //                    showSimpleAlert(fragment, LocaleController.getString("UsernameInUse", R.string.UsernameInUse));
    //                    break;
    //                case "USERNAMES_UNAVAILABLE":
    //                    showSimpleAlert(fragment, LocaleController.getString("FeatureUnavailable", R.string.FeatureUnavailable));
    //                    break;
    //                default:
    //                    showSimpleAlert(fragment, LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred));
    //                    break;
    //            }
    //
    //     /////////////////////////////////////////////////////////////
    //            } else if (request instanceof TLRPC.TL_payments_sendPaymentForm) {
    //            switch (error.text) {
    //                case "BOT_PRECHECKOUT_FAILED":
    //                    showSimpleToast(fragment, LocaleController.getString("PaymentPrecheckoutFailed", R.string.PaymentPrecheckoutFailed));
    //                    break;
    //                case "PAYMENT_FAILED":
    //                    showSimpleToast(fragment, LocaleController.getString("PaymentFailed", R.string.PaymentFailed));
    //                    break;
    //                default:
    //                    showSimpleToast(fragment, error.text);
    //                    break;
    //            }
    //        } else if (request instanceof TLRPC.TL_payments_validateRequestedInfo) {
    //            switch (error.text) {
    //                case "SHIPPING_NOT_AVAILABLE":
    //                    showSimpleToast(fragment, LocaleController.getString("PaymentNoShippingMethod", R.string.PaymentNoShippingMethod));
    //                    break;
    //                default:
    //                    showSimpleToast(fragment, error.text);
    //                    break;
    //            }
    //        }
    //
    //     /////////////////////////////////////////////////////////////
    //
    //        } else {
    //            if (error.text.equals("2FA_RECENT_CONFIRM")) {
    //                needShowAlert(LocaleController.getString("AppName", R.string.AppName), LocaleController.getString("ResetAccountCancelledAlert", R.string.ResetAccountCancelledAlert));
    //            } else if (error.text.startsWith("2FA_CONFIRM_WAIT_")) {
    //                Bundle params = new Bundle();
    //                params.putString("phoneFormated", requestPhone);
    //                params.putString("phoneHash", phoneHash);
    //                params.putString("code", phoneCode);
    //                params.putInt("startTime", ConnectionsManager.getInstance().getCurrentTime());
    //                params.putInt("waitTime", Utilities.parseInt(error.text.replace("2FA_CONFIRM_WAIT_", "")));
    //                setPage(8, true, params, false);
    //            } else {
    OTHER2 = 502;

    // db error
    DBERR   = 600;
    DBERR_SQL = 600000;
    DBERR_CONN = 600001;
    // ...

    // db error
    NOTRETURN_CLIENT   = 700;
}
