<?xml version="1.0" encoding="UTF-8"?>
<table sqlname="message_boxes">
    <operation name="Insert">
        <sql>
            INSERT IGNORE INTO message_boxes
                (user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2)
            VALUES
                (:user_id, :user_message_box_id, :dialog_id, :dialog_message_id, :message_data_id, :message_box_type, :reply_to_msg_id, :media_unread, :date2)
        </sql>
    </operation>

    <operation name="SelectByMessageIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND deleted = 0 AND user_message_box_id IN (:idList) ORDER BY user_message_box_id DESC
        </sql>
    </operation>

    <operation name="SelectByMessageId">
        <sql>
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND user_message_box_id = :user_message_box_id AND deleted = 0 LIMIT 1
        </sql>
    </operation>

    <operation name="SelectByMessageDataIdList" result_set="list">
        <params>
            <param name="idList" type="[]int64" />
        </params>
        <sql>
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                deleted = 0 AND message_data_id IN (:idList) ORDER BY user_message_box_id DESC
        </sql>
    </operation>

    <operation name="SelectByMessageDataId">
        <sql>
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                message_data_id = :message_data_id AND deleted = 0 LIMIT 1
        </sql>
    </operation>

    <!-- // Backward -->
    <operation name="SelectBackwardByOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND dialog_id = :dialog_id AND user_message_box_id < :user_message_box_id AND deleted = 0
            ORDER BY user_message_box_id DESC LIMIT :limit
            ]]>
        </sql>
    </operation>

    <!-- // Forward -->
    <operation name="SelectForwardByPeerOffsetLimit" result_set="list">
        <params>
            <param name="limit" type="int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND dialog_id = :dialog_id AND user_message_box_id >= :user_message_box_id AND deleted = 0
            ORDER BY user_message_box_id LIMIT :limit
            ]]>
        </sql>
    </operation>

    <operation name="SelectPeerMessageId">
        <params>
            <param name="peerId" type="int32" />
        </params>
        <sql>
            SELECT
                user_message_box_id, message_box_type
            FROM
                message_boxes
            WHERE
                user_id = :peerId AND deleted = 0
                AND dialog_message_id = (SELECT dialog_message_id FROM message_boxes WHERE user_id = :user_id AND user_message_box_id = :user_message_box_id AND deleted = 0 LIMIT 1)
        </sql>
    </operation>

    <operation name="SelectPeerDialogMessageIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id <> :user_id AND dialog_message_id in (SELECT dialog_message_id FROM message_boxes WHERE user_id = :user_id AND user_message_box_id in (:idList)) AND deleted = 0
            ]]>
        </sql>
    </operation>

    <operation name="SelectDialogMessageListByMessageId" result_set="list">
        <sql>
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                dialog_message_id = (SELECT dialog_message_id FROM message_boxes WHERE user_id = :user_id AND user_message_box_id = :user_message_box_id) AND deleted = 0
        </sql>
    </operation>

    <operation name="SelectPeerDialogMessageListByMessageId" result_set="list">
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id <> :user_id AND dialog_message_id = (SELECT dialog_message_id FROM messages WHERE user_id = :user_id AND user_message_box_id = :user_message_box_id) AND deleted = 0
            ]]>
        </sql>
    </operation>

    <operation name="SelectLastTwoMessageId">
        <sql>
            SELECT
                user_message_box_id
            FROM
                message_boxes
            WHERE
                user_id = :user_id  AND deleted = 0 ORDER BY user_message_box_id DESC LIMIT 2
        </sql>
    </operation>

    <operation name="SelectDialogsByMessageIdList" result_set="list">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND user_message_box_id IN (:idList) AND deleted = 0
        </sql>
    </operation>

    <operation name="DeleteMessagesByMessageIdList">
        <params>
            <param name="idList" type="[]int32" />
        </params>
        <sql>
            UPDATE
                message_boxes
            SET
                deleted=1
            WHERE
                user_id = :user_id AND user_message_box_id IN (:idList) AND deleted = 0
        </sql>
    </operation>

    <operation name="SelectDialogMessageIdList" result_set="list">
        <sql>
            SELECT
                user_message_box_id, date2
            FROM
                message_boxes
            WHERE
                user_id = :user_id AND dialog_id = :dialog_id AND deleted = 0 ORDER BY user_message_box_id DESC
        </sql>
    </operation>

    <operation name="SelectPeerMessageList" result_set="list">
        <sql>
            <![CDATA[
            SELECT
                user_id, user_message_box_id, dialog_id, dialog_message_id, message_data_id, message_box_type, reply_to_msg_id, media_unread, date2
            FROM
                message_boxes
            WHERE
                user_id != :user_id AND message_data_id = :message_data_id AND deleted = 0
            ]]>
        </sql>
    </operation>

</table>
